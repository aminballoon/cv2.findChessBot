
STM32H743ZI2ROS01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a7c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08009d14  08009d14  00019d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f18  08009f18  00020138  2**0
                  CONTENTS
  4 .ARM          00000008  08009f18  08009f18  00019f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f20  08009f20  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009f20  08009f20  00019f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f28  08009f28  00019f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  08009f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000078  08009fa4  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000d8  0800a004  000200d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000f8c  24000138  0800a064  00020138  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  240010c4  0800a064  000210c4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002a1ef  00000000  00000000  00020166  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00004134  00000000  00000000  0004a355  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001790  00000000  00000000  0004e490  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001640  00000000  00000000  0004fc20  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003a7ee  00000000  00000000  00051260  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00014a5e  00000000  00000000  0008ba4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0016eb67  00000000  00000000  000a04ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0020f013  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000069b0  00000000  00000000  0020f090  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000138 	.word	0x24000138
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009cfc 	.word	0x08009cfc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400013c 	.word	0x2400013c
 80002d4:	08009cfc 	.word	0x08009cfc

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b972 	b.w	80005e4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	4688      	mov	r8, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14b      	bne.n	80003be <__udivmoddi4+0xa6>
 8000326:	428a      	cmp	r2, r1
 8000328:	4615      	mov	r5, r2
 800032a:	d967      	bls.n	80003fc <__udivmoddi4+0xe4>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0720 	rsb	r7, r2, #32
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	fa20 f707 	lsr.w	r7, r0, r7
 800033e:	4095      	lsls	r5, r2
 8000340:	ea47 0803 	orr.w	r8, r7, r3
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000350:	fa1f fc85 	uxth.w	ip, r5
 8000354:	fb0e 8817 	mls	r8, lr, r7, r8
 8000358:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035c:	fb07 f10c 	mul.w	r1, r7, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f107 30ff 	add.w	r0, r7, #4294967295
 800036a:	f080 811b 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8118 	bls.w	80005a4 <__udivmoddi4+0x28c>
 8000374:	3f02      	subs	r7, #2
 8000376:	442b      	add	r3, r5
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000380:	fb0e 3310 	mls	r3, lr, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fc0c 	mul.w	ip, r0, ip
 800038c:	45a4      	cmp	ip, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	192c      	adds	r4, r5, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8107 	bcs.w	80005a8 <__udivmoddi4+0x290>
 800039a:	45a4      	cmp	ip, r4
 800039c:	f240 8104 	bls.w	80005a8 <__udivmoddi4+0x290>
 80003a0:	3802      	subs	r0, #2
 80003a2:	442c      	add	r4, r5
 80003a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a8:	eba4 040c 	sub.w	r4, r4, ip
 80003ac:	2700      	movs	r7, #0
 80003ae:	b11e      	cbz	r6, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c6 4300 	strd	r4, r3, [r6]
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d909      	bls.n	80003d6 <__udivmoddi4+0xbe>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80eb 	beq.w	800059e <__udivmoddi4+0x286>
 80003c8:	2700      	movs	r7, #0
 80003ca:	e9c6 0100 	strd	r0, r1, [r6]
 80003ce:	4638      	mov	r0, r7
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	fab3 f783 	clz	r7, r3
 80003da:	2f00      	cmp	r7, #0
 80003dc:	d147      	bne.n	800046e <__udivmoddi4+0x156>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xd0>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 80fa 	bhi.w	80005dc <__udivmoddi4+0x2c4>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb61 0303 	sbc.w	r3, r1, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4698      	mov	r8, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d0e0      	beq.n	80003b8 <__udivmoddi4+0xa0>
 80003f6:	e9c6 4800 	strd	r4, r8, [r6]
 80003fa:	e7dd      	b.n	80003b8 <__udivmoddi4+0xa0>
 80003fc:	b902      	cbnz	r2, 8000400 <__udivmoddi4+0xe8>
 80003fe:	deff      	udf	#255	; 0xff
 8000400:	fab2 f282 	clz	r2, r2
 8000404:	2a00      	cmp	r2, #0
 8000406:	f040 808f 	bne.w	8000528 <__udivmoddi4+0x210>
 800040a:	1b49      	subs	r1, r1, r5
 800040c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000410:	fa1f f885 	uxth.w	r8, r5
 8000414:	2701      	movs	r7, #1
 8000416:	fbb1 fcfe 	udiv	ip, r1, lr
 800041a:	0c23      	lsrs	r3, r4, #16
 800041c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb08 f10c 	mul.w	r1, r8, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x124>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4299      	cmp	r1, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 800043a:	4684      	mov	ip, r0
 800043c:	1a59      	subs	r1, r3, r1
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb1 f0fe 	udiv	r0, r1, lr
 8000444:	fb0e 1410 	mls	r4, lr, r0, r1
 8000448:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800044c:	fb08 f800 	mul.w	r8, r8, r0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x14c>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x14a>
 800045c:	45a0      	cmp	r8, r4
 800045e:	f200 80b6 	bhi.w	80005ce <__udivmoddi4+0x2b6>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 0408 	sub.w	r4, r4, r8
 8000468:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800046c:	e79f      	b.n	80003ae <__udivmoddi4+0x96>
 800046e:	f1c7 0c20 	rsb	ip, r7, #32
 8000472:	40bb      	lsls	r3, r7
 8000474:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000478:	ea4e 0e03 	orr.w	lr, lr, r3
 800047c:	fa01 f407 	lsl.w	r4, r1, r7
 8000480:	fa20 f50c 	lsr.w	r5, r0, ip
 8000484:	fa21 f30c 	lsr.w	r3, r1, ip
 8000488:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800048c:	4325      	orrs	r5, r4
 800048e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000492:	0c2c      	lsrs	r4, r5, #16
 8000494:	fb08 3319 	mls	r3, r8, r9, r3
 8000498:	fa1f fa8e 	uxth.w	sl, lr
 800049c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a0:	fb09 f40a 	mul.w	r4, r9, sl
 80004a4:	429c      	cmp	r4, r3
 80004a6:	fa02 f207 	lsl.w	r2, r2, r7
 80004aa:	fa00 f107 	lsl.w	r1, r0, r7
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1e 0303 	adds.w	r3, lr, r3
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	f080 8087 	bcs.w	80005ca <__udivmoddi4+0x2b2>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f240 8084 	bls.w	80005ca <__udivmoddi4+0x2b2>
 80004c2:	f1a9 0902 	sub.w	r9, r9, #2
 80004c6:	4473      	add	r3, lr
 80004c8:	1b1b      	subs	r3, r3, r4
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004dc:	45a2      	cmp	sl, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1e 0404 	adds.w	r4, lr, r4
 80004e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e8:	d26b      	bcs.n	80005c2 <__udivmoddi4+0x2aa>
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	d969      	bls.n	80005c2 <__udivmoddi4+0x2aa>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4474      	add	r4, lr
 80004f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	eba4 040a 	sub.w	r4, r4, sl
 80004fe:	454c      	cmp	r4, r9
 8000500:	46c2      	mov	sl, r8
 8000502:	464b      	mov	r3, r9
 8000504:	d354      	bcc.n	80005b0 <__udivmoddi4+0x298>
 8000506:	d051      	beq.n	80005ac <__udivmoddi4+0x294>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d069      	beq.n	80005e0 <__udivmoddi4+0x2c8>
 800050c:	ebb1 050a 	subs.w	r5, r1, sl
 8000510:	eb64 0403 	sbc.w	r4, r4, r3
 8000514:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000518:	40fd      	lsrs	r5, r7
 800051a:	40fc      	lsrs	r4, r7
 800051c:	ea4c 0505 	orr.w	r5, ip, r5
 8000520:	e9c6 5400 	strd	r5, r4, [r6]
 8000524:	2700      	movs	r7, #0
 8000526:	e747      	b.n	80003b8 <__udivmoddi4+0xa0>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f703 	lsr.w	r7, r0, r3
 8000530:	4095      	lsls	r5, r2
 8000532:	fa01 f002 	lsl.w	r0, r1, r2
 8000536:	fa21 f303 	lsr.w	r3, r1, r3
 800053a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800053e:	4338      	orrs	r0, r7
 8000540:	0c01      	lsrs	r1, r0, #16
 8000542:	fbb3 f7fe 	udiv	r7, r3, lr
 8000546:	fa1f f885 	uxth.w	r8, r5
 800054a:	fb0e 3317 	mls	r3, lr, r7, r3
 800054e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000552:	fb07 f308 	mul.w	r3, r7, r8
 8000556:	428b      	cmp	r3, r1
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x256>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f107 3cff 	add.w	ip, r7, #4294967295
 8000564:	d22f      	bcs.n	80005c6 <__udivmoddi4+0x2ae>
 8000566:	428b      	cmp	r3, r1
 8000568:	d92d      	bls.n	80005c6 <__udivmoddi4+0x2ae>
 800056a:	3f02      	subs	r7, #2
 800056c:	4429      	add	r1, r5
 800056e:	1acb      	subs	r3, r1, r3
 8000570:	b281      	uxth	r1, r0
 8000572:	fbb3 f0fe 	udiv	r0, r3, lr
 8000576:	fb0e 3310 	mls	r3, lr, r0, r3
 800057a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057e:	fb00 f308 	mul.w	r3, r0, r8
 8000582:	428b      	cmp	r3, r1
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x27e>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f100 3cff 	add.w	ip, r0, #4294967295
 800058c:	d217      	bcs.n	80005be <__udivmoddi4+0x2a6>
 800058e:	428b      	cmp	r3, r1
 8000590:	d915      	bls.n	80005be <__udivmoddi4+0x2a6>
 8000592:	3802      	subs	r0, #2
 8000594:	4429      	add	r1, r5
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800059c:	e73b      	b.n	8000416 <__udivmoddi4+0xfe>
 800059e:	4637      	mov	r7, r6
 80005a0:	4630      	mov	r0, r6
 80005a2:	e709      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a4:	4607      	mov	r7, r0
 80005a6:	e6e7      	b.n	8000378 <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fb      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005ac:	4541      	cmp	r1, r8
 80005ae:	d2ab      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b4:	eb69 020e 	sbc.w	r2, r9, lr
 80005b8:	3801      	subs	r0, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	e7a4      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005be:	4660      	mov	r0, ip
 80005c0:	e7e9      	b.n	8000596 <__udivmoddi4+0x27e>
 80005c2:	4618      	mov	r0, r3
 80005c4:	e795      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c6:	4667      	mov	r7, ip
 80005c8:	e7d1      	b.n	800056e <__udivmoddi4+0x256>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e77c      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005ce:	3802      	subs	r0, #2
 80005d0:	442c      	add	r4, r5
 80005d2:	e747      	b.n	8000464 <__udivmoddi4+0x14c>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	442b      	add	r3, r5
 80005da:	e72f      	b.n	800043c <__udivmoddi4+0x124>
 80005dc:	4638      	mov	r0, r7
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xda>
 80005e0:	4637      	mov	r7, r6
 80005e2:	e6e9      	b.n	80003b8 <__udivmoddi4+0xa0>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4618      	mov	r0, r3
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
	...

0800060c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <_ZN3ros3MsgC1Ev+0x1c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4618      	mov	r0, r3
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	08009ee0 	.word	0x08009ee0

0800062c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
      data()
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff ffe8 	bl	800060c <_ZN3ros3MsgC1Ev>
 800063c:	4a06      	ldr	r2, [pc, #24]	; (8000658 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	3304      	adds	r3, #4
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff ffce 	bl	80005e8 <_ZN3ros4TimeC1Ev>
    {
    }
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4618      	mov	r0, r3
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	08009ec8 	.word	0x08009ec8

0800065c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6859      	ldr	r1, [r3, #4]
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	683a      	ldr	r2, [r7, #0]
 8000672:	4413      	add	r3, r2
 8000674:	b2ca      	uxtb	r2, r1
 8000676:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	0a19      	lsrs	r1, r3, #8
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	3301      	adds	r3, #1
 8000682:	683a      	ldr	r2, [r7, #0]
 8000684:	4413      	add	r3, r2
 8000686:	b2ca      	uxtb	r2, r1
 8000688:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	0c19      	lsrs	r1, r3, #16
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	3302      	adds	r3, #2
 8000694:	683a      	ldr	r2, [r7, #0]
 8000696:	4413      	add	r3, r2
 8000698:	b2ca      	uxtb	r2, r1
 800069a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	0e19      	lsrs	r1, r3, #24
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	3303      	adds	r3, #3
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	4413      	add	r3, r2
 80006aa:	b2ca      	uxtb	r2, r1
 80006ac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	3304      	adds	r3, #4
 80006b2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6899      	ldr	r1, [r3, #8]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	4413      	add	r3, r2
 80006be:	b2ca      	uxtb	r2, r1
 80006c0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	689b      	ldr	r3, [r3, #8]
 80006c6:	0a19      	lsrs	r1, r3, #8
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	3301      	adds	r3, #1
 80006cc:	683a      	ldr	r2, [r7, #0]
 80006ce:	4413      	add	r3, r2
 80006d0:	b2ca      	uxtb	r2, r1
 80006d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	0c19      	lsrs	r1, r3, #16
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	3302      	adds	r3, #2
 80006de:	683a      	ldr	r2, [r7, #0]
 80006e0:	4413      	add	r3, r2
 80006e2:	b2ca      	uxtb	r2, r1
 80006e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	689b      	ldr	r3, [r3, #8]
 80006ea:	0e19      	lsrs	r1, r3, #24
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	3303      	adds	r3, #3
 80006f0:	683a      	ldr	r2, [r7, #0]
 80006f2:	4413      	add	r3, r2
 80006f4:	b2ca      	uxtb	r2, r1
 80006f6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	3304      	adds	r3, #4
 80006fc:	60fb      	str	r3, [r7, #12]
      return offset;
 80006fe:	68fb      	ldr	r3, [r7, #12]
    }
 8000700:	4618      	mov	r0, r3
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	683a      	ldr	r2, [r7, #0]
 800071e:	4413      	add	r3, r2
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	461a      	mov	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	685a      	ldr	r2, [r3, #4]
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	3301      	adds	r3, #1
 8000730:	6839      	ldr	r1, [r7, #0]
 8000732:	440b      	add	r3, r1
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	021b      	lsls	r3, r3, #8
 8000738:	431a      	orrs	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	685a      	ldr	r2, [r3, #4]
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	3302      	adds	r3, #2
 8000746:	6839      	ldr	r1, [r7, #0]
 8000748:	440b      	add	r3, r1
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	041b      	lsls	r3, r3, #16
 800074e:	431a      	orrs	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	685a      	ldr	r2, [r3, #4]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	3303      	adds	r3, #3
 800075c:	6839      	ldr	r1, [r7, #0]
 800075e:	440b      	add	r3, r1
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	061b      	lsls	r3, r3, #24
 8000764:	431a      	orrs	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	3304      	adds	r3, #4
 800076e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	683a      	ldr	r2, [r7, #0]
 8000774:	4413      	add	r3, r2
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	461a      	mov	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	689a      	ldr	r2, [r3, #8]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	3301      	adds	r3, #1
 8000786:	6839      	ldr	r1, [r7, #0]
 8000788:	440b      	add	r3, r1
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	021b      	lsls	r3, r3, #8
 800078e:	431a      	orrs	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	689a      	ldr	r2, [r3, #8]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	3302      	adds	r3, #2
 800079c:	6839      	ldr	r1, [r7, #0]
 800079e:	440b      	add	r3, r1
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	041b      	lsls	r3, r3, #16
 80007a4:	431a      	orrs	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	689a      	ldr	r2, [r3, #8]
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3303      	adds	r3, #3
 80007b2:	6839      	ldr	r1, [r7, #0]
 80007b4:	440b      	add	r3, r1
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	061b      	lsls	r3, r3, #24
 80007ba:	431a      	orrs	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	3304      	adds	r3, #4
 80007c4:	60fb      	str	r3, [r7, #12]
     return offset;
 80007c6:	68fb      	ldr	r3, [r7, #12]
    }
 80007c8:	4618      	mov	r0, r3
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	4b03      	ldr	r3, [pc, #12]	; (80007ec <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80007de:	4618      	mov	r0, r3
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	08009d14 	.word	0x08009d14

080007f0 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	4b03      	ldr	r3, [pc, #12]	; (8000808 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80007fa:	4618      	mov	r0, r3
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	08009d24 	.word	0x08009d24

0800080c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fef8 	bl	800060c <_ZN3ros3MsgC1Ev>
 800081c:	4a0b      	ldr	r2, [pc, #44]	; (800084c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2200      	movs	r2, #0
 8000826:	809a      	strh	r2, [r3, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a09      	ldr	r2, [pc, #36]	; (8000850 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4a07      	ldr	r2, [pc, #28]	; (8000850 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a06      	ldr	r2, [pc, #24]	; (8000850 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000838:	611a      	str	r2, [r3, #16]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
    {
    }
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4618      	mov	r0, r3
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	08009eb0 	.word	0x08009eb0
 8000850:	08009d48 	.word	0x08009d48

08000854 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	8899      	ldrh	r1, [r3, #4]
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	683a      	ldr	r2, [r7, #0]
 800086a:	4413      	add	r3, r2
 800086c:	b2ca      	uxtb	r2, r1
 800086e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	889b      	ldrh	r3, [r3, #4]
 8000874:	0a1b      	lsrs	r3, r3, #8
 8000876:	b299      	uxth	r1, r3
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	3301      	adds	r3, #1
 800087c:	683a      	ldr	r2, [r7, #0]
 800087e:	4413      	add	r3, r2
 8000880:	b2ca      	uxtb	r2, r1
 8000882:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	3302      	adds	r3, #2
 8000888:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fd22 	bl	80002d8 <strlen>
 8000894:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	683a      	ldr	r2, [r7, #0]
 800089a:	4413      	add	r3, r2
 800089c:	69b9      	ldr	r1, [r7, #24]
 800089e:	4618      	mov	r0, r3
 80008a0:	f001 fc22 	bl	80020e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	3304      	adds	r3, #4
 80008a8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	683a      	ldr	r2, [r7, #0]
 80008ae:	18d0      	adds	r0, r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	4619      	mov	r1, r3
 80008b8:	f009 f8d8 	bl	8009a6c <memcpy>
      offset += length_topic_name;
 80008bc:	69fa      	ldr	r2, [r7, #28]
 80008be:	69bb      	ldr	r3, [r7, #24]
 80008c0:	4413      	add	r3, r2
 80008c2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fd05 	bl	80002d8 <strlen>
 80008ce:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80008d0:	69fb      	ldr	r3, [r7, #28]
 80008d2:	683a      	ldr	r2, [r7, #0]
 80008d4:	4413      	add	r3, r2
 80008d6:	6979      	ldr	r1, [r7, #20]
 80008d8:	4618      	mov	r0, r3
 80008da:	f001 fc05 	bl	80020e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	3304      	adds	r3, #4
 80008e2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	683a      	ldr	r2, [r7, #0]
 80008e8:	18d0      	adds	r0, r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	697a      	ldr	r2, [r7, #20]
 80008f0:	4619      	mov	r1, r3
 80008f2:	f009 f8bb 	bl	8009a6c <memcpy>
      offset += length_message_type;
 80008f6:	69fa      	ldr	r2, [r7, #28]
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	4413      	add	r3, r2
 80008fc:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	691b      	ldr	r3, [r3, #16]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fce8 	bl	80002d8 <strlen>
 8000908:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	683a      	ldr	r2, [r7, #0]
 800090e:	4413      	add	r3, r2
 8000910:	6939      	ldr	r1, [r7, #16]
 8000912:	4618      	mov	r0, r3
 8000914:	f001 fbe8 	bl	80020e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	3304      	adds	r3, #4
 800091c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	683a      	ldr	r2, [r7, #0]
 8000922:	18d0      	adds	r0, r2, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	691b      	ldr	r3, [r3, #16]
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	4619      	mov	r1, r3
 800092c:	f009 f89e 	bl	8009a6c <memcpy>
      offset += length_md5sum;
 8000930:	69fa      	ldr	r2, [r7, #28]
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	4413      	add	r3, r2
 8000936:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800093e:	68f9      	ldr	r1, [r7, #12]
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	683a      	ldr	r2, [r7, #0]
 8000944:	4413      	add	r3, r2
 8000946:	b2ca      	uxtb	r2, r1
 8000948:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	0a19      	lsrs	r1, r3, #8
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3301      	adds	r3, #1
 8000952:	683a      	ldr	r2, [r7, #0]
 8000954:	4413      	add	r3, r2
 8000956:	b2ca      	uxtb	r2, r1
 8000958:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	0c19      	lsrs	r1, r3, #16
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	3302      	adds	r3, #2
 8000962:	683a      	ldr	r2, [r7, #0]
 8000964:	4413      	add	r3, r2
 8000966:	b2ca      	uxtb	r2, r1
 8000968:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	0e19      	lsrs	r1, r3, #24
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	3303      	adds	r3, #3
 8000972:	683a      	ldr	r2, [r7, #0]
 8000974:	4413      	add	r3, r2
 8000976:	b2ca      	uxtb	r2, r1
 8000978:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	3304      	adds	r3, #4
 800097e:	61fb      	str	r3, [r7, #28]
      return offset;
 8000980:	69fb      	ldr	r3, [r7, #28]
    }
 8000982:	4618      	mov	r0, r3
 8000984:	3720      	adds	r7, #32
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800098a:	b580      	push	{r7, lr}
 800098c:	b08a      	sub	sp, #40	; 0x28
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	683a      	ldr	r2, [r7, #0]
 800099c:	4413      	add	r3, r2
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	889b      	ldrh	r3, [r3, #4]
 80009aa:	b21a      	sxth	r2, r3
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	3301      	adds	r3, #1
 80009b0:	6839      	ldr	r1, [r7, #0]
 80009b2:	440b      	add	r3, r1
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	021b      	lsls	r3, r3, #8
 80009b8:	b21b      	sxth	r3, r3
 80009ba:	4313      	orrs	r3, r2
 80009bc:	b21b      	sxth	r3, r3
 80009be:	b29a      	uxth	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	3302      	adds	r3, #2
 80009c8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	683a      	ldr	r2, [r7, #0]
 80009ce:	441a      	add	r2, r3
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4611      	mov	r1, r2
 80009d6:	4618      	mov	r0, r3
 80009d8:	f001 fba4 	bl	8002124 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	3304      	adds	r3, #4
 80009e0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
 80009e6:	69ba      	ldr	r2, [r7, #24]
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	4413      	add	r3, r2
 80009ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d20c      	bcs.n	8000a0c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80009f2:	683a      	ldr	r2, [r7, #0]
 80009f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f6:	441a      	add	r2, r3
 80009f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fa:	3b01      	subs	r3, #1
 80009fc:	6839      	ldr	r1, [r7, #0]
 80009fe:	440b      	add	r3, r1
 8000a00:	7812      	ldrb	r2, [r2, #0]
 8000a02:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a06:	3301      	adds	r3, #1
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
 8000a0a:	e7ec      	b.n	80009e6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	4413      	add	r3, r2
 8000a12:	3b01      	subs	r3, #1
 8000a14:	683a      	ldr	r2, [r7, #0]
 8000a16:	4413      	add	r3, r2
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	441a      	add	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	683a      	ldr	r2, [r7, #0]
 8000a34:	441a      	add	r2, r3
 8000a36:	f107 0310 	add.w	r3, r7, #16
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f001 fb71 	bl	8002124 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000a42:	69bb      	ldr	r3, [r7, #24]
 8000a44:	3304      	adds	r3, #4
 8000a46:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	623b      	str	r3, [r7, #32]
 8000a4c:	69ba      	ldr	r2, [r7, #24]
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	4413      	add	r3, r2
 8000a52:	6a3a      	ldr	r2, [r7, #32]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d20c      	bcs.n	8000a72 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000a58:	683a      	ldr	r2, [r7, #0]
 8000a5a:	6a3b      	ldr	r3, [r7, #32]
 8000a5c:	441a      	add	r2, r3
 8000a5e:	6a3b      	ldr	r3, [r7, #32]
 8000a60:	3b01      	subs	r3, #1
 8000a62:	6839      	ldr	r1, [r7, #0]
 8000a64:	440b      	add	r3, r1
 8000a66:	7812      	ldrb	r2, [r2, #0]
 8000a68:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000a6a:	6a3b      	ldr	r3, [r7, #32]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	623b      	str	r3, [r7, #32]
 8000a70:	e7ec      	b.n	8000a4c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	4413      	add	r3, r2
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	683a      	ldr	r2, [r7, #0]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	3b01      	subs	r3, #1
 8000a86:	683a      	ldr	r2, [r7, #0]
 8000a88:	441a      	add	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	4413      	add	r3, r2
 8000a94:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	683a      	ldr	r2, [r7, #0]
 8000a9a:	441a      	add	r2, r3
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f001 fb3e 	bl	8002124 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	3304      	adds	r3, #4
 8000aac:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	61fb      	str	r3, [r7, #28]
 8000ab2:	69ba      	ldr	r2, [r7, #24]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	69fa      	ldr	r2, [r7, #28]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d20c      	bcs.n	8000ad8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000abe:	683a      	ldr	r2, [r7, #0]
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	441a      	add	r2, r3
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	6839      	ldr	r1, [r7, #0]
 8000aca:	440b      	add	r3, r1
 8000acc:	7812      	ldrb	r2, [r2, #0]
 8000ace:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	61fb      	str	r3, [r7, #28]
 8000ad6:	e7ec      	b.n	8000ab2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	4413      	add	r3, r2
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	683a      	ldr	r2, [r7, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	683a      	ldr	r2, [r7, #0]
 8000aee:	441a      	add	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	4413      	add	r3, r2
 8000afa:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	69ba      	ldr	r2, [r7, #24]
 8000b04:	6839      	ldr	r1, [r7, #0]
 8000b06:	440a      	add	r2, r1
 8000b08:	7812      	ldrb	r2, [r2, #0]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	3301      	adds	r3, #1
 8000b14:	6839      	ldr	r1, [r7, #0]
 8000b16:	440b      	add	r3, r1
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	021b      	lsls	r3, r3, #8
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000b20:	68ba      	ldr	r2, [r7, #8]
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	3302      	adds	r3, #2
 8000b26:	6839      	ldr	r1, [r7, #0]
 8000b28:	440b      	add	r3, r1
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	041b      	lsls	r3, r3, #16
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	3303      	adds	r3, #3
 8000b38:	6839      	ldr	r1, [r7, #0]
 8000b3a:	440b      	add	r3, r1
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	061b      	lsls	r3, r3, #24
 8000b40:	4313      	orrs	r3, r2
 8000b42:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000b44:	68ba      	ldr	r2, [r7, #8]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	61bb      	str	r3, [r7, #24]
     return offset;
 8000b50:	69bb      	ldr	r3, [r7, #24]
    }
 8000b52:	4618      	mov	r0, r3
 8000b54:	3728      	adds	r7, #40	; 0x28
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000b66:	4618      	mov	r0, r3
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	08009d4c 	.word	0x08009d4c

08000b78 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000b82:	4618      	mov	r0, r3
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	08009d68 	.word	0x08009d68

08000b94 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fd34 	bl	800060c <_ZN3ros3MsgC1Ev>
 8000ba4:	4a06      	ldr	r2, [pc, #24]	; (8000bc0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	711a      	strb	r2, [r3, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000bb4:	609a      	str	r2, [r3, #8]
    {
    }
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	08009e98 	.word	0x08009e98
 8000bc4:	08009d48 	.word	0x08009d48

08000bc8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	7912      	ldrb	r2, [r2, #4]
 8000be0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	3301      	adds	r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fb73 	bl	80002d8 <strlen>
 8000bf2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	683a      	ldr	r2, [r7, #0]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	68b9      	ldr	r1, [r7, #8]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f001 fa73 	bl	80020e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	3304      	adds	r3, #4
 8000c06:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	683a      	ldr	r2, [r7, #0]
 8000c0c:	18d0      	adds	r0, r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f008 ff29 	bl	8009a6c <memcpy>
      offset += length_msg;
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4413      	add	r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]
      return offset;
 8000c22:	68fb      	ldr	r3, [r7, #12]
    }
 8000c24:	4618      	mov	r0, r3
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	683a      	ldr	r2, [r7, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	781a      	ldrb	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	683a      	ldr	r2, [r7, #0]
 8000c50:	441a      	add	r2, r3
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	4611      	mov	r1, r2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f001 fa63 	bl	8002124 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	3304      	adds	r3, #4
 8000c62:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	697a      	ldr	r2, [r7, #20]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d20c      	bcs.n	8000c8e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	441a      	add	r2, r3
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	6839      	ldr	r1, [r7, #0]
 8000c80:	440b      	add	r3, r1
 8000c82:	7812      	ldrb	r2, [r2, #0]
 8000c84:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	e7ec      	b.n	8000c68 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4413      	add	r3, r2
 8000c94:	3b01      	subs	r3, #1
 8000c96:	683a      	ldr	r2, [r7, #0]
 8000c98:	4413      	add	r3, r2
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	683a      	ldr	r2, [r7, #0]
 8000ca4:	441a      	add	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4413      	add	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
     return offset;
 8000cb2:	693b      	ldr	r3, [r7, #16]
    }
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	08009d8c 	.word	0x08009d8c

08000cd8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	08009da0 	.word	0x08009da0

08000cf4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fc84 	bl	800060c <_ZN3ros3MsgC1Ev>
 8000d04:	4a11      	ldr	r2, [pc, #68]	; (8000d4c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f04f 0200 	mov.w	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	08009e80 	.word	0x08009e80

08000d50 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6859      	ldr	r1, [r3, #4]
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	b2ca      	uxtb	r2, r1
 8000d6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	0a19      	lsrs	r1, r3, #8
 8000d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d74:	3301      	adds	r3, #1
 8000d76:	683a      	ldr	r2, [r7, #0]
 8000d78:	4413      	add	r3, r2
 8000d7a:	b2ca      	uxtb	r2, r1
 8000d7c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	0c19      	lsrs	r1, r3, #16
 8000d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d86:	3302      	adds	r3, #2
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	b2ca      	uxtb	r2, r1
 8000d8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	0e19      	lsrs	r1, r3, #24
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	3303      	adds	r3, #3
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	b2ca      	uxtb	r2, r1
 8000da0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	3304      	adds	r3, #4
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000da8:	2300      	movs	r3, #0
 8000daa:	623b      	str	r3, [r7, #32]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	6a3a      	ldr	r2, [r7, #32]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d22b      	bcs.n	8000e0e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	68da      	ldr	r2, [r3, #12]
 8000dba:	6a3b      	ldr	r3, [r7, #32]
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000dc4:	6939      	ldr	r1, [r7, #16]
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc8:	683a      	ldr	r2, [r7, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	b2ca      	uxtb	r2, r1
 8000dce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	0a19      	lsrs	r1, r3, #8
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	b2ca      	uxtb	r2, r1
 8000dde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	0c19      	lsrs	r1, r3, #16
 8000de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de6:	3302      	adds	r3, #2
 8000de8:	683a      	ldr	r2, [r7, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	b2ca      	uxtb	r2, r1
 8000dee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	0e19      	lsrs	r1, r3, #24
 8000df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df6:	3303      	adds	r3, #3
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b2ca      	uxtb	r2, r1
 8000dfe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e02:	3304      	adds	r3, #4
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000e06:	6a3b      	ldr	r3, [r7, #32]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	623b      	str	r3, [r7, #32]
 8000e0c:	e7ce      	b.n	8000dac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6919      	ldr	r1, [r3, #16]
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e14:	683a      	ldr	r2, [r7, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	b2ca      	uxtb	r2, r1
 8000e1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	0a19      	lsrs	r1, r3, #8
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	3301      	adds	r3, #1
 8000e26:	683a      	ldr	r2, [r7, #0]
 8000e28:	4413      	add	r3, r2
 8000e2a:	b2ca      	uxtb	r2, r1
 8000e2c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	0c19      	lsrs	r1, r3, #16
 8000e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e36:	3302      	adds	r3, #2
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	b2ca      	uxtb	r2, r1
 8000e3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	691b      	ldr	r3, [r3, #16]
 8000e44:	0e19      	lsrs	r1, r3, #24
 8000e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e48:	3303      	adds	r3, #3
 8000e4a:	683a      	ldr	r2, [r7, #0]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	b2ca      	uxtb	r2, r1
 8000e50:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e54:	3304      	adds	r3, #4
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	691b      	ldr	r3, [r3, #16]
 8000e60:	69fa      	ldr	r2, [r7, #28]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d22b      	bcs.n	8000ebe <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	699a      	ldr	r2, [r3, #24]
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000e74:	68f9      	ldr	r1, [r7, #12]
 8000e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e78:	683a      	ldr	r2, [r7, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	b2ca      	uxtb	r2, r1
 8000e7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	0a19      	lsrs	r1, r3, #8
 8000e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e86:	3301      	adds	r3, #1
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	b2ca      	uxtb	r2, r1
 8000e8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	0c19      	lsrs	r1, r3, #16
 8000e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e96:	3302      	adds	r3, #2
 8000e98:	683a      	ldr	r2, [r7, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	b2ca      	uxtb	r2, r1
 8000e9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	0e19      	lsrs	r1, r3, #24
 8000ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea6:	3303      	adds	r3, #3
 8000ea8:	683a      	ldr	r2, [r7, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	b2ca      	uxtb	r2, r1
 8000eae:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb2:	3304      	adds	r3, #4
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	61fb      	str	r3, [r7, #28]
 8000ebc:	e7ce      	b.n	8000e5c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69d9      	ldr	r1, [r3, #28]
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec4:	683a      	ldr	r2, [r7, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	b2ca      	uxtb	r2, r1
 8000eca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	69db      	ldr	r3, [r3, #28]
 8000ed0:	0a19      	lsrs	r1, r3, #8
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	683a      	ldr	r2, [r7, #0]
 8000ed8:	4413      	add	r3, r2
 8000eda:	b2ca      	uxtb	r2, r1
 8000edc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	0c19      	lsrs	r1, r3, #16
 8000ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	b2ca      	uxtb	r2, r1
 8000eee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69db      	ldr	r3, [r3, #28]
 8000ef4:	0e19      	lsrs	r1, r3, #24
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef8:	3303      	adds	r3, #3
 8000efa:	683a      	ldr	r2, [r7, #0]
 8000efc:	4413      	add	r3, r2
 8000efe:	b2ca      	uxtb	r2, r1
 8000f00:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f04:	3304      	adds	r3, #4
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61bb      	str	r3, [r7, #24]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	69db      	ldr	r3, [r3, #28]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d228      	bcs.n	8000f68 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff f9d8 	bl	80002d8 <strlen>
 8000f28:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	683a      	ldr	r2, [r7, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	6979      	ldr	r1, [r7, #20]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f001 f8d8 	bl	80020e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f40:	683a      	ldr	r2, [r7, #0]
 8000f42:	18d0      	adds	r0, r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	4619      	mov	r1, r3
 8000f54:	f008 fd8a 	bl	8009a6c <memcpy>
      offset += length_stringsi;
 8000f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	3301      	adds	r3, #1
 8000f64:	61bb      	str	r3, [r7, #24]
 8000f66:	e7d1      	b.n	8000f0c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8000f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3728      	adds	r7, #40	; 0x28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b08e      	sub	sp, #56	; 0x38
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	4413      	add	r3, r2
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	4413      	add	r3, r2
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	021b      	lsls	r3, r3, #8
 8000f96:	6a3a      	ldr	r2, [r7, #32]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	041b      	lsls	r3, r3, #16
 8000fa8:	6a3a      	ldr	r2, [r7, #32]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb0:	3303      	adds	r3, #3
 8000fb2:	683a      	ldr	r2, [r7, #0]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	061b      	lsls	r3, r3, #24
 8000fba:	6a3a      	ldr	r2, [r7, #32]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc2:	3304      	adds	r3, #4
 8000fc4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	6a3a      	ldr	r2, [r7, #32]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d90a      	bls.n	8000fe6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	6a3b      	ldr	r3, [r7, #32]
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4610      	mov	r0, r2
 8000fdc:	f008 fd5a 	bl	8009a94 <realloc>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a3a      	ldr	r2, [r7, #32]
 8000fea:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000fec:	2300      	movs	r3, #0
 8000fee:	633b      	str	r3, [r7, #48]	; 0x30
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d236      	bcs.n	8001068 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001002:	6839      	ldr	r1, [r7, #0]
 8001004:	440a      	add	r2, r1
 8001006:	7812      	ldrb	r2, [r2, #0]
 8001008:	4313      	orrs	r3, r2
 800100a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001010:	3301      	adds	r3, #1
 8001012:	6839      	ldr	r1, [r7, #0]
 8001014:	440b      	add	r3, r1
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	4313      	orrs	r3, r2
 800101c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001022:	3302      	adds	r3, #2
 8001024:	6839      	ldr	r1, [r7, #0]
 8001026:	440b      	add	r3, r1
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	041b      	lsls	r3, r3, #16
 800102c:	4313      	orrs	r3, r2
 800102e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001034:	3303      	adds	r3, #3
 8001036:	6839      	ldr	r1, [r7, #0]
 8001038:	440b      	add	r3, r1
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	061b      	lsls	r3, r3, #24
 800103e:	4313      	orrs	r3, r2
 8001040:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800104a:	3304      	adds	r3, #4
 800104c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68da      	ldr	r2, [r3, #12]
 8001052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	3208      	adds	r2, #8
 800105c:	6812      	ldr	r2, [r2, #0]
 800105e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001062:	3301      	adds	r3, #1
 8001064:	633b      	str	r3, [r7, #48]	; 0x30
 8001066:	e7c3      	b.n	8000ff0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	4413      	add	r3, r2
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001074:	3301      	adds	r3, #1
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	4413      	add	r3, r2
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	69fa      	ldr	r2, [r7, #28]
 8001080:	4313      	orrs	r3, r2
 8001082:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001086:	3302      	adds	r3, #2
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	4413      	add	r3, r2
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	041b      	lsls	r3, r3, #16
 8001090:	69fa      	ldr	r2, [r7, #28]
 8001092:	4313      	orrs	r3, r2
 8001094:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001098:	3303      	adds	r3, #3
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	4413      	add	r3, r2
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	061b      	lsls	r3, r3, #24
 80010a2:	69fa      	ldr	r2, [r7, #28]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80010a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010aa:	3304      	adds	r3, #4
 80010ac:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	69fa      	ldr	r2, [r7, #28]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d90a      	bls.n	80010ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	699a      	ldr	r2, [r3, #24]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4619      	mov	r1, r3
 80010c2:	4610      	mov	r0, r2
 80010c4:	f008 fce6 	bl	8009a94 <realloc>
 80010c8:	4602      	mov	r2, r0
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69fa      	ldr	r2, [r7, #28]
 80010d2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010de:	429a      	cmp	r2, r3
 80010e0:	d236      	bcs.n	8001150 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010ea:	6839      	ldr	r1, [r7, #0]
 80010ec:	440a      	add	r2, r1
 80010ee:	7812      	ldrb	r2, [r2, #0]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010f8:	3301      	adds	r3, #1
 80010fa:	6839      	ldr	r1, [r7, #0]
 80010fc:	440b      	add	r3, r1
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	4313      	orrs	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800110a:	3302      	adds	r3, #2
 800110c:	6839      	ldr	r1, [r7, #0]
 800110e:	440b      	add	r3, r1
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	041b      	lsls	r3, r3, #16
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800111c:	3303      	adds	r3, #3
 800111e:	6839      	ldr	r1, [r7, #0]
 8001120:	440b      	add	r3, r1
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	061b      	lsls	r3, r3, #24
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001132:	3304      	adds	r3, #4
 8001134:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	699a      	ldr	r2, [r3, #24]
 800113a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	3214      	adds	r2, #20
 8001144:	6812      	ldr	r2, [r2, #0]
 8001146:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800114a:	3301      	adds	r3, #1
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800114e:	e7c3      	b.n	80010d8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	4413      	add	r3, r2
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800115a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800115c:	3301      	adds	r3, #1
 800115e:	683a      	ldr	r2, [r7, #0]
 8001160:	4413      	add	r3, r2
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800116c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800116e:	3302      	adds	r3, #2
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	4413      	add	r3, r2
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	041b      	lsls	r3, r3, #16
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800117e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001180:	3303      	adds	r3, #3
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	4413      	add	r3, r2
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	061b      	lsls	r3, r3, #24
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001192:	3304      	adds	r3, #4
 8001194:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	429a      	cmp	r2, r3
 800119e:	d90a      	bls.n	80011b6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4619      	mov	r1, r3
 80011aa:	4610      	mov	r0, r2
 80011ac:	f008 fc72 	bl	8009a94 <realloc>
 80011b0:	4602      	mov	r2, r0
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80011bc:	2300      	movs	r3, #0
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d23f      	bcs.n	800124a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80011ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	441a      	add	r2, r3
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 ffa4 	bl	8002124 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80011dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011de:	3304      	adds	r3, #4
 80011e0:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80011e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
 80011e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d20c      	bcs.n	800120c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	441a      	add	r2, r3
 80011f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fa:	3b01      	subs	r3, #1
 80011fc:	6839      	ldr	r1, [r7, #0]
 80011fe:	440b      	add	r3, r1
 8001200:	7812      	ldrb	r2, [r2, #0]
 8001202:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	3301      	adds	r3, #1
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
 800120a:	e7ec      	b.n	80011e6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800120c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4413      	add	r3, r2
 8001212:	3b01      	subs	r3, #1
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	4413      	add	r3, r2
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800121c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800121e:	3b01      	subs	r3, #1
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	441a      	add	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001228:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4413      	add	r3, r2
 800122e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	3220      	adds	r2, #32
 800123e:	6812      	ldr	r2, [r2, #0]
 8001240:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001244:	3301      	adds	r3, #1
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
 8001248:	e7ba      	b.n	80011c0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800124a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800124c:	4618      	mov	r0, r3
 800124e:	3738      	adds	r7, #56	; 0x38
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800125e:	4618      	mov	r0, r3
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	08009e34 	.word	0x08009e34

08001270 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	08009dc4 	.word	0x08009dc4

0800128c <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
  }
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a41      	ldr	r2, [pc, #260]	; (80013bc <_ZN13STM32Hardware10getRdmaIndEv+0x118>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d068      	beq.n	800138c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a3f      	ldr	r2, [pc, #252]	; (80013c0 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d061      	beq.n	800138c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a3c      	ldr	r2, [pc, #240]	; (80013c4 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d05a      	beq.n	800138c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a3a      	ldr	r2, [pc, #232]	; (80013c8 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d053      	beq.n	800138c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a37      	ldr	r2, [pc, #220]	; (80013cc <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d04c      	beq.n	800138c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a35      	ldr	r2, [pc, #212]	; (80013d0 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d045      	beq.n	800138c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a32      	ldr	r2, [pc, #200]	; (80013d4 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d03e      	beq.n	800138c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a30      	ldr	r2, [pc, #192]	; (80013d8 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d037      	beq.n	800138c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a2d      	ldr	r2, [pc, #180]	; (80013dc <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d030      	beq.n	800138c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a2b      	ldr	r2, [pc, #172]	; (80013e0 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d029      	beq.n	800138c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a28      	ldr	r2, [pc, #160]	; (80013e4 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d022      	beq.n	800138c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a26      	ldr	r2, [pc, #152]	; (80013e8 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d01b      	beq.n	800138c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a23      	ldr	r2, [pc, #140]	; (80013ec <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d014      	beq.n	800138c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a21      	ldr	r2, [pc, #132]	; (80013f0 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d00d      	beq.n	800138c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a1e      	ldr	r2, [pc, #120]	; (80013f4 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d006      	beq.n	800138c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a1c      	ldr	r2, [pc, #112]	; (80013f8 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d108      	bne.n	800139e <_ZN13STM32Hardware10getRdmaIndEv+0xfa>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	425b      	negs	r3, r3
 8001398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800139c:	e007      	b.n	80013ae <_ZN13STM32Hardware10getRdmaIndEv+0x10a>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	425b      	negs	r3, r3
 80013aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40020010 	.word	0x40020010
 80013c0:	40020028 	.word	0x40020028
 80013c4:	40020040 	.word	0x40020040
 80013c8:	40020058 	.word	0x40020058
 80013cc:	40020070 	.word	0x40020070
 80013d0:	40020088 	.word	0x40020088
 80013d4:	400200a0 	.word	0x400200a0
 80013d8:	400200b8 	.word	0x400200b8
 80013dc:	40020410 	.word	0x40020410
 80013e0:	40020428 	.word	0x40020428
 80013e4:	40020440 	.word	0x40020440
 80013e8:	40020458 	.word	0x40020458
 80013ec:	40020470 	.word	0x40020470
 80013f0:	40020488 	.word	0x40020488
 80013f4:	400204a0 	.word	0x400204a0
 80013f8:	400204b8 	.word	0x400204b8

080013fc <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
      huart(&huart4), rind(0), twind(0), tfind(0){
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <_ZN13STM32HardwareC1Ev+0x34>)
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	24000c1c 	.word	0x24000c1c

08001434 <_ZN13STM32Hardware4readEv>:

    void reset_rbuf(void){
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
    }

    int read(){
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
      int c = -1;
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ff2b 	bl	80012a4 <_ZN13STM32Hardware10getRdmaIndEv>
 800144e:	4603      	mov	r3, r0
 8001450:	429c      	cmp	r4, r3
 8001452:	bf14      	ite	ne
 8001454:	2301      	movne	r3, #1
 8001456:	2300      	moveq	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d012      	beq.n	8001484 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001464:	1c59      	adds	r1, r3, #1
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	4413      	add	r3, r2
 8001470:	791b      	ldrb	r3, [r3, #4]
 8001472:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800147a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001484:	68fb      	ldr	r3, [r7, #12]
    }
 8001486:	4618      	mov	r0, r3
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	bd90      	pop	{r4, r7, pc}
	...

08001490 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014a0:	2b20      	cmp	r3, #32
 80014a2:	d108      	bne.n	80014b6 <_ZN13STM32Hardware5flushEv+0x26>
 80014a4:	4b27      	ldr	r3, [pc, #156]	; (8001544 <_ZN13STM32Hardware5flushEv+0xb4>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	f083 0301 	eor.w	r3, r3, #1
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <_ZN13STM32Hardware5flushEv+0x26>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <_ZN13STM32Hardware5flushEv+0x28>
 80014b6:	2300      	movs	r3, #0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d03f      	beq.n	800153c <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <_ZN13STM32Hardware5flushEv+0xb4>)
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d031      	beq.n	8001536 <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80014de:	429a      	cmp	r2, r3
 80014e0:	d20a      	bcs.n	80014f8 <_ZN13STM32Hardware5flushEv+0x68>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	e006      	b.n	8001506 <_ZN13STM32Hardware5flushEv+0x76>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80014fe:	b29b      	uxth	r3, r3
 8001500:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001504:	b29b      	uxth	r3, r3
 8001506:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6818      	ldr	r0, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001512:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	89fa      	ldrh	r2, [r7, #14]
 800151c:	4619      	mov	r1, r3
 800151e:	f006 fe27 	bl	8008170 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001528:	89fb      	ldrh	r3, [r7, #14]
 800152a:	4413      	add	r3, r2
 800152c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001536:	4b03      	ldr	r3, [pc, #12]	; (8001544 <_ZN13STM32Hardware5flushEv+0xb4>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
      }
    }
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	24000154 	.word	0x24000154

08001548 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
      int n = length;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800155e:	bfa8      	it	ge
 8001560:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001564:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800156c:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	4293      	cmp	r3, r2
 8001574:	bf28      	it	cs
 8001576:	4613      	movcs	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001580:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	4413      	add	r3, r2
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	68b9      	ldr	r1, [r7, #8]
 800158c:	4618      	mov	r0, r3
 800158e:	f008 fa6d 	bl	8009a6c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	4413      	add	r3, r2
 800159c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d00b      	beq.n	80015c6 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	18d1      	adds	r1, r2, r3
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	461a      	mov	r2, r3
 80015c2:	f008 fa53 	bl	8009a6c <memcpy>
      }

      flush();
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f7ff ff62 	bl	8001490 <_ZN13STM32Hardware5flushEv>
    }
 80015cc:	bf00      	nop
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	f001 fe86 	bl	80032ec <HAL_GetTick>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	4a04      	ldr	r2, [pc, #16]	; (8001608 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4618      	mov	r0, r3
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	08009e6c 	.word	0x08009e6c

0800160c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ffe8 	bl	80015ec <_ZN3ros15NodeHandleBase_C1Ev>
 800161c:	4a36      	ldr	r2, [pc, #216]	; (80016f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3304      	adds	r3, #4
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fee8 	bl	80013fc <_ZN13STM32HardwareC1Ev>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f008 fa12 	bl	8009a82 <memset>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f008 fa09 	bl	8009a82 <memset>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8001676:	2264      	movs	r2, #100	; 0x64
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f008 fa01 	bl	8009a82 <memset>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8001686:	2264      	movs	r2, #100	; 0x64
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f008 f9f9 	bl	8009a82 <memset>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fb04 	bl	8000cf4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	08009e58 	.word	0x08009e58

080016fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001700:	f001 fd6e 	bl	80031e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001704:	f000 f810 	bl	8001728 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001708:	f000 fbdc 	bl	8001ec4 <_ZL12MX_GPIO_Initv>
  MX_ETH_Init();
 800170c:	f000 f8e0 	bl	80018d0 <_ZL11MX_ETH_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8001710:	f000 fba2 	bl	8001e58 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_TIM1_Init();
 8001714:	f000 f934 	bl	8001980 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8001718:	f000 fa0e 	bl	8001b38 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 800171c:	f000 fa9c 	bl	8001c58 <_ZL12MX_TIM4_Initv>
  MX_UART4_Init();
 8001720:	f000 fb3a 	bl	8001d98 <_ZL13MX_UART4_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001724:	e7fe      	b.n	8001724 <main+0x28>
	...

08001728 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b0cc      	sub	sp, #304	; 0x130
 800172c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001732:	224c      	movs	r2, #76	; 0x4c
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f008 f9a3 	bl	8009a82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800173c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001740:	2220      	movs	r2, #32
 8001742:	2100      	movs	r1, #0
 8001744:	4618      	mov	r0, r3
 8001746:	f008 f99c 	bl	8009a82 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800174a:	f107 0308 	add.w	r3, r7, #8
 800174e:	4618      	mov	r0, r3
 8001750:	23bc      	movs	r3, #188	; 0xbc
 8001752:	461a      	mov	r2, r3
 8001754:	2100      	movs	r1, #0
 8001756:	f008 f994 	bl	8009a82 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800175a:	2002      	movs	r0, #2
 800175c:	f003 fa36 	bl	8004bcc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	4b57      	ldr	r3, [pc, #348]	; (80018c4 <_Z18SystemClock_Configv+0x19c>)
 8001768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176a:	4a56      	ldr	r2, [pc, #344]	; (80018c4 <_Z18SystemClock_Configv+0x19c>)
 800176c:	f023 0301 	bic.w	r3, r3, #1
 8001770:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001772:	4b54      	ldr	r3, [pc, #336]	; (80018c4 <_Z18SystemClock_Configv+0x19c>)
 8001774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001776:	f003 0201 	and.w	r2, r3, #1
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	4b52      	ldr	r3, [pc, #328]	; (80018c8 <_Z18SystemClock_Configv+0x1a0>)
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001786:	4a50      	ldr	r2, [pc, #320]	; (80018c8 <_Z18SystemClock_Configv+0x1a0>)
 8001788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800178c:	6193      	str	r3, [r2, #24]
 800178e:	4b4e      	ldr	r3, [pc, #312]	; (80018c8 <_Z18SystemClock_Configv+0x1a0>)
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800179e:	4b4a      	ldr	r3, [pc, #296]	; (80018c8 <_Z18SystemClock_Configv+0x1a0>)
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017aa:	bf14      	ite	ne
 80017ac:	2301      	movne	r3, #1
 80017ae:	2300      	moveq	r3, #0
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d000      	beq.n	80017b8 <_Z18SystemClock_Configv+0x90>
 80017b6:	e7f2      	b.n	800179e <_Z18SystemClock_Configv+0x76>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80017b8:	2303      	movs	r3, #3
 80017ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80017be:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80017c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80017c6:	2301      	movs	r3, #1
 80017c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017cc:	2340      	movs	r3, #64	; 0x40
 80017ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d2:	2302      	movs	r3, #2
 80017d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017d8:	2302      	movs	r3, #2
 80017da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017de:	2301      	movs	r3, #1
 80017e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 80017e4:	2318      	movs	r3, #24
 80017e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80017ea:	2302      	movs	r3, #2
 80017ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017f0:	2304      	movs	r3, #4
 80017f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017f6:	2302      	movs	r3, #2
 80017f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80017fc:	230c      	movs	r3, #12
 80017fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001802:	2300      	movs	r3, #0
 8001804:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800180e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001812:	4618      	mov	r0, r3
 8001814:	f003 fa24 	bl	8004c60 <HAL_RCC_OscConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	bf14      	ite	ne
 800181e:	2301      	movne	r3, #1
 8001820:	2300      	moveq	r3, #0
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8001828:	f000 fc5a 	bl	80020e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800182c:	233f      	movs	r3, #63	; 0x3f
 800182e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001832:	2300      	movs	r3, #0
 8001834:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001838:	2300      	movs	r3, #0
 800183a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800183e:	2300      	movs	r3, #0
 8001840:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001844:	2300      	movs	r3, #0
 8001846:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800184a:	2300      	movs	r3, #0
 800184c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001850:	2300      	movs	r3, #0
 8001852:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001856:	2300      	movs	r3, #0
 8001858:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800185c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001860:	2100      	movs	r1, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f003 fe0c 	bl	8005480 <HAL_RCC_ClockConfig>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	bf14      	ite	ne
 800186e:	2301      	movne	r3, #1
 8001870:	2300      	moveq	r3, #0
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <_Z18SystemClock_Configv+0x154>
  {
    Error_Handler();
 8001878:	f000 fc32 	bl	80020e0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_USB;
 800187c:	f107 0308 	add.w	r3, r7, #8
 8001880:	4a12      	ldr	r2, [pc, #72]	; (80018cc <_Z18SystemClock_Configv+0x1a4>)
 8001882:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001884:	f107 0308 	add.w	r3, r7, #8
 8001888:	2200      	movs	r2, #0
 800188a:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001898:	f107 0308 	add.w	r3, r7, #8
 800189c:	4618      	mov	r0, r3
 800189e:	f004 f973 	bl	8005b88 <HAL_RCCEx_PeriphCLKConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	bf14      	ite	ne
 80018a8:	2301      	movne	r3, #1
 80018aa:	2300      	moveq	r3, #0
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <_Z18SystemClock_Configv+0x18e>
  {
    Error_Handler();
 80018b2:	f000 fc15 	bl	80020e0 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80018b6:	f003 f9c3 	bl	8004c40 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80018ba:	bf00      	nop
 80018bc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	58000400 	.word	0x58000400
 80018c8:	58024800 	.word	0x58024800
 80018cc:	00040002 	.word	0x00040002

080018d0 <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80018d4:	4b25      	ldr	r3, [pc, #148]	; (800196c <_ZL11MX_ETH_Initv+0x9c>)
 80018d6:	4a26      	ldr	r2, [pc, #152]	; (8001970 <_ZL11MX_ETH_Initv+0xa0>)
 80018d8:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 80018da:	4b24      	ldr	r3, [pc, #144]	; (800196c <_ZL11MX_ETH_Initv+0x9c>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80018e2:	4b22      	ldr	r3, [pc, #136]	; (800196c <_ZL11MX_ETH_Initv+0x9c>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	3301      	adds	r3, #1
 80018e8:	2280      	movs	r2, #128	; 0x80
 80018ea:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80018ec:	4b1f      	ldr	r3, [pc, #124]	; (800196c <_ZL11MX_ETH_Initv+0x9c>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	3302      	adds	r3, #2
 80018f2:	22e1      	movs	r2, #225	; 0xe1
 80018f4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80018f6:	4b1d      	ldr	r3, [pc, #116]	; (800196c <_ZL11MX_ETH_Initv+0x9c>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	3303      	adds	r3, #3
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8001900:	4b1a      	ldr	r3, [pc, #104]	; (800196c <_ZL11MX_ETH_Initv+0x9c>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	3304      	adds	r3, #4
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800190a:	4b18      	ldr	r3, [pc, #96]	; (800196c <_ZL11MX_ETH_Initv+0x9c>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	3305      	adds	r3, #5
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001914:	4b15      	ldr	r3, [pc, #84]	; (800196c <_ZL11MX_ETH_Initv+0x9c>)
 8001916:	2201      	movs	r2, #1
 8001918:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <_ZL11MX_ETH_Initv+0x9c>)
 800191c:	4a15      	ldr	r2, [pc, #84]	; (8001974 <_ZL11MX_ETH_Initv+0xa4>)
 800191e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <_ZL11MX_ETH_Initv+0x9c>)
 8001922:	4a15      	ldr	r2, [pc, #84]	; (8001978 <_ZL11MX_ETH_Initv+0xa8>)
 8001924:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <_ZL11MX_ETH_Initv+0x9c>)
 8001928:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800192c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800192e:	480f      	ldr	r0, [pc, #60]	; (800196c <_ZL11MX_ETH_Initv+0x9c>)
 8001930:	f002 fa24 	bl	8003d7c <HAL_ETH_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	bf14      	ite	ne
 800193a:	2301      	movne	r3, #1
 800193c:	2300      	moveq	r3, #0
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <_ZL11MX_ETH_Initv+0x78>
  {
    Error_Handler();
 8001944:	f000 fbcc 	bl	80020e0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001948:	2234      	movs	r2, #52	; 0x34
 800194a:	2100      	movs	r1, #0
 800194c:	480b      	ldr	r0, [pc, #44]	; (800197c <_ZL11MX_ETH_Initv+0xac>)
 800194e:	f008 f898 	bl	8009a82 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <_ZL11MX_ETH_Initv+0xac>)
 8001954:	2221      	movs	r2, #33	; 0x21
 8001956:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <_ZL11MX_ETH_Initv+0xac>)
 800195a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800195e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <_ZL11MX_ETH_Initv+0xac>)
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	24000ac8 	.word	0x24000ac8
 8001970:	40028000 	.word	0x40028000
 8001974:	240000d8 	.word	0x240000d8
 8001978:	24000078 	.word	0x24000078
 800197c:	24000a94 	.word	0x24000a94

08001980 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b09a      	sub	sp, #104	; 0x68
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001986:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001994:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
 80019b0:	615a      	str	r2, [r3, #20]
 80019b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	222c      	movs	r2, #44	; 0x2c
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f008 f861 	bl	8009a82 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019c0:	4b5b      	ldr	r3, [pc, #364]	; (8001b30 <_ZL12MX_TIM1_Initv+0x1b0>)
 80019c2:	4a5c      	ldr	r2, [pc, #368]	; (8001b34 <_ZL12MX_TIM1_Initv+0x1b4>)
 80019c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019c6:	4b5a      	ldr	r3, [pc, #360]	; (8001b30 <_ZL12MX_TIM1_Initv+0x1b0>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019cc:	4b58      	ldr	r3, [pc, #352]	; (8001b30 <_ZL12MX_TIM1_Initv+0x1b0>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019d2:	4b57      	ldr	r3, [pc, #348]	; (8001b30 <_ZL12MX_TIM1_Initv+0x1b0>)
 80019d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019da:	4b55      	ldr	r3, [pc, #340]	; (8001b30 <_ZL12MX_TIM1_Initv+0x1b0>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019e0:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <_ZL12MX_TIM1_Initv+0x1b0>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e6:	4b52      	ldr	r3, [pc, #328]	; (8001b30 <_ZL12MX_TIM1_Initv+0x1b0>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019ec:	4850      	ldr	r0, [pc, #320]	; (8001b30 <_ZL12MX_TIM1_Initv+0x1b0>)
 80019ee:	f005 fbcb 	bl	8007188 <HAL_TIM_Base_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	bf14      	ite	ne
 80019f8:	2301      	movne	r3, #1
 80019fa:	2300      	moveq	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <_ZL12MX_TIM1_Initv+0x86>
  {
    Error_Handler();
 8001a02:	f000 fb6d 	bl	80020e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a0c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a10:	4619      	mov	r1, r3
 8001a12:	4847      	ldr	r0, [pc, #284]	; (8001b30 <_ZL12MX_TIM1_Initv+0x1b0>)
 8001a14:	f005 fd80 	bl	8007518 <HAL_TIM_ConfigClockSource>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	bf14      	ite	ne
 8001a1e:	2301      	movne	r3, #1
 8001a20:	2300      	moveq	r3, #0
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 8001a28:	f000 fb5a 	bl	80020e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a2c:	4840      	ldr	r0, [pc, #256]	; (8001b30 <_ZL12MX_TIM1_Initv+0x1b0>)
 8001a2e:	f005 fc02 	bl	8007236 <HAL_TIM_PWM_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	bf14      	ite	ne
 8001a38:	2301      	movne	r3, #1
 8001a3a:	2300      	moveq	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 8001a42:	f000 fb4d 	bl	80020e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a52:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a56:	4619      	mov	r1, r3
 8001a58:	4835      	ldr	r0, [pc, #212]	; (8001b30 <_ZL12MX_TIM1_Initv+0x1b0>)
 8001a5a:	f006 fa33 	bl	8007ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	bf14      	ite	ne
 8001a64:	2301      	movne	r3, #1
 8001a66:	2300      	moveq	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <_ZL12MX_TIM1_Initv+0xf2>
  {
    Error_Handler();
 8001a6e:	f000 fb37 	bl	80020e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a72:	2360      	movs	r3, #96	; 0x60
 8001a74:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a92:	2204      	movs	r2, #4
 8001a94:	4619      	mov	r1, r3
 8001a96:	4826      	ldr	r0, [pc, #152]	; (8001b30 <_ZL12MX_TIM1_Initv+0x1b0>)
 8001a98:	f005 fc2e 	bl	80072f8 <HAL_TIM_PWM_ConfigChannel>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	bf14      	ite	ne
 8001aa2:	2301      	movne	r3, #1
 8001aa4:	2300      	moveq	r3, #0
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <_ZL12MX_TIM1_Initv+0x130>
  {
    Error_Handler();
 8001aac:	f000 fb18 	bl	80020e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ab0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ab4:	2208      	movs	r2, #8
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	481d      	ldr	r0, [pc, #116]	; (8001b30 <_ZL12MX_TIM1_Initv+0x1b0>)
 8001aba:	f005 fc1d 	bl	80072f8 <HAL_TIM_PWM_ConfigChannel>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	bf14      	ite	ne
 8001ac4:	2301      	movne	r3, #1
 8001ac6:	2300      	moveq	r3, #0
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <_ZL12MX_TIM1_Initv+0x152>
  {
    Error_Handler();
 8001ace:	f000 fb07 	bl	80020e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ae6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001af4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	4619      	mov	r1, r3
 8001b06:	480a      	ldr	r0, [pc, #40]	; (8001b30 <_ZL12MX_TIM1_Initv+0x1b0>)
 8001b08:	f006 fa64 	bl	8007fd4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	bf14      	ite	ne
 8001b12:	2301      	movne	r3, #1
 8001b14:	2300      	moveq	r3, #0
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <_ZL12MX_TIM1_Initv+0x1a0>
  {
    Error_Handler();
 8001b1c:	f000 fae0 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b20:	4803      	ldr	r0, [pc, #12]	; (8001b30 <_ZL12MX_TIM1_Initv+0x1b0>)
 8001b22:	f001 f8a9 	bl	8002c78 <HAL_TIM_MspPostInit>

}
 8001b26:	bf00      	nop
 8001b28:	3768      	adds	r7, #104	; 0x68
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	24000b38 	.word	0x24000b38
 8001b34:	40010000 	.word	0x40010000

08001b38 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08e      	sub	sp, #56	; 0x38
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b4c:	f107 031c 	add.w	r3, r7, #28
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b58:	463b      	mov	r3, r7
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	60da      	str	r2, [r3, #12]
 8001b64:	611a      	str	r2, [r3, #16]
 8001b66:	615a      	str	r2, [r3, #20]
 8001b68:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b6a:	4b39      	ldr	r3, [pc, #228]	; (8001c50 <_ZL12MX_TIM3_Initv+0x118>)
 8001b6c:	4a39      	ldr	r2, [pc, #228]	; (8001c54 <_ZL12MX_TIM3_Initv+0x11c>)
 8001b6e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b70:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <_ZL12MX_TIM3_Initv+0x118>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b76:	4b36      	ldr	r3, [pc, #216]	; (8001c50 <_ZL12MX_TIM3_Initv+0x118>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b7c:	4b34      	ldr	r3, [pc, #208]	; (8001c50 <_ZL12MX_TIM3_Initv+0x118>)
 8001b7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b84:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <_ZL12MX_TIM3_Initv+0x118>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b8a:	4b31      	ldr	r3, [pc, #196]	; (8001c50 <_ZL12MX_TIM3_Initv+0x118>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b90:	482f      	ldr	r0, [pc, #188]	; (8001c50 <_ZL12MX_TIM3_Initv+0x118>)
 8001b92:	f005 faf9 	bl	8007188 <HAL_TIM_Base_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	bf14      	ite	ne
 8001b9c:	2301      	movne	r3, #1
 8001b9e:	2300      	moveq	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 8001ba6:	f000 fa9b 	bl	80020e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001baa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4826      	ldr	r0, [pc, #152]	; (8001c50 <_ZL12MX_TIM3_Initv+0x118>)
 8001bb8:	f005 fcae 	bl	8007518 <HAL_TIM_ConfigClockSource>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	bf14      	ite	ne
 8001bc2:	2301      	movne	r3, #1
 8001bc4:	2300      	moveq	r3, #0
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 8001bcc:	f000 fa88 	bl	80020e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bd0:	481f      	ldr	r0, [pc, #124]	; (8001c50 <_ZL12MX_TIM3_Initv+0x118>)
 8001bd2:	f005 fb30 	bl	8007236 <HAL_TIM_PWM_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	bf14      	ite	ne
 8001bdc:	2301      	movne	r3, #1
 8001bde:	2300      	moveq	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 8001be6:	f000 fa7b 	bl	80020e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bf2:	f107 031c 	add.w	r3, r7, #28
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4815      	ldr	r0, [pc, #84]	; (8001c50 <_ZL12MX_TIM3_Initv+0x118>)
 8001bfa:	f006 f963 	bl	8007ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	bf14      	ite	ne
 8001c04:	2301      	movne	r3, #1
 8001c06:	2300      	moveq	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8001c0e:	f000 fa67 	bl	80020e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c12:	2360      	movs	r3, #96	; 0x60
 8001c14:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c22:	463b      	mov	r3, r7
 8001c24:	2204      	movs	r2, #4
 8001c26:	4619      	mov	r1, r3
 8001c28:	4809      	ldr	r0, [pc, #36]	; (8001c50 <_ZL12MX_TIM3_Initv+0x118>)
 8001c2a:	f005 fb65 	bl	80072f8 <HAL_TIM_PWM_ConfigChannel>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	bf14      	ite	ne
 8001c34:	2301      	movne	r3, #1
 8001c36:	2300      	moveq	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <_ZL12MX_TIM3_Initv+0x10a>
  {
    Error_Handler();
 8001c3e:	f000 fa4f 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c42:	4803      	ldr	r0, [pc, #12]	; (8001c50 <_ZL12MX_TIM3_Initv+0x118>)
 8001c44:	f001 f818 	bl	8002c78 <HAL_TIM_MspPostInit>

}
 8001c48:	bf00      	nop
 8001c4a:	3738      	adds	r7, #56	; 0x38
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	24000b84 	.word	0x24000b84
 8001c54:	40000400 	.word	0x40000400

08001c58 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08e      	sub	sp, #56	; 0x38
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c78:	463b      	mov	r3, r7
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
 8001c84:	611a      	str	r2, [r3, #16]
 8001c86:	615a      	str	r2, [r3, #20]
 8001c88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c8a:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <_ZL12MX_TIM4_Initv+0x138>)
 8001c8c:	4a41      	ldr	r2, [pc, #260]	; (8001d94 <_ZL12MX_TIM4_Initv+0x13c>)
 8001c8e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c90:	4b3f      	ldr	r3, [pc, #252]	; (8001d90 <_ZL12MX_TIM4_Initv+0x138>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c96:	4b3e      	ldr	r3, [pc, #248]	; (8001d90 <_ZL12MX_TIM4_Initv+0x138>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c9c:	4b3c      	ldr	r3, [pc, #240]	; (8001d90 <_ZL12MX_TIM4_Initv+0x138>)
 8001c9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ca2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca4:	4b3a      	ldr	r3, [pc, #232]	; (8001d90 <_ZL12MX_TIM4_Initv+0x138>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001caa:	4b39      	ldr	r3, [pc, #228]	; (8001d90 <_ZL12MX_TIM4_Initv+0x138>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cb0:	4837      	ldr	r0, [pc, #220]	; (8001d90 <_ZL12MX_TIM4_Initv+0x138>)
 8001cb2:	f005 fa69 	bl	8007188 <HAL_TIM_Base_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	bf14      	ite	ne
 8001cbc:	2301      	movne	r3, #1
 8001cbe:	2300      	moveq	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <_ZL12MX_TIM4_Initv+0x72>
  {
    Error_Handler();
 8001cc6:	f000 fa0b 	bl	80020e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	482e      	ldr	r0, [pc, #184]	; (8001d90 <_ZL12MX_TIM4_Initv+0x138>)
 8001cd8:	f005 fc1e 	bl	8007518 <HAL_TIM_ConfigClockSource>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	bf14      	ite	ne
 8001ce2:	2301      	movne	r3, #1
 8001ce4:	2300      	moveq	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <_ZL12MX_TIM4_Initv+0x98>
  {
    Error_Handler();
 8001cec:	f000 f9f8 	bl	80020e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001cf0:	4827      	ldr	r0, [pc, #156]	; (8001d90 <_ZL12MX_TIM4_Initv+0x138>)
 8001cf2:	f005 faa0 	bl	8007236 <HAL_TIM_PWM_Init>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	bf14      	ite	ne
 8001cfc:	2301      	movne	r3, #1
 8001cfe:	2300      	moveq	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <_ZL12MX_TIM4_Initv+0xb2>
  {
    Error_Handler();
 8001d06:	f000 f9eb 	bl	80020e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d12:	f107 031c 	add.w	r3, r7, #28
 8001d16:	4619      	mov	r1, r3
 8001d18:	481d      	ldr	r0, [pc, #116]	; (8001d90 <_ZL12MX_TIM4_Initv+0x138>)
 8001d1a:	f006 f8d3 	bl	8007ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	bf14      	ite	ne
 8001d24:	2301      	movne	r3, #1
 8001d26:	2300      	moveq	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 8001d2e:	f000 f9d7 	bl	80020e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d32:	2360      	movs	r3, #96	; 0x60
 8001d34:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d42:	463b      	mov	r3, r7
 8001d44:	2204      	movs	r2, #4
 8001d46:	4619      	mov	r1, r3
 8001d48:	4811      	ldr	r0, [pc, #68]	; (8001d90 <_ZL12MX_TIM4_Initv+0x138>)
 8001d4a:	f005 fad5 	bl	80072f8 <HAL_TIM_PWM_ConfigChannel>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	bf14      	ite	ne
 8001d54:	2301      	movne	r3, #1
 8001d56:	2300      	moveq	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <_ZL12MX_TIM4_Initv+0x10a>
  {
    Error_Handler();
 8001d5e:	f000 f9bf 	bl	80020e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d62:	463b      	mov	r3, r7
 8001d64:	220c      	movs	r2, #12
 8001d66:	4619      	mov	r1, r3
 8001d68:	4809      	ldr	r0, [pc, #36]	; (8001d90 <_ZL12MX_TIM4_Initv+0x138>)
 8001d6a:	f005 fac5 	bl	80072f8 <HAL_TIM_PWM_ConfigChannel>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	bf14      	ite	ne
 8001d74:	2301      	movne	r3, #1
 8001d76:	2300      	moveq	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <_ZL12MX_TIM4_Initv+0x12a>
  {
    Error_Handler();
 8001d7e:	f000 f9af 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d82:	4803      	ldr	r0, [pc, #12]	; (8001d90 <_ZL12MX_TIM4_Initv+0x138>)
 8001d84:	f000 ff78 	bl	8002c78 <HAL_TIM_MspPostInit>

}
 8001d88:	bf00      	nop
 8001d8a:	3738      	adds	r7, #56	; 0x38
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	24000bd0 	.word	0x24000bd0
 8001d94:	40000800 	.word	0x40000800

08001d98 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d9c:	4b2c      	ldr	r3, [pc, #176]	; (8001e50 <_ZL13MX_UART4_Initv+0xb8>)
 8001d9e:	4a2d      	ldr	r2, [pc, #180]	; (8001e54 <_ZL13MX_UART4_Initv+0xbc>)
 8001da0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001da2:	4b2b      	ldr	r3, [pc, #172]	; (8001e50 <_ZL13MX_UART4_Initv+0xb8>)
 8001da4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001da8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001daa:	4b29      	ldr	r3, [pc, #164]	; (8001e50 <_ZL13MX_UART4_Initv+0xb8>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001db0:	4b27      	ldr	r3, [pc, #156]	; (8001e50 <_ZL13MX_UART4_Initv+0xb8>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001db6:	4b26      	ldr	r3, [pc, #152]	; (8001e50 <_ZL13MX_UART4_Initv+0xb8>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001dbc:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <_ZL13MX_UART4_Initv+0xb8>)
 8001dbe:	220c      	movs	r2, #12
 8001dc0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dc2:	4b23      	ldr	r3, [pc, #140]	; (8001e50 <_ZL13MX_UART4_Initv+0xb8>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc8:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <_ZL13MX_UART4_Initv+0xb8>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dce:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <_ZL13MX_UART4_Initv+0xb8>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <_ZL13MX_UART4_Initv+0xb8>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dda:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <_ZL13MX_UART4_Initv+0xb8>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001de0:	481b      	ldr	r0, [pc, #108]	; (8001e50 <_ZL13MX_UART4_Initv+0xb8>)
 8001de2:	f006 f975 	bl	80080d0 <HAL_UART_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bf14      	ite	ne
 8001dec:	2301      	movne	r3, #1
 8001dee:	2300      	moveq	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <_ZL13MX_UART4_Initv+0x62>
  {
    Error_Handler();
 8001df6:	f000 f973 	bl	80020e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4814      	ldr	r0, [pc, #80]	; (8001e50 <_ZL13MX_UART4_Initv+0xb8>)
 8001dfe:	f007 fa60 	bl	80092c2 <HAL_UARTEx_SetTxFifoThreshold>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf14      	ite	ne
 8001e08:	2301      	movne	r3, #1
 8001e0a:	2300      	moveq	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <_ZL13MX_UART4_Initv+0x7e>
  {
    Error_Handler();
 8001e12:	f000 f965 	bl	80020e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e16:	2100      	movs	r1, #0
 8001e18:	480d      	ldr	r0, [pc, #52]	; (8001e50 <_ZL13MX_UART4_Initv+0xb8>)
 8001e1a:	f007 fa90 	bl	800933e <HAL_UARTEx_SetRxFifoThreshold>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	bf14      	ite	ne
 8001e24:	2301      	movne	r3, #1
 8001e26:	2300      	moveq	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <_ZL13MX_UART4_Initv+0x9a>
  {
    Error_Handler();
 8001e2e:	f000 f957 	bl	80020e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001e32:	4807      	ldr	r0, [pc, #28]	; (8001e50 <_ZL13MX_UART4_Initv+0xb8>)
 8001e34:	f007 fa0c 	bl	8009250 <HAL_UARTEx_DisableFifoMode>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	bf14      	ite	ne
 8001e3e:	2301      	movne	r3, #1
 8001e40:	2300      	moveq	r3, #0
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <_ZL13MX_UART4_Initv+0xb4>
  {
    Error_Handler();
 8001e48:	f000 f94a 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	24000c1c 	.word	0x24000c1c
 8001e54:	40004c00 	.word	0x40004c00

08001e58 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001e5c:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001e5e:	4a18      	ldr	r2, [pc, #96]	; (8001ec0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 8001e60:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001e62:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001e64:	2209      	movs	r2, #9
 8001e66:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001e68:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001e6e:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001e74:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001e76:	2202      	movs	r2, #2
 8001e78:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001e7a:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001e80:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001e86:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001e92:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001e98:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001e9e:	4807      	ldr	r0, [pc, #28]	; (8001ebc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001ea0:	f002 fd4b 	bl	800493a <HAL_PCD_Init>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	bf14      	ite	ne
 8001eaa:	2301      	movne	r3, #1
 8001eac:	2300      	moveq	r3, #0
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
  {
    Error_Handler();
 8001eb4:	f000 f914 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	24000ca8 	.word	0x24000ca8
 8001ec0:	40080000 	.word	0x40080000

08001ec4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08c      	sub	sp, #48	; 0x30
 8001ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
 8001ed8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eda:	4b79      	ldr	r3, [pc, #484]	; (80020c0 <_ZL12MX_GPIO_Initv+0x1fc>)
 8001edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee0:	4a77      	ldr	r2, [pc, #476]	; (80020c0 <_ZL12MX_GPIO_Initv+0x1fc>)
 8001ee2:	f043 0310 	orr.w	r3, r3, #16
 8001ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eea:	4b75      	ldr	r3, [pc, #468]	; (80020c0 <_ZL12MX_GPIO_Initv+0x1fc>)
 8001eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef0:	f003 0310 	and.w	r3, r3, #16
 8001ef4:	61bb      	str	r3, [r7, #24]
 8001ef6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef8:	4b71      	ldr	r3, [pc, #452]	; (80020c0 <_ZL12MX_GPIO_Initv+0x1fc>)
 8001efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001efe:	4a70      	ldr	r2, [pc, #448]	; (80020c0 <_ZL12MX_GPIO_Initv+0x1fc>)
 8001f00:	f043 0304 	orr.w	r3, r3, #4
 8001f04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f08:	4b6d      	ldr	r3, [pc, #436]	; (80020c0 <_ZL12MX_GPIO_Initv+0x1fc>)
 8001f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f16:	4b6a      	ldr	r3, [pc, #424]	; (80020c0 <_ZL12MX_GPIO_Initv+0x1fc>)
 8001f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f1c:	4a68      	ldr	r2, [pc, #416]	; (80020c0 <_ZL12MX_GPIO_Initv+0x1fc>)
 8001f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f26:	4b66      	ldr	r3, [pc, #408]	; (80020c0 <_ZL12MX_GPIO_Initv+0x1fc>)
 8001f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f34:	4b62      	ldr	r3, [pc, #392]	; (80020c0 <_ZL12MX_GPIO_Initv+0x1fc>)
 8001f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f3a:	4a61      	ldr	r2, [pc, #388]	; (80020c0 <_ZL12MX_GPIO_Initv+0x1fc>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f44:	4b5e      	ldr	r3, [pc, #376]	; (80020c0 <_ZL12MX_GPIO_Initv+0x1fc>)
 8001f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f52:	4b5b      	ldr	r3, [pc, #364]	; (80020c0 <_ZL12MX_GPIO_Initv+0x1fc>)
 8001f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f58:	4a59      	ldr	r2, [pc, #356]	; (80020c0 <_ZL12MX_GPIO_Initv+0x1fc>)
 8001f5a:	f043 0302 	orr.w	r3, r3, #2
 8001f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f62:	4b57      	ldr	r3, [pc, #348]	; (80020c0 <_ZL12MX_GPIO_Initv+0x1fc>)
 8001f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f70:	4b53      	ldr	r3, [pc, #332]	; (80020c0 <_ZL12MX_GPIO_Initv+0x1fc>)
 8001f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f76:	4a52      	ldr	r2, [pc, #328]	; (80020c0 <_ZL12MX_GPIO_Initv+0x1fc>)
 8001f78:	f043 0308 	orr.w	r3, r3, #8
 8001f7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f80:	4b4f      	ldr	r3, [pc, #316]	; (80020c0 <_ZL12MX_GPIO_Initv+0x1fc>)
 8001f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	607b      	str	r3, [r7, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f8e:	4b4c      	ldr	r3, [pc, #304]	; (80020c0 <_ZL12MX_GPIO_Initv+0x1fc>)
 8001f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f94:	4a4a      	ldr	r2, [pc, #296]	; (80020c0 <_ZL12MX_GPIO_Initv+0x1fc>)
 8001f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f9e:	4b48      	ldr	r3, [pc, #288]	; (80020c0 <_ZL12MX_GPIO_Initv+0x1fc>)
 8001fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa8:	603b      	str	r3, [r7, #0]
 8001faa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_5_GPIO_Port, DIR_5_Pin, GPIO_PIN_RESET);
 8001fac:	2200      	movs	r2, #0
 8001fae:	2140      	movs	r1, #64	; 0x40
 8001fb0:	4844      	ldr	r0, [pc, #272]	; (80020c4 <_ZL12MX_GPIO_Initv+0x200>)
 8001fb2:	f002 fca9 	bl	8004908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|DIR_1_Pin, GPIO_PIN_RESET);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f244 0141 	movw	r1, #16449	; 0x4041
 8001fbc:	4842      	ldr	r0, [pc, #264]	; (80020c8 <_ZL12MX_GPIO_Initv+0x204>)
 8001fbe:	f002 fca3 	bl	8004908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_3_Pin|DIR_2_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f244 2102 	movw	r1, #16898	; 0x4202
 8001fc8:	4840      	ldr	r0, [pc, #256]	; (80020cc <_ZL12MX_GPIO_Initv+0x208>)
 8001fca:	f002 fc9d 	bl	8004908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|DIR_4_Pin, GPIO_PIN_RESET);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 8001fd4:	483e      	ldr	r0, [pc, #248]	; (80020d0 <_ZL12MX_GPIO_Initv+0x20c>)
 8001fd6:	f002 fc97 	bl	8004908 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LM4_Pin LM3_Pin LM5_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin|LM5_Pin;
 8001fda:	f249 0340 	movw	r3, #36928	; 0x9040
 8001fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	4619      	mov	r1, r3
 8001fee:	4837      	ldr	r0, [pc, #220]	; (80020cc <_ZL12MX_GPIO_Initv+0x208>)
 8001ff0:	f002 fada 	bl	80045a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002002:	f107 031c 	add.w	r3, r7, #28
 8002006:	4619      	mov	r1, r3
 8002008:	4832      	ldr	r0, [pc, #200]	; (80020d4 <_ZL12MX_GPIO_Initv+0x210>)
 800200a:	f002 facd 	bl	80045a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_5_Pin */
  GPIO_InitStruct.Pin = DIR_5_Pin;
 800200e:	2340      	movs	r3, #64	; 0x40
 8002010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002012:	2301      	movs	r3, #1
 8002014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201a:	2300      	movs	r3, #0
 800201c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DIR_5_GPIO_Port, &GPIO_InitStruct);
 800201e:	f107 031c 	add.w	r3, r7, #28
 8002022:	4619      	mov	r1, r3
 8002024:	4827      	ldr	r0, [pc, #156]	; (80020c4 <_ZL12MX_GPIO_Initv+0x200>)
 8002026:	f002 fabf 	bl	80045a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin DIR_1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|DIR_1_Pin;
 800202a:	f244 0341 	movw	r3, #16449	; 0x4041
 800202e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002030:	2301      	movs	r3, #1
 8002032:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002038:	2300      	movs	r3, #0
 800203a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203c:	f107 031c 	add.w	r3, r7, #28
 8002040:	4619      	mov	r1, r3
 8002042:	4821      	ldr	r0, [pc, #132]	; (80020c8 <_ZL12MX_GPIO_Initv+0x204>)
 8002044:	f002 fab0 	bl	80045a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_3_Pin DIR_2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_3_Pin|DIR_2_Pin|LD2_Pin;
 8002048:	f244 2302 	movw	r3, #16898	; 0x4202
 800204c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800204e:	2301      	movs	r3, #1
 8002050:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002056:	2300      	movs	r3, #0
 8002058:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800205a:	f107 031c 	add.w	r3, r7, #28
 800205e:	4619      	mov	r1, r3
 8002060:	481a      	ldr	r0, [pc, #104]	; (80020cc <_ZL12MX_GPIO_Initv+0x208>)
 8002062:	f002 faa1 	bl	80045a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM1_Pin LM2_Pin */
  GPIO_InitStruct.Pin = LM1_Pin|LM2_Pin;
 8002066:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800206a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800206c:	2300      	movs	r3, #0
 800206e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002074:	f107 031c 	add.w	r3, r7, #28
 8002078:	4619      	mov	r1, r3
 800207a:	4813      	ldr	r0, [pc, #76]	; (80020c8 <_ZL12MX_GPIO_Initv+0x204>)
 800207c:	f002 fa94 	bl	80045a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin DIR_4_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|DIR_4_Pin;
 8002080:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8002084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002086:	2301      	movs	r3, #1
 8002088:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208e:	2300      	movs	r3, #0
 8002090:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002092:	f107 031c 	add.w	r3, r7, #28
 8002096:	4619      	mov	r1, r3
 8002098:	480d      	ldr	r0, [pc, #52]	; (80020d0 <_ZL12MX_GPIO_Initv+0x20c>)
 800209a:	f002 fa85 	bl	80045a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800209e:	2380      	movs	r3, #128	; 0x80
 80020a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020a2:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <_ZL12MX_GPIO_Initv+0x214>)
 80020a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80020aa:	f107 031c 	add.w	r3, r7, #28
 80020ae:	4619      	mov	r1, r3
 80020b0:	480a      	ldr	r0, [pc, #40]	; (80020dc <_ZL12MX_GPIO_Initv+0x218>)
 80020b2:	f002 fa79 	bl	80045a8 <HAL_GPIO_Init>

}
 80020b6:	bf00      	nop
 80020b8:	3730      	adds	r7, #48	; 0x30
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	58024400 	.word	0x58024400
 80020c4:	58020000 	.word	0x58020000
 80020c8:	58020400 	.word	0x58020400
 80020cc:	58021000 	.word	0x58021000
 80020d0:	58020c00 	.word	0x58020c00
 80020d4:	58020800 	.word	0x58020800
 80020d8:	11110000 	.word	0x11110000
 80020dc:	58021800 	.word	0x58021800

080020e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020e4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020e6:	e7fe      	b.n	80020e6 <Error_Handler+0x6>

080020e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d80d      	bhi.n	8002118 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	fa22 f103 	lsr.w	r1, r2, r3
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4413      	add	r3, r2
 800210c:	b2ca      	uxtb	r2, r1
 800210e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	3301      	adds	r3, #1
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	e7ee      	b.n	80020f6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002118:	bf00      	nop
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2b03      	cmp	r3, #3
 800213c:	d811      	bhi.n	8002162 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6839      	ldr	r1, [r7, #0]
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	440a      	add	r2, r1
 8002148:	7812      	ldrb	r2, [r2, #0]
 800214a:	4611      	mov	r1, r2
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	00d2      	lsls	r2, r2, #3
 8002150:	fa01 f202 	lsl.w	r2, r1, r2
 8002154:	431a      	orrs	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	3301      	adds	r3, #1
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	e7ea      	b.n	8002138 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002162:	bf00      	nop
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d107      	bne.n	8002190 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002186:	4293      	cmp	r3, r2
 8002188:	d102      	bne.n	8002190 <_Z41__static_initialization_and_destruction_0ii+0x20>
ros::NodeHandle nh;
 800218a:	4803      	ldr	r0, [pc, #12]	; (8002198 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800218c:	f7ff fa3e 	bl	800160c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	24000158 	.word	0x24000158

0800219c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
      }
    }
    configured_ = true;
  }

  virtual int publish(int id, const Msg * msg) override
 800219c:	b580      	push	{r7, lr}
 800219e:	b088      	sub	sp, #32
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2b63      	cmp	r3, #99	; 0x63
 80021ac:	dd09      	ble.n	80021c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80021b4:	f083 0301 	eor.w	r3, r3, #1
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	e077      	b.n	80022b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80021ce:	3207      	adds	r2, #7
 80021d0:	4611      	mov	r1, r2
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	4798      	blx	r3
 80021d6:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	22ff      	movs	r2, #255	; 0xff
 80021dc:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	22fe      	movs	r2, #254	; 0xfe
 80021e4:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	121b      	asrs	r3, r3, #8
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 800220c:	4413      	add	r3, r2
 800220e:	b2db      	uxtb	r3, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	b2da      	uxtb	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	b2da      	uxtb	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	b21b      	sxth	r3, r3
 8002228:	121b      	asrs	r3, r3, #8
 800222a:	b2da      	uxtb	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002236:	2305      	movs	r3, #5
 8002238:	61bb      	str	r3, [r7, #24]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	3307      	adds	r3, #7
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	429a      	cmp	r2, r3
 8002242:	da0d      	bge.n	8002260 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	4413      	add	r3, r2
 800224a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	4413      	add	r3, r2
 8002256:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	3301      	adds	r3, #1
 800225c:	61bb      	str	r3, [r7, #24]
 800225e:	e7ec      	b.n	800223a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	3307      	adds	r3, #7
 8002264:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	425a      	negs	r2, r3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	bf58      	it	pl
 8002270:	4253      	negpl	r3, r2
 8002272:	b2da      	uxtb	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	1c59      	adds	r1, r3, #1
 8002278:	6179      	str	r1, [r7, #20]
 800227a:	43d2      	mvns	r2, r2
 800227c:	b2d1      	uxtb	r1, r2
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4413      	add	r3, r2
 8002282:	460a      	mov	r2, r1
 8002284:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800228e:	dc0a      	bgt.n	80022a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1d18      	adds	r0, r3, #4
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	4619      	mov	r1, r3
 800229e:	f7ff f953 	bl	8001548 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	e005      	b.n	80022b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80022a6:	4905      	ldr	r1, [pc, #20]	; (80022bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 f9f2 	bl	8002692 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80022ae:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 80022b2:	4618      	mov	r0, r3
 80022b4:	3720      	adds	r7, #32
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	08009de8 	.word	0x08009de8

080022c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3304      	adds	r3, #4
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff f981 	bl	80015d4 <_ZN13STM32Hardware4timeEv>
 80022d2:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d903      	bls.n	80022ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d009      	beq.n	800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	429a      	cmp	r2, r3
 8002302:	d903      	bls.n	800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002312:	2b00      	cmp	r3, #0
 8002314:	d014      	beq.n	8002340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3304      	adds	r3, #4
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff f95a 	bl	80015d4 <_ZN13STM32Hardware4timeEv>
 8002320:	4602      	mov	r2, r0
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1ad2      	subs	r2, r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800232c:	429a      	cmp	r2, r3
 800232e:	bf8c      	ite	hi
 8002330:	2301      	movhi	r3, #1
 8002332:	2300      	movls	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800233a:	f06f 0301 	mvn.w	r3, #1
 800233e:	e197      	b.n	8002670 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      int data = hardware_.read();
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3304      	adds	r3, #4
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff f875 	bl	8001434 <_ZN13STM32Hardware4readEv>
 800234a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	f2c0 8177 	blt.w	8002642 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
      checksum_ += data;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	441a      	add	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800236a:	2b07      	cmp	r3, #7
 800236c:	d11e      	bne.n	80023ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8002374:	1c59      	adds	r1, r3, #1
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	b2d1      	uxtb	r1, r2
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	4413      	add	r3, r2
 8002384:	460a      	mov	r2, r1
 8002386:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002390:	1e5a      	subs	r2, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1b4      	bne.n	800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2208      	movs	r2, #8
 80023a6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80023aa:	e7af      	b.n	800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d128      	bne.n	8002408 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2bff      	cmp	r3, #255	; 0xff
 80023ba:	d10d      	bne.n	80023d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f103 0214 	add.w	r2, r3, #20
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80023d6:	e799      	b.n	800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3304      	adds	r3, #4
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff f8f9 	bl	80015d4 <_ZN13STM32Hardware4timeEv>
 80023e2:	4602      	mov	r2, r0
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ec:	4293      	cmp	r3, r2
 80023ee:	bf8c      	ite	hi
 80023f0:	2301      	movhi	r3, #1
 80023f2:	2300      	movls	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d088      	beq.n	800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8002402:	f06f 0301 	mvn.w	r3, #1
 8002406:	e133      	b.n	8002670 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800240e:	2b01      	cmp	r3, #1
 8002410:	d11b      	bne.n	800244a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
        if (data == PROTOCOL_VER)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2bfe      	cmp	r3, #254	; 0xfe
 8002416:	d107      	bne.n	8002428 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002426:	e771      	b.n	800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002436:	f083 0301 	eor.w	r3, r3, #1
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	f43f af65 	beq.w	800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f933 	bl	80026ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8002448:	e760      	b.n	800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002450:	2b02      	cmp	r3, #2
 8002452:	d113      	bne.n	800247c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
        bytes_ = data;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800247a:	e747      	b.n	800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002482:	2b03      	cmp	r3, #3
 8002484:	d110      	bne.n	80024a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        bytes_ += data << 8;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	021b      	lsls	r3, r3, #8
 8002490:	441a      	add	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80024a6:	e731      	b.n	800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d116      	bne.n	80024e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        if ((checksum_ % 256) == 255)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80024b8:	425a      	negs	r2, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	bf58      	it	pl
 80024c0:	4253      	negpl	r3, r2
 80024c2:	2bff      	cmp	r3, #255	; 0xff
 80024c4:	d107      	bne.n	80024d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80024d4:	e71a      	b.n	800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80024de:	e715      	b.n	800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80024e6:	2b05      	cmp	r3, #5
 80024e8:	d10f      	bne.n	800250a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
        topic_ = data;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002508:	e700      	b.n	800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002510:	2b06      	cmp	r3, #6
 8002512:	d117      	bne.n	8002544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
        topic_ += data << 8;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	021b      	lsls	r3, r3, #8
 800251e:	441a      	add	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2207      	movs	r2, #7
 800252a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002534:	2b00      	cmp	r3, #0
 8002536:	f47f aee9 	bne.w	800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2208      	movs	r2, #8
 800253e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002542:	e6e3      	b.n	800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800254a:	2b08      	cmp	r3, #8
 800254c:	f47f aede 	bne.w	800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800255e:	425a      	negs	r2, r3
 8002560:	b2db      	uxtb	r3, r3
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	bf58      	it	pl
 8002566:	4253      	negpl	r3, r2
 8002568:	2bff      	cmp	r3, #255	; 0xff
 800256a:	f47f aecf 	bne.w	800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d110      	bne.n	800259a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
            requestSyncTime();
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f898 	bl	80026ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f8b3 	bl	80026ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8002594:	f04f 33ff 	mov.w	r3, #4294967295
 8002598:	e06a      	b.n	8002670 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          else if (topic_ == TopicInfo::ID_TIME)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80025a0:	2b0a      	cmp	r3, #10
 80025a2:	d107      	bne.n	80025b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
            syncTime(message_in);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80025aa:	4619      	mov	r1, r3
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f97b 	bl	80028a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80025b2:	e6ab      	b.n	800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80025ba:	2b06      	cmp	r3, #6
 80025bc:	d10e      	bne.n	80025dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
            req_param_resp.deserialize(message_in);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80025ca:	4619      	mov	r1, r3
 80025cc:	4610      	mov	r0, r2
 80025ce:	f7fe fcd0 	bl	8000f72 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80025da:	e697      	b.n	800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80025e2:	2b0b      	cmp	r3, #11
 80025e4:	d104      	bne.n	80025f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
            configured_ = false;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80025ee:	e68d      	b.n	800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80025f6:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002604:	2b00      	cmp	r3, #0
 8002606:	f43f ae81 	beq.w	800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002610:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f202 2222 	addw	r2, r2, #546	; 0x222
 800261a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002624:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800262e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	f202 4224 	addw	r2, r2, #1060	; 0x424
 800263c:	4611      	mov	r1, r2
 800263e:	4798      	blx	r3
    while (true)
 8002640:	e664      	b.n	800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8002642:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00f      	beq.n	800266e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800265c:	4293      	cmp	r3, r2
 800265e:	d906      	bls.n	800266e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
      requestSyncTime();
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f824 	bl	80026ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 800266e:	2300      	movs	r3, #0
  }
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
    return configured_;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8002686:	4618      	mov	r0, r3
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	2103      	movs	r1, #3
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f94d 	bl	8002940 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b086      	sub	sp, #24
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80026b6:	f107 030c 	add.w	r3, r7, #12
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fd ffb6 	bl	800062c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f107 020c 	add.w	r2, r7, #12
 80026ca:	210a      	movs	r1, #10
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	4798      	blx	r3
    rt_time = hardware_.time();
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3304      	adds	r3, #4
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fe ff7d 	bl	80015d4 <_ZN13STM32Hardware4timeEv>
 80026da:	4602      	mov	r2, r0
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80026e2:	bf00      	nop
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
  void negotiateTopics()
 80026ea:	b590      	push	{r4, r7, lr}
 80026ec:	b08b      	sub	sp, #44	; 0x2c
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 80026f2:	f107 030c 	add.w	r3, r7, #12
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe f888 	bl	800080c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80026fc:	2300      	movs	r3, #0
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	2b18      	cmp	r3, #24
 8002704:	dc63      	bgt.n	80027ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
      if (publishers[i] != 0) // non-empty slot
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d056      	beq.n	80027c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
        ti.topic_id = publishers[i]->id_;
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	b29b      	uxth	r3, r3
 800272a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	6859      	ldr	r1, [r3, #4]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	3308      	adds	r3, #8
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4608      	mov	r0, r1
 8002766:	4798      	blx	r3
 8002768:	4603      	mov	r3, r0
 800276a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	6859      	ldr	r1, [r3, #4]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	330c      	adds	r3, #12
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4608      	mov	r0, r1
 8002794:	4798      	blx	r3
 8002796:	4603      	mov	r3, r0
 8002798:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800279a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800279e:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681c      	ldr	r4, [r3, #0]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fe fd69 	bl	800128c <_ZN3ros9Publisher15getEndpointTypeEv>
 80027ba:	4601      	mov	r1, r0
 80027bc:	f107 030c 	add.w	r3, r7, #12
 80027c0:	461a      	mov	r2, r3
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	3301      	adds	r3, #1
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
 80027cc:	e798      	b.n	8002700 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80027ce:	2300      	movs	r3, #0
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	2b18      	cmp	r3, #24
 80027d6:	dc5f      	bgt.n	8002898 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
      if (subscribers[i] != 0) // non-empty slot
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027dc:	f202 2222 	addw	r2, r2, #546	; 0x222
 80027e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d053      	beq.n	8002890 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
        ti.topic_id = subscribers[i]->id_;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ec:	f202 2222 	addw	r2, r2, #546	; 0x222
 80027f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fe:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002812:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800281e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	3308      	adds	r3, #8
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4608      	mov	r0, r1
 800282a:	4798      	blx	r3
 800282c:	4603      	mov	r3, r0
 800282e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002834:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002838:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002840:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	330c      	adds	r3, #12
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4608      	mov	r0, r1
 8002850:	4798      	blx	r3
 8002852:	4603      	mov	r3, r0
 8002854:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8002856:	f44f 7300 	mov.w	r3, #512	; 0x200
 800285a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681c      	ldr	r4, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002866:	f202 2222 	addw	r2, r2, #546	; 0x222
 800286a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002872:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	3304      	adds	r3, #4
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4608      	mov	r0, r1
 8002882:	4798      	blx	r3
 8002884:	4601      	mov	r1, r0
 8002886:	f107 030c 	add.w	r3, r7, #12
 800288a:	461a      	mov	r2, r3
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	3301      	adds	r3, #1
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
 8002896:	e79c      	b.n	80027d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
    configured_ = true;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80028a0:	bf00      	nop
 80028a2:	372c      	adds	r7, #44	; 0x2c
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd90      	pop	{r4, r7, pc}

080028a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80028b2:	f107 0308 	add.w	r3, r7, #8
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fd feb8 	bl	800062c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3304      	adds	r3, #4
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fe fe87 	bl	80015d4 <_ZN13STM32Hardware4timeEv>
 80028c6:	4602      	mov	r2, r0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80028d2:	f107 0308 	add.w	r3, r7, #8
 80028d6:	6839      	ldr	r1, [r7, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fd ff17 	bl	800070c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	4915      	ldr	r1, [pc, #84]	; (8002938 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80028e4:	fba1 1303 	umull	r1, r3, r1, r3
 80028e8:	099b      	lsrs	r3, r3, #6
 80028ea:	4413      	add	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80028ee:	6939      	ldr	r1, [r7, #16]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80028f4:	fba3 0302 	umull	r0, r3, r3, r2
 80028f8:	099b      	lsrs	r3, r3, #6
 80028fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028fe:	fb00 f303 	mul.w	r3, r0, r3
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	4a0d      	ldr	r2, [pc, #52]	; (800293c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8002906:	fb02 f303 	mul.w	r3, r2, r3
 800290a:	440b      	add	r3, r1
 800290c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800290e:	f107 0308 	add.w	r3, r7, #8
 8002912:	3304      	adds	r3, #4
 8002914:	4619      	mov	r1, r3
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f82e 	bl	8002978 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3304      	adds	r3, #4
 8002920:	4618      	mov	r0, r3
 8002922:	f7fe fe57 	bl	80015d4 <_ZN13STM32Hardware4timeEv>
 8002926:	4602      	mov	r2, r0
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 800292e:	bf00      	nop
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	10624dd3 	.word	0x10624dd3
 800293c:	000f4240 	.word	0x000f4240

08002940 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	460b      	mov	r3, r1
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800294e:	f107 0314 	add.w	r3, r7, #20
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe f91e 	bl	8000b94 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002958:	7afb      	ldrb	r3, [r7, #11]
 800295a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f107 0214 	add.w	r2, r7, #20
 800296a:	2107      	movs	r1, #7
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	4798      	blx	r3
  }
 8002970:	bf00      	nop
 8002972:	3720      	adds	r7, #32
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3304      	adds	r3, #4
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe fe24 	bl	80015d4 <_ZN13STM32Hardware4timeEv>
 800298c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4915      	ldr	r1, [pc, #84]	; (80029ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8002996:	fba1 1303 	umull	r1, r3, r1, r3
 800299a:	099b      	lsrs	r3, r3, #6
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	1e5a      	subs	r2, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6859      	ldr	r1, [r3, #4]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4b0f      	ldr	r3, [pc, #60]	; (80029ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80029ae:	fba3 0302 	umull	r0, r3, r3, r2
 80029b2:	099b      	lsrs	r3, r3, #6
 80029b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029b8:	fb00 f303 	mul.w	r3, r0, r3
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	4a0c      	ldr	r2, [pc, #48]	; (80029f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 80029c0:	fb02 f303 	mul.w	r3, r2, r3
 80029c4:	1aca      	subs	r2, r1, r3
 80029c6:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 80029c8:	4413      	add	r3, r2
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80029dc:	4619      	mov	r1, r3
 80029de:	4610      	mov	r0, r2
 80029e0:	f000 fba8 	bl	8003134 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80029e4:	bf00      	nop
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	10624dd3 	.word	0x10624dd3
 80029f0:	000f4240 	.word	0x000f4240
 80029f4:	3b9aca00 	.word	0x3b9aca00

080029f8 <_GLOBAL__sub_I_nh>:
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002a00:	2001      	movs	r0, #1
 8002a02:	f7ff fbb5 	bl	8002170 <_Z41__static_initialization_and_destruction_0ii>
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0e:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <HAL_MspInit+0x30>)
 8002a10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a14:	4a08      	ldr	r2, [pc, #32]	; (8002a38 <HAL_MspInit+0x30>)
 8002a16:	f043 0302 	orr.w	r3, r3, #2
 8002a1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002a1e:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_MspInit+0x30>)
 8002a20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	58024400 	.word	0x58024400

08002a3c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08e      	sub	sp, #56	; 0x38
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a59      	ldr	r2, [pc, #356]	; (8002bc0 <HAL_ETH_MspInit+0x184>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	f040 80ab 	bne.w	8002bb6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002a60:	4b58      	ldr	r3, [pc, #352]	; (8002bc4 <HAL_ETH_MspInit+0x188>)
 8002a62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a66:	4a57      	ldr	r2, [pc, #348]	; (8002bc4 <HAL_ETH_MspInit+0x188>)
 8002a68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a6c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002a70:	4b54      	ldr	r3, [pc, #336]	; (8002bc4 <HAL_ETH_MspInit+0x188>)
 8002a72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a7a:	623b      	str	r3, [r7, #32]
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8002a7e:	4b51      	ldr	r3, [pc, #324]	; (8002bc4 <HAL_ETH_MspInit+0x188>)
 8002a80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a84:	4a4f      	ldr	r2, [pc, #316]	; (8002bc4 <HAL_ETH_MspInit+0x188>)
 8002a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a8a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002a8e:	4b4d      	ldr	r3, [pc, #308]	; (8002bc4 <HAL_ETH_MspInit+0x188>)
 8002a90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a98:	61fb      	str	r3, [r7, #28]
 8002a9a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002a9c:	4b49      	ldr	r3, [pc, #292]	; (8002bc4 <HAL_ETH_MspInit+0x188>)
 8002a9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002aa2:	4a48      	ldr	r2, [pc, #288]	; (8002bc4 <HAL_ETH_MspInit+0x188>)
 8002aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002aac:	4b45      	ldr	r3, [pc, #276]	; (8002bc4 <HAL_ETH_MspInit+0x188>)
 8002aae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab6:	61bb      	str	r3, [r7, #24]
 8002ab8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aba:	4b42      	ldr	r3, [pc, #264]	; (8002bc4 <HAL_ETH_MspInit+0x188>)
 8002abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ac0:	4a40      	ldr	r2, [pc, #256]	; (8002bc4 <HAL_ETH_MspInit+0x188>)
 8002ac2:	f043 0304 	orr.w	r3, r3, #4
 8002ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aca:	4b3e      	ldr	r3, [pc, #248]	; (8002bc4 <HAL_ETH_MspInit+0x188>)
 8002acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad8:	4b3a      	ldr	r3, [pc, #232]	; (8002bc4 <HAL_ETH_MspInit+0x188>)
 8002ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ade:	4a39      	ldr	r2, [pc, #228]	; (8002bc4 <HAL_ETH_MspInit+0x188>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ae8:	4b36      	ldr	r3, [pc, #216]	; (8002bc4 <HAL_ETH_MspInit+0x188>)
 8002aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af6:	4b33      	ldr	r3, [pc, #204]	; (8002bc4 <HAL_ETH_MspInit+0x188>)
 8002af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002afc:	4a31      	ldr	r2, [pc, #196]	; (8002bc4 <HAL_ETH_MspInit+0x188>)
 8002afe:	f043 0302 	orr.w	r3, r3, #2
 8002b02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b06:	4b2f      	ldr	r3, [pc, #188]	; (8002bc4 <HAL_ETH_MspInit+0x188>)
 8002b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b14:	4b2b      	ldr	r3, [pc, #172]	; (8002bc4 <HAL_ETH_MspInit+0x188>)
 8002b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b1a:	4a2a      	ldr	r2, [pc, #168]	; (8002bc4 <HAL_ETH_MspInit+0x188>)
 8002b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b24:	4b27      	ldr	r3, [pc, #156]	; (8002bc4 <HAL_ETH_MspInit+0x188>)
 8002b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002b32:	2332      	movs	r3, #50	; 0x32
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b36:	2302      	movs	r3, #2
 8002b38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b42:	230b      	movs	r3, #11
 8002b44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	481e      	ldr	r0, [pc, #120]	; (8002bc8 <HAL_ETH_MspInit+0x18c>)
 8002b4e:	f001 fd2b 	bl	80045a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002b52:	2386      	movs	r3, #134	; 0x86
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b56:	2302      	movs	r3, #2
 8002b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b62:	230b      	movs	r3, #11
 8002b64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4817      	ldr	r0, [pc, #92]	; (8002bcc <HAL_ETH_MspInit+0x190>)
 8002b6e:	f001 fd1b 	bl	80045a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002b72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b80:	2300      	movs	r3, #0
 8002b82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b84:	230b      	movs	r3, #11
 8002b86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4810      	ldr	r0, [pc, #64]	; (8002bd0 <HAL_ETH_MspInit+0x194>)
 8002b90:	f001 fd0a 	bl	80045a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002b94:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ba6:	230b      	movs	r3, #11
 8002ba8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4808      	ldr	r0, [pc, #32]	; (8002bd4 <HAL_ETH_MspInit+0x198>)
 8002bb2:	f001 fcf9 	bl	80045a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002bb6:	bf00      	nop
 8002bb8:	3738      	adds	r7, #56	; 0x38
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40028000 	.word	0x40028000
 8002bc4:	58024400 	.word	0x58024400
 8002bc8:	58020800 	.word	0x58020800
 8002bcc:	58020000 	.word	0x58020000
 8002bd0:	58020400 	.word	0x58020400
 8002bd4:	58021800 	.word	0x58021800

08002bd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b087      	sub	sp, #28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a20      	ldr	r2, [pc, #128]	; (8002c68 <HAL_TIM_Base_MspInit+0x90>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d10f      	bne.n	8002c0a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bea:	4b20      	ldr	r3, [pc, #128]	; (8002c6c <HAL_TIM_Base_MspInit+0x94>)
 8002bec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bf0:	4a1e      	ldr	r2, [pc, #120]	; (8002c6c <HAL_TIM_Base_MspInit+0x94>)
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002bfa:	4b1c      	ldr	r3, [pc, #112]	; (8002c6c <HAL_TIM_Base_MspInit+0x94>)
 8002bfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002c08:	e028      	b.n	8002c5c <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM3)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a18      	ldr	r2, [pc, #96]	; (8002c70 <HAL_TIM_Base_MspInit+0x98>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d10f      	bne.n	8002c34 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c14:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <HAL_TIM_Base_MspInit+0x94>)
 8002c16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c1a:	4a14      	ldr	r2, [pc, #80]	; (8002c6c <HAL_TIM_Base_MspInit+0x94>)
 8002c1c:	f043 0302 	orr.w	r3, r3, #2
 8002c20:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c24:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <HAL_TIM_Base_MspInit+0x94>)
 8002c26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	693b      	ldr	r3, [r7, #16]
}
 8002c32:	e013      	b.n	8002c5c <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM4)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a0e      	ldr	r2, [pc, #56]	; (8002c74 <HAL_TIM_Base_MspInit+0x9c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d10e      	bne.n	8002c5c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <HAL_TIM_Base_MspInit+0x94>)
 8002c40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c44:	4a09      	ldr	r2, [pc, #36]	; (8002c6c <HAL_TIM_Base_MspInit+0x94>)
 8002c46:	f043 0304 	orr.w	r3, r3, #4
 8002c4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c4e:	4b07      	ldr	r3, [pc, #28]	; (8002c6c <HAL_TIM_Base_MspInit+0x94>)
 8002c50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
}
 8002c5c:	bf00      	nop
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	40010000 	.word	0x40010000
 8002c6c:	58024400 	.word	0x58024400
 8002c70:	40000400 	.word	0x40000400
 8002c74:	40000800 	.word	0x40000800

08002c78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08c      	sub	sp, #48	; 0x30
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	f107 031c 	add.w	r3, r7, #28
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a48      	ldr	r2, [pc, #288]	; (8002db8 <HAL_TIM_MspPostInit+0x140>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d120      	bne.n	8002cdc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c9a:	4b48      	ldr	r3, [pc, #288]	; (8002dbc <HAL_TIM_MspPostInit+0x144>)
 8002c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ca0:	4a46      	ldr	r2, [pc, #280]	; (8002dbc <HAL_TIM_MspPostInit+0x144>)
 8002ca2:	f043 0310 	orr.w	r3, r3, #16
 8002ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002caa:	4b44      	ldr	r3, [pc, #272]	; (8002dbc <HAL_TIM_MspPostInit+0x144>)
 8002cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cb0:	f003 0310 	and.w	r3, r3, #16
 8002cb4:	61bb      	str	r3, [r7, #24]
 8002cb6:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PUL_3_Pin|PUL_2_Pin;
 8002cb8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cce:	f107 031c 	add.w	r3, r7, #28
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	483a      	ldr	r0, [pc, #232]	; (8002dc0 <HAL_TIM_MspPostInit+0x148>)
 8002cd6:	f001 fc67 	bl	80045a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002cda:	e068      	b.n	8002dae <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM3)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a38      	ldr	r2, [pc, #224]	; (8002dc4 <HAL_TIM_MspPostInit+0x14c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d11f      	bne.n	8002d26 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ce6:	4b35      	ldr	r3, [pc, #212]	; (8002dbc <HAL_TIM_MspPostInit+0x144>)
 8002ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cec:	4a33      	ldr	r2, [pc, #204]	; (8002dbc <HAL_TIM_MspPostInit+0x144>)
 8002cee:	f043 0302 	orr.w	r3, r3, #2
 8002cf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cf6:	4b31      	ldr	r3, [pc, #196]	; (8002dbc <HAL_TIM_MspPostInit+0x144>)
 8002cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PUL_5_Pin;
 8002d04:	2320      	movs	r3, #32
 8002d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d10:	2300      	movs	r3, #0
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d14:	2302      	movs	r3, #2
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PUL_5_GPIO_Port, &GPIO_InitStruct);
 8002d18:	f107 031c 	add.w	r3, r7, #28
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	482a      	ldr	r0, [pc, #168]	; (8002dc8 <HAL_TIM_MspPostInit+0x150>)
 8002d20:	f001 fc42 	bl	80045a8 <HAL_GPIO_Init>
}
 8002d24:	e043      	b.n	8002dae <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a28      	ldr	r2, [pc, #160]	; (8002dcc <HAL_TIM_MspPostInit+0x154>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d13e      	bne.n	8002dae <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d30:	4b22      	ldr	r3, [pc, #136]	; (8002dbc <HAL_TIM_MspPostInit+0x144>)
 8002d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d36:	4a21      	ldr	r2, [pc, #132]	; (8002dbc <HAL_TIM_MspPostInit+0x144>)
 8002d38:	f043 0308 	orr.w	r3, r3, #8
 8002d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d40:	4b1e      	ldr	r3, [pc, #120]	; (8002dbc <HAL_TIM_MspPostInit+0x144>)
 8002d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d4e:	4b1b      	ldr	r3, [pc, #108]	; (8002dbc <HAL_TIM_MspPostInit+0x144>)
 8002d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d54:	4a19      	ldr	r2, [pc, #100]	; (8002dbc <HAL_TIM_MspPostInit+0x144>)
 8002d56:	f043 0302 	orr.w	r3, r3, #2
 8002d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d5e:	4b17      	ldr	r3, [pc, #92]	; (8002dbc <HAL_TIM_MspPostInit+0x144>)
 8002d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PUL_4_Pin;
 8002d6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d72:	2302      	movs	r3, #2
 8002d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PUL_4_GPIO_Port, &GPIO_InitStruct);
 8002d82:	f107 031c 	add.w	r3, r7, #28
 8002d86:	4619      	mov	r1, r3
 8002d88:	4811      	ldr	r0, [pc, #68]	; (8002dd0 <HAL_TIM_MspPostInit+0x158>)
 8002d8a:	f001 fc0d 	bl	80045a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PUL_1_Pin;
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d92:	2302      	movs	r3, #2
 8002d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PUL_1_GPIO_Port, &GPIO_InitStruct);
 8002da2:	f107 031c 	add.w	r3, r7, #28
 8002da6:	4619      	mov	r1, r3
 8002da8:	4807      	ldr	r0, [pc, #28]	; (8002dc8 <HAL_TIM_MspPostInit+0x150>)
 8002daa:	f001 fbfd 	bl	80045a8 <HAL_GPIO_Init>
}
 8002dae:	bf00      	nop
 8002db0:	3730      	adds	r7, #48	; 0x30
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40010000 	.word	0x40010000
 8002dbc:	58024400 	.word	0x58024400
 8002dc0:	58021000 	.word	0x58021000
 8002dc4:	40000400 	.word	0x40000400
 8002dc8:	58020400 	.word	0x58020400
 8002dcc:	40000800 	.word	0x40000800
 8002dd0:	58020c00 	.word	0x58020c00

08002dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08a      	sub	sp, #40	; 0x28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ddc:	f107 0314 	add.w	r3, r7, #20
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a1a      	ldr	r2, [pc, #104]	; (8002e5c <HAL_UART_MspInit+0x88>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d12d      	bne.n	8002e52 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002df6:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <HAL_UART_MspInit+0x8c>)
 8002df8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dfc:	4a18      	ldr	r2, [pc, #96]	; (8002e60 <HAL_UART_MspInit+0x8c>)
 8002dfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e06:	4b16      	ldr	r3, [pc, #88]	; (8002e60 <HAL_UART_MspInit+0x8c>)
 8002e08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e14:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <HAL_UART_MspInit+0x8c>)
 8002e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e1a:	4a11      	ldr	r2, [pc, #68]	; (8002e60 <HAL_UART_MspInit+0x8c>)
 8002e1c:	f043 0308 	orr.w	r3, r3, #8
 8002e20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e24:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <HAL_UART_MspInit+0x8c>)
 8002e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = STLINK_RX1_Pin|STLINK_TX1_Pin;
 8002e32:	2303      	movs	r3, #3
 8002e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e36:	2302      	movs	r3, #2
 8002e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002e42:	2308      	movs	r3, #8
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e46:	f107 0314 	add.w	r3, r7, #20
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4805      	ldr	r0, [pc, #20]	; (8002e64 <HAL_UART_MspInit+0x90>)
 8002e4e:	f001 fbab 	bl	80045a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8002e52:	bf00      	nop
 8002e54:	3728      	adds	r7, #40	; 0x28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40004c00 	.word	0x40004c00
 8002e60:	58024400 	.word	0x58024400
 8002e64:	58020c00 	.word	0x58020c00

08002e68 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08a      	sub	sp, #40	; 0x28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e70:	f107 0314 	add.w	r3, r7, #20
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a21      	ldr	r2, [pc, #132]	; (8002f0c <HAL_PCD_MspInit+0xa4>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d13b      	bne.n	8002f02 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e8a:	4b21      	ldr	r3, [pc, #132]	; (8002f10 <HAL_PCD_MspInit+0xa8>)
 8002e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e90:	4a1f      	ldr	r2, [pc, #124]	; (8002f10 <HAL_PCD_MspInit+0xa8>)
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e9a:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <HAL_PCD_MspInit+0xa8>)
 8002e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002ea8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002eba:	230a      	movs	r3, #10
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ebe:	f107 0314 	add.w	r3, r7, #20
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4813      	ldr	r0, [pc, #76]	; (8002f14 <HAL_PCD_MspInit+0xac>)
 8002ec6:	f001 fb6f 	bl	80045a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002eca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed8:	f107 0314 	add.w	r3, r7, #20
 8002edc:	4619      	mov	r1, r3
 8002ede:	480d      	ldr	r0, [pc, #52]	; (8002f14 <HAL_PCD_MspInit+0xac>)
 8002ee0:	f001 fb62 	bl	80045a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002ee4:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <HAL_PCD_MspInit+0xa8>)
 8002ee6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002eea:	4a09      	ldr	r2, [pc, #36]	; (8002f10 <HAL_PCD_MspInit+0xa8>)
 8002eec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ef0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002ef4:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <HAL_PCD_MspInit+0xa8>)
 8002ef6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002efa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002f02:	bf00      	nop
 8002f04:	3728      	adds	r7, #40	; 0x28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40080000 	.word	0x40080000
 8002f10:	58024400 	.word	0x58024400
 8002f14:	58020000 	.word	0x58020000

08002f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f1c:	e7fe      	b.n	8002f1c <NMI_Handler+0x4>

08002f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f22:	e7fe      	b.n	8002f22 <HardFault_Handler+0x4>

08002f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f28:	e7fe      	b.n	8002f28 <MemManage_Handler+0x4>

08002f2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f2e:	e7fe      	b.n	8002f2e <BusFault_Handler+0x4>

08002f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f34:	e7fe      	b.n	8002f34 <UsageFault_Handler+0x4>

08002f36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f36:	b480      	push	{r7}
 8002f38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f3a:	bf00      	nop
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f52:	b480      	push	{r7}
 8002f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f64:	f000 f9ae 	bl	80032c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f68:	bf00      	nop
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
	return 1;
 8002f70:	2301      	movs	r3, #1
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <_kill>:

int _kill(int pid, int sig)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f86:	f006 fd47 	bl	8009a18 <__errno>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	2316      	movs	r3, #22
 8002f8e:	6013      	str	r3, [r2, #0]
	return -1;
 8002f90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <_exit>:

void _exit (int status)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff ffe7 	bl	8002f7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002fae:	e7fe      	b.n	8002fae <_exit+0x12>

08002fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fb8:	4a14      	ldr	r2, [pc, #80]	; (800300c <_sbrk+0x5c>)
 8002fba:	4b15      	ldr	r3, [pc, #84]	; (8003010 <_sbrk+0x60>)
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fc4:	4b13      	ldr	r3, [pc, #76]	; (8003014 <_sbrk+0x64>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d102      	bne.n	8002fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fcc:	4b11      	ldr	r3, [pc, #68]	; (8003014 <_sbrk+0x64>)
 8002fce:	4a12      	ldr	r2, [pc, #72]	; (8003018 <_sbrk+0x68>)
 8002fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fd2:	4b10      	ldr	r3, [pc, #64]	; (8003014 <_sbrk+0x64>)
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4413      	add	r3, r2
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d207      	bcs.n	8002ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fe0:	f006 fd1a 	bl	8009a18 <__errno>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	230c      	movs	r3, #12
 8002fe8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002fea:	f04f 33ff 	mov.w	r3, #4294967295
 8002fee:	e009      	b.n	8003004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ff0:	4b08      	ldr	r3, [pc, #32]	; (8003014 <_sbrk+0x64>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ff6:	4b07      	ldr	r3, [pc, #28]	; (8003014 <_sbrk+0x64>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	4a05      	ldr	r2, [pc, #20]	; (8003014 <_sbrk+0x64>)
 8003000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003002:	68fb      	ldr	r3, [r7, #12]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	24080000 	.word	0x24080000
 8003010:	00000400 	.word	0x00000400
 8003014:	240010b0 	.word	0x240010b0
 8003018:	240010c8 	.word	0x240010c8

0800301c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003020:	4b39      	ldr	r3, [pc, #228]	; (8003108 <SystemInit+0xec>)
 8003022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003026:	4a38      	ldr	r2, [pc, #224]	; (8003108 <SystemInit+0xec>)
 8003028:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800302c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003030:	4b36      	ldr	r3, [pc, #216]	; (800310c <SystemInit+0xf0>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	2b06      	cmp	r3, #6
 800303a:	d807      	bhi.n	800304c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800303c:	4b33      	ldr	r3, [pc, #204]	; (800310c <SystemInit+0xf0>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f023 030f 	bic.w	r3, r3, #15
 8003044:	4a31      	ldr	r2, [pc, #196]	; (800310c <SystemInit+0xf0>)
 8003046:	f043 0307 	orr.w	r3, r3, #7
 800304a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800304c:	4b30      	ldr	r3, [pc, #192]	; (8003110 <SystemInit+0xf4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a2f      	ldr	r2, [pc, #188]	; (8003110 <SystemInit+0xf4>)
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003058:	4b2d      	ldr	r3, [pc, #180]	; (8003110 <SystemInit+0xf4>)
 800305a:	2200      	movs	r2, #0
 800305c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800305e:	4b2c      	ldr	r3, [pc, #176]	; (8003110 <SystemInit+0xf4>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	492b      	ldr	r1, [pc, #172]	; (8003110 <SystemInit+0xf4>)
 8003064:	4b2b      	ldr	r3, [pc, #172]	; (8003114 <SystemInit+0xf8>)
 8003066:	4013      	ands	r3, r2
 8003068:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800306a:	4b28      	ldr	r3, [pc, #160]	; (800310c <SystemInit+0xf0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	2b07      	cmp	r3, #7
 8003074:	d907      	bls.n	8003086 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003076:	4b25      	ldr	r3, [pc, #148]	; (800310c <SystemInit+0xf0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 030f 	bic.w	r3, r3, #15
 800307e:	4a23      	ldr	r2, [pc, #140]	; (800310c <SystemInit+0xf0>)
 8003080:	f043 0307 	orr.w	r3, r3, #7
 8003084:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003086:	4b22      	ldr	r3, [pc, #136]	; (8003110 <SystemInit+0xf4>)
 8003088:	2200      	movs	r2, #0
 800308a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800308c:	4b20      	ldr	r3, [pc, #128]	; (8003110 <SystemInit+0xf4>)
 800308e:	2200      	movs	r2, #0
 8003090:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003092:	4b1f      	ldr	r3, [pc, #124]	; (8003110 <SystemInit+0xf4>)
 8003094:	2200      	movs	r2, #0
 8003096:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003098:	4b1d      	ldr	r3, [pc, #116]	; (8003110 <SystemInit+0xf4>)
 800309a:	4a1f      	ldr	r2, [pc, #124]	; (8003118 <SystemInit+0xfc>)
 800309c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800309e:	4b1c      	ldr	r3, [pc, #112]	; (8003110 <SystemInit+0xf4>)
 80030a0:	4a1e      	ldr	r2, [pc, #120]	; (800311c <SystemInit+0x100>)
 80030a2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80030a4:	4b1a      	ldr	r3, [pc, #104]	; (8003110 <SystemInit+0xf4>)
 80030a6:	4a1e      	ldr	r2, [pc, #120]	; (8003120 <SystemInit+0x104>)
 80030a8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80030aa:	4b19      	ldr	r3, [pc, #100]	; (8003110 <SystemInit+0xf4>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80030b0:	4b17      	ldr	r3, [pc, #92]	; (8003110 <SystemInit+0xf4>)
 80030b2:	4a1b      	ldr	r2, [pc, #108]	; (8003120 <SystemInit+0x104>)
 80030b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80030b6:	4b16      	ldr	r3, [pc, #88]	; (8003110 <SystemInit+0xf4>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80030bc:	4b14      	ldr	r3, [pc, #80]	; (8003110 <SystemInit+0xf4>)
 80030be:	4a18      	ldr	r2, [pc, #96]	; (8003120 <SystemInit+0x104>)
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80030c2:	4b13      	ldr	r3, [pc, #76]	; (8003110 <SystemInit+0xf4>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80030c8:	4b11      	ldr	r3, [pc, #68]	; (8003110 <SystemInit+0xf4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a10      	ldr	r2, [pc, #64]	; (8003110 <SystemInit+0xf4>)
 80030ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80030d4:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <SystemInit+0xf4>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80030da:	4b12      	ldr	r3, [pc, #72]	; (8003124 <SystemInit+0x108>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	4b12      	ldr	r3, [pc, #72]	; (8003128 <SystemInit+0x10c>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030e6:	d202      	bcs.n	80030ee <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80030e8:	4b10      	ldr	r3, [pc, #64]	; (800312c <SystemInit+0x110>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80030ee:	4b10      	ldr	r3, [pc, #64]	; (8003130 <SystemInit+0x114>)
 80030f0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80030f4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030f6:	4b04      	ldr	r3, [pc, #16]	; (8003108 <SystemInit+0xec>)
 80030f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030fc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80030fe:	bf00      	nop
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	e000ed00 	.word	0xe000ed00
 800310c:	52002000 	.word	0x52002000
 8003110:	58024400 	.word	0x58024400
 8003114:	eaf6ed7f 	.word	0xeaf6ed7f
 8003118:	02020200 	.word	0x02020200
 800311c:	01ff0000 	.word	0x01ff0000
 8003120:	01010280 	.word	0x01010280
 8003124:	5c001000 	.word	0x5c001000
 8003128:	ffff0000 	.word	0xffff0000
 800312c:	51008108 	.word	0x51008108
 8003130:	52004000 	.word	0x52004000

08003134 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	0a5a      	lsrs	r2, r3, #9
 8003144:	490f      	ldr	r1, [pc, #60]	; (8003184 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8003146:	fba1 1202 	umull	r1, r2, r1, r2
 800314a:	09d2      	lsrs	r2, r2, #7
 800314c:	490e      	ldr	r1, [pc, #56]	; (8003188 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800314e:	fb01 f202 	mul.w	r2, r1, r2
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	0a5b      	lsrs	r3, r3, #9
 800315c:	4a09      	ldr	r2, [pc, #36]	; (8003184 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800315e:	fba2 2303 	umull	r2, r3, r2, r3
 8003162:	09db      	lsrs	r3, r3, #7
 8003164:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	441a      	add	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	601a      	str	r2, [r3, #0]
}
 8003178:	bf00      	nop
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	00044b83 	.word	0x00044b83
 8003188:	3b9aca00 	.word	0x3b9aca00

0800318c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800318c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031c4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003190:	f7ff ff44 	bl	800301c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003194:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003196:	e003      	b.n	80031a0 <LoopCopyDataInit>

08003198 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003198:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800319a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800319c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800319e:	3104      	adds	r1, #4

080031a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80031a0:	480a      	ldr	r0, [pc, #40]	; (80031cc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80031a2:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80031a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80031a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80031a8:	d3f6      	bcc.n	8003198 <CopyDataInit>
  ldr  r2, =_sbss
 80031aa:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80031ac:	e002      	b.n	80031b4 <LoopFillZerobss>

080031ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80031ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80031b0:	f842 3b04 	str.w	r3, [r2], #4

080031b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80031b4:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80031b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80031b8:	d3f9      	bcc.n	80031ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031ba:	f006 fc33 	bl	8009a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031be:	f7fe fa9d 	bl	80016fc <main>
  bx  lr    
 80031c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031c4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80031c8:	08009f2c 	.word	0x08009f2c
  ldr  r0, =_sdata
 80031cc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80031d0:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 80031d4:	24000138 	.word	0x24000138
  ldr  r3, = _ebss
 80031d8:	240010c4 	.word	0x240010c4

080031dc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031dc:	e7fe      	b.n	80031dc <ADC3_IRQHandler>
	...

080031e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031e6:	2003      	movs	r0, #3
 80031e8:	f000 f980 	bl	80034ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031ec:	f002 fafe 	bl	80057ec <HAL_RCC_GetSysClockFreq>
 80031f0:	4601      	mov	r1, r0
 80031f2:	4b15      	ldr	r3, [pc, #84]	; (8003248 <HAL_Init+0x68>)
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	0a1b      	lsrs	r3, r3, #8
 80031f8:	f003 030f 	and.w	r3, r3, #15
 80031fc:	4a13      	ldr	r2, [pc, #76]	; (800324c <HAL_Init+0x6c>)
 80031fe:	5cd3      	ldrb	r3, [r2, r3]
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	fa21 f303 	lsr.w	r3, r1, r3
 8003208:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800320a:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <HAL_Init+0x68>)
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	4a0e      	ldr	r2, [pc, #56]	; (800324c <HAL_Init+0x6c>)
 8003214:	5cd3      	ldrb	r3, [r2, r3]
 8003216:	f003 031f 	and.w	r3, r3, #31
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
 8003220:	4a0b      	ldr	r2, [pc, #44]	; (8003250 <HAL_Init+0x70>)
 8003222:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003224:	4a0b      	ldr	r2, [pc, #44]	; (8003254 <HAL_Init+0x74>)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800322a:	2000      	movs	r0, #0
 800322c:	f000 f814 	bl	8003258 <HAL_InitTick>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e002      	b.n	8003240 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800323a:	f7ff fbe5 	bl	8002a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	58024400 	.word	0x58024400
 800324c:	08009ef0 	.word	0x08009ef0
 8003250:	24000004 	.word	0x24000004
 8003254:	24000000 	.word	0x24000000

08003258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003260:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <HAL_InitTick+0x60>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e021      	b.n	80032b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800326c:	4b13      	ldr	r3, [pc, #76]	; (80032bc <HAL_InitTick+0x64>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <HAL_InitTick+0x60>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	4619      	mov	r1, r3
 8003276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800327a:	fbb3 f3f1 	udiv	r3, r3, r1
 800327e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003282:	4618      	mov	r0, r3
 8003284:	f000 f957 	bl	8003536 <HAL_SYSTICK_Config>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e00e      	b.n	80032b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b0f      	cmp	r3, #15
 8003296:	d80a      	bhi.n	80032ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003298:	2200      	movs	r2, #0
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	f04f 30ff 	mov.w	r0, #4294967295
 80032a0:	f000 f92f 	bl	8003502 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032a4:	4a06      	ldr	r2, [pc, #24]	; (80032c0 <HAL_InitTick+0x68>)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	e000      	b.n	80032b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	2400000c 	.word	0x2400000c
 80032bc:	24000000 	.word	0x24000000
 80032c0:	24000008 	.word	0x24000008

080032c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <HAL_IncTick+0x20>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <HAL_IncTick+0x24>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4413      	add	r3, r2
 80032d4:	4a04      	ldr	r2, [pc, #16]	; (80032e8 <HAL_IncTick+0x24>)
 80032d6:	6013      	str	r3, [r2, #0]
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	2400000c 	.word	0x2400000c
 80032e8:	240010bc 	.word	0x240010bc

080032ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return uwTick;
 80032f0:	4b03      	ldr	r3, [pc, #12]	; (8003300 <HAL_GetTick+0x14>)
 80032f2:	681b      	ldr	r3, [r3, #0]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	240010bc 	.word	0x240010bc

08003304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800330c:	f7ff ffee 	bl	80032ec <HAL_GetTick>
 8003310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331c:	d005      	beq.n	800332a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800331e:	4b09      	ldr	r3, [pc, #36]	; (8003344 <HAL_Delay+0x40>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4413      	add	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800332a:	bf00      	nop
 800332c:	f7ff ffde 	bl	80032ec <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	429a      	cmp	r2, r3
 800333a:	d8f7      	bhi.n	800332c <HAL_Delay+0x28>
  {
  }
}
 800333c:	bf00      	nop
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	2400000c 	.word	0x2400000c

08003348 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800334c:	4b03      	ldr	r3, [pc, #12]	; (800335c <HAL_GetREVID+0x14>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	0c1b      	lsrs	r3, r3, #16
}
 8003352:	4618      	mov	r0, r3
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	5c001000 	.word	0x5c001000

08003360 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003370:	4904      	ldr	r1, [pc, #16]	; (8003384 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4313      	orrs	r3, r2
 8003376:	604b      	str	r3, [r1, #4]
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	58000400 	.word	0x58000400

08003388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003398:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <__NVIC_SetPriorityGrouping+0x40>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033a4:	4013      	ands	r3, r2
 80033a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80033b0:	4b06      	ldr	r3, [pc, #24]	; (80033cc <__NVIC_SetPriorityGrouping+0x44>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033b6:	4a04      	ldr	r2, [pc, #16]	; (80033c8 <__NVIC_SetPriorityGrouping+0x40>)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	60d3      	str	r3, [r2, #12]
}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	e000ed00 	.word	0xe000ed00
 80033cc:	05fa0000 	.word	0x05fa0000

080033d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033d4:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <__NVIC_GetPriorityGrouping+0x18>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	0a1b      	lsrs	r3, r3, #8
 80033da:	f003 0307 	and.w	r3, r3, #7
}
 80033de:	4618      	mov	r0, r3
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	6039      	str	r1, [r7, #0]
 80033f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	db0a      	blt.n	8003416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	b2da      	uxtb	r2, r3
 8003404:	490c      	ldr	r1, [pc, #48]	; (8003438 <__NVIC_SetPriority+0x4c>)
 8003406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800340a:	0112      	lsls	r2, r2, #4
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	440b      	add	r3, r1
 8003410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003414:	e00a      	b.n	800342c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	b2da      	uxtb	r2, r3
 800341a:	4908      	ldr	r1, [pc, #32]	; (800343c <__NVIC_SetPriority+0x50>)
 800341c:	88fb      	ldrh	r3, [r7, #6]
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	3b04      	subs	r3, #4
 8003424:	0112      	lsls	r2, r2, #4
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	440b      	add	r3, r1
 800342a:	761a      	strb	r2, [r3, #24]
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	e000e100 	.word	0xe000e100
 800343c:	e000ed00 	.word	0xe000ed00

08003440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003440:	b480      	push	{r7}
 8003442:	b089      	sub	sp, #36	; 0x24
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f1c3 0307 	rsb	r3, r3, #7
 800345a:	2b04      	cmp	r3, #4
 800345c:	bf28      	it	cs
 800345e:	2304      	movcs	r3, #4
 8003460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3304      	adds	r3, #4
 8003466:	2b06      	cmp	r3, #6
 8003468:	d902      	bls.n	8003470 <NVIC_EncodePriority+0x30>
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	3b03      	subs	r3, #3
 800346e:	e000      	b.n	8003472 <NVIC_EncodePriority+0x32>
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003474:	f04f 32ff 	mov.w	r2, #4294967295
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43da      	mvns	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	401a      	ands	r2, r3
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003488:	f04f 31ff 	mov.w	r1, #4294967295
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	fa01 f303 	lsl.w	r3, r1, r3
 8003492:	43d9      	mvns	r1, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003498:	4313      	orrs	r3, r2
         );
}
 800349a:	4618      	mov	r0, r3
 800349c:	3724      	adds	r7, #36	; 0x24
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
	...

080034a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034b8:	d301      	bcc.n	80034be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ba:	2301      	movs	r3, #1
 80034bc:	e00f      	b.n	80034de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034be:	4a0a      	ldr	r2, [pc, #40]	; (80034e8 <SysTick_Config+0x40>)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034c6:	210f      	movs	r1, #15
 80034c8:	f04f 30ff 	mov.w	r0, #4294967295
 80034cc:	f7ff ff8e 	bl	80033ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <SysTick_Config+0x40>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034d6:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <SysTick_Config+0x40>)
 80034d8:	2207      	movs	r2, #7
 80034da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	e000e010 	.word	0xe000e010

080034ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7ff ff47 	bl	8003388 <__NVIC_SetPriorityGrouping>
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b086      	sub	sp, #24
 8003506:	af00      	add	r7, sp, #0
 8003508:	4603      	mov	r3, r0
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607a      	str	r2, [r7, #4]
 800350e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003510:	f7ff ff5e 	bl	80033d0 <__NVIC_GetPriorityGrouping>
 8003514:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	68b9      	ldr	r1, [r7, #8]
 800351a:	6978      	ldr	r0, [r7, #20]
 800351c:	f7ff ff90 	bl	8003440 <NVIC_EncodePriority>
 8003520:	4602      	mov	r2, r0
 8003522:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003526:	4611      	mov	r1, r2
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff ff5f 	bl	80033ec <__NVIC_SetPriority>
}
 800352e:	bf00      	nop
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff ffb2 	bl	80034a8 <SysTick_Config>
 8003544:	4603      	mov	r3, r0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
	...

08003550 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e226      	b.n	80039ba <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_DMA_Start_IT+0x2a>
 8003576:	2302      	movs	r3, #2
 8003578:	e21f      	b.n	80039ba <HAL_DMA_Start_IT+0x46a>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b01      	cmp	r3, #1
 800358c:	f040 820a 	bne.w	80039a4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a68      	ldr	r2, [pc, #416]	; (8003744 <HAL_DMA_Start_IT+0x1f4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d04a      	beq.n	800363e <HAL_DMA_Start_IT+0xee>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a66      	ldr	r2, [pc, #408]	; (8003748 <HAL_DMA_Start_IT+0x1f8>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d045      	beq.n	800363e <HAL_DMA_Start_IT+0xee>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a65      	ldr	r2, [pc, #404]	; (800374c <HAL_DMA_Start_IT+0x1fc>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d040      	beq.n	800363e <HAL_DMA_Start_IT+0xee>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a63      	ldr	r2, [pc, #396]	; (8003750 <HAL_DMA_Start_IT+0x200>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d03b      	beq.n	800363e <HAL_DMA_Start_IT+0xee>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a62      	ldr	r2, [pc, #392]	; (8003754 <HAL_DMA_Start_IT+0x204>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d036      	beq.n	800363e <HAL_DMA_Start_IT+0xee>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a60      	ldr	r2, [pc, #384]	; (8003758 <HAL_DMA_Start_IT+0x208>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d031      	beq.n	800363e <HAL_DMA_Start_IT+0xee>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a5f      	ldr	r2, [pc, #380]	; (800375c <HAL_DMA_Start_IT+0x20c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d02c      	beq.n	800363e <HAL_DMA_Start_IT+0xee>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a5d      	ldr	r2, [pc, #372]	; (8003760 <HAL_DMA_Start_IT+0x210>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d027      	beq.n	800363e <HAL_DMA_Start_IT+0xee>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a5c      	ldr	r2, [pc, #368]	; (8003764 <HAL_DMA_Start_IT+0x214>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d022      	beq.n	800363e <HAL_DMA_Start_IT+0xee>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a5a      	ldr	r2, [pc, #360]	; (8003768 <HAL_DMA_Start_IT+0x218>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d01d      	beq.n	800363e <HAL_DMA_Start_IT+0xee>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a59      	ldr	r2, [pc, #356]	; (800376c <HAL_DMA_Start_IT+0x21c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d018      	beq.n	800363e <HAL_DMA_Start_IT+0xee>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a57      	ldr	r2, [pc, #348]	; (8003770 <HAL_DMA_Start_IT+0x220>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d013      	beq.n	800363e <HAL_DMA_Start_IT+0xee>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a56      	ldr	r2, [pc, #344]	; (8003774 <HAL_DMA_Start_IT+0x224>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d00e      	beq.n	800363e <HAL_DMA_Start_IT+0xee>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a54      	ldr	r2, [pc, #336]	; (8003778 <HAL_DMA_Start_IT+0x228>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d009      	beq.n	800363e <HAL_DMA_Start_IT+0xee>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a53      	ldr	r2, [pc, #332]	; (800377c <HAL_DMA_Start_IT+0x22c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d004      	beq.n	800363e <HAL_DMA_Start_IT+0xee>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a51      	ldr	r2, [pc, #324]	; (8003780 <HAL_DMA_Start_IT+0x230>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d108      	bne.n	8003650 <HAL_DMA_Start_IT+0x100>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0201 	bic.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	e007      	b.n	8003660 <HAL_DMA_Start_IT+0x110>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68b9      	ldr	r1, [r7, #8]
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 f9dc 	bl	8003a24 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a34      	ldr	r2, [pc, #208]	; (8003744 <HAL_DMA_Start_IT+0x1f4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d04a      	beq.n	800370c <HAL_DMA_Start_IT+0x1bc>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a33      	ldr	r2, [pc, #204]	; (8003748 <HAL_DMA_Start_IT+0x1f8>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d045      	beq.n	800370c <HAL_DMA_Start_IT+0x1bc>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a31      	ldr	r2, [pc, #196]	; (800374c <HAL_DMA_Start_IT+0x1fc>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d040      	beq.n	800370c <HAL_DMA_Start_IT+0x1bc>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a30      	ldr	r2, [pc, #192]	; (8003750 <HAL_DMA_Start_IT+0x200>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d03b      	beq.n	800370c <HAL_DMA_Start_IT+0x1bc>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a2e      	ldr	r2, [pc, #184]	; (8003754 <HAL_DMA_Start_IT+0x204>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d036      	beq.n	800370c <HAL_DMA_Start_IT+0x1bc>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a2d      	ldr	r2, [pc, #180]	; (8003758 <HAL_DMA_Start_IT+0x208>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d031      	beq.n	800370c <HAL_DMA_Start_IT+0x1bc>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a2b      	ldr	r2, [pc, #172]	; (800375c <HAL_DMA_Start_IT+0x20c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d02c      	beq.n	800370c <HAL_DMA_Start_IT+0x1bc>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a2a      	ldr	r2, [pc, #168]	; (8003760 <HAL_DMA_Start_IT+0x210>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d027      	beq.n	800370c <HAL_DMA_Start_IT+0x1bc>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a28      	ldr	r2, [pc, #160]	; (8003764 <HAL_DMA_Start_IT+0x214>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d022      	beq.n	800370c <HAL_DMA_Start_IT+0x1bc>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a27      	ldr	r2, [pc, #156]	; (8003768 <HAL_DMA_Start_IT+0x218>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d01d      	beq.n	800370c <HAL_DMA_Start_IT+0x1bc>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a25      	ldr	r2, [pc, #148]	; (800376c <HAL_DMA_Start_IT+0x21c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d018      	beq.n	800370c <HAL_DMA_Start_IT+0x1bc>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a24      	ldr	r2, [pc, #144]	; (8003770 <HAL_DMA_Start_IT+0x220>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d013      	beq.n	800370c <HAL_DMA_Start_IT+0x1bc>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a22      	ldr	r2, [pc, #136]	; (8003774 <HAL_DMA_Start_IT+0x224>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00e      	beq.n	800370c <HAL_DMA_Start_IT+0x1bc>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a21      	ldr	r2, [pc, #132]	; (8003778 <HAL_DMA_Start_IT+0x228>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d009      	beq.n	800370c <HAL_DMA_Start_IT+0x1bc>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a1f      	ldr	r2, [pc, #124]	; (800377c <HAL_DMA_Start_IT+0x22c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d004      	beq.n	800370c <HAL_DMA_Start_IT+0x1bc>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a1e      	ldr	r2, [pc, #120]	; (8003780 <HAL_DMA_Start_IT+0x230>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d101      	bne.n	8003710 <HAL_DMA_Start_IT+0x1c0>
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <HAL_DMA_Start_IT+0x1c2>
 8003710:	2300      	movs	r3, #0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d036      	beq.n	8003784 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f023 021e 	bic.w	r2, r3, #30
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0216 	orr.w	r2, r2, #22
 8003728:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	2b00      	cmp	r3, #0
 8003730:	d03e      	beq.n	80037b0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f042 0208 	orr.w	r2, r2, #8
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	e035      	b.n	80037b0 <HAL_DMA_Start_IT+0x260>
 8003744:	40020010 	.word	0x40020010
 8003748:	40020028 	.word	0x40020028
 800374c:	40020040 	.word	0x40020040
 8003750:	40020058 	.word	0x40020058
 8003754:	40020070 	.word	0x40020070
 8003758:	40020088 	.word	0x40020088
 800375c:	400200a0 	.word	0x400200a0
 8003760:	400200b8 	.word	0x400200b8
 8003764:	40020410 	.word	0x40020410
 8003768:	40020428 	.word	0x40020428
 800376c:	40020440 	.word	0x40020440
 8003770:	40020458 	.word	0x40020458
 8003774:	40020470 	.word	0x40020470
 8003778:	40020488 	.word	0x40020488
 800377c:	400204a0 	.word	0x400204a0
 8003780:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f023 020e 	bic.w	r2, r3, #14
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 020a 	orr.w	r2, r2, #10
 8003796:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	2b00      	cmp	r3, #0
 800379e:	d007      	beq.n	80037b0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0204 	orr.w	r2, r2, #4
 80037ae:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a83      	ldr	r2, [pc, #524]	; (80039c4 <HAL_DMA_Start_IT+0x474>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d072      	beq.n	80038a0 <HAL_DMA_Start_IT+0x350>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a82      	ldr	r2, [pc, #520]	; (80039c8 <HAL_DMA_Start_IT+0x478>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d06d      	beq.n	80038a0 <HAL_DMA_Start_IT+0x350>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a80      	ldr	r2, [pc, #512]	; (80039cc <HAL_DMA_Start_IT+0x47c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d068      	beq.n	80038a0 <HAL_DMA_Start_IT+0x350>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a7f      	ldr	r2, [pc, #508]	; (80039d0 <HAL_DMA_Start_IT+0x480>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d063      	beq.n	80038a0 <HAL_DMA_Start_IT+0x350>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a7d      	ldr	r2, [pc, #500]	; (80039d4 <HAL_DMA_Start_IT+0x484>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d05e      	beq.n	80038a0 <HAL_DMA_Start_IT+0x350>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a7c      	ldr	r2, [pc, #496]	; (80039d8 <HAL_DMA_Start_IT+0x488>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d059      	beq.n	80038a0 <HAL_DMA_Start_IT+0x350>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a7a      	ldr	r2, [pc, #488]	; (80039dc <HAL_DMA_Start_IT+0x48c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d054      	beq.n	80038a0 <HAL_DMA_Start_IT+0x350>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a79      	ldr	r2, [pc, #484]	; (80039e0 <HAL_DMA_Start_IT+0x490>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d04f      	beq.n	80038a0 <HAL_DMA_Start_IT+0x350>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a77      	ldr	r2, [pc, #476]	; (80039e4 <HAL_DMA_Start_IT+0x494>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d04a      	beq.n	80038a0 <HAL_DMA_Start_IT+0x350>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a76      	ldr	r2, [pc, #472]	; (80039e8 <HAL_DMA_Start_IT+0x498>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d045      	beq.n	80038a0 <HAL_DMA_Start_IT+0x350>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a74      	ldr	r2, [pc, #464]	; (80039ec <HAL_DMA_Start_IT+0x49c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d040      	beq.n	80038a0 <HAL_DMA_Start_IT+0x350>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a73      	ldr	r2, [pc, #460]	; (80039f0 <HAL_DMA_Start_IT+0x4a0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d03b      	beq.n	80038a0 <HAL_DMA_Start_IT+0x350>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a71      	ldr	r2, [pc, #452]	; (80039f4 <HAL_DMA_Start_IT+0x4a4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d036      	beq.n	80038a0 <HAL_DMA_Start_IT+0x350>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a70      	ldr	r2, [pc, #448]	; (80039f8 <HAL_DMA_Start_IT+0x4a8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d031      	beq.n	80038a0 <HAL_DMA_Start_IT+0x350>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a6e      	ldr	r2, [pc, #440]	; (80039fc <HAL_DMA_Start_IT+0x4ac>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d02c      	beq.n	80038a0 <HAL_DMA_Start_IT+0x350>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a6d      	ldr	r2, [pc, #436]	; (8003a00 <HAL_DMA_Start_IT+0x4b0>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d027      	beq.n	80038a0 <HAL_DMA_Start_IT+0x350>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a6b      	ldr	r2, [pc, #428]	; (8003a04 <HAL_DMA_Start_IT+0x4b4>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d022      	beq.n	80038a0 <HAL_DMA_Start_IT+0x350>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a6a      	ldr	r2, [pc, #424]	; (8003a08 <HAL_DMA_Start_IT+0x4b8>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d01d      	beq.n	80038a0 <HAL_DMA_Start_IT+0x350>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a68      	ldr	r2, [pc, #416]	; (8003a0c <HAL_DMA_Start_IT+0x4bc>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d018      	beq.n	80038a0 <HAL_DMA_Start_IT+0x350>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a67      	ldr	r2, [pc, #412]	; (8003a10 <HAL_DMA_Start_IT+0x4c0>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d013      	beq.n	80038a0 <HAL_DMA_Start_IT+0x350>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a65      	ldr	r2, [pc, #404]	; (8003a14 <HAL_DMA_Start_IT+0x4c4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00e      	beq.n	80038a0 <HAL_DMA_Start_IT+0x350>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a64      	ldr	r2, [pc, #400]	; (8003a18 <HAL_DMA_Start_IT+0x4c8>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d009      	beq.n	80038a0 <HAL_DMA_Start_IT+0x350>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a62      	ldr	r2, [pc, #392]	; (8003a1c <HAL_DMA_Start_IT+0x4cc>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d004      	beq.n	80038a0 <HAL_DMA_Start_IT+0x350>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a61      	ldr	r2, [pc, #388]	; (8003a20 <HAL_DMA_Start_IT+0x4d0>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d101      	bne.n	80038a4 <HAL_DMA_Start_IT+0x354>
 80038a0:	2301      	movs	r3, #1
 80038a2:	e000      	b.n	80038a6 <HAL_DMA_Start_IT+0x356>
 80038a4:	2300      	movs	r3, #0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d01a      	beq.n	80038e0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d007      	beq.n	80038c8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038c6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d007      	beq.n	80038e0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038de:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a37      	ldr	r2, [pc, #220]	; (80039c4 <HAL_DMA_Start_IT+0x474>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d04a      	beq.n	8003980 <HAL_DMA_Start_IT+0x430>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a36      	ldr	r2, [pc, #216]	; (80039c8 <HAL_DMA_Start_IT+0x478>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d045      	beq.n	8003980 <HAL_DMA_Start_IT+0x430>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a34      	ldr	r2, [pc, #208]	; (80039cc <HAL_DMA_Start_IT+0x47c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d040      	beq.n	8003980 <HAL_DMA_Start_IT+0x430>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a33      	ldr	r2, [pc, #204]	; (80039d0 <HAL_DMA_Start_IT+0x480>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d03b      	beq.n	8003980 <HAL_DMA_Start_IT+0x430>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a31      	ldr	r2, [pc, #196]	; (80039d4 <HAL_DMA_Start_IT+0x484>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d036      	beq.n	8003980 <HAL_DMA_Start_IT+0x430>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a30      	ldr	r2, [pc, #192]	; (80039d8 <HAL_DMA_Start_IT+0x488>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d031      	beq.n	8003980 <HAL_DMA_Start_IT+0x430>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a2e      	ldr	r2, [pc, #184]	; (80039dc <HAL_DMA_Start_IT+0x48c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d02c      	beq.n	8003980 <HAL_DMA_Start_IT+0x430>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a2d      	ldr	r2, [pc, #180]	; (80039e0 <HAL_DMA_Start_IT+0x490>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d027      	beq.n	8003980 <HAL_DMA_Start_IT+0x430>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a2b      	ldr	r2, [pc, #172]	; (80039e4 <HAL_DMA_Start_IT+0x494>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d022      	beq.n	8003980 <HAL_DMA_Start_IT+0x430>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a2a      	ldr	r2, [pc, #168]	; (80039e8 <HAL_DMA_Start_IT+0x498>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d01d      	beq.n	8003980 <HAL_DMA_Start_IT+0x430>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a28      	ldr	r2, [pc, #160]	; (80039ec <HAL_DMA_Start_IT+0x49c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d018      	beq.n	8003980 <HAL_DMA_Start_IT+0x430>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a27      	ldr	r2, [pc, #156]	; (80039f0 <HAL_DMA_Start_IT+0x4a0>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d013      	beq.n	8003980 <HAL_DMA_Start_IT+0x430>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a25      	ldr	r2, [pc, #148]	; (80039f4 <HAL_DMA_Start_IT+0x4a4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00e      	beq.n	8003980 <HAL_DMA_Start_IT+0x430>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a24      	ldr	r2, [pc, #144]	; (80039f8 <HAL_DMA_Start_IT+0x4a8>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d009      	beq.n	8003980 <HAL_DMA_Start_IT+0x430>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a22      	ldr	r2, [pc, #136]	; (80039fc <HAL_DMA_Start_IT+0x4ac>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d004      	beq.n	8003980 <HAL_DMA_Start_IT+0x430>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a21      	ldr	r2, [pc, #132]	; (8003a00 <HAL_DMA_Start_IT+0x4b0>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d108      	bne.n	8003992 <HAL_DMA_Start_IT+0x442>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0201 	orr.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	e012      	b.n	80039b8 <HAL_DMA_Start_IT+0x468>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f042 0201 	orr.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	e009      	b.n	80039b8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80039b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40020010 	.word	0x40020010
 80039c8:	40020028 	.word	0x40020028
 80039cc:	40020040 	.word	0x40020040
 80039d0:	40020058 	.word	0x40020058
 80039d4:	40020070 	.word	0x40020070
 80039d8:	40020088 	.word	0x40020088
 80039dc:	400200a0 	.word	0x400200a0
 80039e0:	400200b8 	.word	0x400200b8
 80039e4:	40020410 	.word	0x40020410
 80039e8:	40020428 	.word	0x40020428
 80039ec:	40020440 	.word	0x40020440
 80039f0:	40020458 	.word	0x40020458
 80039f4:	40020470 	.word	0x40020470
 80039f8:	40020488 	.word	0x40020488
 80039fc:	400204a0 	.word	0x400204a0
 8003a00:	400204b8 	.word	0x400204b8
 8003a04:	58025408 	.word	0x58025408
 8003a08:	5802541c 	.word	0x5802541c
 8003a0c:	58025430 	.word	0x58025430
 8003a10:	58025444 	.word	0x58025444
 8003a14:	58025458 	.word	0x58025458
 8003a18:	5802546c 	.word	0x5802546c
 8003a1c:	58025480 	.word	0x58025480
 8003a20:	58025494 	.word	0x58025494

08003a24 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a36:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a84      	ldr	r2, [pc, #528]	; (8003c54 <DMA_SetConfig+0x230>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d072      	beq.n	8003b2e <DMA_SetConfig+0x10a>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a82      	ldr	r2, [pc, #520]	; (8003c58 <DMA_SetConfig+0x234>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d06d      	beq.n	8003b2e <DMA_SetConfig+0x10a>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a81      	ldr	r2, [pc, #516]	; (8003c5c <DMA_SetConfig+0x238>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d068      	beq.n	8003b2e <DMA_SetConfig+0x10a>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a7f      	ldr	r2, [pc, #508]	; (8003c60 <DMA_SetConfig+0x23c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d063      	beq.n	8003b2e <DMA_SetConfig+0x10a>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a7e      	ldr	r2, [pc, #504]	; (8003c64 <DMA_SetConfig+0x240>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d05e      	beq.n	8003b2e <DMA_SetConfig+0x10a>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a7c      	ldr	r2, [pc, #496]	; (8003c68 <DMA_SetConfig+0x244>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d059      	beq.n	8003b2e <DMA_SetConfig+0x10a>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a7b      	ldr	r2, [pc, #492]	; (8003c6c <DMA_SetConfig+0x248>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d054      	beq.n	8003b2e <DMA_SetConfig+0x10a>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a79      	ldr	r2, [pc, #484]	; (8003c70 <DMA_SetConfig+0x24c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d04f      	beq.n	8003b2e <DMA_SetConfig+0x10a>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a78      	ldr	r2, [pc, #480]	; (8003c74 <DMA_SetConfig+0x250>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d04a      	beq.n	8003b2e <DMA_SetConfig+0x10a>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a76      	ldr	r2, [pc, #472]	; (8003c78 <DMA_SetConfig+0x254>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d045      	beq.n	8003b2e <DMA_SetConfig+0x10a>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a75      	ldr	r2, [pc, #468]	; (8003c7c <DMA_SetConfig+0x258>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d040      	beq.n	8003b2e <DMA_SetConfig+0x10a>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a73      	ldr	r2, [pc, #460]	; (8003c80 <DMA_SetConfig+0x25c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d03b      	beq.n	8003b2e <DMA_SetConfig+0x10a>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a72      	ldr	r2, [pc, #456]	; (8003c84 <DMA_SetConfig+0x260>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d036      	beq.n	8003b2e <DMA_SetConfig+0x10a>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a70      	ldr	r2, [pc, #448]	; (8003c88 <DMA_SetConfig+0x264>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d031      	beq.n	8003b2e <DMA_SetConfig+0x10a>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a6f      	ldr	r2, [pc, #444]	; (8003c8c <DMA_SetConfig+0x268>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d02c      	beq.n	8003b2e <DMA_SetConfig+0x10a>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a6d      	ldr	r2, [pc, #436]	; (8003c90 <DMA_SetConfig+0x26c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d027      	beq.n	8003b2e <DMA_SetConfig+0x10a>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a6c      	ldr	r2, [pc, #432]	; (8003c94 <DMA_SetConfig+0x270>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d022      	beq.n	8003b2e <DMA_SetConfig+0x10a>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a6a      	ldr	r2, [pc, #424]	; (8003c98 <DMA_SetConfig+0x274>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d01d      	beq.n	8003b2e <DMA_SetConfig+0x10a>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a69      	ldr	r2, [pc, #420]	; (8003c9c <DMA_SetConfig+0x278>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d018      	beq.n	8003b2e <DMA_SetConfig+0x10a>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a67      	ldr	r2, [pc, #412]	; (8003ca0 <DMA_SetConfig+0x27c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d013      	beq.n	8003b2e <DMA_SetConfig+0x10a>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a66      	ldr	r2, [pc, #408]	; (8003ca4 <DMA_SetConfig+0x280>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00e      	beq.n	8003b2e <DMA_SetConfig+0x10a>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a64      	ldr	r2, [pc, #400]	; (8003ca8 <DMA_SetConfig+0x284>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d009      	beq.n	8003b2e <DMA_SetConfig+0x10a>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a63      	ldr	r2, [pc, #396]	; (8003cac <DMA_SetConfig+0x288>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d004      	beq.n	8003b2e <DMA_SetConfig+0x10a>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a61      	ldr	r2, [pc, #388]	; (8003cb0 <DMA_SetConfig+0x28c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d101      	bne.n	8003b32 <DMA_SetConfig+0x10e>
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e000      	b.n	8003b34 <DMA_SetConfig+0x110>
 8003b32:	2300      	movs	r3, #0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00d      	beq.n	8003b54 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b40:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d004      	beq.n	8003b54 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b52:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a3e      	ldr	r2, [pc, #248]	; (8003c54 <DMA_SetConfig+0x230>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d04a      	beq.n	8003bf4 <DMA_SetConfig+0x1d0>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a3d      	ldr	r2, [pc, #244]	; (8003c58 <DMA_SetConfig+0x234>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d045      	beq.n	8003bf4 <DMA_SetConfig+0x1d0>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a3b      	ldr	r2, [pc, #236]	; (8003c5c <DMA_SetConfig+0x238>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d040      	beq.n	8003bf4 <DMA_SetConfig+0x1d0>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a3a      	ldr	r2, [pc, #232]	; (8003c60 <DMA_SetConfig+0x23c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d03b      	beq.n	8003bf4 <DMA_SetConfig+0x1d0>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a38      	ldr	r2, [pc, #224]	; (8003c64 <DMA_SetConfig+0x240>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d036      	beq.n	8003bf4 <DMA_SetConfig+0x1d0>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a37      	ldr	r2, [pc, #220]	; (8003c68 <DMA_SetConfig+0x244>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d031      	beq.n	8003bf4 <DMA_SetConfig+0x1d0>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a35      	ldr	r2, [pc, #212]	; (8003c6c <DMA_SetConfig+0x248>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d02c      	beq.n	8003bf4 <DMA_SetConfig+0x1d0>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a34      	ldr	r2, [pc, #208]	; (8003c70 <DMA_SetConfig+0x24c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d027      	beq.n	8003bf4 <DMA_SetConfig+0x1d0>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a32      	ldr	r2, [pc, #200]	; (8003c74 <DMA_SetConfig+0x250>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d022      	beq.n	8003bf4 <DMA_SetConfig+0x1d0>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a31      	ldr	r2, [pc, #196]	; (8003c78 <DMA_SetConfig+0x254>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d01d      	beq.n	8003bf4 <DMA_SetConfig+0x1d0>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a2f      	ldr	r2, [pc, #188]	; (8003c7c <DMA_SetConfig+0x258>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d018      	beq.n	8003bf4 <DMA_SetConfig+0x1d0>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a2e      	ldr	r2, [pc, #184]	; (8003c80 <DMA_SetConfig+0x25c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d013      	beq.n	8003bf4 <DMA_SetConfig+0x1d0>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a2c      	ldr	r2, [pc, #176]	; (8003c84 <DMA_SetConfig+0x260>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00e      	beq.n	8003bf4 <DMA_SetConfig+0x1d0>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a2b      	ldr	r2, [pc, #172]	; (8003c88 <DMA_SetConfig+0x264>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d009      	beq.n	8003bf4 <DMA_SetConfig+0x1d0>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a29      	ldr	r2, [pc, #164]	; (8003c8c <DMA_SetConfig+0x268>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d004      	beq.n	8003bf4 <DMA_SetConfig+0x1d0>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a28      	ldr	r2, [pc, #160]	; (8003c90 <DMA_SetConfig+0x26c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d101      	bne.n	8003bf8 <DMA_SetConfig+0x1d4>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <DMA_SetConfig+0x1d6>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d05a      	beq.n	8003cb4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c02:	f003 031f 	and.w	r3, r3, #31
 8003c06:	223f      	movs	r2, #63	; 0x3f
 8003c08:	409a      	lsls	r2, r3
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c1c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b40      	cmp	r3, #64	; 0x40
 8003c2c:	d108      	bne.n	8003c40 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003c3e:	e087      	b.n	8003d50 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	60da      	str	r2, [r3, #12]
}
 8003c50:	e07e      	b.n	8003d50 <DMA_SetConfig+0x32c>
 8003c52:	bf00      	nop
 8003c54:	40020010 	.word	0x40020010
 8003c58:	40020028 	.word	0x40020028
 8003c5c:	40020040 	.word	0x40020040
 8003c60:	40020058 	.word	0x40020058
 8003c64:	40020070 	.word	0x40020070
 8003c68:	40020088 	.word	0x40020088
 8003c6c:	400200a0 	.word	0x400200a0
 8003c70:	400200b8 	.word	0x400200b8
 8003c74:	40020410 	.word	0x40020410
 8003c78:	40020428 	.word	0x40020428
 8003c7c:	40020440 	.word	0x40020440
 8003c80:	40020458 	.word	0x40020458
 8003c84:	40020470 	.word	0x40020470
 8003c88:	40020488 	.word	0x40020488
 8003c8c:	400204a0 	.word	0x400204a0
 8003c90:	400204b8 	.word	0x400204b8
 8003c94:	58025408 	.word	0x58025408
 8003c98:	5802541c 	.word	0x5802541c
 8003c9c:	58025430 	.word	0x58025430
 8003ca0:	58025444 	.word	0x58025444
 8003ca4:	58025458 	.word	0x58025458
 8003ca8:	5802546c 	.word	0x5802546c
 8003cac:	58025480 	.word	0x58025480
 8003cb0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a28      	ldr	r2, [pc, #160]	; (8003d5c <DMA_SetConfig+0x338>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d022      	beq.n	8003d04 <DMA_SetConfig+0x2e0>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a27      	ldr	r2, [pc, #156]	; (8003d60 <DMA_SetConfig+0x33c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d01d      	beq.n	8003d04 <DMA_SetConfig+0x2e0>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a25      	ldr	r2, [pc, #148]	; (8003d64 <DMA_SetConfig+0x340>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d018      	beq.n	8003d04 <DMA_SetConfig+0x2e0>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a24      	ldr	r2, [pc, #144]	; (8003d68 <DMA_SetConfig+0x344>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d013      	beq.n	8003d04 <DMA_SetConfig+0x2e0>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a22      	ldr	r2, [pc, #136]	; (8003d6c <DMA_SetConfig+0x348>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00e      	beq.n	8003d04 <DMA_SetConfig+0x2e0>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a21      	ldr	r2, [pc, #132]	; (8003d70 <DMA_SetConfig+0x34c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d009      	beq.n	8003d04 <DMA_SetConfig+0x2e0>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a1f      	ldr	r2, [pc, #124]	; (8003d74 <DMA_SetConfig+0x350>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d004      	beq.n	8003d04 <DMA_SetConfig+0x2e0>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a1e      	ldr	r2, [pc, #120]	; (8003d78 <DMA_SetConfig+0x354>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d101      	bne.n	8003d08 <DMA_SetConfig+0x2e4>
 8003d04:	2301      	movs	r3, #1
 8003d06:	e000      	b.n	8003d0a <DMA_SetConfig+0x2e6>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d020      	beq.n	8003d50 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d12:	f003 031f 	and.w	r3, r3, #31
 8003d16:	2201      	movs	r2, #1
 8003d18:	409a      	lsls	r2, r3
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b40      	cmp	r3, #64	; 0x40
 8003d2c:	d108      	bne.n	8003d40 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	60da      	str	r2, [r3, #12]
}
 8003d3e:	e007      	b.n	8003d50 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	60da      	str	r2, [r3, #12]
}
 8003d50:	bf00      	nop
 8003d52:	371c      	adds	r7, #28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	58025408 	.word	0x58025408
 8003d60:	5802541c 	.word	0x5802541c
 8003d64:	58025430 	.word	0x58025430
 8003d68:	58025444 	.word	0x58025444
 8003d6c:	58025458 	.word	0x58025458
 8003d70:	5802546c 	.word	0x5802546c
 8003d74:	58025480 	.word	0x58025480
 8003d78:	58025494 	.word	0x58025494

08003d7c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e0c6      	b.n	8003f1c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d102      	bne.n	8003d9c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7fe fe50 	bl	8002a3c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2223      	movs	r2, #35	; 0x23
 8003da0:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da2:	4b60      	ldr	r3, [pc, #384]	; (8003f24 <HAL_ETH_Init+0x1a8>)
 8003da4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003da8:	4a5e      	ldr	r2, [pc, #376]	; (8003f24 <HAL_ETH_Init+0x1a8>)
 8003daa:	f043 0302 	orr.w	r3, r3, #2
 8003dae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003db2:	4b5c      	ldr	r3, [pc, #368]	; (8003f24 <HAL_ETH_Init+0x1a8>)
 8003db4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	7a1b      	ldrb	r3, [r3, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d103      	bne.n	8003dd0 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003dc8:	2000      	movs	r0, #0
 8003dca:	f7ff fac9 	bl	8003360 <HAL_SYSCFG_ETHInterfaceSelect>
 8003dce:	e003      	b.n	8003dd8 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003dd0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003dd4:	f7ff fac4 	bl	8003360 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003df0:	f7ff fa7c 	bl	80032ec <HAL_GetTick>
 8003df4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003df6:	e00f      	b.n	8003e18 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8003df8:	f7ff fa78 	bl	80032ec <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e06:	d907      	bls.n	8003e18 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2204      	movs	r2, #4
 8003e0c:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	22e0      	movs	r2, #224	; 0xe0
 8003e12:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e081      	b.n	8003f1c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1e6      	bne.n	8003df8 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 fac0 	bl	80043b0 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003e30:	f001 fe4e 	bl	8005ad0 <HAL_RCC_GetHCLKFreq>
 8003e34:	4602      	mov	r2, r0
 8003e36:	4b3c      	ldr	r3, [pc, #240]	; (8003f28 <HAL_ETH_Init+0x1ac>)
 8003e38:	fba3 2302 	umull	r2, r3, r3, r2
 8003e3c:	0c9a      	lsrs	r2, r3, #18
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3a01      	subs	r2, #1
 8003e44:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 fa13 	bl	8004274 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003e64:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003e68:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d007      	beq.n	8003e86 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	22e0      	movs	r2, #224	; 0xe0
 8003e80:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e04a      	b.n	8003f1c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	f241 1308 	movw	r3, #4360	; 0x1108
 8003e8e:	4413      	add	r3, r2
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	4b26      	ldr	r3, [pc, #152]	; (8003f2c <HAL_ETH_Init+0x1b0>)
 8003e94:	4013      	ands	r3, r2
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6952      	ldr	r2, [r2, #20]
 8003e9a:	0052      	lsls	r2, r2, #1
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	6809      	ldr	r1, [r1, #0]
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	f241 1308 	movw	r3, #4360	; 0x1108
 8003ea6:	440b      	add	r3, r1
 8003ea8:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 fad8 	bl	8004460 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 fb1c 	bl	80044ee <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	3305      	adds	r3, #5
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	021a      	lsls	r2, r3, #8
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	4619      	mov	r1, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	3303      	adds	r3, #3
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	061a      	lsls	r2, r3, #24
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	3302      	adds	r3, #2
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	041b      	lsls	r3, r3, #16
 8003ee8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003ef4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003f02:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003f04:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2210      	movs	r2, #16
 8003f12:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2210      	movs	r2, #16
 8003f18:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	58024400 	.word	0x58024400
 8003f28:	431bde83 	.word	0x431bde83
 8003f2c:	ffff8001 	.word	0xffff8001

08003f30 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8003f42:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	791b      	ldrb	r3, [r3, #4]
 8003f48:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8003f4a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	7b1b      	ldrb	r3, [r3, #12]
 8003f50:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003f52:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	7b5b      	ldrb	r3, [r3, #13]
 8003f58:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003f5a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	7b9b      	ldrb	r3, [r3, #14]
 8003f60:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003f62:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	7bdb      	ldrb	r3, [r3, #15]
 8003f68:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003f6a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	7c12      	ldrb	r2, [r2, #16]
 8003f70:	2a00      	cmp	r2, #0
 8003f72:	d102      	bne.n	8003f7a <ETH_SetMACConfig+0x4a>
 8003f74:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003f78:	e000      	b.n	8003f7c <ETH_SetMACConfig+0x4c>
 8003f7a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003f7c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	7c52      	ldrb	r2, [r2, #17]
 8003f82:	2a00      	cmp	r2, #0
 8003f84:	d102      	bne.n	8003f8c <ETH_SetMACConfig+0x5c>
 8003f86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f8a:	e000      	b.n	8003f8e <ETH_SetMACConfig+0x5e>
 8003f8c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003f8e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	7c9b      	ldrb	r3, [r3, #18]
 8003f94:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003f96:	431a      	orrs	r2, r3
                                macconf->Speed |
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003f9c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8003fa2:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	7f1b      	ldrb	r3, [r3, #28]
 8003fa8:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8003faa:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	7f5b      	ldrb	r3, [r3, #29]
 8003fb0:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003fb2:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	7f92      	ldrb	r2, [r2, #30]
 8003fb8:	2a00      	cmp	r2, #0
 8003fba:	d102      	bne.n	8003fc2 <ETH_SetMACConfig+0x92>
 8003fbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fc0:	e000      	b.n	8003fc4 <ETH_SetMACConfig+0x94>
 8003fc2:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003fc4:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	7fdb      	ldrb	r3, [r3, #31]
 8003fca:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003fcc:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003fd4:	2a00      	cmp	r2, #0
 8003fd6:	d102      	bne.n	8003fde <ETH_SetMACConfig+0xae>
 8003fd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fdc:	e000      	b.n	8003fe0 <ETH_SetMACConfig+0xb0>
 8003fde:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003fe0:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003fe6:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fee:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8003ff0:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	4b56      	ldr	r3, [pc, #344]	; (800415c <ETH_SetMACConfig+0x22c>)
 8004002:	4013      	ands	r3, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6812      	ldr	r2, [r2, #0]
 8004008:	68f9      	ldr	r1, [r7, #12]
 800400a:	430b      	orrs	r3, r1
 800400c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004012:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800401a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800401c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004024:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004026:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800402e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004030:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004038:	2a00      	cmp	r2, #0
 800403a:	d102      	bne.n	8004042 <ETH_SetMACConfig+0x112>
 800403c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004040:	e000      	b.n	8004044 <ETH_SetMACConfig+0x114>
 8004042:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004044:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	4b42      	ldr	r3, [pc, #264]	; (8004160 <ETH_SetMACConfig+0x230>)
 8004056:	4013      	ands	r3, r2
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	68f9      	ldr	r1, [r7, #12]
 800405e:	430b      	orrs	r3, r1
 8004060:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004068:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	4b3a      	ldr	r3, [pc, #232]	; (8004164 <ETH_SetMACConfig+0x234>)
 800407a:	4013      	ands	r3, r2
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6812      	ldr	r2, [r2, #0]
 8004080:	68f9      	ldr	r1, [r7, #12]
 8004082:	430b      	orrs	r3, r1
 8004084:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800408c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004092:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800409a:	2a00      	cmp	r2, #0
 800409c:	d101      	bne.n	80040a2 <ETH_SetMACConfig+0x172>
 800409e:	2280      	movs	r2, #128	; 0x80
 80040a0:	e000      	b.n	80040a4 <ETH_SetMACConfig+0x174>
 80040a2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80040a4:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040aa:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040b6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80040ba:	4013      	ands	r3, r2
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6812      	ldr	r2, [r2, #0]
 80040c0:	68f9      	ldr	r1, [r7, #12]
 80040c2:	430b      	orrs	r3, r1
 80040c4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80040cc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80040d4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e2:	f023 0103 	bic.w	r1, r3, #3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80040fa:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004116:	2a00      	cmp	r2, #0
 8004118:	d101      	bne.n	800411e <ETH_SetMACConfig+0x1ee>
 800411a:	2240      	movs	r2, #64	; 0x40
 800411c:	e000      	b.n	8004120 <ETH_SetMACConfig+0x1f0>
 800411e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004120:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004128:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800412a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004132:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004134:	4313      	orrs	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004140:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	430a      	orrs	r2, r1
 800414c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004150:	bf00      	nop
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	00048083 	.word	0x00048083
 8004160:	c0f88000 	.word	0xc0f88000
 8004164:	fffffef0 	.word	0xfffffef0

08004168 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	4b38      	ldr	r3, [pc, #224]	; (8004260 <ETH_SetDMAConfig+0xf8>)
 800417e:	4013      	ands	r3, r2
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	6812      	ldr	r2, [r2, #0]
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	6809      	ldr	r1, [r1, #0]
 8004188:	431a      	orrs	r2, r3
 800418a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800418e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	791b      	ldrb	r3, [r3, #4]
 8004194:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800419a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	7b1b      	ldrb	r3, [r3, #12]
 80041a0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	f241 0304 	movw	r3, #4100	; 0x1004
 80041ae:	4413      	add	r3, r2
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	4b2c      	ldr	r3, [pc, #176]	; (8004264 <ETH_SetDMAConfig+0xfc>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6811      	ldr	r1, [r2, #0]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	431a      	orrs	r2, r3
 80041be:	f241 0304 	movw	r3, #4100	; 0x1004
 80041c2:	440b      	add	r3, r1
 80041c4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	7b5b      	ldrb	r3, [r3, #13]
 80041ca:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	4b22      	ldr	r3, [pc, #136]	; (8004268 <ETH_SetDMAConfig+0x100>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6811      	ldr	r1, [r2, #0]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	431a      	orrs	r2, r3
 80041ea:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80041ee:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	7d1b      	ldrb	r3, [r3, #20]
 80041f8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80041fa:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	7f5b      	ldrb	r3, [r3, #29]
 8004200:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	f241 1304 	movw	r3, #4356	; 0x1104
 800420e:	4413      	add	r3, r2
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	4b16      	ldr	r3, [pc, #88]	; (800426c <ETH_SetDMAConfig+0x104>)
 8004214:	4013      	ands	r3, r2
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6811      	ldr	r1, [r2, #0]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	431a      	orrs	r2, r3
 800421e:	f241 1304 	movw	r3, #4356	; 0x1104
 8004222:	440b      	add	r3, r1
 8004224:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	7f1b      	ldrb	r3, [r3, #28]
 800422a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004230:	4313      	orrs	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	f241 1308 	movw	r3, #4360	; 0x1108
 800423c:	4413      	add	r3, r2
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <ETH_SetDMAConfig+0x108>)
 8004242:	4013      	ands	r3, r2
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6811      	ldr	r1, [r2, #0]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	431a      	orrs	r2, r3
 800424c:	f241 1308 	movw	r3, #4360	; 0x1108
 8004250:	440b      	add	r3, r1
 8004252:	601a      	str	r2, [r3, #0]
}
 8004254:	bf00      	nop
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	ffff87fd 	.word	0xffff87fd
 8004264:	ffff2ffe 	.word	0xffff2ffe
 8004268:	fffec000 	.word	0xfffec000
 800426c:	ffc0efef 	.word	0xffc0efef
 8004270:	7fc0ffff 	.word	0x7fc0ffff

08004274 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b0a4      	sub	sp, #144	; 0x90
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800427c:	2301      	movs	r3, #1
 800427e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004282:	2300      	movs	r3, #0
 8004284:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004286:	2300      	movs	r3, #0
 8004288:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800428c:	2300      	movs	r3, #0
 800428e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004292:	2301      	movs	r3, #1
 8004294:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004298:	2301      	movs	r3, #1
 800429a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800429e:	2301      	movs	r3, #1
 80042a0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80042a4:	2300      	movs	r3, #0
 80042a6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80042aa:	2301      	movs	r3, #1
 80042ac:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80042b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042b4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80042b6:	2300      	movs	r3, #0
 80042b8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80042bc:	2300      	movs	r3, #0
 80042be:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80042c0:	2300      	movs	r3, #0
 80042c2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80042c6:	2300      	movs	r3, #0
 80042c8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80042cc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80042d0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80042d2:	2300      	movs	r3, #0
 80042d4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80042d8:	2300      	movs	r3, #0
 80042da:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80042dc:	2301      	movs	r3, #1
 80042de:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80042e2:	2300      	movs	r3, #0
 80042e4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80042e8:	2300      	movs	r3, #0
 80042ea:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80042ee:	2300      	movs	r3, #0
 80042f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80042f6:	2300      	movs	r3, #0
 80042f8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004300:	2300      	movs	r3, #0
 8004302:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004306:	2301      	movs	r3, #1
 8004308:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800430c:	2320      	movs	r3, #32
 800430e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004312:	2301      	movs	r3, #1
 8004314:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004318:	2300      	movs	r3, #0
 800431a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800431e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004322:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004324:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004328:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800432a:	2300      	movs	r3, #0
 800432c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004330:	2302      	movs	r3, #2
 8004332:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004336:	2300      	movs	r3, #0
 8004338:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800433c:	2300      	movs	r3, #0
 800433e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004342:	2300      	movs	r3, #0
 8004344:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004348:	2301      	movs	r3, #1
 800434a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800434e:	2300      	movs	r3, #0
 8004350:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004352:	2301      	movs	r3, #1
 8004354:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004358:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800435c:	4619      	mov	r1, r3
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7ff fde6 	bl	8003f30 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004364:	2301      	movs	r3, #1
 8004366:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004368:	2301      	movs	r3, #1
 800436a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800436c:	2300      	movs	r3, #0
 800436e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004370:	2300      	movs	r3, #0
 8004372:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004376:	2300      	movs	r3, #0
 8004378:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800437a:	2300      	movs	r3, #0
 800437c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800437e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004382:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004384:	2300      	movs	r3, #0
 8004386:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004388:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800438c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800438e:	2300      	movs	r3, #0
 8004390:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8004394:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004398:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800439a:	f107 0308 	add.w	r3, r7, #8
 800439e:	4619      	mov	r1, r3
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff fee1 	bl	8004168 <ETH_SetDMAConfig>
}
 80043a6:	bf00      	nop
 80043a8:	3790      	adds	r7, #144	; 0x90
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
	...

080043b0 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80043c0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80043c8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80043ca:	f001 fb81 	bl	8005ad0 <HAL_RCC_GetHCLKFreq>
 80043ce:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	4a1e      	ldr	r2, [pc, #120]	; (800444c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d908      	bls.n	80043ea <ETH_MAC_MDIO_ClkConfig+0x3a>
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	4a1d      	ldr	r2, [pc, #116]	; (8004450 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d804      	bhi.n	80043ea <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	e027      	b.n	800443a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	4a18      	ldr	r2, [pc, #96]	; (8004450 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d908      	bls.n	8004404 <ETH_MAC_MDIO_ClkConfig+0x54>
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	4a17      	ldr	r2, [pc, #92]	; (8004454 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d804      	bhi.n	8004404 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	e01a      	b.n	800443a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4a13      	ldr	r2, [pc, #76]	; (8004454 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d903      	bls.n	8004414 <ETH_MAC_MDIO_ClkConfig+0x64>
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4a12      	ldr	r2, [pc, #72]	; (8004458 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d911      	bls.n	8004438 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4a10      	ldr	r2, [pc, #64]	; (8004458 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d908      	bls.n	800442e <ETH_MAC_MDIO_ClkConfig+0x7e>
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	4a0f      	ldr	r2, [pc, #60]	; (800445c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d804      	bhi.n	800442e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	e005      	b.n	800443a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	e000      	b.n	800443a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004438:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004444:	bf00      	nop
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	01312cff 	.word	0x01312cff
 8004450:	02160ebf 	.word	0x02160ebf
 8004454:	039386ff 	.word	0x039386ff
 8004458:	05f5e0ff 	.word	0x05f5e0ff
 800445c:	08f0d17f 	.word	0x08f0d17f

08004460 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	e01d      	b.n	80044aa <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68d9      	ldr	r1, [r3, #12]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4613      	mov	r3, r2
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	4413      	add	r3, r2
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	440b      	add	r3, r1
 800447e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2200      	movs	r2, #0
 800448a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2200      	movs	r2, #0
 8004490:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2200      	movs	r2, #0
 8004496:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004498:	68b9      	ldr	r1, [r7, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	3206      	adds	r2, #6
 80044a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	3301      	adds	r3, #1
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2b03      	cmp	r3, #3
 80044ae:	d9de      	bls.n	800446e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	f241 132c 	movw	r3, #4396	; 0x112c
 80044be:	4413      	add	r3, r2
 80044c0:	2203      	movs	r2, #3
 80044c2:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68d9      	ldr	r1, [r3, #12]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	f241 1314 	movw	r3, #4372	; 0x1114
 80044d0:	4413      	add	r3, r2
 80044d2:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80044e0:	601a      	str	r2, [r3, #0]
}
 80044e2:	bf00      	nop
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b085      	sub	sp, #20
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80044f6:	2300      	movs	r3, #0
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	e024      	b.n	8004546 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6919      	ldr	r1, [r3, #16]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	4613      	mov	r3, r2
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	4413      	add	r3, r2
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	440b      	add	r3, r1
 800450c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2200      	movs	r2, #0
 8004518:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2200      	movs	r2, #0
 800451e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2200      	movs	r2, #0
 8004524:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2200      	movs	r2, #0
 800452a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	2200      	movs	r2, #0
 8004530:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	330a      	adds	r3, #10
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	440b      	add	r3, r1
 800453e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	3301      	adds	r3, #1
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b03      	cmp	r3, #3
 800454a:	d9d7      	bls.n	80044fc <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	f241 1330 	movw	r3, #4400	; 0x1130
 8004572:	4413      	add	r3, r2
 8004574:	2203      	movs	r2, #3
 8004576:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6919      	ldr	r1, [r3, #16]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	f241 131c 	movw	r3, #4380	; 0x111c
 8004584:	4413      	add	r3, r2
 8004586:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	f241 1328 	movw	r3, #4392	; 0x1128
 8004598:	4413      	add	r3, r2
 800459a:	6019      	str	r1, [r3, #0]
}
 800459c:	bf00      	nop
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b089      	sub	sp, #36	; 0x24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80045b6:	4b89      	ldr	r3, [pc, #548]	; (80047dc <HAL_GPIO_Init+0x234>)
 80045b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045ba:	e194      	b.n	80048e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	2101      	movs	r1, #1
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	fa01 f303 	lsl.w	r3, r1, r3
 80045c8:	4013      	ands	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 8186 	beq.w	80048e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d00b      	beq.n	80045f4 <HAL_GPIO_Init+0x4c>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d007      	beq.n	80045f4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045e8:	2b11      	cmp	r3, #17
 80045ea:	d003      	beq.n	80045f4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b12      	cmp	r3, #18
 80045f2:	d130      	bne.n	8004656 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	2203      	movs	r2, #3
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	43db      	mvns	r3, r3
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	4013      	ands	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	4313      	orrs	r3, r2
 800461c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800462a:	2201      	movs	r2, #1
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	43db      	mvns	r3, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4013      	ands	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	091b      	lsrs	r3, r3, #4
 8004640:	f003 0201 	and.w	r2, r3, #1
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	4313      	orrs	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	2203      	movs	r2, #3
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	43db      	mvns	r3, r3
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4013      	ands	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	4313      	orrs	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b02      	cmp	r3, #2
 800468c:	d003      	beq.n	8004696 <HAL_GPIO_Init+0xee>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b12      	cmp	r3, #18
 8004694:	d123      	bne.n	80046de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	08da      	lsrs	r2, r3, #3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3208      	adds	r2, #8
 800469e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	220f      	movs	r2, #15
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	43db      	mvns	r3, r3
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	4013      	ands	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	691a      	ldr	r2, [r3, #16]
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	08da      	lsrs	r2, r3, #3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3208      	adds	r2, #8
 80046d8:	69b9      	ldr	r1, [r7, #24]
 80046da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	2203      	movs	r2, #3
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	43db      	mvns	r3, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4013      	ands	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f003 0203 	and.w	r2, r3, #3
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4313      	orrs	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 80e0 	beq.w	80048e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004720:	4b2f      	ldr	r3, [pc, #188]	; (80047e0 <HAL_GPIO_Init+0x238>)
 8004722:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004726:	4a2e      	ldr	r2, [pc, #184]	; (80047e0 <HAL_GPIO_Init+0x238>)
 8004728:	f043 0302 	orr.w	r3, r3, #2
 800472c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004730:	4b2b      	ldr	r3, [pc, #172]	; (80047e0 <HAL_GPIO_Init+0x238>)
 8004732:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800473e:	4a29      	ldr	r2, [pc, #164]	; (80047e4 <HAL_GPIO_Init+0x23c>)
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	089b      	lsrs	r3, r3, #2
 8004744:	3302      	adds	r3, #2
 8004746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800474a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	220f      	movs	r2, #15
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	43db      	mvns	r3, r3
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	4013      	ands	r3, r2
 8004760:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a20      	ldr	r2, [pc, #128]	; (80047e8 <HAL_GPIO_Init+0x240>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d052      	beq.n	8004810 <HAL_GPIO_Init+0x268>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a1f      	ldr	r2, [pc, #124]	; (80047ec <HAL_GPIO_Init+0x244>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d031      	beq.n	80047d6 <HAL_GPIO_Init+0x22e>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a1e      	ldr	r2, [pc, #120]	; (80047f0 <HAL_GPIO_Init+0x248>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d02b      	beq.n	80047d2 <HAL_GPIO_Init+0x22a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a1d      	ldr	r2, [pc, #116]	; (80047f4 <HAL_GPIO_Init+0x24c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d025      	beq.n	80047ce <HAL_GPIO_Init+0x226>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a1c      	ldr	r2, [pc, #112]	; (80047f8 <HAL_GPIO_Init+0x250>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d01f      	beq.n	80047ca <HAL_GPIO_Init+0x222>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a1b      	ldr	r2, [pc, #108]	; (80047fc <HAL_GPIO_Init+0x254>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d019      	beq.n	80047c6 <HAL_GPIO_Init+0x21e>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a1a      	ldr	r2, [pc, #104]	; (8004800 <HAL_GPIO_Init+0x258>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d013      	beq.n	80047c2 <HAL_GPIO_Init+0x21a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a19      	ldr	r2, [pc, #100]	; (8004804 <HAL_GPIO_Init+0x25c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d00d      	beq.n	80047be <HAL_GPIO_Init+0x216>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a18      	ldr	r2, [pc, #96]	; (8004808 <HAL_GPIO_Init+0x260>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d007      	beq.n	80047ba <HAL_GPIO_Init+0x212>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a17      	ldr	r2, [pc, #92]	; (800480c <HAL_GPIO_Init+0x264>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d101      	bne.n	80047b6 <HAL_GPIO_Init+0x20e>
 80047b2:	2309      	movs	r3, #9
 80047b4:	e02d      	b.n	8004812 <HAL_GPIO_Init+0x26a>
 80047b6:	230a      	movs	r3, #10
 80047b8:	e02b      	b.n	8004812 <HAL_GPIO_Init+0x26a>
 80047ba:	2308      	movs	r3, #8
 80047bc:	e029      	b.n	8004812 <HAL_GPIO_Init+0x26a>
 80047be:	2307      	movs	r3, #7
 80047c0:	e027      	b.n	8004812 <HAL_GPIO_Init+0x26a>
 80047c2:	2306      	movs	r3, #6
 80047c4:	e025      	b.n	8004812 <HAL_GPIO_Init+0x26a>
 80047c6:	2305      	movs	r3, #5
 80047c8:	e023      	b.n	8004812 <HAL_GPIO_Init+0x26a>
 80047ca:	2304      	movs	r3, #4
 80047cc:	e021      	b.n	8004812 <HAL_GPIO_Init+0x26a>
 80047ce:	2303      	movs	r3, #3
 80047d0:	e01f      	b.n	8004812 <HAL_GPIO_Init+0x26a>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e01d      	b.n	8004812 <HAL_GPIO_Init+0x26a>
 80047d6:	2301      	movs	r3, #1
 80047d8:	e01b      	b.n	8004812 <HAL_GPIO_Init+0x26a>
 80047da:	bf00      	nop
 80047dc:	58000080 	.word	0x58000080
 80047e0:	58024400 	.word	0x58024400
 80047e4:	58000400 	.word	0x58000400
 80047e8:	58020000 	.word	0x58020000
 80047ec:	58020400 	.word	0x58020400
 80047f0:	58020800 	.word	0x58020800
 80047f4:	58020c00 	.word	0x58020c00
 80047f8:	58021000 	.word	0x58021000
 80047fc:	58021400 	.word	0x58021400
 8004800:	58021800 	.word	0x58021800
 8004804:	58021c00 	.word	0x58021c00
 8004808:	58022000 	.word	0x58022000
 800480c:	58022400 	.word	0x58022400
 8004810:	2300      	movs	r3, #0
 8004812:	69fa      	ldr	r2, [r7, #28]
 8004814:	f002 0203 	and.w	r2, r2, #3
 8004818:	0092      	lsls	r2, r2, #2
 800481a:	4093      	lsls	r3, r2
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	4313      	orrs	r3, r2
 8004820:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004822:	4938      	ldr	r1, [pc, #224]	; (8004904 <HAL_GPIO_Init+0x35c>)
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	089b      	lsrs	r3, r3, #2
 8004828:	3302      	adds	r3, #2
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	43db      	mvns	r3, r3
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4013      	ands	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	4313      	orrs	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	43db      	mvns	r3, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	4013      	ands	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	4313      	orrs	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	43db      	mvns	r3, r3
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	4013      	ands	r3, r2
 8004894:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80048aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80048b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	43db      	mvns	r3, r3
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	4013      	ands	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80048d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	3301      	adds	r3, #1
 80048e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	fa22 f303 	lsr.w	r3, r2, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f47f ae63 	bne.w	80045bc <HAL_GPIO_Init+0x14>
  }
}
 80048f6:	bf00      	nop
 80048f8:	3724      	adds	r7, #36	; 0x24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	58000400 	.word	0x58000400

08004908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	460b      	mov	r3, r1
 8004912:	807b      	strh	r3, [r7, #2]
 8004914:	4613      	mov	r3, r2
 8004916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004918:	787b      	ldrb	r3, [r7, #1]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800491e:	887a      	ldrh	r2, [r7, #2]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004924:	e003      	b.n	800492e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004926:	887b      	ldrh	r3, [r7, #2]
 8004928:	041a      	lsls	r2, r3, #16
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	619a      	str	r2, [r3, #24]
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800493a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800493c:	b08f      	sub	sp, #60	; 0x3c
 800493e:	af0a      	add	r7, sp, #40	; 0x28
 8004940:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e116      	b.n	8004b7a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d106      	bne.n	800496c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7fe fa7e 	bl	8002e68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2203      	movs	r2, #3
 8004970:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497c:	2b00      	cmp	r3, #0
 800497e:	d102      	bne.n	8004986 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f004 fde0 	bl	8009550 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	603b      	str	r3, [r7, #0]
 8004996:	687e      	ldr	r6, [r7, #4]
 8004998:	466d      	mov	r5, sp
 800499a:	f106 0410 	add.w	r4, r6, #16
 800499e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80049ae:	1d33      	adds	r3, r6, #4
 80049b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049b2:	6838      	ldr	r0, [r7, #0]
 80049b4:	f004 fd6a 	bl	800948c <USB_CoreInit>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d005      	beq.n	80049ca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2202      	movs	r2, #2
 80049c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e0d7      	b.n	8004b7a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2100      	movs	r1, #0
 80049d0:	4618      	mov	r0, r3
 80049d2:	f004 fdce 	bl	8009572 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049d6:	2300      	movs	r3, #0
 80049d8:	73fb      	strb	r3, [r7, #15]
 80049da:	e04a      	b.n	8004a72 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80049dc:	7bfa      	ldrb	r2, [r7, #15]
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	4613      	mov	r3, r2
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	1a9b      	subs	r3, r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	440b      	add	r3, r1
 80049ea:	333d      	adds	r3, #61	; 0x3d
 80049ec:	2201      	movs	r2, #1
 80049ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80049f0:	7bfa      	ldrb	r2, [r7, #15]
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	4613      	mov	r3, r2
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	1a9b      	subs	r3, r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	440b      	add	r3, r1
 80049fe:	333c      	adds	r3, #60	; 0x3c
 8004a00:	7bfa      	ldrb	r2, [r7, #15]
 8004a02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a04:	7bfa      	ldrb	r2, [r7, #15]
 8004a06:	7bfb      	ldrb	r3, [r7, #15]
 8004a08:	b298      	uxth	r0, r3
 8004a0a:	6879      	ldr	r1, [r7, #4]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	1a9b      	subs	r3, r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	440b      	add	r3, r1
 8004a16:	3342      	adds	r3, #66	; 0x42
 8004a18:	4602      	mov	r2, r0
 8004a1a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a1c:	7bfa      	ldrb	r2, [r7, #15]
 8004a1e:	6879      	ldr	r1, [r7, #4]
 8004a20:	4613      	mov	r3, r2
 8004a22:	00db      	lsls	r3, r3, #3
 8004a24:	1a9b      	subs	r3, r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	440b      	add	r3, r1
 8004a2a:	333f      	adds	r3, #63	; 0x3f
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a30:	7bfa      	ldrb	r2, [r7, #15]
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	4613      	mov	r3, r2
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	1a9b      	subs	r3, r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	440b      	add	r3, r1
 8004a3e:	3344      	adds	r3, #68	; 0x44
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a44:	7bfa      	ldrb	r2, [r7, #15]
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	1a9b      	subs	r3, r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	440b      	add	r3, r1
 8004a52:	3348      	adds	r3, #72	; 0x48
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a58:	7bfa      	ldrb	r2, [r7, #15]
 8004a5a:	6879      	ldr	r1, [r7, #4]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	1a9b      	subs	r3, r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	440b      	add	r3, r1
 8004a66:	3350      	adds	r3, #80	; 0x50
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	73fb      	strb	r3, [r7, #15]
 8004a72:	7bfa      	ldrb	r2, [r7, #15]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d3af      	bcc.n	80049dc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	73fb      	strb	r3, [r7, #15]
 8004a80:	e044      	b.n	8004b0c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a82:	7bfa      	ldrb	r2, [r7, #15]
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	4613      	mov	r3, r2
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	1a9b      	subs	r3, r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	440b      	add	r3, r1
 8004a90:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004a94:	2200      	movs	r2, #0
 8004a96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a98:	7bfa      	ldrb	r2, [r7, #15]
 8004a9a:	6879      	ldr	r1, [r7, #4]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	1a9b      	subs	r3, r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004aaa:	7bfa      	ldrb	r2, [r7, #15]
 8004aac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004aae:	7bfa      	ldrb	r2, [r7, #15]
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	1a9b      	subs	r3, r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	440b      	add	r3, r1
 8004abc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ac4:	7bfa      	ldrb	r2, [r7, #15]
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	1a9b      	subs	r3, r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ada:	7bfa      	ldrb	r2, [r7, #15]
 8004adc:	6879      	ldr	r1, [r7, #4]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	1a9b      	subs	r3, r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004af0:	7bfa      	ldrb	r2, [r7, #15]
 8004af2:	6879      	ldr	r1, [r7, #4]
 8004af4:	4613      	mov	r3, r2
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	1a9b      	subs	r3, r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	440b      	add	r3, r1
 8004afe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	73fb      	strb	r3, [r7, #15]
 8004b0c:	7bfa      	ldrb	r2, [r7, #15]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d3b5      	bcc.n	8004a82 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	603b      	str	r3, [r7, #0]
 8004b1c:	687e      	ldr	r6, [r7, #4]
 8004b1e:	466d      	mov	r5, sp
 8004b20:	f106 0410 	add.w	r4, r6, #16
 8004b24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b30:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b34:	1d33      	adds	r3, r6, #4
 8004b36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b38:	6838      	ldr	r0, [r7, #0]
 8004b3a:	f004 fd45 	bl	80095c8 <USB_DevInit>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d005      	beq.n	8004b50 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e014      	b.n	8004b7a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d102      	bne.n	8004b6e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f80b 	bl	8004b84 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f004 fee7 	bl	8009946 <USB_DevDisconnect>

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004b84 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bb2:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <HAL_PCDEx_ActivateLPM+0x44>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	10000003 	.word	0x10000003

08004bcc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004bd4:	4b19      	ldr	r3, [pc, #100]	; (8004c3c <HAL_PWREx_ConfigSupply+0x70>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d00a      	beq.n	8004bf6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004be0:	4b16      	ldr	r3, [pc, #88]	; (8004c3c <HAL_PWREx_ConfigSupply+0x70>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d001      	beq.n	8004bf2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e01f      	b.n	8004c32 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	e01d      	b.n	8004c32 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004bf6:	4b11      	ldr	r3, [pc, #68]	; (8004c3c <HAL_PWREx_ConfigSupply+0x70>)
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f023 0207 	bic.w	r2, r3, #7
 8004bfe:	490f      	ldr	r1, [pc, #60]	; (8004c3c <HAL_PWREx_ConfigSupply+0x70>)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c06:	f7fe fb71 	bl	80032ec <HAL_GetTick>
 8004c0a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c0c:	e009      	b.n	8004c22 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c0e:	f7fe fb6d 	bl	80032ec <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c1c:	d901      	bls.n	8004c22 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e007      	b.n	8004c32 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c22:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <HAL_PWREx_ConfigSupply+0x70>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c2e:	d1ee      	bne.n	8004c0e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	58024800 	.word	0x58024800

08004c40 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004c44:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	4a04      	ldr	r2, [pc, #16]	; (8004c5c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c4e:	60d3      	str	r3, [r2, #12]
}
 8004c50:	bf00      	nop
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	58024800 	.word	0x58024800

08004c60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08c      	sub	sp, #48	; 0x30
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e3ff      	b.n	8005472 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 8087 	beq.w	8004d8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c80:	4b99      	ldr	r3, [pc, #612]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c8a:	4b97      	ldr	r3, [pc, #604]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c92:	2b10      	cmp	r3, #16
 8004c94:	d007      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x46>
 8004c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c98:	2b18      	cmp	r3, #24
 8004c9a:	d110      	bne.n	8004cbe <HAL_RCC_OscConfig+0x5e>
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d10b      	bne.n	8004cbe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca6:	4b90      	ldr	r3, [pc, #576]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d06c      	beq.n	8004d8c <HAL_RCC_OscConfig+0x12c>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d168      	bne.n	8004d8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e3d9      	b.n	8005472 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc6:	d106      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x76>
 8004cc8:	4b87      	ldr	r3, [pc, #540]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a86      	ldr	r2, [pc, #536]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	e02e      	b.n	8004d34 <HAL_RCC_OscConfig+0xd4>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x98>
 8004cde:	4b82      	ldr	r3, [pc, #520]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a81      	ldr	r2, [pc, #516]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	4b7f      	ldr	r3, [pc, #508]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a7e      	ldr	r2, [pc, #504]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004cf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	e01d      	b.n	8004d34 <HAL_RCC_OscConfig+0xd4>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d00:	d10c      	bne.n	8004d1c <HAL_RCC_OscConfig+0xbc>
 8004d02:	4b79      	ldr	r3, [pc, #484]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a78      	ldr	r2, [pc, #480]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	4b76      	ldr	r3, [pc, #472]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a75      	ldr	r2, [pc, #468]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	e00b      	b.n	8004d34 <HAL_RCC_OscConfig+0xd4>
 8004d1c:	4b72      	ldr	r3, [pc, #456]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a71      	ldr	r2, [pc, #452]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d26:	6013      	str	r3, [r2, #0]
 8004d28:	4b6f      	ldr	r3, [pc, #444]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a6e      	ldr	r2, [pc, #440]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d013      	beq.n	8004d64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3c:	f7fe fad6 	bl	80032ec <HAL_GetTick>
 8004d40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d44:	f7fe fad2 	bl	80032ec <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b64      	cmp	r3, #100	; 0x64
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e38d      	b.n	8005472 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d56:	4b64      	ldr	r3, [pc, #400]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0f0      	beq.n	8004d44 <HAL_RCC_OscConfig+0xe4>
 8004d62:	e014      	b.n	8004d8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d64:	f7fe fac2 	bl	80032ec <HAL_GetTick>
 8004d68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d6c:	f7fe fabe 	bl	80032ec <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b64      	cmp	r3, #100	; 0x64
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e379      	b.n	8005472 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d7e:	4b5a      	ldr	r3, [pc, #360]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f0      	bne.n	8004d6c <HAL_RCC_OscConfig+0x10c>
 8004d8a:	e000      	b.n	8004d8e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 80ae 	beq.w	8004ef8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d9c:	4b52      	ldr	r3, [pc, #328]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004da4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004da6:	4b50      	ldr	r3, [pc, #320]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004daa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d007      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x162>
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	2b18      	cmp	r3, #24
 8004db6:	d13a      	bne.n	8004e2e <HAL_RCC_OscConfig+0x1ce>
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d135      	bne.n	8004e2e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dc2:	4b49      	ldr	r3, [pc, #292]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0304 	and.w	r3, r3, #4
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d005      	beq.n	8004dda <HAL_RCC_OscConfig+0x17a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e34b      	b.n	8005472 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dda:	f7fe fab5 	bl	8003348 <HAL_GetREVID>
 8004dde:	4602      	mov	r2, r0
 8004de0:	f241 0303 	movw	r3, #4099	; 0x1003
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d817      	bhi.n	8004e18 <HAL_RCC_OscConfig+0x1b8>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	2b40      	cmp	r3, #64	; 0x40
 8004dee:	d108      	bne.n	8004e02 <HAL_RCC_OscConfig+0x1a2>
 8004df0:	4b3d      	ldr	r3, [pc, #244]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004df8:	4a3b      	ldr	r2, [pc, #236]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dfe:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e00:	e07a      	b.n	8004ef8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e02:	4b39      	ldr	r3, [pc, #228]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	031b      	lsls	r3, r3, #12
 8004e10:	4935      	ldr	r1, [pc, #212]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e16:	e06f      	b.n	8004ef8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e18:	4b33      	ldr	r3, [pc, #204]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	061b      	lsls	r3, r3, #24
 8004e26:	4930      	ldr	r1, [pc, #192]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e2c:	e064      	b.n	8004ef8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d045      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e36:	4b2c      	ldr	r3, [pc, #176]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f023 0219 	bic.w	r2, r3, #25
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	4929      	ldr	r1, [pc, #164]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e48:	f7fe fa50 	bl	80032ec <HAL_GetTick>
 8004e4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e50:	f7fe fa4c 	bl	80032ec <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e307      	b.n	8005472 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e62:	4b21      	ldr	r3, [pc, #132]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0304 	and.w	r3, r3, #4
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0f0      	beq.n	8004e50 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e6e:	f7fe fa6b 	bl	8003348 <HAL_GetREVID>
 8004e72:	4602      	mov	r2, r0
 8004e74:	f241 0303 	movw	r3, #4099	; 0x1003
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d817      	bhi.n	8004eac <HAL_RCC_OscConfig+0x24c>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	2b40      	cmp	r3, #64	; 0x40
 8004e82:	d108      	bne.n	8004e96 <HAL_RCC_OscConfig+0x236>
 8004e84:	4b18      	ldr	r3, [pc, #96]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004e8c:	4a16      	ldr	r2, [pc, #88]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e92:	6053      	str	r3, [r2, #4]
 8004e94:	e030      	b.n	8004ef8 <HAL_RCC_OscConfig+0x298>
 8004e96:	4b14      	ldr	r3, [pc, #80]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	031b      	lsls	r3, r3, #12
 8004ea4:	4910      	ldr	r1, [pc, #64]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	604b      	str	r3, [r1, #4]
 8004eaa:	e025      	b.n	8004ef8 <HAL_RCC_OscConfig+0x298>
 8004eac:	4b0e      	ldr	r3, [pc, #56]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	061b      	lsls	r3, r3, #24
 8004eba:	490b      	ldr	r1, [pc, #44]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	604b      	str	r3, [r1, #4]
 8004ec0:	e01a      	b.n	8004ef8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ec2:	4b09      	ldr	r3, [pc, #36]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a08      	ldr	r2, [pc, #32]	; (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004ec8:	f023 0301 	bic.w	r3, r3, #1
 8004ecc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ece:	f7fe fa0d 	bl	80032ec <HAL_GetTick>
 8004ed2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ed4:	e00a      	b.n	8004eec <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ed6:	f7fe fa09 	bl	80032ec <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d903      	bls.n	8004eec <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e2c4      	b.n	8005472 <HAL_RCC_OscConfig+0x812>
 8004ee8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004eec:	4ba4      	ldr	r3, [pc, #656]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1ee      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0310 	and.w	r3, r3, #16
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 80a9 	beq.w	8005058 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f06:	4b9e      	ldr	r3, [pc, #632]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f0e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f10:	4b9b      	ldr	r3, [pc, #620]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 8004f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f14:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d007      	beq.n	8004f2c <HAL_RCC_OscConfig+0x2cc>
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	2b18      	cmp	r3, #24
 8004f20:	d13a      	bne.n	8004f98 <HAL_RCC_OscConfig+0x338>
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f003 0303 	and.w	r3, r3, #3
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d135      	bne.n	8004f98 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f2c:	4b94      	ldr	r3, [pc, #592]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d005      	beq.n	8004f44 <HAL_RCC_OscConfig+0x2e4>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	2b80      	cmp	r3, #128	; 0x80
 8004f3e:	d001      	beq.n	8004f44 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e296      	b.n	8005472 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f44:	f7fe fa00 	bl	8003348 <HAL_GetREVID>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	f241 0303 	movw	r3, #4099	; 0x1003
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d817      	bhi.n	8004f82 <HAL_RCC_OscConfig+0x322>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	2b20      	cmp	r3, #32
 8004f58:	d108      	bne.n	8004f6c <HAL_RCC_OscConfig+0x30c>
 8004f5a:	4b89      	ldr	r3, [pc, #548]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004f62:	4a87      	ldr	r2, [pc, #540]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 8004f64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f68:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f6a:	e075      	b.n	8005058 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f6c:	4b84      	ldr	r3, [pc, #528]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	069b      	lsls	r3, r3, #26
 8004f7a:	4981      	ldr	r1, [pc, #516]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f80:	e06a      	b.n	8005058 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f82:	4b7f      	ldr	r3, [pc, #508]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	061b      	lsls	r3, r3, #24
 8004f90:	497b      	ldr	r1, [pc, #492]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f96:	e05f      	b.n	8005058 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d042      	beq.n	8005026 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004fa0:	4b77      	ldr	r3, [pc, #476]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a76      	ldr	r2, [pc, #472]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 8004fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fac:	f7fe f99e 	bl	80032ec <HAL_GetTick>
 8004fb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004fb4:	f7fe f99a 	bl	80032ec <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e255      	b.n	8005472 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004fc6:	4b6e      	ldr	r3, [pc, #440]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0f0      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fd2:	f7fe f9b9 	bl	8003348 <HAL_GetREVID>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	f241 0303 	movw	r3, #4099	; 0x1003
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d817      	bhi.n	8005010 <HAL_RCC_OscConfig+0x3b0>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	2b20      	cmp	r3, #32
 8004fe6:	d108      	bne.n	8004ffa <HAL_RCC_OscConfig+0x39a>
 8004fe8:	4b65      	ldr	r3, [pc, #404]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004ff0:	4a63      	ldr	r2, [pc, #396]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 8004ff2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ff6:	6053      	str	r3, [r2, #4]
 8004ff8:	e02e      	b.n	8005058 <HAL_RCC_OscConfig+0x3f8>
 8004ffa:	4b61      	ldr	r3, [pc, #388]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	069b      	lsls	r3, r3, #26
 8005008:	495d      	ldr	r1, [pc, #372]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 800500a:	4313      	orrs	r3, r2
 800500c:	604b      	str	r3, [r1, #4]
 800500e:	e023      	b.n	8005058 <HAL_RCC_OscConfig+0x3f8>
 8005010:	4b5b      	ldr	r3, [pc, #364]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	061b      	lsls	r3, r3, #24
 800501e:	4958      	ldr	r1, [pc, #352]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 8005020:	4313      	orrs	r3, r2
 8005022:	60cb      	str	r3, [r1, #12]
 8005024:	e018      	b.n	8005058 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005026:	4b56      	ldr	r3, [pc, #344]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a55      	ldr	r2, [pc, #340]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 800502c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005032:	f7fe f95b 	bl	80032ec <HAL_GetTick>
 8005036:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005038:	e008      	b.n	800504c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800503a:	f7fe f957 	bl	80032ec <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	2b02      	cmp	r3, #2
 8005046:	d901      	bls.n	800504c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e212      	b.n	8005472 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800504c:	4b4c      	ldr	r3, [pc, #304]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1f0      	bne.n	800503a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b00      	cmp	r3, #0
 8005062:	d036      	beq.n	80050d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d019      	beq.n	80050a0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800506c:	4b44      	ldr	r3, [pc, #272]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 800506e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005070:	4a43      	ldr	r2, [pc, #268]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 8005072:	f043 0301 	orr.w	r3, r3, #1
 8005076:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005078:	f7fe f938 	bl	80032ec <HAL_GetTick>
 800507c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005080:	f7fe f934 	bl	80032ec <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e1ef      	b.n	8005472 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005092:	4b3b      	ldr	r3, [pc, #236]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 8005094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0f0      	beq.n	8005080 <HAL_RCC_OscConfig+0x420>
 800509e:	e018      	b.n	80050d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050a0:	4b37      	ldr	r3, [pc, #220]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 80050a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050a4:	4a36      	ldr	r2, [pc, #216]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 80050a6:	f023 0301 	bic.w	r3, r3, #1
 80050aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ac:	f7fe f91e 	bl	80032ec <HAL_GetTick>
 80050b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050b4:	f7fe f91a 	bl	80032ec <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e1d5      	b.n	8005472 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050c6:	4b2e      	ldr	r3, [pc, #184]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 80050c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1f0      	bne.n	80050b4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0320 	and.w	r3, r3, #32
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d036      	beq.n	800514c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d019      	beq.n	800511a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050e6:	4b26      	ldr	r3, [pc, #152]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a25      	ldr	r2, [pc, #148]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 80050ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050f2:	f7fe f8fb 	bl	80032ec <HAL_GetTick>
 80050f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80050f8:	e008      	b.n	800510c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80050fa:	f7fe f8f7 	bl	80032ec <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d901      	bls.n	800510c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e1b2      	b.n	8005472 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800510c:	4b1c      	ldr	r3, [pc, #112]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0f0      	beq.n	80050fa <HAL_RCC_OscConfig+0x49a>
 8005118:	e018      	b.n	800514c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800511a:	4b19      	ldr	r3, [pc, #100]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a18      	ldr	r2, [pc, #96]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 8005120:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005124:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005126:	f7fe f8e1 	bl	80032ec <HAL_GetTick>
 800512a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800512c:	e008      	b.n	8005140 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800512e:	f7fe f8dd 	bl	80032ec <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b02      	cmp	r3, #2
 800513a:	d901      	bls.n	8005140 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e198      	b.n	8005472 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005140:	4b0f      	ldr	r3, [pc, #60]	; (8005180 <HAL_RCC_OscConfig+0x520>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1f0      	bne.n	800512e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 8085 	beq.w	8005264 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800515a:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <HAL_RCC_OscConfig+0x524>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a09      	ldr	r2, [pc, #36]	; (8005184 <HAL_RCC_OscConfig+0x524>)
 8005160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005164:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005166:	f7fe f8c1 	bl	80032ec <HAL_GetTick>
 800516a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800516c:	e00c      	b.n	8005188 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800516e:	f7fe f8bd 	bl	80032ec <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b64      	cmp	r3, #100	; 0x64
 800517a:	d905      	bls.n	8005188 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e178      	b.n	8005472 <HAL_RCC_OscConfig+0x812>
 8005180:	58024400 	.word	0x58024400
 8005184:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005188:	4b96      	ldr	r3, [pc, #600]	; (80053e4 <HAL_RCC_OscConfig+0x784>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0ec      	beq.n	800516e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d106      	bne.n	80051aa <HAL_RCC_OscConfig+0x54a>
 800519c:	4b92      	ldr	r3, [pc, #584]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 800519e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a0:	4a91      	ldr	r2, [pc, #580]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 80051a2:	f043 0301 	orr.w	r3, r3, #1
 80051a6:	6713      	str	r3, [r2, #112]	; 0x70
 80051a8:	e02d      	b.n	8005206 <HAL_RCC_OscConfig+0x5a6>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10c      	bne.n	80051cc <HAL_RCC_OscConfig+0x56c>
 80051b2:	4b8d      	ldr	r3, [pc, #564]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 80051b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b6:	4a8c      	ldr	r2, [pc, #560]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 80051b8:	f023 0301 	bic.w	r3, r3, #1
 80051bc:	6713      	str	r3, [r2, #112]	; 0x70
 80051be:	4b8a      	ldr	r3, [pc, #552]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 80051c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c2:	4a89      	ldr	r2, [pc, #548]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 80051c4:	f023 0304 	bic.w	r3, r3, #4
 80051c8:	6713      	str	r3, [r2, #112]	; 0x70
 80051ca:	e01c      	b.n	8005206 <HAL_RCC_OscConfig+0x5a6>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	2b05      	cmp	r3, #5
 80051d2:	d10c      	bne.n	80051ee <HAL_RCC_OscConfig+0x58e>
 80051d4:	4b84      	ldr	r3, [pc, #528]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 80051d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d8:	4a83      	ldr	r2, [pc, #524]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 80051da:	f043 0304 	orr.w	r3, r3, #4
 80051de:	6713      	str	r3, [r2, #112]	; 0x70
 80051e0:	4b81      	ldr	r3, [pc, #516]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 80051e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e4:	4a80      	ldr	r2, [pc, #512]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 80051e6:	f043 0301 	orr.w	r3, r3, #1
 80051ea:	6713      	str	r3, [r2, #112]	; 0x70
 80051ec:	e00b      	b.n	8005206 <HAL_RCC_OscConfig+0x5a6>
 80051ee:	4b7e      	ldr	r3, [pc, #504]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 80051f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f2:	4a7d      	ldr	r2, [pc, #500]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 80051f4:	f023 0301 	bic.w	r3, r3, #1
 80051f8:	6713      	str	r3, [r2, #112]	; 0x70
 80051fa:	4b7b      	ldr	r3, [pc, #492]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 80051fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fe:	4a7a      	ldr	r2, [pc, #488]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 8005200:	f023 0304 	bic.w	r3, r3, #4
 8005204:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d015      	beq.n	800523a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800520e:	f7fe f86d 	bl	80032ec <HAL_GetTick>
 8005212:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005214:	e00a      	b.n	800522c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005216:	f7fe f869 	bl	80032ec <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	f241 3288 	movw	r2, #5000	; 0x1388
 8005224:	4293      	cmp	r3, r2
 8005226:	d901      	bls.n	800522c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e122      	b.n	8005472 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800522c:	4b6e      	ldr	r3, [pc, #440]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 800522e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0ee      	beq.n	8005216 <HAL_RCC_OscConfig+0x5b6>
 8005238:	e014      	b.n	8005264 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523a:	f7fe f857 	bl	80032ec <HAL_GetTick>
 800523e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005240:	e00a      	b.n	8005258 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005242:	f7fe f853 	bl	80032ec <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005250:	4293      	cmp	r3, r2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e10c      	b.n	8005472 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005258:	4b63      	ldr	r3, [pc, #396]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 800525a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1ee      	bne.n	8005242 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 8101 	beq.w	8005470 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800526e:	4b5e      	ldr	r3, [pc, #376]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005276:	2b18      	cmp	r3, #24
 8005278:	f000 80bc 	beq.w	80053f4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	2b02      	cmp	r3, #2
 8005282:	f040 8095 	bne.w	80053b0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005286:	4b58      	ldr	r3, [pc, #352]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a57      	ldr	r2, [pc, #348]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 800528c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005292:	f7fe f82b 	bl	80032ec <HAL_GetTick>
 8005296:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005298:	e008      	b.n	80052ac <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800529a:	f7fe f827 	bl	80032ec <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d901      	bls.n	80052ac <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e0e2      	b.n	8005472 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052ac:	4b4e      	ldr	r3, [pc, #312]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1f0      	bne.n	800529a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052b8:	4b4b      	ldr	r3, [pc, #300]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 80052ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052bc:	4b4b      	ldr	r3, [pc, #300]	; (80053ec <HAL_RCC_OscConfig+0x78c>)
 80052be:	4013      	ands	r3, r2
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80052c8:	0112      	lsls	r2, r2, #4
 80052ca:	430a      	orrs	r2, r1
 80052cc:	4946      	ldr	r1, [pc, #280]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	628b      	str	r3, [r1, #40]	; 0x28
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d6:	3b01      	subs	r3, #1
 80052d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e0:	3b01      	subs	r3, #1
 80052e2:	025b      	lsls	r3, r3, #9
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	431a      	orrs	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	3b01      	subs	r3, #1
 80052ee:	041b      	lsls	r3, r3, #16
 80052f0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052f4:	431a      	orrs	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fa:	3b01      	subs	r3, #1
 80052fc:	061b      	lsls	r3, r3, #24
 80052fe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005302:	4939      	ldr	r1, [pc, #228]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 8005304:	4313      	orrs	r3, r2
 8005306:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005308:	4b37      	ldr	r3, [pc, #220]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	4a36      	ldr	r2, [pc, #216]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 800530e:	f023 0301 	bic.w	r3, r3, #1
 8005312:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005314:	4b34      	ldr	r3, [pc, #208]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 8005316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005318:	4b35      	ldr	r3, [pc, #212]	; (80053f0 <HAL_RCC_OscConfig+0x790>)
 800531a:	4013      	ands	r3, r2
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005320:	00d2      	lsls	r2, r2, #3
 8005322:	4931      	ldr	r1, [pc, #196]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 8005324:	4313      	orrs	r3, r2
 8005326:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005328:	4b2f      	ldr	r3, [pc, #188]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 800532a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532c:	f023 020c 	bic.w	r2, r3, #12
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	492c      	ldr	r1, [pc, #176]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 8005336:	4313      	orrs	r3, r2
 8005338:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800533a:	4b2b      	ldr	r3, [pc, #172]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 800533c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533e:	f023 0202 	bic.w	r2, r3, #2
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005346:	4928      	ldr	r1, [pc, #160]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 8005348:	4313      	orrs	r3, r2
 800534a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800534c:	4b26      	ldr	r3, [pc, #152]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 800534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005350:	4a25      	ldr	r2, [pc, #148]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 8005352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005356:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005358:	4b23      	ldr	r3, [pc, #140]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 800535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535c:	4a22      	ldr	r2, [pc, #136]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 800535e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005362:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005364:	4b20      	ldr	r3, [pc, #128]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	4a1f      	ldr	r2, [pc, #124]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 800536a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800536e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005370:	4b1d      	ldr	r3, [pc, #116]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 8005372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005374:	4a1c      	ldr	r2, [pc, #112]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 8005376:	f043 0301 	orr.w	r3, r3, #1
 800537a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800537c:	4b1a      	ldr	r3, [pc, #104]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a19      	ldr	r2, [pc, #100]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 8005382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005388:	f7fd ffb0 	bl	80032ec <HAL_GetTick>
 800538c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800538e:	e008      	b.n	80053a2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005390:	f7fd ffac 	bl	80032ec <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e067      	b.n	8005472 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053a2:	4b11      	ldr	r3, [pc, #68]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0f0      	beq.n	8005390 <HAL_RCC_OscConfig+0x730>
 80053ae:	e05f      	b.n	8005470 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053b0:	4b0d      	ldr	r3, [pc, #52]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a0c      	ldr	r2, [pc, #48]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 80053b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053bc:	f7fd ff96 	bl	80032ec <HAL_GetTick>
 80053c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053c4:	f7fd ff92 	bl	80032ec <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e04d      	b.n	8005472 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053d6:	4b04      	ldr	r3, [pc, #16]	; (80053e8 <HAL_RCC_OscConfig+0x788>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f0      	bne.n	80053c4 <HAL_RCC_OscConfig+0x764>
 80053e2:	e045      	b.n	8005470 <HAL_RCC_OscConfig+0x810>
 80053e4:	58024800 	.word	0x58024800
 80053e8:	58024400 	.word	0x58024400
 80053ec:	fffffc0c 	.word	0xfffffc0c
 80053f0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80053f4:	4b21      	ldr	r3, [pc, #132]	; (800547c <HAL_RCC_OscConfig+0x81c>)
 80053f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80053fa:	4b20      	ldr	r3, [pc, #128]	; (800547c <HAL_RCC_OscConfig+0x81c>)
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	2b01      	cmp	r3, #1
 8005406:	d031      	beq.n	800546c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	f003 0203 	and.w	r2, r3, #3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005412:	429a      	cmp	r2, r3
 8005414:	d12a      	bne.n	800546c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	091b      	lsrs	r3, r3, #4
 800541a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005422:	429a      	cmp	r2, r3
 8005424:	d122      	bne.n	800546c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005430:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005432:	429a      	cmp	r2, r3
 8005434:	d11a      	bne.n	800546c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	0a5b      	lsrs	r3, r3, #9
 800543a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005442:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005444:	429a      	cmp	r2, r3
 8005446:	d111      	bne.n	800546c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	0c1b      	lsrs	r3, r3, #16
 800544c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005454:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005456:	429a      	cmp	r2, r3
 8005458:	d108      	bne.n	800546c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	0e1b      	lsrs	r3, r3, #24
 800545e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005466:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005468:	429a      	cmp	r2, r3
 800546a:	d001      	beq.n	8005470 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e000      	b.n	8005472 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3730      	adds	r7, #48	; 0x30
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	58024400 	.word	0x58024400

08005480 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e19c      	b.n	80057ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005494:	4b8a      	ldr	r3, [pc, #552]	; (80056c0 <HAL_RCC_ClockConfig+0x240>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 030f 	and.w	r3, r3, #15
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d910      	bls.n	80054c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a2:	4b87      	ldr	r3, [pc, #540]	; (80056c0 <HAL_RCC_ClockConfig+0x240>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f023 020f 	bic.w	r2, r3, #15
 80054aa:	4985      	ldr	r1, [pc, #532]	; (80056c0 <HAL_RCC_ClockConfig+0x240>)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b2:	4b83      	ldr	r3, [pc, #524]	; (80056c0 <HAL_RCC_ClockConfig+0x240>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d001      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e184      	b.n	80057ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d010      	beq.n	80054f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691a      	ldr	r2, [r3, #16]
 80054d4:	4b7b      	ldr	r3, [pc, #492]	; (80056c4 <HAL_RCC_ClockConfig+0x244>)
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054dc:	429a      	cmp	r2, r3
 80054de:	d908      	bls.n	80054f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054e0:	4b78      	ldr	r3, [pc, #480]	; (80056c4 <HAL_RCC_ClockConfig+0x244>)
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	4975      	ldr	r1, [pc, #468]	; (80056c4 <HAL_RCC_ClockConfig+0x244>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0308 	and.w	r3, r3, #8
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d010      	beq.n	8005520 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	695a      	ldr	r2, [r3, #20]
 8005502:	4b70      	ldr	r3, [pc, #448]	; (80056c4 <HAL_RCC_ClockConfig+0x244>)
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800550a:	429a      	cmp	r2, r3
 800550c:	d908      	bls.n	8005520 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800550e:	4b6d      	ldr	r3, [pc, #436]	; (80056c4 <HAL_RCC_ClockConfig+0x244>)
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	496a      	ldr	r1, [pc, #424]	; (80056c4 <HAL_RCC_ClockConfig+0x244>)
 800551c:	4313      	orrs	r3, r2
 800551e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0310 	and.w	r3, r3, #16
 8005528:	2b00      	cmp	r3, #0
 800552a:	d010      	beq.n	800554e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	699a      	ldr	r2, [r3, #24]
 8005530:	4b64      	ldr	r3, [pc, #400]	; (80056c4 <HAL_RCC_ClockConfig+0x244>)
 8005532:	69db      	ldr	r3, [r3, #28]
 8005534:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005538:	429a      	cmp	r2, r3
 800553a:	d908      	bls.n	800554e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800553c:	4b61      	ldr	r3, [pc, #388]	; (80056c4 <HAL_RCC_ClockConfig+0x244>)
 800553e:	69db      	ldr	r3, [r3, #28]
 8005540:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	495e      	ldr	r1, [pc, #376]	; (80056c4 <HAL_RCC_ClockConfig+0x244>)
 800554a:	4313      	orrs	r3, r2
 800554c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b00      	cmp	r3, #0
 8005558:	d010      	beq.n	800557c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	69da      	ldr	r2, [r3, #28]
 800555e:	4b59      	ldr	r3, [pc, #356]	; (80056c4 <HAL_RCC_ClockConfig+0x244>)
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005566:	429a      	cmp	r2, r3
 8005568:	d908      	bls.n	800557c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800556a:	4b56      	ldr	r3, [pc, #344]	; (80056c4 <HAL_RCC_ClockConfig+0x244>)
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	4953      	ldr	r1, [pc, #332]	; (80056c4 <HAL_RCC_ClockConfig+0x244>)
 8005578:	4313      	orrs	r3, r2
 800557a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d010      	beq.n	80055aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	4b4d      	ldr	r3, [pc, #308]	; (80056c4 <HAL_RCC_ClockConfig+0x244>)
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	f003 030f 	and.w	r3, r3, #15
 8005594:	429a      	cmp	r2, r3
 8005596:	d908      	bls.n	80055aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005598:	4b4a      	ldr	r3, [pc, #296]	; (80056c4 <HAL_RCC_ClockConfig+0x244>)
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	f023 020f 	bic.w	r2, r3, #15
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	4947      	ldr	r1, [pc, #284]	; (80056c4 <HAL_RCC_ClockConfig+0x244>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d055      	beq.n	8005662 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80055b6:	4b43      	ldr	r3, [pc, #268]	; (80056c4 <HAL_RCC_ClockConfig+0x244>)
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	4940      	ldr	r1, [pc, #256]	; (80056c4 <HAL_RCC_ClockConfig+0x244>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d107      	bne.n	80055e0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055d0:	4b3c      	ldr	r3, [pc, #240]	; (80056c4 <HAL_RCC_ClockConfig+0x244>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d121      	bne.n	8005620 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e0f6      	b.n	80057ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b03      	cmp	r3, #3
 80055e6:	d107      	bne.n	80055f8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055e8:	4b36      	ldr	r3, [pc, #216]	; (80056c4 <HAL_RCC_ClockConfig+0x244>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d115      	bne.n	8005620 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e0ea      	b.n	80057ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d107      	bne.n	8005610 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005600:	4b30      	ldr	r3, [pc, #192]	; (80056c4 <HAL_RCC_ClockConfig+0x244>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005608:	2b00      	cmp	r3, #0
 800560a:	d109      	bne.n	8005620 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e0de      	b.n	80057ce <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005610:	4b2c      	ldr	r3, [pc, #176]	; (80056c4 <HAL_RCC_ClockConfig+0x244>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e0d6      	b.n	80057ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005620:	4b28      	ldr	r3, [pc, #160]	; (80056c4 <HAL_RCC_ClockConfig+0x244>)
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	f023 0207 	bic.w	r2, r3, #7
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	4925      	ldr	r1, [pc, #148]	; (80056c4 <HAL_RCC_ClockConfig+0x244>)
 800562e:	4313      	orrs	r3, r2
 8005630:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005632:	f7fd fe5b 	bl	80032ec <HAL_GetTick>
 8005636:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005638:	e00a      	b.n	8005650 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800563a:	f7fd fe57 	bl	80032ec <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	f241 3288 	movw	r2, #5000	; 0x1388
 8005648:	4293      	cmp	r3, r2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e0be      	b.n	80057ce <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005650:	4b1c      	ldr	r3, [pc, #112]	; (80056c4 <HAL_RCC_ClockConfig+0x244>)
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	429a      	cmp	r2, r3
 8005660:	d1eb      	bne.n	800563a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d010      	beq.n	8005690 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68da      	ldr	r2, [r3, #12]
 8005672:	4b14      	ldr	r3, [pc, #80]	; (80056c4 <HAL_RCC_ClockConfig+0x244>)
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	f003 030f 	and.w	r3, r3, #15
 800567a:	429a      	cmp	r2, r3
 800567c:	d208      	bcs.n	8005690 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800567e:	4b11      	ldr	r3, [pc, #68]	; (80056c4 <HAL_RCC_ClockConfig+0x244>)
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	f023 020f 	bic.w	r2, r3, #15
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	490e      	ldr	r1, [pc, #56]	; (80056c4 <HAL_RCC_ClockConfig+0x244>)
 800568c:	4313      	orrs	r3, r2
 800568e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005690:	4b0b      	ldr	r3, [pc, #44]	; (80056c0 <HAL_RCC_ClockConfig+0x240>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 030f 	and.w	r3, r3, #15
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	429a      	cmp	r2, r3
 800569c:	d214      	bcs.n	80056c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800569e:	4b08      	ldr	r3, [pc, #32]	; (80056c0 <HAL_RCC_ClockConfig+0x240>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f023 020f 	bic.w	r2, r3, #15
 80056a6:	4906      	ldr	r1, [pc, #24]	; (80056c0 <HAL_RCC_ClockConfig+0x240>)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ae:	4b04      	ldr	r3, [pc, #16]	; (80056c0 <HAL_RCC_ClockConfig+0x240>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 030f 	and.w	r3, r3, #15
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d005      	beq.n	80056c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e086      	b.n	80057ce <HAL_RCC_ClockConfig+0x34e>
 80056c0:	52002000 	.word	0x52002000
 80056c4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d010      	beq.n	80056f6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691a      	ldr	r2, [r3, #16]
 80056d8:	4b3f      	ldr	r3, [pc, #252]	; (80057d8 <HAL_RCC_ClockConfig+0x358>)
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d208      	bcs.n	80056f6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80056e4:	4b3c      	ldr	r3, [pc, #240]	; (80057d8 <HAL_RCC_ClockConfig+0x358>)
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	4939      	ldr	r1, [pc, #228]	; (80057d8 <HAL_RCC_ClockConfig+0x358>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0308 	and.w	r3, r3, #8
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d010      	beq.n	8005724 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	695a      	ldr	r2, [r3, #20]
 8005706:	4b34      	ldr	r3, [pc, #208]	; (80057d8 <HAL_RCC_ClockConfig+0x358>)
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800570e:	429a      	cmp	r2, r3
 8005710:	d208      	bcs.n	8005724 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005712:	4b31      	ldr	r3, [pc, #196]	; (80057d8 <HAL_RCC_ClockConfig+0x358>)
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	492e      	ldr	r1, [pc, #184]	; (80057d8 <HAL_RCC_ClockConfig+0x358>)
 8005720:	4313      	orrs	r3, r2
 8005722:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0310 	and.w	r3, r3, #16
 800572c:	2b00      	cmp	r3, #0
 800572e:	d010      	beq.n	8005752 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	699a      	ldr	r2, [r3, #24]
 8005734:	4b28      	ldr	r3, [pc, #160]	; (80057d8 <HAL_RCC_ClockConfig+0x358>)
 8005736:	69db      	ldr	r3, [r3, #28]
 8005738:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800573c:	429a      	cmp	r2, r3
 800573e:	d208      	bcs.n	8005752 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005740:	4b25      	ldr	r3, [pc, #148]	; (80057d8 <HAL_RCC_ClockConfig+0x358>)
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	4922      	ldr	r1, [pc, #136]	; (80057d8 <HAL_RCC_ClockConfig+0x358>)
 800574e:	4313      	orrs	r3, r2
 8005750:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0320 	and.w	r3, r3, #32
 800575a:	2b00      	cmp	r3, #0
 800575c:	d010      	beq.n	8005780 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69da      	ldr	r2, [r3, #28]
 8005762:	4b1d      	ldr	r3, [pc, #116]	; (80057d8 <HAL_RCC_ClockConfig+0x358>)
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800576a:	429a      	cmp	r2, r3
 800576c:	d208      	bcs.n	8005780 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800576e:	4b1a      	ldr	r3, [pc, #104]	; (80057d8 <HAL_RCC_ClockConfig+0x358>)
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	4917      	ldr	r1, [pc, #92]	; (80057d8 <HAL_RCC_ClockConfig+0x358>)
 800577c:	4313      	orrs	r3, r2
 800577e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005780:	f000 f834 	bl	80057ec <HAL_RCC_GetSysClockFreq>
 8005784:	4601      	mov	r1, r0
 8005786:	4b14      	ldr	r3, [pc, #80]	; (80057d8 <HAL_RCC_ClockConfig+0x358>)
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	0a1b      	lsrs	r3, r3, #8
 800578c:	f003 030f 	and.w	r3, r3, #15
 8005790:	4a12      	ldr	r2, [pc, #72]	; (80057dc <HAL_RCC_ClockConfig+0x35c>)
 8005792:	5cd3      	ldrb	r3, [r2, r3]
 8005794:	f003 031f 	and.w	r3, r3, #31
 8005798:	fa21 f303 	lsr.w	r3, r1, r3
 800579c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800579e:	4b0e      	ldr	r3, [pc, #56]	; (80057d8 <HAL_RCC_ClockConfig+0x358>)
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	f003 030f 	and.w	r3, r3, #15
 80057a6:	4a0d      	ldr	r2, [pc, #52]	; (80057dc <HAL_RCC_ClockConfig+0x35c>)
 80057a8:	5cd3      	ldrb	r3, [r2, r3]
 80057aa:	f003 031f 	and.w	r3, r3, #31
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	fa22 f303 	lsr.w	r3, r2, r3
 80057b4:	4a0a      	ldr	r2, [pc, #40]	; (80057e0 <HAL_RCC_ClockConfig+0x360>)
 80057b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80057b8:	4a0a      	ldr	r2, [pc, #40]	; (80057e4 <HAL_RCC_ClockConfig+0x364>)
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80057be:	4b0a      	ldr	r3, [pc, #40]	; (80057e8 <HAL_RCC_ClockConfig+0x368>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fd fd48 	bl	8003258 <HAL_InitTick>
 80057c8:	4603      	mov	r3, r0
 80057ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80057cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3718      	adds	r7, #24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	58024400 	.word	0x58024400
 80057dc:	08009ef0 	.word	0x08009ef0
 80057e0:	24000004 	.word	0x24000004
 80057e4:	24000000 	.word	0x24000000
 80057e8:	24000008 	.word	0x24000008

080057ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b089      	sub	sp, #36	; 0x24
 80057f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057f2:	4baf      	ldr	r3, [pc, #700]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057fa:	2b18      	cmp	r3, #24
 80057fc:	f200 814e 	bhi.w	8005a9c <HAL_RCC_GetSysClockFreq+0x2b0>
 8005800:	a201      	add	r2, pc, #4	; (adr r2, 8005808 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005806:	bf00      	nop
 8005808:	0800586d 	.word	0x0800586d
 800580c:	08005a9d 	.word	0x08005a9d
 8005810:	08005a9d 	.word	0x08005a9d
 8005814:	08005a9d 	.word	0x08005a9d
 8005818:	08005a9d 	.word	0x08005a9d
 800581c:	08005a9d 	.word	0x08005a9d
 8005820:	08005a9d 	.word	0x08005a9d
 8005824:	08005a9d 	.word	0x08005a9d
 8005828:	08005893 	.word	0x08005893
 800582c:	08005a9d 	.word	0x08005a9d
 8005830:	08005a9d 	.word	0x08005a9d
 8005834:	08005a9d 	.word	0x08005a9d
 8005838:	08005a9d 	.word	0x08005a9d
 800583c:	08005a9d 	.word	0x08005a9d
 8005840:	08005a9d 	.word	0x08005a9d
 8005844:	08005a9d 	.word	0x08005a9d
 8005848:	08005899 	.word	0x08005899
 800584c:	08005a9d 	.word	0x08005a9d
 8005850:	08005a9d 	.word	0x08005a9d
 8005854:	08005a9d 	.word	0x08005a9d
 8005858:	08005a9d 	.word	0x08005a9d
 800585c:	08005a9d 	.word	0x08005a9d
 8005860:	08005a9d 	.word	0x08005a9d
 8005864:	08005a9d 	.word	0x08005a9d
 8005868:	0800589f 	.word	0x0800589f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800586c:	4b90      	ldr	r3, [pc, #576]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0320 	and.w	r3, r3, #32
 8005874:	2b00      	cmp	r3, #0
 8005876:	d009      	beq.n	800588c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005878:	4b8d      	ldr	r3, [pc, #564]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	08db      	lsrs	r3, r3, #3
 800587e:	f003 0303 	and.w	r3, r3, #3
 8005882:	4a8c      	ldr	r2, [pc, #560]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005884:	fa22 f303 	lsr.w	r3, r2, r3
 8005888:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800588a:	e10a      	b.n	8005aa2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800588c:	4b89      	ldr	r3, [pc, #548]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800588e:	61bb      	str	r3, [r7, #24]
    break;
 8005890:	e107      	b.n	8005aa2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005892:	4b89      	ldr	r3, [pc, #548]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005894:	61bb      	str	r3, [r7, #24]
    break;
 8005896:	e104      	b.n	8005aa2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005898:	4b88      	ldr	r3, [pc, #544]	; (8005abc <HAL_RCC_GetSysClockFreq+0x2d0>)
 800589a:	61bb      	str	r3, [r7, #24]
    break;
 800589c:	e101      	b.n	8005aa2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800589e:	4b84      	ldr	r3, [pc, #528]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80058a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a2:	f003 0303 	and.w	r3, r3, #3
 80058a6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80058a8:	4b81      	ldr	r3, [pc, #516]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80058aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ac:	091b      	lsrs	r3, r3, #4
 80058ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058b2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80058b4:	4b7e      	ldr	r3, [pc, #504]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80058b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80058be:	4b7c      	ldr	r3, [pc, #496]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80058c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c2:	08db      	lsrs	r3, r3, #3
 80058c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	fb02 f303 	mul.w	r3, r2, r3
 80058ce:	ee07 3a90 	vmov	s15, r3
 80058d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 80da 	beq.w	8005a96 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d05a      	beq.n	800599e <HAL_RCC_GetSysClockFreq+0x1b2>
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d302      	bcc.n	80058f2 <HAL_RCC_GetSysClockFreq+0x106>
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d078      	beq.n	80059e2 <HAL_RCC_GetSysClockFreq+0x1f6>
 80058f0:	e099      	b.n	8005a26 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058f2:	4b6f      	ldr	r3, [pc, #444]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d02d      	beq.n	800595a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058fe:	4b6c      	ldr	r3, [pc, #432]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	08db      	lsrs	r3, r3, #3
 8005904:	f003 0303 	and.w	r3, r3, #3
 8005908:	4a6a      	ldr	r2, [pc, #424]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800590a:	fa22 f303 	lsr.w	r3, r2, r3
 800590e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	ee07 3a90 	vmov	s15, r3
 8005916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	ee07 3a90 	vmov	s15, r3
 8005920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005924:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005928:	4b61      	ldr	r3, [pc, #388]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800592a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005930:	ee07 3a90 	vmov	s15, r3
 8005934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005938:	ed97 6a02 	vldr	s12, [r7, #8]
 800593c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8005ac0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005940:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005944:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005948:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800594c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005954:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005958:	e087      	b.n	8005a6a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	ee07 3a90 	vmov	s15, r3
 8005960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005964:	eddf 6a57 	vldr	s13, [pc, #348]	; 8005ac4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8005968:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800596c:	4b50      	ldr	r3, [pc, #320]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800596e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005974:	ee07 3a90 	vmov	s15, r3
 8005978:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800597c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005980:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005ac0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005984:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005988:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800598c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005990:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005998:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800599c:	e065      	b.n	8005a6a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	ee07 3a90 	vmov	s15, r3
 80059a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a8:	eddf 6a47 	vldr	s13, [pc, #284]	; 8005ac8 <HAL_RCC_GetSysClockFreq+0x2dc>
 80059ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059b0:	4b3f      	ldr	r3, [pc, #252]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80059b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b8:	ee07 3a90 	vmov	s15, r3
 80059bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80059c4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005ac0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80059c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059e0:	e043      	b.n	8005a6a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	ee07 3a90 	vmov	s15, r3
 80059e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ec:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005acc <HAL_RCC_GetSysClockFreq+0x2e0>
 80059f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059f4:	4b2e      	ldr	r3, [pc, #184]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80059f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059fc:	ee07 3a90 	vmov	s15, r3
 8005a00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a04:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a08:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005ac0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005a0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a24:	e021      	b.n	8005a6a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	ee07 3a90 	vmov	s15, r3
 8005a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a30:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005ac8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005a34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a38:	4b1d      	ldr	r3, [pc, #116]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a40:	ee07 3a90 	vmov	s15, r3
 8005a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a48:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a4c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005ac0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005a50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a68:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005a6a:	4b11      	ldr	r3, [pc, #68]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6e:	0a5b      	lsrs	r3, r3, #9
 8005a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a74:	3301      	adds	r3, #1
 8005a76:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a82:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a8e:	ee17 3a90 	vmov	r3, s15
 8005a92:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005a94:	e005      	b.n	8005aa2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61bb      	str	r3, [r7, #24]
    break;
 8005a9a:	e002      	b.n	8005aa2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8005a9c:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005a9e:	61bb      	str	r3, [r7, #24]
    break;
 8005aa0:	bf00      	nop
  }

  return sysclockfreq;
 8005aa2:	69bb      	ldr	r3, [r7, #24]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3724      	adds	r7, #36	; 0x24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	58024400 	.word	0x58024400
 8005ab4:	03d09000 	.word	0x03d09000
 8005ab8:	003d0900 	.word	0x003d0900
 8005abc:	007a1200 	.word	0x007a1200
 8005ac0:	46000000 	.word	0x46000000
 8005ac4:	4c742400 	.word	0x4c742400
 8005ac8:	4a742400 	.word	0x4a742400
 8005acc:	4af42400 	.word	0x4af42400

08005ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005ad6:	f7ff fe89 	bl	80057ec <HAL_RCC_GetSysClockFreq>
 8005ada:	4601      	mov	r1, r0
 8005adc:	4b10      	ldr	r3, [pc, #64]	; (8005b20 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	0a1b      	lsrs	r3, r3, #8
 8005ae2:	f003 030f 	and.w	r3, r3, #15
 8005ae6:	4a0f      	ldr	r2, [pc, #60]	; (8005b24 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ae8:	5cd3      	ldrb	r3, [r2, r3]
 8005aea:	f003 031f 	and.w	r3, r3, #31
 8005aee:	fa21 f303 	lsr.w	r3, r1, r3
 8005af2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005af4:	4b0a      	ldr	r3, [pc, #40]	; (8005b20 <HAL_RCC_GetHCLKFreq+0x50>)
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	f003 030f 	and.w	r3, r3, #15
 8005afc:	4a09      	ldr	r2, [pc, #36]	; (8005b24 <HAL_RCC_GetHCLKFreq+0x54>)
 8005afe:	5cd3      	ldrb	r3, [r2, r3]
 8005b00:	f003 031f 	and.w	r3, r3, #31
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0a:	4a07      	ldr	r2, [pc, #28]	; (8005b28 <HAL_RCC_GetHCLKFreq+0x58>)
 8005b0c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b0e:	4a07      	ldr	r2, [pc, #28]	; (8005b2c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005b14:	4b04      	ldr	r3, [pc, #16]	; (8005b28 <HAL_RCC_GetHCLKFreq+0x58>)
 8005b16:	681b      	ldr	r3, [r3, #0]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	58024400 	.word	0x58024400
 8005b24:	08009ef0 	.word	0x08009ef0
 8005b28:	24000004 	.word	0x24000004
 8005b2c:	24000000 	.word	0x24000000

08005b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005b34:	f7ff ffcc 	bl	8005ad0 <HAL_RCC_GetHCLKFreq>
 8005b38:	4601      	mov	r1, r0
 8005b3a:	4b06      	ldr	r3, [pc, #24]	; (8005b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	091b      	lsrs	r3, r3, #4
 8005b40:	f003 0307 	and.w	r3, r3, #7
 8005b44:	4a04      	ldr	r2, [pc, #16]	; (8005b58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b46:	5cd3      	ldrb	r3, [r2, r3]
 8005b48:	f003 031f 	and.w	r3, r3, #31
 8005b4c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	58024400 	.word	0x58024400
 8005b58:	08009ef0 	.word	0x08009ef0

08005b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005b60:	f7ff ffb6 	bl	8005ad0 <HAL_RCC_GetHCLKFreq>
 8005b64:	4601      	mov	r1, r0
 8005b66:	4b06      	ldr	r3, [pc, #24]	; (8005b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	0a1b      	lsrs	r3, r3, #8
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	4a04      	ldr	r2, [pc, #16]	; (8005b84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b72:	5cd3      	ldrb	r3, [r2, r3]
 8005b74:	f003 031f 	and.w	r3, r3, #31
 8005b78:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	58024400 	.word	0x58024400
 8005b84:	08009ef0 	.word	0x08009ef0

08005b88 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b90:	2300      	movs	r3, #0
 8005b92:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b94:	2300      	movs	r3, #0
 8005b96:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d03d      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ba8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bac:	d013      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bb2:	d802      	bhi.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d007      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005bb8:	e01f      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005bba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bbe:	d013      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005bc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bc4:	d01c      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005bc6:	e018      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bc8:	4baf      	ldr	r3, [pc, #700]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bcc:	4aae      	ldr	r2, [pc, #696]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005bd4:	e015      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	3304      	adds	r3, #4
 8005bda:	2102      	movs	r1, #2
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f001 f96f 	bl	8006ec0 <RCCEx_PLL2_Config>
 8005be2:	4603      	mov	r3, r0
 8005be4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005be6:	e00c      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	3324      	adds	r3, #36	; 0x24
 8005bec:	2102      	movs	r1, #2
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f001 fa18 	bl	8007024 <RCCEx_PLL3_Config>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005bf8:	e003      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	75fb      	strb	r3, [r7, #23]
      break;
 8005bfe:	e000      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005c00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c02:	7dfb      	ldrb	r3, [r7, #23]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d109      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005c08:	4b9f      	ldr	r3, [pc, #636]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c14:	499c      	ldr	r1, [pc, #624]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	650b      	str	r3, [r1, #80]	; 0x50
 8005c1a:	e001      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c1c:	7dfb      	ldrb	r3, [r7, #23]
 8005c1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d03d      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c30:	2b04      	cmp	r3, #4
 8005c32:	d826      	bhi.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8005c34:	a201      	add	r2, pc, #4	; (adr r2, 8005c3c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8005c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3a:	bf00      	nop
 8005c3c:	08005c51 	.word	0x08005c51
 8005c40:	08005c5f 	.word	0x08005c5f
 8005c44:	08005c71 	.word	0x08005c71
 8005c48:	08005c89 	.word	0x08005c89
 8005c4c:	08005c89 	.word	0x08005c89
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c50:	4b8d      	ldr	r3, [pc, #564]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c54:	4a8c      	ldr	r2, [pc, #560]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c5c:	e015      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	3304      	adds	r3, #4
 8005c62:	2100      	movs	r1, #0
 8005c64:	4618      	mov	r0, r3
 8005c66:	f001 f92b 	bl	8006ec0 <RCCEx_PLL2_Config>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c6e:	e00c      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	3324      	adds	r3, #36	; 0x24
 8005c74:	2100      	movs	r1, #0
 8005c76:	4618      	mov	r0, r3
 8005c78:	f001 f9d4 	bl	8007024 <RCCEx_PLL3_Config>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c80:	e003      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	75fb      	strb	r3, [r7, #23]
      break;
 8005c86:	e000      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8005c88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c8a:	7dfb      	ldrb	r3, [r7, #23]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d109      	bne.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c90:	4b7d      	ldr	r3, [pc, #500]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c94:	f023 0207 	bic.w	r2, r3, #7
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9c:	497a      	ldr	r1, [pc, #488]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	650b      	str	r3, [r1, #80]	; 0x50
 8005ca2:	e001      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca4:	7dfb      	ldrb	r3, [r7, #23]
 8005ca6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d03e      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb8:	2b80      	cmp	r3, #128	; 0x80
 8005cba:	d01c      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005cbc:	2b80      	cmp	r3, #128	; 0x80
 8005cbe:	d804      	bhi.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x142>
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d008      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005cc4:	2b40      	cmp	r3, #64	; 0x40
 8005cc6:	d00d      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005cc8:	e01e      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005cca:	2bc0      	cmp	r3, #192	; 0xc0
 8005ccc:	d01f      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cd2:	d01e      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005cd4:	e018      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cd6:	4b6c      	ldr	r3, [pc, #432]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cda:	4a6b      	ldr	r2, [pc, #428]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ce0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005ce2:	e017      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	2100      	movs	r1, #0
 8005cea:	4618      	mov	r0, r3
 8005cec:	f001 f8e8 	bl	8006ec0 <RCCEx_PLL2_Config>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005cf4:	e00e      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	3324      	adds	r3, #36	; 0x24
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f001 f991 	bl	8007024 <RCCEx_PLL3_Config>
 8005d02:	4603      	mov	r3, r0
 8005d04:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005d06:	e005      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d0c:	e002      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005d0e:	bf00      	nop
 8005d10:	e000      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005d12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d14:	7dfb      	ldrb	r3, [r7, #23]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d109      	bne.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005d1a:	4b5b      	ldr	r3, [pc, #364]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d1e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d26:	4958      	ldr	r1, [pc, #352]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	650b      	str	r3, [r1, #80]	; 0x50
 8005d2c:	e001      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d2e:	7dfb      	ldrb	r3, [r7, #23]
 8005d30:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d044      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d48:	d01f      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005d4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d4e:	d805      	bhi.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00a      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005d54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d58:	d00e      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8005d5a:	e01f      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x214>
 8005d5c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005d60:	d01f      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8005d62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d66:	d01e      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005d68:	e018      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d6a:	4b47      	ldr	r3, [pc, #284]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6e:	4a46      	ldr	r2, [pc, #280]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d76:	e017      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f001 f89e 	bl	8006ec0 <RCCEx_PLL2_Config>
 8005d84:	4603      	mov	r3, r0
 8005d86:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005d88:	e00e      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	3324      	adds	r3, #36	; 0x24
 8005d8e:	2100      	movs	r1, #0
 8005d90:	4618      	mov	r0, r3
 8005d92:	f001 f947 	bl	8007024 <RCCEx_PLL3_Config>
 8005d96:	4603      	mov	r3, r0
 8005d98:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d9a:	e005      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8005da0:	e002      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005da2:	bf00      	nop
 8005da4:	e000      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005da6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005da8:	7dfb      	ldrb	r3, [r7, #23]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10a      	bne.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005dae:	4b36      	ldr	r3, [pc, #216]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005dbc:	4932      	ldr	r1, [pc, #200]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	658b      	str	r3, [r1, #88]	; 0x58
 8005dc2:	e001      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc4:	7dfb      	ldrb	r3, [r7, #23]
 8005dc6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d044      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005dda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dde:	d01f      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005de0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005de4:	d805      	bhi.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00a      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8005dea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dee:	d00e      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005df0:	e01f      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8005df2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005df6:	d01f      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005df8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005dfc:	d01e      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005dfe:	e018      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e00:	4b21      	ldr	r3, [pc, #132]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e04:	4a20      	ldr	r2, [pc, #128]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e0c:	e017      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	3304      	adds	r3, #4
 8005e12:	2100      	movs	r1, #0
 8005e14:	4618      	mov	r0, r3
 8005e16:	f001 f853 	bl	8006ec0 <RCCEx_PLL2_Config>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005e1e:	e00e      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3324      	adds	r3, #36	; 0x24
 8005e24:	2100      	movs	r1, #0
 8005e26:	4618      	mov	r0, r3
 8005e28:	f001 f8fc 	bl	8007024 <RCCEx_PLL3_Config>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e30:	e005      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	75fb      	strb	r3, [r7, #23]
      break;
 8005e36:	e002      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005e38:	bf00      	nop
 8005e3a:	e000      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005e3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e3e:	7dfb      	ldrb	r3, [r7, #23]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10a      	bne.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005e44:	4b10      	ldr	r3, [pc, #64]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e48:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e52:	490d      	ldr	r1, [pc, #52]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	658b      	str	r3, [r1, #88]	; 0x58
 8005e58:	e001      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e5a:	7dfb      	ldrb	r3, [r7, #23]
 8005e5c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d035      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e6e:	2b10      	cmp	r3, #16
 8005e70:	d00c      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8005e72:	2b10      	cmp	r3, #16
 8005e74:	d802      	bhi.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d01b      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8005e7a:	e017      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005e7c:	2b20      	cmp	r3, #32
 8005e7e:	d00c      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005e80:	2b30      	cmp	r3, #48	; 0x30
 8005e82:	d018      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005e84:	e012      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005e86:	bf00      	nop
 8005e88:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e8c:	4baf      	ldr	r3, [pc, #700]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	4aae      	ldr	r2, [pc, #696]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005e98:	e00e      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	2102      	movs	r1, #2
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f001 f80d 	bl	8006ec0 <RCCEx_PLL2_Config>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005eaa:	e005      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	75fb      	strb	r3, [r7, #23]
      break;
 8005eb0:	e002      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005eb2:	bf00      	nop
 8005eb4:	e000      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005eb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005eb8:	7dfb      	ldrb	r3, [r7, #23]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d109      	bne.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ebe:	4ba3      	ldr	r3, [pc, #652]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eca:	49a0      	ldr	r1, [pc, #640]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005ed0:	e001      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed2:	7dfb      	ldrb	r3, [r7, #23]
 8005ed4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d042      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eea:	d01f      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ef0:	d805      	bhi.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00a      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8005ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005efa:	d00e      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005efc:	e01f      	b.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8005efe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f02:	d01f      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005f04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f08:	d01e      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005f0a:	e018      	b.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f0c:	4b8f      	ldr	r3, [pc, #572]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f10:	4a8e      	ldr	r2, [pc, #568]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f18:	e017      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	3304      	adds	r3, #4
 8005f1e:	2100      	movs	r1, #0
 8005f20:	4618      	mov	r0, r3
 8005f22:	f000 ffcd 	bl	8006ec0 <RCCEx_PLL2_Config>
 8005f26:	4603      	mov	r3, r0
 8005f28:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f2a:	e00e      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	3324      	adds	r3, #36	; 0x24
 8005f30:	2100      	movs	r1, #0
 8005f32:	4618      	mov	r0, r3
 8005f34:	f001 f876 	bl	8007024 <RCCEx_PLL3_Config>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f3c:	e005      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	75fb      	strb	r3, [r7, #23]
      break;
 8005f42:	e002      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005f44:	bf00      	nop
 8005f46:	e000      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f4a:	7dfb      	ldrb	r3, [r7, #23]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d109      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f50:	4b7e      	ldr	r3, [pc, #504]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f54:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f5c:	497b      	ldr	r1, [pc, #492]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	650b      	str	r3, [r1, #80]	; 0x50
 8005f62:	e001      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f64:	7dfb      	ldrb	r3, [r7, #23]
 8005f66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d042      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f7c:	d01b      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005f7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f82:	d805      	bhi.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d022      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x446>
 8005f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f8c:	d00a      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005f8e:	e01b      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005f90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f94:	d01d      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8005f96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f9a:	d01c      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8005f9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005fa0:	d01b      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005fa2:	e011      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3304      	adds	r3, #4
 8005fa8:	2101      	movs	r1, #1
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 ff88 	bl	8006ec0 <RCCEx_PLL2_Config>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005fb4:	e012      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	3324      	adds	r3, #36	; 0x24
 8005fba:	2101      	movs	r1, #1
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f001 f831 	bl	8007024 <RCCEx_PLL3_Config>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005fc6:	e009      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	75fb      	strb	r3, [r7, #23]
      break;
 8005fcc:	e006      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005fce:	bf00      	nop
 8005fd0:	e004      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005fd2:	bf00      	nop
 8005fd4:	e002      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005fd6:	bf00      	nop
 8005fd8:	e000      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005fda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fdc:	7dfb      	ldrb	r3, [r7, #23]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d109      	bne.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005fe2:	4b5a      	ldr	r3, [pc, #360]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fee:	4957      	ldr	r1, [pc, #348]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	650b      	str	r3, [r1, #80]	; 0x50
 8005ff4:	e001      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff6:	7dfb      	ldrb	r3, [r7, #23]
 8005ff8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d044      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800600c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006010:	d01b      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006016:	d805      	bhi.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006018:	2b00      	cmp	r3, #0
 800601a:	d022      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800601c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006020:	d00a      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006022:	e01b      	b.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006028:	d01d      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800602a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800602e:	d01c      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8006030:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006034:	d01b      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006036:	e011      	b.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3304      	adds	r3, #4
 800603c:	2101      	movs	r1, #1
 800603e:	4618      	mov	r0, r3
 8006040:	f000 ff3e 	bl	8006ec0 <RCCEx_PLL2_Config>
 8006044:	4603      	mov	r3, r0
 8006046:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006048:	e012      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	3324      	adds	r3, #36	; 0x24
 800604e:	2101      	movs	r1, #1
 8006050:	4618      	mov	r0, r3
 8006052:	f000 ffe7 	bl	8007024 <RCCEx_PLL3_Config>
 8006056:	4603      	mov	r3, r0
 8006058:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800605a:	e009      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	75fb      	strb	r3, [r7, #23]
      break;
 8006060:	e006      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006062:	bf00      	nop
 8006064:	e004      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006066:	bf00      	nop
 8006068:	e002      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800606a:	bf00      	nop
 800606c:	e000      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800606e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006070:	7dfb      	ldrb	r3, [r7, #23]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10a      	bne.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006076:	4b35      	ldr	r3, [pc, #212]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800607a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006084:	4931      	ldr	r1, [pc, #196]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006086:	4313      	orrs	r3, r2
 8006088:	658b      	str	r3, [r1, #88]	; 0x58
 800608a:	e001      	b.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800608c:	7dfb      	ldrb	r3, [r7, #23]
 800608e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d02d      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060a4:	d005      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80060a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060aa:	d009      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d013      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80060b0:	e00f      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060b2:	4b26      	ldr	r3, [pc, #152]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80060b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b6:	4a25      	ldr	r2, [pc, #148]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80060b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80060be:	e00c      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3304      	adds	r3, #4
 80060c4:	2101      	movs	r1, #1
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 fefa 	bl	8006ec0 <RCCEx_PLL2_Config>
 80060cc:	4603      	mov	r3, r0
 80060ce:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80060d0:	e003      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	75fb      	strb	r3, [r7, #23]
      break;
 80060d6:	e000      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80060d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060da:	7dfb      	ldrb	r3, [r7, #23]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d109      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060e0:	4b1a      	ldr	r3, [pc, #104]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80060e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060ec:	4917      	ldr	r1, [pc, #92]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	650b      	str	r3, [r1, #80]	; 0x50
 80060f2:	e001      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f4:	7dfb      	ldrb	r3, [r7, #23]
 80060f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d035      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006108:	2b03      	cmp	r3, #3
 800610a:	d81b      	bhi.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800610c:	a201      	add	r2, pc, #4	; (adr r2, 8006114 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800610e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006112:	bf00      	nop
 8006114:	08006151 	.word	0x08006151
 8006118:	08006125 	.word	0x08006125
 800611c:	08006133 	.word	0x08006133
 8006120:	08006151 	.word	0x08006151
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006124:	4b09      	ldr	r3, [pc, #36]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006128:	4a08      	ldr	r2, [pc, #32]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800612a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800612e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006130:	e00f      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	3304      	adds	r3, #4
 8006136:	2102      	movs	r1, #2
 8006138:	4618      	mov	r0, r3
 800613a:	f000 fec1 	bl	8006ec0 <RCCEx_PLL2_Config>
 800613e:	4603      	mov	r3, r0
 8006140:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006142:	e006      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	75fb      	strb	r3, [r7, #23]
      break;
 8006148:	e003      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800614a:	bf00      	nop
 800614c:	58024400 	.word	0x58024400
      break;
 8006150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006152:	7dfb      	ldrb	r3, [r7, #23]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d109      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006158:	4bba      	ldr	r3, [pc, #744]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800615a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800615c:	f023 0203 	bic.w	r2, r3, #3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006164:	49b7      	ldr	r1, [pc, #732]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006166:	4313      	orrs	r3, r2
 8006168:	64cb      	str	r3, [r1, #76]	; 0x4c
 800616a:	e001      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800616c:	7dfb      	ldrb	r3, [r7, #23]
 800616e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 8086 	beq.w	800628a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800617e:	4bb2      	ldr	r3, [pc, #712]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4ab1      	ldr	r2, [pc, #708]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006188:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800618a:	f7fd f8af 	bl	80032ec <HAL_GetTick>
 800618e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006190:	e009      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006192:	f7fd f8ab 	bl	80032ec <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	2b64      	cmp	r3, #100	; 0x64
 800619e:	d902      	bls.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	75fb      	strb	r3, [r7, #23]
        break;
 80061a4:	e005      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061a6:	4ba8      	ldr	r3, [pc, #672]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d0ef      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80061b2:	7dfb      	ldrb	r3, [r7, #23]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d166      	bne.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80061b8:	4ba2      	ldr	r3, [pc, #648]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80061ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061c2:	4053      	eors	r3, r2
 80061c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d013      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061cc:	4b9d      	ldr	r3, [pc, #628]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80061ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d4:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061d6:	4b9b      	ldr	r3, [pc, #620]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80061d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061da:	4a9a      	ldr	r2, [pc, #616]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80061dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061e0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061e2:	4b98      	ldr	r3, [pc, #608]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80061e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e6:	4a97      	ldr	r2, [pc, #604]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80061e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061ec:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80061ee:	4a95      	ldr	r2, [pc, #596]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061fe:	d115      	bne.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006200:	f7fd f874 	bl	80032ec <HAL_GetTick>
 8006204:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006206:	e00b      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006208:	f7fd f870 	bl	80032ec <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	f241 3288 	movw	r2, #5000	; 0x1388
 8006216:	4293      	cmp	r3, r2
 8006218:	d902      	bls.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	75fb      	strb	r3, [r7, #23]
            break;
 800621e:	e005      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006220:	4b88      	ldr	r3, [pc, #544]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b00      	cmp	r3, #0
 800622a:	d0ed      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800622c:	7dfb      	ldrb	r3, [r7, #23]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d126      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006238:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800623c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006240:	d10d      	bne.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8006242:	4b80      	ldr	r3, [pc, #512]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006250:	0919      	lsrs	r1, r3, #4
 8006252:	4b7e      	ldr	r3, [pc, #504]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8006254:	400b      	ands	r3, r1
 8006256:	497b      	ldr	r1, [pc, #492]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006258:	4313      	orrs	r3, r2
 800625a:	610b      	str	r3, [r1, #16]
 800625c:	e005      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800625e:	4b79      	ldr	r3, [pc, #484]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	4a78      	ldr	r2, [pc, #480]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006264:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006268:	6113      	str	r3, [r2, #16]
 800626a:	4b76      	ldr	r3, [pc, #472]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800626c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006278:	4972      	ldr	r1, [pc, #456]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800627a:	4313      	orrs	r3, r2
 800627c:	670b      	str	r3, [r1, #112]	; 0x70
 800627e:	e004      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006280:	7dfb      	ldrb	r3, [r7, #23]
 8006282:	75bb      	strb	r3, [r7, #22]
 8006284:	e001      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006286:	7dfb      	ldrb	r3, [r7, #23]
 8006288:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d07d      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800629a:	2b28      	cmp	r3, #40	; 0x28
 800629c:	d866      	bhi.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800629e:	a201      	add	r2, pc, #4	; (adr r2, 80062a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80062a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a4:	08006373 	.word	0x08006373
 80062a8:	0800636d 	.word	0x0800636d
 80062ac:	0800636d 	.word	0x0800636d
 80062b0:	0800636d 	.word	0x0800636d
 80062b4:	0800636d 	.word	0x0800636d
 80062b8:	0800636d 	.word	0x0800636d
 80062bc:	0800636d 	.word	0x0800636d
 80062c0:	0800636d 	.word	0x0800636d
 80062c4:	08006349 	.word	0x08006349
 80062c8:	0800636d 	.word	0x0800636d
 80062cc:	0800636d 	.word	0x0800636d
 80062d0:	0800636d 	.word	0x0800636d
 80062d4:	0800636d 	.word	0x0800636d
 80062d8:	0800636d 	.word	0x0800636d
 80062dc:	0800636d 	.word	0x0800636d
 80062e0:	0800636d 	.word	0x0800636d
 80062e4:	0800635b 	.word	0x0800635b
 80062e8:	0800636d 	.word	0x0800636d
 80062ec:	0800636d 	.word	0x0800636d
 80062f0:	0800636d 	.word	0x0800636d
 80062f4:	0800636d 	.word	0x0800636d
 80062f8:	0800636d 	.word	0x0800636d
 80062fc:	0800636d 	.word	0x0800636d
 8006300:	0800636d 	.word	0x0800636d
 8006304:	08006373 	.word	0x08006373
 8006308:	0800636d 	.word	0x0800636d
 800630c:	0800636d 	.word	0x0800636d
 8006310:	0800636d 	.word	0x0800636d
 8006314:	0800636d 	.word	0x0800636d
 8006318:	0800636d 	.word	0x0800636d
 800631c:	0800636d 	.word	0x0800636d
 8006320:	0800636d 	.word	0x0800636d
 8006324:	08006373 	.word	0x08006373
 8006328:	0800636d 	.word	0x0800636d
 800632c:	0800636d 	.word	0x0800636d
 8006330:	0800636d 	.word	0x0800636d
 8006334:	0800636d 	.word	0x0800636d
 8006338:	0800636d 	.word	0x0800636d
 800633c:	0800636d 	.word	0x0800636d
 8006340:	0800636d 	.word	0x0800636d
 8006344:	08006373 	.word	0x08006373
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	3304      	adds	r3, #4
 800634c:	2101      	movs	r1, #1
 800634e:	4618      	mov	r0, r3
 8006350:	f000 fdb6 	bl	8006ec0 <RCCEx_PLL2_Config>
 8006354:	4603      	mov	r3, r0
 8006356:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006358:	e00c      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	3324      	adds	r3, #36	; 0x24
 800635e:	2101      	movs	r1, #1
 8006360:	4618      	mov	r0, r3
 8006362:	f000 fe5f 	bl	8007024 <RCCEx_PLL3_Config>
 8006366:	4603      	mov	r3, r0
 8006368:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800636a:	e003      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	75fb      	strb	r3, [r7, #23]
      break;
 8006370:	e000      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8006372:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006374:	7dfb      	ldrb	r3, [r7, #23]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d109      	bne.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800637a:	4b32      	ldr	r3, [pc, #200]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800637c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006386:	492f      	ldr	r1, [pc, #188]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006388:	4313      	orrs	r3, r2
 800638a:	654b      	str	r3, [r1, #84]	; 0x54
 800638c:	e001      	b.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638e:	7dfb      	ldrb	r3, [r7, #23]
 8006390:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d037      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063a2:	2b05      	cmp	r3, #5
 80063a4:	d820      	bhi.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80063a6:	a201      	add	r2, pc, #4	; (adr r2, 80063ac <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80063a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ac:	080063ef 	.word	0x080063ef
 80063b0:	080063c5 	.word	0x080063c5
 80063b4:	080063d7 	.word	0x080063d7
 80063b8:	080063ef 	.word	0x080063ef
 80063bc:	080063ef 	.word	0x080063ef
 80063c0:	080063ef 	.word	0x080063ef
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3304      	adds	r3, #4
 80063c8:	2101      	movs	r1, #1
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 fd78 	bl	8006ec0 <RCCEx_PLL2_Config>
 80063d0:	4603      	mov	r3, r0
 80063d2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80063d4:	e00c      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	3324      	adds	r3, #36	; 0x24
 80063da:	2101      	movs	r1, #1
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 fe21 	bl	8007024 <RCCEx_PLL3_Config>
 80063e2:	4603      	mov	r3, r0
 80063e4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80063e6:	e003      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	75fb      	strb	r3, [r7, #23]
      break;
 80063ec:	e000      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80063ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063f0:	7dfb      	ldrb	r3, [r7, #23]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d109      	bne.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80063f6:	4b13      	ldr	r3, [pc, #76]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80063f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063fa:	f023 0207 	bic.w	r2, r3, #7
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006402:	4910      	ldr	r1, [pc, #64]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006404:	4313      	orrs	r3, r2
 8006406:	654b      	str	r3, [r1, #84]	; 0x54
 8006408:	e001      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800640a:	7dfb      	ldrb	r3, [r7, #23]
 800640c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0304 	and.w	r3, r3, #4
 8006416:	2b00      	cmp	r3, #0
 8006418:	d040      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006420:	2b05      	cmp	r3, #5
 8006422:	d827      	bhi.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006424:	a201      	add	r2, pc, #4	; (adr r2, 800642c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8006426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642a:	bf00      	nop
 800642c:	0800647b 	.word	0x0800647b
 8006430:	08006451 	.word	0x08006451
 8006434:	08006463 	.word	0x08006463
 8006438:	0800647b 	.word	0x0800647b
 800643c:	0800647b 	.word	0x0800647b
 8006440:	0800647b 	.word	0x0800647b
 8006444:	58024400 	.word	0x58024400
 8006448:	58024800 	.word	0x58024800
 800644c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3304      	adds	r3, #4
 8006454:	2101      	movs	r1, #1
 8006456:	4618      	mov	r0, r3
 8006458:	f000 fd32 	bl	8006ec0 <RCCEx_PLL2_Config>
 800645c:	4603      	mov	r3, r0
 800645e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006460:	e00c      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	3324      	adds	r3, #36	; 0x24
 8006466:	2101      	movs	r1, #1
 8006468:	4618      	mov	r0, r3
 800646a:	f000 fddb 	bl	8007024 <RCCEx_PLL3_Config>
 800646e:	4603      	mov	r3, r0
 8006470:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006472:	e003      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	75fb      	strb	r3, [r7, #23]
      break;
 8006478:	e000      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800647a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800647c:	7dfb      	ldrb	r3, [r7, #23]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10a      	bne.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006482:	4bb2      	ldr	r3, [pc, #712]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006486:	f023 0207 	bic.w	r2, r3, #7
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006490:	49ae      	ldr	r1, [pc, #696]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006492:	4313      	orrs	r3, r2
 8006494:	658b      	str	r3, [r1, #88]	; 0x58
 8006496:	e001      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006498:	7dfb      	ldrb	r3, [r7, #23]
 800649a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0320 	and.w	r3, r3, #32
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d044      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064b2:	d01b      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x964>
 80064b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064b8:	d805      	bhi.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d022      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80064be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064c2:	d00a      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x952>
 80064c4:	e01b      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x976>
 80064c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ca:	d01d      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80064cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064d0:	d01c      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x984>
 80064d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064d6:	d01b      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80064d8:	e011      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	3304      	adds	r3, #4
 80064de:	2100      	movs	r1, #0
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 fced 	bl	8006ec0 <RCCEx_PLL2_Config>
 80064e6:	4603      	mov	r3, r0
 80064e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80064ea:	e012      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	3324      	adds	r3, #36	; 0x24
 80064f0:	2102      	movs	r1, #2
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 fd96 	bl	8007024 <RCCEx_PLL3_Config>
 80064f8:	4603      	mov	r3, r0
 80064fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80064fc:	e009      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	75fb      	strb	r3, [r7, #23]
      break;
 8006502:	e006      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006504:	bf00      	nop
 8006506:	e004      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006508:	bf00      	nop
 800650a:	e002      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800650c:	bf00      	nop
 800650e:	e000      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006510:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006512:	7dfb      	ldrb	r3, [r7, #23]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d10a      	bne.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006518:	4b8c      	ldr	r3, [pc, #560]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800651a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800651c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006526:	4989      	ldr	r1, [pc, #548]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006528:	4313      	orrs	r3, r2
 800652a:	654b      	str	r3, [r1, #84]	; 0x54
 800652c:	e001      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652e:	7dfb      	ldrb	r3, [r7, #23]
 8006530:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800653a:	2b00      	cmp	r3, #0
 800653c:	d044      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006548:	d01b      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800654a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800654e:	d805      	bhi.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006550:	2b00      	cmp	r3, #0
 8006552:	d022      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006558:	d00a      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800655a:	e01b      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800655c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006560:	d01d      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006562:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006566:	d01c      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8006568:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800656c:	d01b      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800656e:	e011      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	3304      	adds	r3, #4
 8006574:	2100      	movs	r1, #0
 8006576:	4618      	mov	r0, r3
 8006578:	f000 fca2 	bl	8006ec0 <RCCEx_PLL2_Config>
 800657c:	4603      	mov	r3, r0
 800657e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006580:	e012      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	3324      	adds	r3, #36	; 0x24
 8006586:	2102      	movs	r1, #2
 8006588:	4618      	mov	r0, r3
 800658a:	f000 fd4b 	bl	8007024 <RCCEx_PLL3_Config>
 800658e:	4603      	mov	r3, r0
 8006590:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006592:	e009      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	75fb      	strb	r3, [r7, #23]
      break;
 8006598:	e006      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800659a:	bf00      	nop
 800659c:	e004      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800659e:	bf00      	nop
 80065a0:	e002      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80065a2:	bf00      	nop
 80065a4:	e000      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80065a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065a8:	7dfb      	ldrb	r3, [r7, #23]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10a      	bne.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80065ae:	4b67      	ldr	r3, [pc, #412]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80065b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065b2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065bc:	4963      	ldr	r1, [pc, #396]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	658b      	str	r3, [r1, #88]	; 0x58
 80065c2:	e001      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c4:	7dfb      	ldrb	r3, [r7, #23]
 80065c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d044      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065de:	d01b      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80065e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065e4:	d805      	bhi.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d022      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80065ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ee:	d00a      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80065f0:	e01b      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80065f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065f6:	d01d      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80065f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80065fc:	d01c      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80065fe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006602:	d01b      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006604:	e011      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	3304      	adds	r3, #4
 800660a:	2100      	movs	r1, #0
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fc57 	bl	8006ec0 <RCCEx_PLL2_Config>
 8006612:	4603      	mov	r3, r0
 8006614:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006616:	e012      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	3324      	adds	r3, #36	; 0x24
 800661c:	2102      	movs	r1, #2
 800661e:	4618      	mov	r0, r3
 8006620:	f000 fd00 	bl	8007024 <RCCEx_PLL3_Config>
 8006624:	4603      	mov	r3, r0
 8006626:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006628:	e009      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	75fb      	strb	r3, [r7, #23]
      break;
 800662e:	e006      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006630:	bf00      	nop
 8006632:	e004      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006634:	bf00      	nop
 8006636:	e002      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006638:	bf00      	nop
 800663a:	e000      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800663c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800663e:	7dfb      	ldrb	r3, [r7, #23]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10a      	bne.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006644:	4b41      	ldr	r3, [pc, #260]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006648:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006652:	493e      	ldr	r1, [pc, #248]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006654:	4313      	orrs	r3, r2
 8006656:	658b      	str	r3, [r1, #88]	; 0x58
 8006658:	e001      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800665a:	7dfb      	ldrb	r3, [r7, #23]
 800665c:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0308 	and.w	r3, r3, #8
 8006666:	2b00      	cmp	r3, #0
 8006668:	d01a      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006674:	d10a      	bne.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	3324      	adds	r3, #36	; 0x24
 800667a:	2102      	movs	r1, #2
 800667c:	4618      	mov	r0, r3
 800667e:	f000 fcd1 	bl	8007024 <RCCEx_PLL3_Config>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800668c:	4b2f      	ldr	r3, [pc, #188]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800668e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006690:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800669a:	492c      	ldr	r1, [pc, #176]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800669c:	4313      	orrs	r3, r2
 800669e:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0310 	and.w	r3, r3, #16
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d01a      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b6:	d10a      	bne.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	3324      	adds	r3, #36	; 0x24
 80066bc:	2102      	movs	r1, #2
 80066be:	4618      	mov	r0, r3
 80066c0:	f000 fcb0 	bl	8007024 <RCCEx_PLL3_Config>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80066ce:	4b1f      	ldr	r3, [pc, #124]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80066d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066dc:	491b      	ldr	r1, [pc, #108]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d032      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80066f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066f8:	d00d      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80066fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066fe:	d016      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006700:	2b00      	cmp	r3, #0
 8006702:	d111      	bne.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	3304      	adds	r3, #4
 8006708:	2100      	movs	r1, #0
 800670a:	4618      	mov	r0, r3
 800670c:	f000 fbd8 	bl	8006ec0 <RCCEx_PLL2_Config>
 8006710:	4603      	mov	r3, r0
 8006712:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006714:	e00c      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	3324      	adds	r3, #36	; 0x24
 800671a:	2102      	movs	r1, #2
 800671c:	4618      	mov	r0, r3
 800671e:	f000 fc81 	bl	8007024 <RCCEx_PLL3_Config>
 8006722:	4603      	mov	r3, r0
 8006724:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006726:	e003      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	75fb      	strb	r3, [r7, #23]
      break;
 800672c:	e000      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800672e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006730:	7dfb      	ldrb	r3, [r7, #23]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10c      	bne.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006736:	4b05      	ldr	r3, [pc, #20]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800673a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006744:	4901      	ldr	r1, [pc, #4]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006746:	4313      	orrs	r3, r2
 8006748:	658b      	str	r3, [r1, #88]	; 0x58
 800674a:	e003      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800674c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006750:	7dfb      	ldrb	r3, [r7, #23]
 8006752:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d02f      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006766:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800676a:	d00c      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800676c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006770:	d015      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8006772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006776:	d10f      	bne.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006778:	4b79      	ldr	r3, [pc, #484]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800677a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677c:	4a78      	ldr	r2, [pc, #480]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800677e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006782:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006784:	e00c      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	3324      	adds	r3, #36	; 0x24
 800678a:	2101      	movs	r1, #1
 800678c:	4618      	mov	r0, r3
 800678e:	f000 fc49 	bl	8007024 <RCCEx_PLL3_Config>
 8006792:	4603      	mov	r3, r0
 8006794:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006796:	e003      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	75fb      	strb	r3, [r7, #23]
      break;
 800679c:	e000      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800679e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067a0:	7dfb      	ldrb	r3, [r7, #23]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10a      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067a6:	4b6e      	ldr	r3, [pc, #440]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80067a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067b4:	496a      	ldr	r1, [pc, #424]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	654b      	str	r3, [r1, #84]	; 0x54
 80067ba:	e001      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
 80067be:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d029      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d003      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80067d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067d8:	d007      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80067da:	e00f      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067dc:	4b60      	ldr	r3, [pc, #384]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80067de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e0:	4a5f      	ldr	r2, [pc, #380]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80067e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80067e8:	e00b      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	3304      	adds	r3, #4
 80067ee:	2102      	movs	r1, #2
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 fb65 	bl	8006ec0 <RCCEx_PLL2_Config>
 80067f6:	4603      	mov	r3, r0
 80067f8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80067fa:	e002      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006800:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006802:	7dfb      	ldrb	r3, [r7, #23]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d109      	bne.n	800681c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006808:	4b55      	ldr	r3, [pc, #340]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800680a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800680c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006814:	4952      	ldr	r1, [pc, #328]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006816:	4313      	orrs	r3, r2
 8006818:	64cb      	str	r3, [r1, #76]	; 0x4c
 800681a:	e001      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800681c:	7dfb      	ldrb	r3, [r7, #23]
 800681e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00a      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3324      	adds	r3, #36	; 0x24
 8006830:	2102      	movs	r1, #2
 8006832:	4618      	mov	r0, r3
 8006834:	f000 fbf6 	bl	8007024 <RCCEx_PLL3_Config>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d02f      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006856:	d00c      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800685c:	d802      	bhi.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800685e:	2b00      	cmp	r3, #0
 8006860:	d011      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8006862:	e00d      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8006864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006868:	d00f      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800686a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800686e:	d00e      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8006870:	e006      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006872:	4b3b      	ldr	r3, [pc, #236]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006876:	4a3a      	ldr	r2, [pc, #232]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800687c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800687e:	e007      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	75fb      	strb	r3, [r7, #23]
      break;
 8006884:	e004      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006886:	bf00      	nop
 8006888:	e002      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800688a:	bf00      	nop
 800688c:	e000      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800688e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006890:	7dfb      	ldrb	r3, [r7, #23]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d109      	bne.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006896:	4b32      	ldr	r3, [pc, #200]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800689a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068a2:	492f      	ldr	r1, [pc, #188]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	654b      	str	r3, [r1, #84]	; 0x54
 80068a8:	e001      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068aa:	7dfb      	ldrb	r3, [r7, #23]
 80068ac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d008      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80068ba:	4b29      	ldr	r3, [pc, #164]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80068bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c6:	4926      	ldr	r1, [pc, #152]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d009      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80068d8:	4b21      	ldr	r3, [pc, #132]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80068e6:	491e      	ldr	r1, [pc, #120]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d008      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80068f8:	4b19      	ldr	r3, [pc, #100]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80068fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006904:	4916      	ldr	r1, [pc, #88]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006906:	4313      	orrs	r3, r2
 8006908:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00d      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006916:	4b12      	ldr	r3, [pc, #72]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	4a11      	ldr	r2, [pc, #68]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800691c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006920:	6113      	str	r3, [r2, #16]
 8006922:	4b0f      	ldr	r3, [pc, #60]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006924:	691a      	ldr	r2, [r3, #16]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800692c:	490c      	ldr	r1, [pc, #48]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800692e:	4313      	orrs	r3, r2
 8006930:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	da08      	bge.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800693a:	4b09      	ldr	r3, [pc, #36]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800693c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800693e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006946:	4906      	ldr	r1, [pc, #24]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006948:	4313      	orrs	r3, r2
 800694a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800694c:	7dbb      	ldrb	r3, [r7, #22]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8006952:	2300      	movs	r3, #0
 8006954:	e000      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
}
 8006958:	4618      	mov	r0, r3
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	58024400 	.word	0x58024400

08006964 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006968:	f7ff f8b2 	bl	8005ad0 <HAL_RCC_GetHCLKFreq>
 800696c:	4601      	mov	r1, r0
 800696e:	4b06      	ldr	r3, [pc, #24]	; (8006988 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	091b      	lsrs	r3, r3, #4
 8006974:	f003 0307 	and.w	r3, r3, #7
 8006978:	4a04      	ldr	r2, [pc, #16]	; (800698c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800697a:	5cd3      	ldrb	r3, [r2, r3]
 800697c:	f003 031f 	and.w	r3, r3, #31
 8006980:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006984:	4618      	mov	r0, r3
 8006986:	bd80      	pop	{r7, pc}
 8006988:	58024400 	.word	0x58024400
 800698c:	08009ef0 	.word	0x08009ef0

08006990 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006990:	b480      	push	{r7}
 8006992:	b089      	sub	sp, #36	; 0x24
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006998:	4b9d      	ldr	r3, [pc, #628]	; (8006c10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800699a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800699c:	f003 0303 	and.w	r3, r3, #3
 80069a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80069a2:	4b9b      	ldr	r3, [pc, #620]	; (8006c10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80069a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a6:	0b1b      	lsrs	r3, r3, #12
 80069a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80069ae:	4b98      	ldr	r3, [pc, #608]	; (8006c10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80069b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b2:	091b      	lsrs	r3, r3, #4
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80069ba:	4b95      	ldr	r3, [pc, #596]	; (8006c10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80069bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069be:	08db      	lsrs	r3, r3, #3
 80069c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	fb02 f303 	mul.w	r3, r2, r3
 80069ca:	ee07 3a90 	vmov	s15, r3
 80069ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 810a 	beq.w	8006bf2 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d05a      	beq.n	8006a9a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d302      	bcc.n	80069ee <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d078      	beq.n	8006ade <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80069ec:	e099      	b.n	8006b22 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069ee:	4b88      	ldr	r3, [pc, #544]	; (8006c10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0320 	and.w	r3, r3, #32
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d02d      	beq.n	8006a56 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069fa:	4b85      	ldr	r3, [pc, #532]	; (8006c10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	08db      	lsrs	r3, r3, #3
 8006a00:	f003 0303 	and.w	r3, r3, #3
 8006a04:	4a83      	ldr	r2, [pc, #524]	; (8006c14 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8006a06:	fa22 f303 	lsr.w	r3, r2, r3
 8006a0a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	ee07 3a90 	vmov	s15, r3
 8006a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	ee07 3a90 	vmov	s15, r3
 8006a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a24:	4b7a      	ldr	r3, [pc, #488]	; (8006c10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a2c:	ee07 3a90 	vmov	s15, r3
 8006a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a34:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a38:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006c18 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006a3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a50:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006a54:	e087      	b.n	8006b66 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	ee07 3a90 	vmov	s15, r3
 8006a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a60:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006c1c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8006a64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a68:	4b69      	ldr	r3, [pc, #420]	; (8006c10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a70:	ee07 3a90 	vmov	s15, r3
 8006a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a78:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a7c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006c18 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006a80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a98:	e065      	b.n	8006b66 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	ee07 3a90 	vmov	s15, r3
 8006aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006aa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aac:	4b58      	ldr	r3, [pc, #352]	; (8006c10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab4:	ee07 3a90 	vmov	s15, r3
 8006ab8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006abc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ac0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006c18 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006ac4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ac8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006acc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ad0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ad8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006adc:	e043      	b.n	8006b66 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	ee07 3a90 	vmov	s15, r3
 8006ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006c24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8006aec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006af0:	4b47      	ldr	r3, [pc, #284]	; (8006c10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af8:	ee07 3a90 	vmov	s15, r3
 8006afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b00:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b04:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006c18 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006b08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b1c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b20:	e021      	b.n	8006b66 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	ee07 3a90 	vmov	s15, r3
 8006b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006b30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b34:	4b36      	ldr	r3, [pc, #216]	; (8006c10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b3c:	ee07 3a90 	vmov	s15, r3
 8006b40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b44:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b48:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006c18 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006b4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b64:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006b66:	4b2a      	ldr	r3, [pc, #168]	; (8006c10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6a:	0a5b      	lsrs	r3, r3, #9
 8006b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b70:	ee07 3a90 	vmov	s15, r3
 8006b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b80:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b8c:	ee17 2a90 	vmov	r2, s15
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006b94:	4b1e      	ldr	r3, [pc, #120]	; (8006c10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b98:	0c1b      	lsrs	r3, r3, #16
 8006b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b9e:	ee07 3a90 	vmov	s15, r3
 8006ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006baa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bae:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bba:	ee17 2a90 	vmov	r2, s15
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006bc2:	4b13      	ldr	r3, [pc, #76]	; (8006c10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc6:	0e1b      	lsrs	r3, r3, #24
 8006bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bcc:	ee07 3a90 	vmov	s15, r3
 8006bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006be0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006be8:	ee17 2a90 	vmov	r2, s15
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006bf0:	e008      	b.n	8006c04 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	609a      	str	r2, [r3, #8]
}
 8006c04:	bf00      	nop
 8006c06:	3724      	adds	r7, #36	; 0x24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	58024400 	.word	0x58024400
 8006c14:	03d09000 	.word	0x03d09000
 8006c18:	46000000 	.word	0x46000000
 8006c1c:	4c742400 	.word	0x4c742400
 8006c20:	4a742400 	.word	0x4a742400
 8006c24:	4af42400 	.word	0x4af42400

08006c28 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b089      	sub	sp, #36	; 0x24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c30:	4b9d      	ldr	r3, [pc, #628]	; (8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c34:	f003 0303 	and.w	r3, r3, #3
 8006c38:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006c3a:	4b9b      	ldr	r3, [pc, #620]	; (8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3e:	0d1b      	lsrs	r3, r3, #20
 8006c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c44:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006c46:	4b98      	ldr	r3, [pc, #608]	; (8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4a:	0a1b      	lsrs	r3, r3, #8
 8006c4c:	f003 0301 	and.w	r3, r3, #1
 8006c50:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006c52:	4b95      	ldr	r3, [pc, #596]	; (8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c56:	08db      	lsrs	r3, r3, #3
 8006c58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	fb02 f303 	mul.w	r3, r2, r3
 8006c62:	ee07 3a90 	vmov	s15, r3
 8006c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 810a 	beq.w	8006e8a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d05a      	beq.n	8006d32 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d302      	bcc.n	8006c86 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d078      	beq.n	8006d76 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8006c84:	e099      	b.n	8006dba <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c86:	4b88      	ldr	r3, [pc, #544]	; (8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0320 	and.w	r3, r3, #32
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d02d      	beq.n	8006cee <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c92:	4b85      	ldr	r3, [pc, #532]	; (8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	08db      	lsrs	r3, r3, #3
 8006c98:	f003 0303 	and.w	r3, r3, #3
 8006c9c:	4a83      	ldr	r2, [pc, #524]	; (8006eac <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8006c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006ca2:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	ee07 3a90 	vmov	s15, r3
 8006caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	ee07 3a90 	vmov	s15, r3
 8006cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cbc:	4b7a      	ldr	r3, [pc, #488]	; (8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cc4:	ee07 3a90 	vmov	s15, r3
 8006cc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ccc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cd0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006cd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ce0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ce8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006cec:	e087      	b.n	8006dfe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	ee07 3a90 	vmov	s15, r3
 8006cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8006cfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d00:	4b69      	ldr	r3, [pc, #420]	; (8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d08:	ee07 3a90 	vmov	s15, r3
 8006d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d10:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d14:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006d18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d30:	e065      	b.n	8006dfe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	ee07 3a90 	vmov	s15, r3
 8006d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d3c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006d40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d44:	4b58      	ldr	r3, [pc, #352]	; (8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d4c:	ee07 3a90 	vmov	s15, r3
 8006d50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d54:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d58:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006d5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d74:	e043      	b.n	8006dfe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	ee07 3a90 	vmov	s15, r3
 8006d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d80:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006ebc <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8006d84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d88:	4b47      	ldr	r3, [pc, #284]	; (8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d90:	ee07 3a90 	vmov	s15, r3
 8006d94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d98:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d9c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006da0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006da4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006da8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006db4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006db8:	e021      	b.n	8006dfe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	ee07 3a90 	vmov	s15, r3
 8006dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006dc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dcc:	4b36      	ldr	r3, [pc, #216]	; (8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dd4:	ee07 3a90 	vmov	s15, r3
 8006dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ddc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006de0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006de4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006de8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006df0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006df8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006dfc:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006dfe:	4b2a      	ldr	r3, [pc, #168]	; (8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e02:	0a5b      	lsrs	r3, r3, #9
 8006e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e08:	ee07 3a90 	vmov	s15, r3
 8006e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e18:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e24:	ee17 2a90 	vmov	r2, s15
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006e2c:	4b1e      	ldr	r3, [pc, #120]	; (8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e30:	0c1b      	lsrs	r3, r3, #16
 8006e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e36:	ee07 3a90 	vmov	s15, r3
 8006e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e46:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e52:	ee17 2a90 	vmov	r2, s15
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006e5a:	4b13      	ldr	r3, [pc, #76]	; (8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5e:	0e1b      	lsrs	r3, r3, #24
 8006e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e64:	ee07 3a90 	vmov	s15, r3
 8006e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e74:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e80:	ee17 2a90 	vmov	r2, s15
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006e88:	e008      	b.n	8006e9c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	609a      	str	r2, [r3, #8]
}
 8006e9c:	bf00      	nop
 8006e9e:	3724      	adds	r7, #36	; 0x24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	58024400 	.word	0x58024400
 8006eac:	03d09000 	.word	0x03d09000
 8006eb0:	46000000 	.word	0x46000000
 8006eb4:	4c742400 	.word	0x4c742400
 8006eb8:	4a742400 	.word	0x4a742400
 8006ebc:	4af42400 	.word	0x4af42400

08006ec0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ece:	4b53      	ldr	r3, [pc, #332]	; (800701c <RCCEx_PLL2_Config+0x15c>)
 8006ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed2:	f003 0303 	and.w	r3, r3, #3
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d101      	bne.n	8006ede <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e099      	b.n	8007012 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006ede:	4b4f      	ldr	r3, [pc, #316]	; (800701c <RCCEx_PLL2_Config+0x15c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a4e      	ldr	r2, [pc, #312]	; (800701c <RCCEx_PLL2_Config+0x15c>)
 8006ee4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006ee8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eea:	f7fc f9ff 	bl	80032ec <HAL_GetTick>
 8006eee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ef0:	e008      	b.n	8006f04 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006ef2:	f7fc f9fb 	bl	80032ec <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d901      	bls.n	8006f04 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e086      	b.n	8007012 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f04:	4b45      	ldr	r3, [pc, #276]	; (800701c <RCCEx_PLL2_Config+0x15c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1f0      	bne.n	8006ef2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006f10:	4b42      	ldr	r3, [pc, #264]	; (800701c <RCCEx_PLL2_Config+0x15c>)
 8006f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f14:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	031b      	lsls	r3, r3, #12
 8006f1e:	493f      	ldr	r1, [pc, #252]	; (800701c <RCCEx_PLL2_Config+0x15c>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	628b      	str	r3, [r1, #40]	; 0x28
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	3b01      	subs	r3, #1
 8006f34:	025b      	lsls	r3, r3, #9
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	431a      	orrs	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	041b      	lsls	r3, r3, #16
 8006f42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f46:	431a      	orrs	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	061b      	lsls	r3, r3, #24
 8006f50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f54:	4931      	ldr	r1, [pc, #196]	; (800701c <RCCEx_PLL2_Config+0x15c>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006f5a:	4b30      	ldr	r3, [pc, #192]	; (800701c <RCCEx_PLL2_Config+0x15c>)
 8006f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	492d      	ldr	r1, [pc, #180]	; (800701c <RCCEx_PLL2_Config+0x15c>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006f6c:	4b2b      	ldr	r3, [pc, #172]	; (800701c <RCCEx_PLL2_Config+0x15c>)
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	f023 0220 	bic.w	r2, r3, #32
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	4928      	ldr	r1, [pc, #160]	; (800701c <RCCEx_PLL2_Config+0x15c>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006f7e:	4b27      	ldr	r3, [pc, #156]	; (800701c <RCCEx_PLL2_Config+0x15c>)
 8006f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f82:	4a26      	ldr	r2, [pc, #152]	; (800701c <RCCEx_PLL2_Config+0x15c>)
 8006f84:	f023 0310 	bic.w	r3, r3, #16
 8006f88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006f8a:	4b24      	ldr	r3, [pc, #144]	; (800701c <RCCEx_PLL2_Config+0x15c>)
 8006f8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f8e:	4b24      	ldr	r3, [pc, #144]	; (8007020 <RCCEx_PLL2_Config+0x160>)
 8006f90:	4013      	ands	r3, r2
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	69d2      	ldr	r2, [r2, #28]
 8006f96:	00d2      	lsls	r2, r2, #3
 8006f98:	4920      	ldr	r1, [pc, #128]	; (800701c <RCCEx_PLL2_Config+0x15c>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006f9e:	4b1f      	ldr	r3, [pc, #124]	; (800701c <RCCEx_PLL2_Config+0x15c>)
 8006fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa2:	4a1e      	ldr	r2, [pc, #120]	; (800701c <RCCEx_PLL2_Config+0x15c>)
 8006fa4:	f043 0310 	orr.w	r3, r3, #16
 8006fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d106      	bne.n	8006fbe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006fb0:	4b1a      	ldr	r3, [pc, #104]	; (800701c <RCCEx_PLL2_Config+0x15c>)
 8006fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb4:	4a19      	ldr	r2, [pc, #100]	; (800701c <RCCEx_PLL2_Config+0x15c>)
 8006fb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006fbc:	e00f      	b.n	8006fde <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d106      	bne.n	8006fd2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006fc4:	4b15      	ldr	r3, [pc, #84]	; (800701c <RCCEx_PLL2_Config+0x15c>)
 8006fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc8:	4a14      	ldr	r2, [pc, #80]	; (800701c <RCCEx_PLL2_Config+0x15c>)
 8006fca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fce:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006fd0:	e005      	b.n	8006fde <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006fd2:	4b12      	ldr	r3, [pc, #72]	; (800701c <RCCEx_PLL2_Config+0x15c>)
 8006fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd6:	4a11      	ldr	r2, [pc, #68]	; (800701c <RCCEx_PLL2_Config+0x15c>)
 8006fd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006fdc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006fde:	4b0f      	ldr	r3, [pc, #60]	; (800701c <RCCEx_PLL2_Config+0x15c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a0e      	ldr	r2, [pc, #56]	; (800701c <RCCEx_PLL2_Config+0x15c>)
 8006fe4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006fe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fea:	f7fc f97f 	bl	80032ec <HAL_GetTick>
 8006fee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ff0:	e008      	b.n	8007004 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006ff2:	f7fc f97b 	bl	80032ec <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d901      	bls.n	8007004 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e006      	b.n	8007012 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007004:	4b05      	ldr	r3, [pc, #20]	; (800701c <RCCEx_PLL2_Config+0x15c>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d0f0      	beq.n	8006ff2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007010:	7bfb      	ldrb	r3, [r7, #15]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	58024400 	.word	0x58024400
 8007020:	ffff0007 	.word	0xffff0007

08007024 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800702e:	2300      	movs	r3, #0
 8007030:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007032:	4b53      	ldr	r3, [pc, #332]	; (8007180 <RCCEx_PLL3_Config+0x15c>)
 8007034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007036:	f003 0303 	and.w	r3, r3, #3
 800703a:	2b03      	cmp	r3, #3
 800703c:	d101      	bne.n	8007042 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e099      	b.n	8007176 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007042:	4b4f      	ldr	r3, [pc, #316]	; (8007180 <RCCEx_PLL3_Config+0x15c>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a4e      	ldr	r2, [pc, #312]	; (8007180 <RCCEx_PLL3_Config+0x15c>)
 8007048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800704c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800704e:	f7fc f94d 	bl	80032ec <HAL_GetTick>
 8007052:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007054:	e008      	b.n	8007068 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007056:	f7fc f949 	bl	80032ec <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	2b02      	cmp	r3, #2
 8007062:	d901      	bls.n	8007068 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e086      	b.n	8007176 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007068:	4b45      	ldr	r3, [pc, #276]	; (8007180 <RCCEx_PLL3_Config+0x15c>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1f0      	bne.n	8007056 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007074:	4b42      	ldr	r3, [pc, #264]	; (8007180 <RCCEx_PLL3_Config+0x15c>)
 8007076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007078:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	051b      	lsls	r3, r3, #20
 8007082:	493f      	ldr	r1, [pc, #252]	; (8007180 <RCCEx_PLL3_Config+0x15c>)
 8007084:	4313      	orrs	r3, r2
 8007086:	628b      	str	r3, [r1, #40]	; 0x28
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	3b01      	subs	r3, #1
 800708e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	3b01      	subs	r3, #1
 8007098:	025b      	lsls	r3, r3, #9
 800709a:	b29b      	uxth	r3, r3
 800709c:	431a      	orrs	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	3b01      	subs	r3, #1
 80070a4:	041b      	lsls	r3, r3, #16
 80070a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80070aa:	431a      	orrs	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	3b01      	subs	r3, #1
 80070b2:	061b      	lsls	r3, r3, #24
 80070b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80070b8:	4931      	ldr	r1, [pc, #196]	; (8007180 <RCCEx_PLL3_Config+0x15c>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80070be:	4b30      	ldr	r3, [pc, #192]	; (8007180 <RCCEx_PLL3_Config+0x15c>)
 80070c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	492d      	ldr	r1, [pc, #180]	; (8007180 <RCCEx_PLL3_Config+0x15c>)
 80070cc:	4313      	orrs	r3, r2
 80070ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80070d0:	4b2b      	ldr	r3, [pc, #172]	; (8007180 <RCCEx_PLL3_Config+0x15c>)
 80070d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	4928      	ldr	r1, [pc, #160]	; (8007180 <RCCEx_PLL3_Config+0x15c>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80070e2:	4b27      	ldr	r3, [pc, #156]	; (8007180 <RCCEx_PLL3_Config+0x15c>)
 80070e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e6:	4a26      	ldr	r2, [pc, #152]	; (8007180 <RCCEx_PLL3_Config+0x15c>)
 80070e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80070ee:	4b24      	ldr	r3, [pc, #144]	; (8007180 <RCCEx_PLL3_Config+0x15c>)
 80070f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070f2:	4b24      	ldr	r3, [pc, #144]	; (8007184 <RCCEx_PLL3_Config+0x160>)
 80070f4:	4013      	ands	r3, r2
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	69d2      	ldr	r2, [r2, #28]
 80070fa:	00d2      	lsls	r2, r2, #3
 80070fc:	4920      	ldr	r1, [pc, #128]	; (8007180 <RCCEx_PLL3_Config+0x15c>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007102:	4b1f      	ldr	r3, [pc, #124]	; (8007180 <RCCEx_PLL3_Config+0x15c>)
 8007104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007106:	4a1e      	ldr	r2, [pc, #120]	; (8007180 <RCCEx_PLL3_Config+0x15c>)
 8007108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800710c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d106      	bne.n	8007122 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007114:	4b1a      	ldr	r3, [pc, #104]	; (8007180 <RCCEx_PLL3_Config+0x15c>)
 8007116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007118:	4a19      	ldr	r2, [pc, #100]	; (8007180 <RCCEx_PLL3_Config+0x15c>)
 800711a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800711e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007120:	e00f      	b.n	8007142 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d106      	bne.n	8007136 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007128:	4b15      	ldr	r3, [pc, #84]	; (8007180 <RCCEx_PLL3_Config+0x15c>)
 800712a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712c:	4a14      	ldr	r2, [pc, #80]	; (8007180 <RCCEx_PLL3_Config+0x15c>)
 800712e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007132:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007134:	e005      	b.n	8007142 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007136:	4b12      	ldr	r3, [pc, #72]	; (8007180 <RCCEx_PLL3_Config+0x15c>)
 8007138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713a:	4a11      	ldr	r2, [pc, #68]	; (8007180 <RCCEx_PLL3_Config+0x15c>)
 800713c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007140:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007142:	4b0f      	ldr	r3, [pc, #60]	; (8007180 <RCCEx_PLL3_Config+0x15c>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a0e      	ldr	r2, [pc, #56]	; (8007180 <RCCEx_PLL3_Config+0x15c>)
 8007148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800714c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800714e:	f7fc f8cd 	bl	80032ec <HAL_GetTick>
 8007152:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007154:	e008      	b.n	8007168 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007156:	f7fc f8c9 	bl	80032ec <HAL_GetTick>
 800715a:	4602      	mov	r2, r0
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	2b02      	cmp	r3, #2
 8007162:	d901      	bls.n	8007168 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e006      	b.n	8007176 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007168:	4b05      	ldr	r3, [pc, #20]	; (8007180 <RCCEx_PLL3_Config+0x15c>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d0f0      	beq.n	8007156 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007174:	7bfb      	ldrb	r3, [r7, #15]
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	58024400 	.word	0x58024400
 8007184:	ffff0007 	.word	0xffff0007

08007188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d101      	bne.n	800719a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e049      	b.n	800722e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d106      	bne.n	80071b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7fb fd12 	bl	8002bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	3304      	adds	r3, #4
 80071c4:	4619      	mov	r1, r3
 80071c6:	4610      	mov	r0, r2
 80071c8:	f000 fa76 	bl	80076b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b082      	sub	sp, #8
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d101      	bne.n	8007248 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e049      	b.n	80072dc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b00      	cmp	r3, #0
 8007252:	d106      	bne.n	8007262 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 f841 	bl	80072e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2202      	movs	r2, #2
 8007266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	3304      	adds	r3, #4
 8007272:	4619      	mov	r1, r3
 8007274:	4610      	mov	r0, r2
 8007276:	f000 fa1f 	bl	80076b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800730a:	2b01      	cmp	r3, #1
 800730c:	d101      	bne.n	8007312 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800730e:	2302      	movs	r3, #2
 8007310:	e0fd      	b.n	800750e <HAL_TIM_PWM_ConfigChannel+0x216>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2201      	movs	r2, #1
 8007316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2b14      	cmp	r3, #20
 800731e:	f200 80f0 	bhi.w	8007502 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007322:	a201      	add	r2, pc, #4	; (adr r2, 8007328 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007328:	0800737d 	.word	0x0800737d
 800732c:	08007503 	.word	0x08007503
 8007330:	08007503 	.word	0x08007503
 8007334:	08007503 	.word	0x08007503
 8007338:	080073bd 	.word	0x080073bd
 800733c:	08007503 	.word	0x08007503
 8007340:	08007503 	.word	0x08007503
 8007344:	08007503 	.word	0x08007503
 8007348:	080073ff 	.word	0x080073ff
 800734c:	08007503 	.word	0x08007503
 8007350:	08007503 	.word	0x08007503
 8007354:	08007503 	.word	0x08007503
 8007358:	0800743f 	.word	0x0800743f
 800735c:	08007503 	.word	0x08007503
 8007360:	08007503 	.word	0x08007503
 8007364:	08007503 	.word	0x08007503
 8007368:	08007481 	.word	0x08007481
 800736c:	08007503 	.word	0x08007503
 8007370:	08007503 	.word	0x08007503
 8007374:	08007503 	.word	0x08007503
 8007378:	080074c1 	.word	0x080074c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68b9      	ldr	r1, [r7, #8]
 8007382:	4618      	mov	r0, r3
 8007384:	f000 fa32 	bl	80077ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	699a      	ldr	r2, [r3, #24]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f042 0208 	orr.w	r2, r2, #8
 8007396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	699a      	ldr	r2, [r3, #24]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f022 0204 	bic.w	r2, r2, #4
 80073a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6999      	ldr	r1, [r3, #24]
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	691a      	ldr	r2, [r3, #16]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	430a      	orrs	r2, r1
 80073b8:	619a      	str	r2, [r3, #24]
      break;
 80073ba:	e0a3      	b.n	8007504 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68b9      	ldr	r1, [r7, #8]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 faa2 	bl	800790c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	699a      	ldr	r2, [r3, #24]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	699a      	ldr	r2, [r3, #24]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6999      	ldr	r1, [r3, #24]
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	021a      	lsls	r2, r3, #8
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	430a      	orrs	r2, r1
 80073fa:	619a      	str	r2, [r3, #24]
      break;
 80073fc:	e082      	b.n	8007504 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68b9      	ldr	r1, [r7, #8]
 8007404:	4618      	mov	r0, r3
 8007406:	f000 fb0b 	bl	8007a20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	69da      	ldr	r2, [r3, #28]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f042 0208 	orr.w	r2, r2, #8
 8007418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	69da      	ldr	r2, [r3, #28]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f022 0204 	bic.w	r2, r2, #4
 8007428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	69d9      	ldr	r1, [r3, #28]
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	691a      	ldr	r2, [r3, #16]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	430a      	orrs	r2, r1
 800743a:	61da      	str	r2, [r3, #28]
      break;
 800743c:	e062      	b.n	8007504 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68b9      	ldr	r1, [r7, #8]
 8007444:	4618      	mov	r0, r3
 8007446:	f000 fb71 	bl	8007b2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	69da      	ldr	r2, [r3, #28]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	69da      	ldr	r2, [r3, #28]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	69d9      	ldr	r1, [r3, #28]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	021a      	lsls	r2, r3, #8
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	61da      	str	r2, [r3, #28]
      break;
 800747e:	e041      	b.n	8007504 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68b9      	ldr	r1, [r7, #8]
 8007486:	4618      	mov	r0, r3
 8007488:	f000 fbb8 	bl	8007bfc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f042 0208 	orr.w	r2, r2, #8
 800749a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f022 0204 	bic.w	r2, r2, #4
 80074aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	691a      	ldr	r2, [r3, #16]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80074be:	e021      	b.n	8007504 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68b9      	ldr	r1, [r7, #8]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 fbfa 	bl	8007cc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	021a      	lsls	r2, r3, #8
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	430a      	orrs	r2, r1
 80074fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007500:	e000      	b.n	8007504 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8007502:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop

08007518 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007528:	2b01      	cmp	r3, #1
 800752a:	d101      	bne.n	8007530 <HAL_TIM_ConfigClockSource+0x18>
 800752c:	2302      	movs	r3, #2
 800752e:	e0b7      	b.n	80076a0 <HAL_TIM_ConfigClockSource+0x188>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2202      	movs	r2, #2
 800753c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	4b57      	ldr	r3, [pc, #348]	; (80076a8 <HAL_TIM_ConfigClockSource+0x190>)
 800754c:	4013      	ands	r3, r2
 800754e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007556:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2b70      	cmp	r3, #112	; 0x70
 8007566:	d02e      	beq.n	80075c6 <HAL_TIM_ConfigClockSource+0xae>
 8007568:	2b70      	cmp	r3, #112	; 0x70
 800756a:	d812      	bhi.n	8007592 <HAL_TIM_ConfigClockSource+0x7a>
 800756c:	2b30      	cmp	r3, #48	; 0x30
 800756e:	f000 8084 	beq.w	800767a <HAL_TIM_ConfigClockSource+0x162>
 8007572:	2b30      	cmp	r3, #48	; 0x30
 8007574:	d806      	bhi.n	8007584 <HAL_TIM_ConfigClockSource+0x6c>
 8007576:	2b10      	cmp	r3, #16
 8007578:	d07f      	beq.n	800767a <HAL_TIM_ConfigClockSource+0x162>
 800757a:	2b20      	cmp	r3, #32
 800757c:	d07d      	beq.n	800767a <HAL_TIM_ConfigClockSource+0x162>
 800757e:	2b00      	cmp	r3, #0
 8007580:	d07b      	beq.n	800767a <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007582:	e084      	b.n	800768e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8007584:	2b50      	cmp	r3, #80	; 0x50
 8007586:	d048      	beq.n	800761a <HAL_TIM_ConfigClockSource+0x102>
 8007588:	2b60      	cmp	r3, #96	; 0x60
 800758a:	d056      	beq.n	800763a <HAL_TIM_ConfigClockSource+0x122>
 800758c:	2b40      	cmp	r3, #64	; 0x40
 800758e:	d064      	beq.n	800765a <HAL_TIM_ConfigClockSource+0x142>
      break;
 8007590:	e07d      	b.n	800768e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8007592:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007596:	d070      	beq.n	800767a <HAL_TIM_ConfigClockSource+0x162>
 8007598:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800759c:	d809      	bhi.n	80075b2 <HAL_TIM_ConfigClockSource+0x9a>
 800759e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075a2:	d027      	beq.n	80075f4 <HAL_TIM_ConfigClockSource+0xdc>
 80075a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075a8:	d067      	beq.n	800767a <HAL_TIM_ConfigClockSource+0x162>
 80075aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ae:	d06d      	beq.n	800768c <HAL_TIM_ConfigClockSource+0x174>
      break;
 80075b0:	e06d      	b.n	800768e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80075b2:	4a3e      	ldr	r2, [pc, #248]	; (80076ac <HAL_TIM_ConfigClockSource+0x194>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d060      	beq.n	800767a <HAL_TIM_ConfigClockSource+0x162>
 80075b8:	4a3d      	ldr	r2, [pc, #244]	; (80076b0 <HAL_TIM_ConfigClockSource+0x198>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d05d      	beq.n	800767a <HAL_TIM_ConfigClockSource+0x162>
 80075be:	4a3d      	ldr	r2, [pc, #244]	; (80076b4 <HAL_TIM_ConfigClockSource+0x19c>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d05a      	beq.n	800767a <HAL_TIM_ConfigClockSource+0x162>
      break;
 80075c4:	e063      	b.n	800768e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6818      	ldr	r0, [r3, #0]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	6899      	ldr	r1, [r3, #8]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	685a      	ldr	r2, [r3, #4]
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	f000 fc55 	bl	8007e84 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80075e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	609a      	str	r2, [r3, #8]
      break;
 80075f2:	e04c      	b.n	800768e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6818      	ldr	r0, [r3, #0]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	6899      	ldr	r1, [r3, #8]
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	f000 fc3e 	bl	8007e84 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	689a      	ldr	r2, [r3, #8]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007616:	609a      	str	r2, [r3, #8]
      break;
 8007618:	e039      	b.n	800768e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6818      	ldr	r0, [r3, #0]
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	6859      	ldr	r1, [r3, #4]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	461a      	mov	r2, r3
 8007628:	f000 fbae 	bl	8007d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2150      	movs	r1, #80	; 0x50
 8007632:	4618      	mov	r0, r3
 8007634:	f000 fc08 	bl	8007e48 <TIM_ITRx_SetConfig>
      break;
 8007638:	e029      	b.n	800768e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6818      	ldr	r0, [r3, #0]
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	6859      	ldr	r1, [r3, #4]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	461a      	mov	r2, r3
 8007648:	f000 fbcd 	bl	8007de6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2160      	movs	r1, #96	; 0x60
 8007652:	4618      	mov	r0, r3
 8007654:	f000 fbf8 	bl	8007e48 <TIM_ITRx_SetConfig>
      break;
 8007658:	e019      	b.n	800768e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6818      	ldr	r0, [r3, #0]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	6859      	ldr	r1, [r3, #4]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	461a      	mov	r2, r3
 8007668:	f000 fb8e 	bl	8007d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2140      	movs	r1, #64	; 0x40
 8007672:	4618      	mov	r0, r3
 8007674:	f000 fbe8 	bl	8007e48 <TIM_ITRx_SetConfig>
      break;
 8007678:	e009      	b.n	800768e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4619      	mov	r1, r3
 8007684:	4610      	mov	r0, r2
 8007686:	f000 fbdf 	bl	8007e48 <TIM_ITRx_SetConfig>
      break;
 800768a:	e000      	b.n	800768e <HAL_TIM_ConfigClockSource+0x176>
      break;
 800768c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	ffceff88 	.word	0xffceff88
 80076ac:	00100030 	.word	0x00100030
 80076b0:	00100040 	.word	0x00100040
 80076b4:	00100020 	.word	0x00100020

080076b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a40      	ldr	r2, [pc, #256]	; (80077cc <TIM_Base_SetConfig+0x114>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d013      	beq.n	80076f8 <TIM_Base_SetConfig+0x40>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076d6:	d00f      	beq.n	80076f8 <TIM_Base_SetConfig+0x40>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a3d      	ldr	r2, [pc, #244]	; (80077d0 <TIM_Base_SetConfig+0x118>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d00b      	beq.n	80076f8 <TIM_Base_SetConfig+0x40>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a3c      	ldr	r2, [pc, #240]	; (80077d4 <TIM_Base_SetConfig+0x11c>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d007      	beq.n	80076f8 <TIM_Base_SetConfig+0x40>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a3b      	ldr	r2, [pc, #236]	; (80077d8 <TIM_Base_SetConfig+0x120>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d003      	beq.n	80076f8 <TIM_Base_SetConfig+0x40>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a3a      	ldr	r2, [pc, #232]	; (80077dc <TIM_Base_SetConfig+0x124>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d108      	bne.n	800770a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	4313      	orrs	r3, r2
 8007708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a2f      	ldr	r2, [pc, #188]	; (80077cc <TIM_Base_SetConfig+0x114>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d01f      	beq.n	8007752 <TIM_Base_SetConfig+0x9a>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007718:	d01b      	beq.n	8007752 <TIM_Base_SetConfig+0x9a>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a2c      	ldr	r2, [pc, #176]	; (80077d0 <TIM_Base_SetConfig+0x118>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d017      	beq.n	8007752 <TIM_Base_SetConfig+0x9a>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a2b      	ldr	r2, [pc, #172]	; (80077d4 <TIM_Base_SetConfig+0x11c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d013      	beq.n	8007752 <TIM_Base_SetConfig+0x9a>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a2a      	ldr	r2, [pc, #168]	; (80077d8 <TIM_Base_SetConfig+0x120>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d00f      	beq.n	8007752 <TIM_Base_SetConfig+0x9a>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a29      	ldr	r2, [pc, #164]	; (80077dc <TIM_Base_SetConfig+0x124>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d00b      	beq.n	8007752 <TIM_Base_SetConfig+0x9a>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a28      	ldr	r2, [pc, #160]	; (80077e0 <TIM_Base_SetConfig+0x128>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d007      	beq.n	8007752 <TIM_Base_SetConfig+0x9a>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a27      	ldr	r2, [pc, #156]	; (80077e4 <TIM_Base_SetConfig+0x12c>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d003      	beq.n	8007752 <TIM_Base_SetConfig+0x9a>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a26      	ldr	r2, [pc, #152]	; (80077e8 <TIM_Base_SetConfig+0x130>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d108      	bne.n	8007764 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007758:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	4313      	orrs	r3, r2
 8007762:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	4313      	orrs	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	689a      	ldr	r2, [r3, #8]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a10      	ldr	r2, [pc, #64]	; (80077cc <TIM_Base_SetConfig+0x114>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d00f      	beq.n	80077b0 <TIM_Base_SetConfig+0xf8>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a12      	ldr	r2, [pc, #72]	; (80077dc <TIM_Base_SetConfig+0x124>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d00b      	beq.n	80077b0 <TIM_Base_SetConfig+0xf8>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a11      	ldr	r2, [pc, #68]	; (80077e0 <TIM_Base_SetConfig+0x128>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d007      	beq.n	80077b0 <TIM_Base_SetConfig+0xf8>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a10      	ldr	r2, [pc, #64]	; (80077e4 <TIM_Base_SetConfig+0x12c>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d003      	beq.n	80077b0 <TIM_Base_SetConfig+0xf8>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a0f      	ldr	r2, [pc, #60]	; (80077e8 <TIM_Base_SetConfig+0x130>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d103      	bne.n	80077b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	691a      	ldr	r2, [r3, #16]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	615a      	str	r2, [r3, #20]
}
 80077be:	bf00      	nop
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	40010000 	.word	0x40010000
 80077d0:	40000400 	.word	0x40000400
 80077d4:	40000800 	.word	0x40000800
 80077d8:	40000c00 	.word	0x40000c00
 80077dc:	40010400 	.word	0x40010400
 80077e0:	40014000 	.word	0x40014000
 80077e4:	40014400 	.word	0x40014400
 80077e8:	40014800 	.word	0x40014800

080077ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b087      	sub	sp, #28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	f023 0201 	bic.w	r2, r3, #1
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	4b37      	ldr	r3, [pc, #220]	; (80078f4 <TIM_OC1_SetConfig+0x108>)
 8007818:	4013      	ands	r3, r2
 800781a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f023 0303 	bic.w	r3, r3, #3
 8007822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	4313      	orrs	r3, r2
 800782c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	f023 0302 	bic.w	r3, r3, #2
 8007834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	4313      	orrs	r3, r2
 800783e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a2d      	ldr	r2, [pc, #180]	; (80078f8 <TIM_OC1_SetConfig+0x10c>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d00f      	beq.n	8007868 <TIM_OC1_SetConfig+0x7c>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a2c      	ldr	r2, [pc, #176]	; (80078fc <TIM_OC1_SetConfig+0x110>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d00b      	beq.n	8007868 <TIM_OC1_SetConfig+0x7c>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a2b      	ldr	r2, [pc, #172]	; (8007900 <TIM_OC1_SetConfig+0x114>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d007      	beq.n	8007868 <TIM_OC1_SetConfig+0x7c>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a2a      	ldr	r2, [pc, #168]	; (8007904 <TIM_OC1_SetConfig+0x118>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d003      	beq.n	8007868 <TIM_OC1_SetConfig+0x7c>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a29      	ldr	r2, [pc, #164]	; (8007908 <TIM_OC1_SetConfig+0x11c>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d10c      	bne.n	8007882 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f023 0308 	bic.w	r3, r3, #8
 800786e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	4313      	orrs	r3, r2
 8007878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f023 0304 	bic.w	r3, r3, #4
 8007880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a1c      	ldr	r2, [pc, #112]	; (80078f8 <TIM_OC1_SetConfig+0x10c>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d00f      	beq.n	80078aa <TIM_OC1_SetConfig+0xbe>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a1b      	ldr	r2, [pc, #108]	; (80078fc <TIM_OC1_SetConfig+0x110>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d00b      	beq.n	80078aa <TIM_OC1_SetConfig+0xbe>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a1a      	ldr	r2, [pc, #104]	; (8007900 <TIM_OC1_SetConfig+0x114>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d007      	beq.n	80078aa <TIM_OC1_SetConfig+0xbe>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a19      	ldr	r2, [pc, #100]	; (8007904 <TIM_OC1_SetConfig+0x118>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d003      	beq.n	80078aa <TIM_OC1_SetConfig+0xbe>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a18      	ldr	r2, [pc, #96]	; (8007908 <TIM_OC1_SetConfig+0x11c>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d111      	bne.n	80078ce <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	621a      	str	r2, [r3, #32]
}
 80078e8:	bf00      	nop
 80078ea:	371c      	adds	r7, #28
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr
 80078f4:	fffeff8f 	.word	0xfffeff8f
 80078f8:	40010000 	.word	0x40010000
 80078fc:	40010400 	.word	0x40010400
 8007900:	40014000 	.word	0x40014000
 8007904:	40014400 	.word	0x40014400
 8007908:	40014800 	.word	0x40014800

0800790c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800790c:	b480      	push	{r7}
 800790e:	b087      	sub	sp, #28
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	f023 0210 	bic.w	r2, r3, #16
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a1b      	ldr	r3, [r3, #32]
 8007926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	4b34      	ldr	r3, [pc, #208]	; (8007a08 <TIM_OC2_SetConfig+0xfc>)
 8007938:	4013      	ands	r3, r2
 800793a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	021b      	lsls	r3, r3, #8
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	4313      	orrs	r3, r2
 800794e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	f023 0320 	bic.w	r3, r3, #32
 8007956:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	011b      	lsls	r3, r3, #4
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	4313      	orrs	r3, r2
 8007962:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a29      	ldr	r2, [pc, #164]	; (8007a0c <TIM_OC2_SetConfig+0x100>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d003      	beq.n	8007974 <TIM_OC2_SetConfig+0x68>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a28      	ldr	r2, [pc, #160]	; (8007a10 <TIM_OC2_SetConfig+0x104>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d10d      	bne.n	8007990 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800797a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	011b      	lsls	r3, r3, #4
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	4313      	orrs	r3, r2
 8007986:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800798e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a1e      	ldr	r2, [pc, #120]	; (8007a0c <TIM_OC2_SetConfig+0x100>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d00f      	beq.n	80079b8 <TIM_OC2_SetConfig+0xac>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a1d      	ldr	r2, [pc, #116]	; (8007a10 <TIM_OC2_SetConfig+0x104>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d00b      	beq.n	80079b8 <TIM_OC2_SetConfig+0xac>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a1c      	ldr	r2, [pc, #112]	; (8007a14 <TIM_OC2_SetConfig+0x108>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d007      	beq.n	80079b8 <TIM_OC2_SetConfig+0xac>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a1b      	ldr	r2, [pc, #108]	; (8007a18 <TIM_OC2_SetConfig+0x10c>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d003      	beq.n	80079b8 <TIM_OC2_SetConfig+0xac>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a1a      	ldr	r2, [pc, #104]	; (8007a1c <TIM_OC2_SetConfig+0x110>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d113      	bne.n	80079e0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	695b      	ldr	r3, [r3, #20]
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	4313      	orrs	r3, r2
 80079de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	693a      	ldr	r2, [r7, #16]
 80079e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	621a      	str	r2, [r3, #32]
}
 80079fa:	bf00      	nop
 80079fc:	371c      	adds	r7, #28
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	feff8fff 	.word	0xfeff8fff
 8007a0c:	40010000 	.word	0x40010000
 8007a10:	40010400 	.word	0x40010400
 8007a14:	40014000 	.word	0x40014000
 8007a18:	40014400 	.word	0x40014400
 8007a1c:	40014800 	.word	0x40014800

08007a20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b087      	sub	sp, #28
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f023 0303 	bic.w	r3, r3, #3
 8007a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	021b      	lsls	r3, r3, #8
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a27      	ldr	r2, [pc, #156]	; (8007b18 <TIM_OC3_SetConfig+0xf8>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d003      	beq.n	8007a86 <TIM_OC3_SetConfig+0x66>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a26      	ldr	r2, [pc, #152]	; (8007b1c <TIM_OC3_SetConfig+0xfc>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d10d      	bne.n	8007aa2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	021b      	lsls	r3, r3, #8
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a1c      	ldr	r2, [pc, #112]	; (8007b18 <TIM_OC3_SetConfig+0xf8>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d00f      	beq.n	8007aca <TIM_OC3_SetConfig+0xaa>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a1b      	ldr	r2, [pc, #108]	; (8007b1c <TIM_OC3_SetConfig+0xfc>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d00b      	beq.n	8007aca <TIM_OC3_SetConfig+0xaa>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a1a      	ldr	r2, [pc, #104]	; (8007b20 <TIM_OC3_SetConfig+0x100>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d007      	beq.n	8007aca <TIM_OC3_SetConfig+0xaa>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a19      	ldr	r2, [pc, #100]	; (8007b24 <TIM_OC3_SetConfig+0x104>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d003      	beq.n	8007aca <TIM_OC3_SetConfig+0xaa>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a18      	ldr	r2, [pc, #96]	; (8007b28 <TIM_OC3_SetConfig+0x108>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d113      	bne.n	8007af2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	011b      	lsls	r3, r3, #4
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	011b      	lsls	r3, r3, #4
 8007aec:	693a      	ldr	r2, [r7, #16]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	685a      	ldr	r2, [r3, #4]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	621a      	str	r2, [r3, #32]
}
 8007b0c:	bf00      	nop
 8007b0e:	371c      	adds	r7, #28
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	40010000 	.word	0x40010000
 8007b1c:	40010400 	.word	0x40010400
 8007b20:	40014000 	.word	0x40014000
 8007b24:	40014400 	.word	0x40014400
 8007b28:	40014800 	.word	0x40014800

08007b2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b087      	sub	sp, #28
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	69db      	ldr	r3, [r3, #28]
 8007b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	021b      	lsls	r3, r3, #8
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	031b      	lsls	r3, r3, #12
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a18      	ldr	r2, [pc, #96]	; (8007be8 <TIM_OC4_SetConfig+0xbc>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d00f      	beq.n	8007bac <TIM_OC4_SetConfig+0x80>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a17      	ldr	r2, [pc, #92]	; (8007bec <TIM_OC4_SetConfig+0xc0>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d00b      	beq.n	8007bac <TIM_OC4_SetConfig+0x80>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a16      	ldr	r2, [pc, #88]	; (8007bf0 <TIM_OC4_SetConfig+0xc4>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d007      	beq.n	8007bac <TIM_OC4_SetConfig+0x80>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a15      	ldr	r2, [pc, #84]	; (8007bf4 <TIM_OC4_SetConfig+0xc8>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d003      	beq.n	8007bac <TIM_OC4_SetConfig+0x80>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a14      	ldr	r2, [pc, #80]	; (8007bf8 <TIM_OC4_SetConfig+0xcc>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d109      	bne.n	8007bc0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	019b      	lsls	r3, r3, #6
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	685a      	ldr	r2, [r3, #4]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	693a      	ldr	r2, [r7, #16]
 8007bd8:	621a      	str	r2, [r3, #32]
}
 8007bda:	bf00      	nop
 8007bdc:	371c      	adds	r7, #28
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	40010000 	.word	0x40010000
 8007bec:	40010400 	.word	0x40010400
 8007bf0:	40014000 	.word	0x40014000
 8007bf4:	40014400 	.word	0x40014400
 8007bf8:	40014800 	.word	0x40014800

08007bfc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007c3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	041b      	lsls	r3, r3, #16
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a17      	ldr	r2, [pc, #92]	; (8007cac <TIM_OC5_SetConfig+0xb0>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d00f      	beq.n	8007c72 <TIM_OC5_SetConfig+0x76>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a16      	ldr	r2, [pc, #88]	; (8007cb0 <TIM_OC5_SetConfig+0xb4>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d00b      	beq.n	8007c72 <TIM_OC5_SetConfig+0x76>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a15      	ldr	r2, [pc, #84]	; (8007cb4 <TIM_OC5_SetConfig+0xb8>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d007      	beq.n	8007c72 <TIM_OC5_SetConfig+0x76>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a14      	ldr	r2, [pc, #80]	; (8007cb8 <TIM_OC5_SetConfig+0xbc>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d003      	beq.n	8007c72 <TIM_OC5_SetConfig+0x76>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a13      	ldr	r2, [pc, #76]	; (8007cbc <TIM_OC5_SetConfig+0xc0>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d109      	bne.n	8007c86 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	021b      	lsls	r3, r3, #8
 8007c80:	697a      	ldr	r2, [r7, #20]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	685a      	ldr	r2, [r3, #4]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	621a      	str	r2, [r3, #32]
}
 8007ca0:	bf00      	nop
 8007ca2:	371c      	adds	r7, #28
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr
 8007cac:	40010000 	.word	0x40010000
 8007cb0:	40010400 	.word	0x40010400
 8007cb4:	40014000 	.word	0x40014000
 8007cb8:	40014400 	.word	0x40014400
 8007cbc:	40014800 	.word	0x40014800

08007cc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b087      	sub	sp, #28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	021b      	lsls	r3, r3, #8
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	051b      	lsls	r3, r3, #20
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a18      	ldr	r2, [pc, #96]	; (8007d74 <TIM_OC6_SetConfig+0xb4>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d00f      	beq.n	8007d38 <TIM_OC6_SetConfig+0x78>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a17      	ldr	r2, [pc, #92]	; (8007d78 <TIM_OC6_SetConfig+0xb8>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d00b      	beq.n	8007d38 <TIM_OC6_SetConfig+0x78>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a16      	ldr	r2, [pc, #88]	; (8007d7c <TIM_OC6_SetConfig+0xbc>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d007      	beq.n	8007d38 <TIM_OC6_SetConfig+0x78>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a15      	ldr	r2, [pc, #84]	; (8007d80 <TIM_OC6_SetConfig+0xc0>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d003      	beq.n	8007d38 <TIM_OC6_SetConfig+0x78>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a14      	ldr	r2, [pc, #80]	; (8007d84 <TIM_OC6_SetConfig+0xc4>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d109      	bne.n	8007d4c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	695b      	ldr	r3, [r3, #20]
 8007d44:	029b      	lsls	r3, r3, #10
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	693a      	ldr	r2, [r7, #16]
 8007d64:	621a      	str	r2, [r3, #32]
}
 8007d66:	bf00      	nop
 8007d68:	371c      	adds	r7, #28
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	40010000 	.word	0x40010000
 8007d78:	40010400 	.word	0x40010400
 8007d7c:	40014000 	.word	0x40014000
 8007d80:	40014400 	.word	0x40014400
 8007d84:	40014800 	.word	0x40014800

08007d88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6a1b      	ldr	r3, [r3, #32]
 8007d98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6a1b      	ldr	r3, [r3, #32]
 8007d9e:	f023 0201 	bic.w	r2, r3, #1
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007db2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	011b      	lsls	r3, r3, #4
 8007db8:	693a      	ldr	r2, [r7, #16]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	f023 030a 	bic.w	r3, r3, #10
 8007dc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dc6:	697a      	ldr	r2, [r7, #20]
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	621a      	str	r2, [r3, #32]
}
 8007dda:	bf00      	nop
 8007ddc:	371c      	adds	r7, #28
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b087      	sub	sp, #28
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	60f8      	str	r0, [r7, #12]
 8007dee:	60b9      	str	r1, [r7, #8]
 8007df0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6a1b      	ldr	r3, [r3, #32]
 8007df6:	f023 0210 	bic.w	r2, r3, #16
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	699b      	ldr	r3, [r3, #24]
 8007e02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6a1b      	ldr	r3, [r3, #32]
 8007e08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	031b      	lsls	r3, r3, #12
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	011b      	lsls	r3, r3, #4
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	697a      	ldr	r2, [r7, #20]
 8007e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	693a      	ldr	r2, [r7, #16]
 8007e38:	621a      	str	r2, [r3, #32]
}
 8007e3a:	bf00      	nop
 8007e3c:	371c      	adds	r7, #28
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
	...

08007e48 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	4b09      	ldr	r3, [pc, #36]	; (8007e80 <TIM_ITRx_SetConfig+0x38>)
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e60:	683a      	ldr	r2, [r7, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	f043 0307 	orr.w	r3, r3, #7
 8007e6a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	609a      	str	r2, [r3, #8]
}
 8007e72:	bf00      	nop
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	ffcfff8f 	.word	0xffcfff8f

08007e84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b087      	sub	sp, #28
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
 8007e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	021a      	lsls	r2, r3, #8
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	431a      	orrs	r2, r3
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	697a      	ldr	r2, [r7, #20]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	609a      	str	r2, [r3, #8]
}
 8007eb8:	bf00      	nop
 8007eba:	371c      	adds	r7, #28
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d101      	bne.n	8007edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ed8:	2302      	movs	r3, #2
 8007eda:	e068      	b.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a2e      	ldr	r2, [pc, #184]	; (8007fbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d004      	beq.n	8007f10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a2d      	ldr	r2, [pc, #180]	; (8007fc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d108      	bne.n	8007f22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a1e      	ldr	r2, [pc, #120]	; (8007fbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d01d      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f4e:	d018      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a1b      	ldr	r2, [pc, #108]	; (8007fc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d013      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a1a      	ldr	r2, [pc, #104]	; (8007fc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d00e      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a18      	ldr	r2, [pc, #96]	; (8007fcc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d009      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a13      	ldr	r2, [pc, #76]	; (8007fc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d004      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a14      	ldr	r2, [pc, #80]	; (8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d10c      	bne.n	8007f9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68ba      	ldr	r2, [r7, #8]
 8007f9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3714      	adds	r7, #20
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	40010000 	.word	0x40010000
 8007fc0:	40010400 	.word	0x40010400
 8007fc4:	40000400 	.word	0x40000400
 8007fc8:	40000800 	.word	0x40000800
 8007fcc:	40000c00 	.word	0x40000c00
 8007fd0:	40001800 	.word	0x40001800

08007fd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d101      	bne.n	8007ff0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007fec:	2302      	movs	r3, #2
 8007fee:	e065      	b.n	80080bc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	4313      	orrs	r3, r2
 8008004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	4313      	orrs	r3, r2
 8008012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	4313      	orrs	r3, r2
 8008020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4313      	orrs	r3, r2
 800802e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	4313      	orrs	r3, r2
 800803c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	695b      	ldr	r3, [r3, #20]
 8008048:	4313      	orrs	r3, r2
 800804a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008056:	4313      	orrs	r3, r2
 8008058:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	699b      	ldr	r3, [r3, #24]
 8008064:	041b      	lsls	r3, r3, #16
 8008066:	4313      	orrs	r3, r2
 8008068:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a16      	ldr	r2, [pc, #88]	; (80080c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d004      	beq.n	800807e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a14      	ldr	r2, [pc, #80]	; (80080cc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d115      	bne.n	80080aa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008088:	051b      	lsls	r3, r3, #20
 800808a:	4313      	orrs	r3, r2
 800808c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	69db      	ldr	r3, [r3, #28]
 8008098:	4313      	orrs	r3, r2
 800809a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3714      	adds	r7, #20
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr
 80080c8:	40010000 	.word	0x40010000
 80080cc:	40010400 	.word	0x40010400

080080d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d101      	bne.n	80080e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e042      	b.n	8008168 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d106      	bne.n	80080fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f7fa fe6d 	bl	8002dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2224      	movs	r2, #36	; 0x24
 80080fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f022 0201 	bic.w	r2, r2, #1
 8008110:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f8ca 	bl	80082ac <UART_SetConfig>
 8008118:	4603      	mov	r3, r0
 800811a:	2b01      	cmp	r3, #1
 800811c:	d101      	bne.n	8008122 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e022      	b.n	8008168 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008126:	2b00      	cmp	r3, #0
 8008128:	d002      	beq.n	8008130 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fe6e 	bl	8008e0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	685a      	ldr	r2, [r3, #4]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800813e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	689a      	ldr	r2, [r3, #8]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800814e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f042 0201 	orr.w	r2, r2, #1
 800815e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 fef5 	bl	8008f50 <UART_CheckIdleState>
 8008166:	4603      	mov	r3, r0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	4613      	mov	r3, r2
 800817c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008184:	2b20      	cmp	r3, #32
 8008186:	d168      	bne.n	800825a <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d002      	beq.n	8008194 <HAL_UART_Transmit_DMA+0x24>
 800818e:	88fb      	ldrh	r3, [r7, #6]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d101      	bne.n	8008198 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e061      	b.n	800825c <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d101      	bne.n	80081a6 <HAL_UART_Transmit_DMA+0x36>
 80081a2:	2302      	movs	r3, #2
 80081a4:	e05a      	b.n	800825c <HAL_UART_Transmit_DMA+0xec>
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2201      	movs	r2, #1
 80081aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	88fa      	ldrh	r2, [r7, #6]
 80081b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	88fa      	ldrh	r2, [r7, #6]
 80081c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2221      	movs	r2, #33	; 0x21
 80081d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d02c      	beq.n	8008236 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081e0:	4a20      	ldr	r2, [pc, #128]	; (8008264 <HAL_UART_Transmit_DMA+0xf4>)
 80081e2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081e8:	4a1f      	ldr	r2, [pc, #124]	; (8008268 <HAL_UART_Transmit_DMA+0xf8>)
 80081ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081f0:	4a1e      	ldr	r2, [pc, #120]	; (800826c <HAL_UART_Transmit_DMA+0xfc>)
 80081f2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081f8:	2200      	movs	r2, #0
 80081fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008204:	4619      	mov	r1, r3
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	3328      	adds	r3, #40	; 0x28
 800820c:	461a      	mov	r2, r3
 800820e:	88fb      	ldrh	r3, [r7, #6]
 8008210:	f7fb f99e 	bl	8003550 <HAL_DMA_Start_IT>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00d      	beq.n	8008236 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2210      	movs	r2, #16
 800821e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2220      	movs	r2, #32
 800822e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e012      	b.n	800825c <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2240      	movs	r2, #64	; 0x40
 800823c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	689a      	ldr	r2, [r3, #8]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008254:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008256:	2300      	movs	r3, #0
 8008258:	e000      	b.n	800825c <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800825a:	2302      	movs	r3, #2
  }
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	08009165 	.word	0x08009165
 8008268:	080091b5 	.word	0x080091b5
 800826c:	080091d1 	.word	0x080091d1

08008270 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008278:	bf00      	nop
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800828c:	bf00      	nop
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082ac:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80082b0:	b08e      	sub	sp, #56	; 0x38
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	689a      	ldr	r2, [r3, #8]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	431a      	orrs	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	431a      	orrs	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	69db      	ldr	r3, [r3, #28]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082da:	4313      	orrs	r3, r2
 80082dc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	4bc1      	ldr	r3, [pc, #772]	; (80085ec <UART_SetConfig+0x340>)
 80082e6:	4013      	ands	r3, r2
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	6812      	ldr	r2, [r2, #0]
 80082ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80082ee:	430b      	orrs	r3, r1
 80082f0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	68da      	ldr	r2, [r3, #12]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	430a      	orrs	r2, r1
 8008306:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4ab7      	ldr	r2, [pc, #732]	; (80085f0 <UART_SetConfig+0x344>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d004      	beq.n	8008322 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a1b      	ldr	r3, [r3, #32]
 800831c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800831e:	4313      	orrs	r3, r2
 8008320:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	689a      	ldr	r2, [r3, #8]
 8008328:	4bb2      	ldr	r3, [pc, #712]	; (80085f4 <UART_SetConfig+0x348>)
 800832a:	4013      	ands	r3, r2
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	6812      	ldr	r2, [r2, #0]
 8008330:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008332:	430b      	orrs	r3, r1
 8008334:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833c:	f023 010f 	bic.w	r1, r3, #15
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	430a      	orrs	r2, r1
 800834a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4aa9      	ldr	r2, [pc, #676]	; (80085f8 <UART_SetConfig+0x34c>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d177      	bne.n	8008446 <UART_SetConfig+0x19a>
 8008356:	4ba9      	ldr	r3, [pc, #676]	; (80085fc <UART_SetConfig+0x350>)
 8008358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800835a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800835e:	2b28      	cmp	r3, #40	; 0x28
 8008360:	d86c      	bhi.n	800843c <UART_SetConfig+0x190>
 8008362:	a201      	add	r2, pc, #4	; (adr r2, 8008368 <UART_SetConfig+0xbc>)
 8008364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008368:	0800840d 	.word	0x0800840d
 800836c:	0800843d 	.word	0x0800843d
 8008370:	0800843d 	.word	0x0800843d
 8008374:	0800843d 	.word	0x0800843d
 8008378:	0800843d 	.word	0x0800843d
 800837c:	0800843d 	.word	0x0800843d
 8008380:	0800843d 	.word	0x0800843d
 8008384:	0800843d 	.word	0x0800843d
 8008388:	08008415 	.word	0x08008415
 800838c:	0800843d 	.word	0x0800843d
 8008390:	0800843d 	.word	0x0800843d
 8008394:	0800843d 	.word	0x0800843d
 8008398:	0800843d 	.word	0x0800843d
 800839c:	0800843d 	.word	0x0800843d
 80083a0:	0800843d 	.word	0x0800843d
 80083a4:	0800843d 	.word	0x0800843d
 80083a8:	0800841d 	.word	0x0800841d
 80083ac:	0800843d 	.word	0x0800843d
 80083b0:	0800843d 	.word	0x0800843d
 80083b4:	0800843d 	.word	0x0800843d
 80083b8:	0800843d 	.word	0x0800843d
 80083bc:	0800843d 	.word	0x0800843d
 80083c0:	0800843d 	.word	0x0800843d
 80083c4:	0800843d 	.word	0x0800843d
 80083c8:	08008425 	.word	0x08008425
 80083cc:	0800843d 	.word	0x0800843d
 80083d0:	0800843d 	.word	0x0800843d
 80083d4:	0800843d 	.word	0x0800843d
 80083d8:	0800843d 	.word	0x0800843d
 80083dc:	0800843d 	.word	0x0800843d
 80083e0:	0800843d 	.word	0x0800843d
 80083e4:	0800843d 	.word	0x0800843d
 80083e8:	0800842d 	.word	0x0800842d
 80083ec:	0800843d 	.word	0x0800843d
 80083f0:	0800843d 	.word	0x0800843d
 80083f4:	0800843d 	.word	0x0800843d
 80083f8:	0800843d 	.word	0x0800843d
 80083fc:	0800843d 	.word	0x0800843d
 8008400:	0800843d 	.word	0x0800843d
 8008404:	0800843d 	.word	0x0800843d
 8008408:	08008435 	.word	0x08008435
 800840c:	2301      	movs	r3, #1
 800840e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008412:	e233      	b.n	800887c <UART_SetConfig+0x5d0>
 8008414:	2304      	movs	r3, #4
 8008416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800841a:	e22f      	b.n	800887c <UART_SetConfig+0x5d0>
 800841c:	2308      	movs	r3, #8
 800841e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008422:	e22b      	b.n	800887c <UART_SetConfig+0x5d0>
 8008424:	2310      	movs	r3, #16
 8008426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800842a:	e227      	b.n	800887c <UART_SetConfig+0x5d0>
 800842c:	2320      	movs	r3, #32
 800842e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008432:	e223      	b.n	800887c <UART_SetConfig+0x5d0>
 8008434:	2340      	movs	r3, #64	; 0x40
 8008436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800843a:	e21f      	b.n	800887c <UART_SetConfig+0x5d0>
 800843c:	2380      	movs	r3, #128	; 0x80
 800843e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008442:	bf00      	nop
 8008444:	e21a      	b.n	800887c <UART_SetConfig+0x5d0>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a6d      	ldr	r2, [pc, #436]	; (8008600 <UART_SetConfig+0x354>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d132      	bne.n	80084b6 <UART_SetConfig+0x20a>
 8008450:	4b6a      	ldr	r3, [pc, #424]	; (80085fc <UART_SetConfig+0x350>)
 8008452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008454:	f003 0307 	and.w	r3, r3, #7
 8008458:	2b05      	cmp	r3, #5
 800845a:	d827      	bhi.n	80084ac <UART_SetConfig+0x200>
 800845c:	a201      	add	r2, pc, #4	; (adr r2, 8008464 <UART_SetConfig+0x1b8>)
 800845e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008462:	bf00      	nop
 8008464:	0800847d 	.word	0x0800847d
 8008468:	08008485 	.word	0x08008485
 800846c:	0800848d 	.word	0x0800848d
 8008470:	08008495 	.word	0x08008495
 8008474:	0800849d 	.word	0x0800849d
 8008478:	080084a5 	.word	0x080084a5
 800847c:	2300      	movs	r3, #0
 800847e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008482:	e1fb      	b.n	800887c <UART_SetConfig+0x5d0>
 8008484:	2304      	movs	r3, #4
 8008486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800848a:	e1f7      	b.n	800887c <UART_SetConfig+0x5d0>
 800848c:	2308      	movs	r3, #8
 800848e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008492:	e1f3      	b.n	800887c <UART_SetConfig+0x5d0>
 8008494:	2310      	movs	r3, #16
 8008496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800849a:	e1ef      	b.n	800887c <UART_SetConfig+0x5d0>
 800849c:	2320      	movs	r3, #32
 800849e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084a2:	e1eb      	b.n	800887c <UART_SetConfig+0x5d0>
 80084a4:	2340      	movs	r3, #64	; 0x40
 80084a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084aa:	e1e7      	b.n	800887c <UART_SetConfig+0x5d0>
 80084ac:	2380      	movs	r3, #128	; 0x80
 80084ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084b2:	bf00      	nop
 80084b4:	e1e2      	b.n	800887c <UART_SetConfig+0x5d0>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a52      	ldr	r2, [pc, #328]	; (8008604 <UART_SetConfig+0x358>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d132      	bne.n	8008526 <UART_SetConfig+0x27a>
 80084c0:	4b4e      	ldr	r3, [pc, #312]	; (80085fc <UART_SetConfig+0x350>)
 80084c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084c4:	f003 0307 	and.w	r3, r3, #7
 80084c8:	2b05      	cmp	r3, #5
 80084ca:	d827      	bhi.n	800851c <UART_SetConfig+0x270>
 80084cc:	a201      	add	r2, pc, #4	; (adr r2, 80084d4 <UART_SetConfig+0x228>)
 80084ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d2:	bf00      	nop
 80084d4:	080084ed 	.word	0x080084ed
 80084d8:	080084f5 	.word	0x080084f5
 80084dc:	080084fd 	.word	0x080084fd
 80084e0:	08008505 	.word	0x08008505
 80084e4:	0800850d 	.word	0x0800850d
 80084e8:	08008515 	.word	0x08008515
 80084ec:	2300      	movs	r3, #0
 80084ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084f2:	e1c3      	b.n	800887c <UART_SetConfig+0x5d0>
 80084f4:	2304      	movs	r3, #4
 80084f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084fa:	e1bf      	b.n	800887c <UART_SetConfig+0x5d0>
 80084fc:	2308      	movs	r3, #8
 80084fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008502:	e1bb      	b.n	800887c <UART_SetConfig+0x5d0>
 8008504:	2310      	movs	r3, #16
 8008506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800850a:	e1b7      	b.n	800887c <UART_SetConfig+0x5d0>
 800850c:	2320      	movs	r3, #32
 800850e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008512:	e1b3      	b.n	800887c <UART_SetConfig+0x5d0>
 8008514:	2340      	movs	r3, #64	; 0x40
 8008516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800851a:	e1af      	b.n	800887c <UART_SetConfig+0x5d0>
 800851c:	2380      	movs	r3, #128	; 0x80
 800851e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008522:	bf00      	nop
 8008524:	e1aa      	b.n	800887c <UART_SetConfig+0x5d0>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a37      	ldr	r2, [pc, #220]	; (8008608 <UART_SetConfig+0x35c>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d132      	bne.n	8008596 <UART_SetConfig+0x2ea>
 8008530:	4b32      	ldr	r3, [pc, #200]	; (80085fc <UART_SetConfig+0x350>)
 8008532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008534:	f003 0307 	and.w	r3, r3, #7
 8008538:	2b05      	cmp	r3, #5
 800853a:	d827      	bhi.n	800858c <UART_SetConfig+0x2e0>
 800853c:	a201      	add	r2, pc, #4	; (adr r2, 8008544 <UART_SetConfig+0x298>)
 800853e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008542:	bf00      	nop
 8008544:	0800855d 	.word	0x0800855d
 8008548:	08008565 	.word	0x08008565
 800854c:	0800856d 	.word	0x0800856d
 8008550:	08008575 	.word	0x08008575
 8008554:	0800857d 	.word	0x0800857d
 8008558:	08008585 	.word	0x08008585
 800855c:	2300      	movs	r3, #0
 800855e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008562:	e18b      	b.n	800887c <UART_SetConfig+0x5d0>
 8008564:	2304      	movs	r3, #4
 8008566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800856a:	e187      	b.n	800887c <UART_SetConfig+0x5d0>
 800856c:	2308      	movs	r3, #8
 800856e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008572:	e183      	b.n	800887c <UART_SetConfig+0x5d0>
 8008574:	2310      	movs	r3, #16
 8008576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800857a:	e17f      	b.n	800887c <UART_SetConfig+0x5d0>
 800857c:	2320      	movs	r3, #32
 800857e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008582:	e17b      	b.n	800887c <UART_SetConfig+0x5d0>
 8008584:	2340      	movs	r3, #64	; 0x40
 8008586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800858a:	e177      	b.n	800887c <UART_SetConfig+0x5d0>
 800858c:	2380      	movs	r3, #128	; 0x80
 800858e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008592:	bf00      	nop
 8008594:	e172      	b.n	800887c <UART_SetConfig+0x5d0>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a1c      	ldr	r2, [pc, #112]	; (800860c <UART_SetConfig+0x360>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d144      	bne.n	800862a <UART_SetConfig+0x37e>
 80085a0:	4b16      	ldr	r3, [pc, #88]	; (80085fc <UART_SetConfig+0x350>)
 80085a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085a4:	f003 0307 	and.w	r3, r3, #7
 80085a8:	2b05      	cmp	r3, #5
 80085aa:	d839      	bhi.n	8008620 <UART_SetConfig+0x374>
 80085ac:	a201      	add	r2, pc, #4	; (adr r2, 80085b4 <UART_SetConfig+0x308>)
 80085ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b2:	bf00      	nop
 80085b4:	080085cd 	.word	0x080085cd
 80085b8:	080085d5 	.word	0x080085d5
 80085bc:	080085dd 	.word	0x080085dd
 80085c0:	080085e5 	.word	0x080085e5
 80085c4:	08008611 	.word	0x08008611
 80085c8:	08008619 	.word	0x08008619
 80085cc:	2300      	movs	r3, #0
 80085ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085d2:	e153      	b.n	800887c <UART_SetConfig+0x5d0>
 80085d4:	2304      	movs	r3, #4
 80085d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085da:	e14f      	b.n	800887c <UART_SetConfig+0x5d0>
 80085dc:	2308      	movs	r3, #8
 80085de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085e2:	e14b      	b.n	800887c <UART_SetConfig+0x5d0>
 80085e4:	2310      	movs	r3, #16
 80085e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085ea:	e147      	b.n	800887c <UART_SetConfig+0x5d0>
 80085ec:	cfff69f3 	.word	0xcfff69f3
 80085f0:	58000c00 	.word	0x58000c00
 80085f4:	11fff4ff 	.word	0x11fff4ff
 80085f8:	40011000 	.word	0x40011000
 80085fc:	58024400 	.word	0x58024400
 8008600:	40004400 	.word	0x40004400
 8008604:	40004800 	.word	0x40004800
 8008608:	40004c00 	.word	0x40004c00
 800860c:	40005000 	.word	0x40005000
 8008610:	2320      	movs	r3, #32
 8008612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008616:	e131      	b.n	800887c <UART_SetConfig+0x5d0>
 8008618:	2340      	movs	r3, #64	; 0x40
 800861a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800861e:	e12d      	b.n	800887c <UART_SetConfig+0x5d0>
 8008620:	2380      	movs	r3, #128	; 0x80
 8008622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008626:	bf00      	nop
 8008628:	e128      	b.n	800887c <UART_SetConfig+0x5d0>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4ab6      	ldr	r2, [pc, #728]	; (8008908 <UART_SetConfig+0x65c>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d178      	bne.n	8008726 <UART_SetConfig+0x47a>
 8008634:	4bb5      	ldr	r3, [pc, #724]	; (800890c <UART_SetConfig+0x660>)
 8008636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008638:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800863c:	2b28      	cmp	r3, #40	; 0x28
 800863e:	d86d      	bhi.n	800871c <UART_SetConfig+0x470>
 8008640:	a201      	add	r2, pc, #4	; (adr r2, 8008648 <UART_SetConfig+0x39c>)
 8008642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008646:	bf00      	nop
 8008648:	080086ed 	.word	0x080086ed
 800864c:	0800871d 	.word	0x0800871d
 8008650:	0800871d 	.word	0x0800871d
 8008654:	0800871d 	.word	0x0800871d
 8008658:	0800871d 	.word	0x0800871d
 800865c:	0800871d 	.word	0x0800871d
 8008660:	0800871d 	.word	0x0800871d
 8008664:	0800871d 	.word	0x0800871d
 8008668:	080086f5 	.word	0x080086f5
 800866c:	0800871d 	.word	0x0800871d
 8008670:	0800871d 	.word	0x0800871d
 8008674:	0800871d 	.word	0x0800871d
 8008678:	0800871d 	.word	0x0800871d
 800867c:	0800871d 	.word	0x0800871d
 8008680:	0800871d 	.word	0x0800871d
 8008684:	0800871d 	.word	0x0800871d
 8008688:	080086fd 	.word	0x080086fd
 800868c:	0800871d 	.word	0x0800871d
 8008690:	0800871d 	.word	0x0800871d
 8008694:	0800871d 	.word	0x0800871d
 8008698:	0800871d 	.word	0x0800871d
 800869c:	0800871d 	.word	0x0800871d
 80086a0:	0800871d 	.word	0x0800871d
 80086a4:	0800871d 	.word	0x0800871d
 80086a8:	08008705 	.word	0x08008705
 80086ac:	0800871d 	.word	0x0800871d
 80086b0:	0800871d 	.word	0x0800871d
 80086b4:	0800871d 	.word	0x0800871d
 80086b8:	0800871d 	.word	0x0800871d
 80086bc:	0800871d 	.word	0x0800871d
 80086c0:	0800871d 	.word	0x0800871d
 80086c4:	0800871d 	.word	0x0800871d
 80086c8:	0800870d 	.word	0x0800870d
 80086cc:	0800871d 	.word	0x0800871d
 80086d0:	0800871d 	.word	0x0800871d
 80086d4:	0800871d 	.word	0x0800871d
 80086d8:	0800871d 	.word	0x0800871d
 80086dc:	0800871d 	.word	0x0800871d
 80086e0:	0800871d 	.word	0x0800871d
 80086e4:	0800871d 	.word	0x0800871d
 80086e8:	08008715 	.word	0x08008715
 80086ec:	2301      	movs	r3, #1
 80086ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086f2:	e0c3      	b.n	800887c <UART_SetConfig+0x5d0>
 80086f4:	2304      	movs	r3, #4
 80086f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086fa:	e0bf      	b.n	800887c <UART_SetConfig+0x5d0>
 80086fc:	2308      	movs	r3, #8
 80086fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008702:	e0bb      	b.n	800887c <UART_SetConfig+0x5d0>
 8008704:	2310      	movs	r3, #16
 8008706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800870a:	e0b7      	b.n	800887c <UART_SetConfig+0x5d0>
 800870c:	2320      	movs	r3, #32
 800870e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008712:	e0b3      	b.n	800887c <UART_SetConfig+0x5d0>
 8008714:	2340      	movs	r3, #64	; 0x40
 8008716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800871a:	e0af      	b.n	800887c <UART_SetConfig+0x5d0>
 800871c:	2380      	movs	r3, #128	; 0x80
 800871e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008722:	bf00      	nop
 8008724:	e0aa      	b.n	800887c <UART_SetConfig+0x5d0>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a79      	ldr	r2, [pc, #484]	; (8008910 <UART_SetConfig+0x664>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d132      	bne.n	8008796 <UART_SetConfig+0x4ea>
 8008730:	4b76      	ldr	r3, [pc, #472]	; (800890c <UART_SetConfig+0x660>)
 8008732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008734:	f003 0307 	and.w	r3, r3, #7
 8008738:	2b05      	cmp	r3, #5
 800873a:	d827      	bhi.n	800878c <UART_SetConfig+0x4e0>
 800873c:	a201      	add	r2, pc, #4	; (adr r2, 8008744 <UART_SetConfig+0x498>)
 800873e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008742:	bf00      	nop
 8008744:	0800875d 	.word	0x0800875d
 8008748:	08008765 	.word	0x08008765
 800874c:	0800876d 	.word	0x0800876d
 8008750:	08008775 	.word	0x08008775
 8008754:	0800877d 	.word	0x0800877d
 8008758:	08008785 	.word	0x08008785
 800875c:	2300      	movs	r3, #0
 800875e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008762:	e08b      	b.n	800887c <UART_SetConfig+0x5d0>
 8008764:	2304      	movs	r3, #4
 8008766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800876a:	e087      	b.n	800887c <UART_SetConfig+0x5d0>
 800876c:	2308      	movs	r3, #8
 800876e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008772:	e083      	b.n	800887c <UART_SetConfig+0x5d0>
 8008774:	2310      	movs	r3, #16
 8008776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800877a:	e07f      	b.n	800887c <UART_SetConfig+0x5d0>
 800877c:	2320      	movs	r3, #32
 800877e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008782:	e07b      	b.n	800887c <UART_SetConfig+0x5d0>
 8008784:	2340      	movs	r3, #64	; 0x40
 8008786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800878a:	e077      	b.n	800887c <UART_SetConfig+0x5d0>
 800878c:	2380      	movs	r3, #128	; 0x80
 800878e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008792:	bf00      	nop
 8008794:	e072      	b.n	800887c <UART_SetConfig+0x5d0>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a5e      	ldr	r2, [pc, #376]	; (8008914 <UART_SetConfig+0x668>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d132      	bne.n	8008806 <UART_SetConfig+0x55a>
 80087a0:	4b5a      	ldr	r3, [pc, #360]	; (800890c <UART_SetConfig+0x660>)
 80087a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a4:	f003 0307 	and.w	r3, r3, #7
 80087a8:	2b05      	cmp	r3, #5
 80087aa:	d827      	bhi.n	80087fc <UART_SetConfig+0x550>
 80087ac:	a201      	add	r2, pc, #4	; (adr r2, 80087b4 <UART_SetConfig+0x508>)
 80087ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b2:	bf00      	nop
 80087b4:	080087cd 	.word	0x080087cd
 80087b8:	080087d5 	.word	0x080087d5
 80087bc:	080087dd 	.word	0x080087dd
 80087c0:	080087e5 	.word	0x080087e5
 80087c4:	080087ed 	.word	0x080087ed
 80087c8:	080087f5 	.word	0x080087f5
 80087cc:	2300      	movs	r3, #0
 80087ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087d2:	e053      	b.n	800887c <UART_SetConfig+0x5d0>
 80087d4:	2304      	movs	r3, #4
 80087d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087da:	e04f      	b.n	800887c <UART_SetConfig+0x5d0>
 80087dc:	2308      	movs	r3, #8
 80087de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087e2:	e04b      	b.n	800887c <UART_SetConfig+0x5d0>
 80087e4:	2310      	movs	r3, #16
 80087e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087ea:	e047      	b.n	800887c <UART_SetConfig+0x5d0>
 80087ec:	2320      	movs	r3, #32
 80087ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087f2:	e043      	b.n	800887c <UART_SetConfig+0x5d0>
 80087f4:	2340      	movs	r3, #64	; 0x40
 80087f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087fa:	e03f      	b.n	800887c <UART_SetConfig+0x5d0>
 80087fc:	2380      	movs	r3, #128	; 0x80
 80087fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008802:	bf00      	nop
 8008804:	e03a      	b.n	800887c <UART_SetConfig+0x5d0>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a43      	ldr	r2, [pc, #268]	; (8008918 <UART_SetConfig+0x66c>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d132      	bne.n	8008876 <UART_SetConfig+0x5ca>
 8008810:	4b3e      	ldr	r3, [pc, #248]	; (800890c <UART_SetConfig+0x660>)
 8008812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008814:	f003 0307 	and.w	r3, r3, #7
 8008818:	2b05      	cmp	r3, #5
 800881a:	d827      	bhi.n	800886c <UART_SetConfig+0x5c0>
 800881c:	a201      	add	r2, pc, #4	; (adr r2, 8008824 <UART_SetConfig+0x578>)
 800881e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008822:	bf00      	nop
 8008824:	0800883d 	.word	0x0800883d
 8008828:	08008845 	.word	0x08008845
 800882c:	0800884d 	.word	0x0800884d
 8008830:	08008855 	.word	0x08008855
 8008834:	0800885d 	.word	0x0800885d
 8008838:	08008865 	.word	0x08008865
 800883c:	2302      	movs	r3, #2
 800883e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008842:	e01b      	b.n	800887c <UART_SetConfig+0x5d0>
 8008844:	2304      	movs	r3, #4
 8008846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800884a:	e017      	b.n	800887c <UART_SetConfig+0x5d0>
 800884c:	2308      	movs	r3, #8
 800884e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008852:	e013      	b.n	800887c <UART_SetConfig+0x5d0>
 8008854:	2310      	movs	r3, #16
 8008856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800885a:	e00f      	b.n	800887c <UART_SetConfig+0x5d0>
 800885c:	2320      	movs	r3, #32
 800885e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008862:	e00b      	b.n	800887c <UART_SetConfig+0x5d0>
 8008864:	2340      	movs	r3, #64	; 0x40
 8008866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800886a:	e007      	b.n	800887c <UART_SetConfig+0x5d0>
 800886c:	2380      	movs	r3, #128	; 0x80
 800886e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008872:	bf00      	nop
 8008874:	e002      	b.n	800887c <UART_SetConfig+0x5d0>
 8008876:	2380      	movs	r3, #128	; 0x80
 8008878:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a25      	ldr	r2, [pc, #148]	; (8008918 <UART_SetConfig+0x66c>)
 8008882:	4293      	cmp	r3, r2
 8008884:	f040 80b8 	bne.w	80089f8 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008888:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800888c:	2b08      	cmp	r3, #8
 800888e:	d019      	beq.n	80088c4 <UART_SetConfig+0x618>
 8008890:	2b08      	cmp	r3, #8
 8008892:	dc04      	bgt.n	800889e <UART_SetConfig+0x5f2>
 8008894:	2b02      	cmp	r3, #2
 8008896:	d009      	beq.n	80088ac <UART_SetConfig+0x600>
 8008898:	2b04      	cmp	r3, #4
 800889a:	d00b      	beq.n	80088b4 <UART_SetConfig+0x608>
 800889c:	e042      	b.n	8008924 <UART_SetConfig+0x678>
 800889e:	2b20      	cmp	r3, #32
 80088a0:	d02b      	beq.n	80088fa <UART_SetConfig+0x64e>
 80088a2:	2b40      	cmp	r3, #64	; 0x40
 80088a4:	d02c      	beq.n	8008900 <UART_SetConfig+0x654>
 80088a6:	2b10      	cmp	r3, #16
 80088a8:	d014      	beq.n	80088d4 <UART_SetConfig+0x628>
 80088aa:	e03b      	b.n	8008924 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80088ac:	f7fe f85a 	bl	8006964 <HAL_RCCEx_GetD3PCLK1Freq>
 80088b0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80088b2:	e03d      	b.n	8008930 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088b4:	f107 0314 	add.w	r3, r7, #20
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7fe f869 	bl	8006990 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088c2:	e035      	b.n	8008930 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088c4:	f107 0308 	add.w	r3, r7, #8
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7fe f9ad 	bl	8006c28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088d2:	e02d      	b.n	8008930 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088d4:	4b0d      	ldr	r3, [pc, #52]	; (800890c <UART_SetConfig+0x660>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 0320 	and.w	r3, r3, #32
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d009      	beq.n	80088f4 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80088e0:	4b0a      	ldr	r3, [pc, #40]	; (800890c <UART_SetConfig+0x660>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	08db      	lsrs	r3, r3, #3
 80088e6:	f003 0303 	and.w	r3, r3, #3
 80088ea:	4a0c      	ldr	r2, [pc, #48]	; (800891c <UART_SetConfig+0x670>)
 80088ec:	fa22 f303 	lsr.w	r3, r2, r3
 80088f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088f2:	e01d      	b.n	8008930 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 80088f4:	4b09      	ldr	r3, [pc, #36]	; (800891c <UART_SetConfig+0x670>)
 80088f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088f8:	e01a      	b.n	8008930 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80088fa:	4b09      	ldr	r3, [pc, #36]	; (8008920 <UART_SetConfig+0x674>)
 80088fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088fe:	e017      	b.n	8008930 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008900:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008904:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008906:	e013      	b.n	8008930 <UART_SetConfig+0x684>
 8008908:	40011400 	.word	0x40011400
 800890c:	58024400 	.word	0x58024400
 8008910:	40007800 	.word	0x40007800
 8008914:	40007c00 	.word	0x40007c00
 8008918:	58000c00 	.word	0x58000c00
 800891c:	03d09000 	.word	0x03d09000
 8008920:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8008924:	2300      	movs	r3, #0
 8008926:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800892e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008932:	2b00      	cmp	r3, #0
 8008934:	f000 824d 	beq.w	8008dd2 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893c:	4aad      	ldr	r2, [pc, #692]	; (8008bf4 <UART_SetConfig+0x948>)
 800893e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008942:	461a      	mov	r2, r3
 8008944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008946:	fbb3 f3f2 	udiv	r3, r3, r2
 800894a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	685a      	ldr	r2, [r3, #4]
 8008950:	4613      	mov	r3, r2
 8008952:	005b      	lsls	r3, r3, #1
 8008954:	4413      	add	r3, r2
 8008956:	6a3a      	ldr	r2, [r7, #32]
 8008958:	429a      	cmp	r2, r3
 800895a:	d305      	bcc.n	8008968 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008962:	6a3a      	ldr	r2, [r7, #32]
 8008964:	429a      	cmp	r2, r3
 8008966:	d903      	bls.n	8008970 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800896e:	e230      	b.n	8008dd2 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008972:	4618      	mov	r0, r3
 8008974:	f04f 0100 	mov.w	r1, #0
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897c:	4a9d      	ldr	r2, [pc, #628]	; (8008bf4 <UART_SetConfig+0x948>)
 800897e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008982:	b29b      	uxth	r3, r3
 8008984:	f04f 0400 	mov.w	r4, #0
 8008988:	461a      	mov	r2, r3
 800898a:	4623      	mov	r3, r4
 800898c:	f7f7 fcac 	bl	80002e8 <__aeabi_uldivmod>
 8008990:	4603      	mov	r3, r0
 8008992:	460c      	mov	r4, r1
 8008994:	4619      	mov	r1, r3
 8008996:	4622      	mov	r2, r4
 8008998:	f04f 0300 	mov.w	r3, #0
 800899c:	f04f 0400 	mov.w	r4, #0
 80089a0:	0214      	lsls	r4, r2, #8
 80089a2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80089a6:	020b      	lsls	r3, r1, #8
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	6852      	ldr	r2, [r2, #4]
 80089ac:	0852      	lsrs	r2, r2, #1
 80089ae:	4611      	mov	r1, r2
 80089b0:	f04f 0200 	mov.w	r2, #0
 80089b4:	eb13 0b01 	adds.w	fp, r3, r1
 80089b8:	eb44 0c02 	adc.w	ip, r4, r2
 80089bc:	4658      	mov	r0, fp
 80089be:	4661      	mov	r1, ip
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	f04f 0400 	mov.w	r4, #0
 80089c8:	461a      	mov	r2, r3
 80089ca:	4623      	mov	r3, r4
 80089cc:	f7f7 fc8c 	bl	80002e8 <__aeabi_uldivmod>
 80089d0:	4603      	mov	r3, r0
 80089d2:	460c      	mov	r4, r1
 80089d4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089dc:	d308      	bcc.n	80089f0 <UART_SetConfig+0x744>
 80089de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089e4:	d204      	bcs.n	80089f0 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089ec:	60da      	str	r2, [r3, #12]
 80089ee:	e1f0      	b.n	8008dd2 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80089f6:	e1ec      	b.n	8008dd2 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	69db      	ldr	r3, [r3, #28]
 80089fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a00:	f040 8100 	bne.w	8008c04 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8008a04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008a08:	2b40      	cmp	r3, #64	; 0x40
 8008a0a:	f200 80b7 	bhi.w	8008b7c <UART_SetConfig+0x8d0>
 8008a0e:	a201      	add	r2, pc, #4	; (adr r2, 8008a14 <UART_SetConfig+0x768>)
 8008a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a14:	08008b19 	.word	0x08008b19
 8008a18:	08008b21 	.word	0x08008b21
 8008a1c:	08008b7d 	.word	0x08008b7d
 8008a20:	08008b7d 	.word	0x08008b7d
 8008a24:	08008b29 	.word	0x08008b29
 8008a28:	08008b7d 	.word	0x08008b7d
 8008a2c:	08008b7d 	.word	0x08008b7d
 8008a30:	08008b7d 	.word	0x08008b7d
 8008a34:	08008b39 	.word	0x08008b39
 8008a38:	08008b7d 	.word	0x08008b7d
 8008a3c:	08008b7d 	.word	0x08008b7d
 8008a40:	08008b7d 	.word	0x08008b7d
 8008a44:	08008b7d 	.word	0x08008b7d
 8008a48:	08008b7d 	.word	0x08008b7d
 8008a4c:	08008b7d 	.word	0x08008b7d
 8008a50:	08008b7d 	.word	0x08008b7d
 8008a54:	08008b49 	.word	0x08008b49
 8008a58:	08008b7d 	.word	0x08008b7d
 8008a5c:	08008b7d 	.word	0x08008b7d
 8008a60:	08008b7d 	.word	0x08008b7d
 8008a64:	08008b7d 	.word	0x08008b7d
 8008a68:	08008b7d 	.word	0x08008b7d
 8008a6c:	08008b7d 	.word	0x08008b7d
 8008a70:	08008b7d 	.word	0x08008b7d
 8008a74:	08008b7d 	.word	0x08008b7d
 8008a78:	08008b7d 	.word	0x08008b7d
 8008a7c:	08008b7d 	.word	0x08008b7d
 8008a80:	08008b7d 	.word	0x08008b7d
 8008a84:	08008b7d 	.word	0x08008b7d
 8008a88:	08008b7d 	.word	0x08008b7d
 8008a8c:	08008b7d 	.word	0x08008b7d
 8008a90:	08008b7d 	.word	0x08008b7d
 8008a94:	08008b6f 	.word	0x08008b6f
 8008a98:	08008b7d 	.word	0x08008b7d
 8008a9c:	08008b7d 	.word	0x08008b7d
 8008aa0:	08008b7d 	.word	0x08008b7d
 8008aa4:	08008b7d 	.word	0x08008b7d
 8008aa8:	08008b7d 	.word	0x08008b7d
 8008aac:	08008b7d 	.word	0x08008b7d
 8008ab0:	08008b7d 	.word	0x08008b7d
 8008ab4:	08008b7d 	.word	0x08008b7d
 8008ab8:	08008b7d 	.word	0x08008b7d
 8008abc:	08008b7d 	.word	0x08008b7d
 8008ac0:	08008b7d 	.word	0x08008b7d
 8008ac4:	08008b7d 	.word	0x08008b7d
 8008ac8:	08008b7d 	.word	0x08008b7d
 8008acc:	08008b7d 	.word	0x08008b7d
 8008ad0:	08008b7d 	.word	0x08008b7d
 8008ad4:	08008b7d 	.word	0x08008b7d
 8008ad8:	08008b7d 	.word	0x08008b7d
 8008adc:	08008b7d 	.word	0x08008b7d
 8008ae0:	08008b7d 	.word	0x08008b7d
 8008ae4:	08008b7d 	.word	0x08008b7d
 8008ae8:	08008b7d 	.word	0x08008b7d
 8008aec:	08008b7d 	.word	0x08008b7d
 8008af0:	08008b7d 	.word	0x08008b7d
 8008af4:	08008b7d 	.word	0x08008b7d
 8008af8:	08008b7d 	.word	0x08008b7d
 8008afc:	08008b7d 	.word	0x08008b7d
 8008b00:	08008b7d 	.word	0x08008b7d
 8008b04:	08008b7d 	.word	0x08008b7d
 8008b08:	08008b7d 	.word	0x08008b7d
 8008b0c:	08008b7d 	.word	0x08008b7d
 8008b10:	08008b7d 	.word	0x08008b7d
 8008b14:	08008b75 	.word	0x08008b75
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b18:	f7fd f80a 	bl	8005b30 <HAL_RCC_GetPCLK1Freq>
 8008b1c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008b1e:	e033      	b.n	8008b88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b20:	f7fd f81c 	bl	8005b5c <HAL_RCC_GetPCLK2Freq>
 8008b24:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008b26:	e02f      	b.n	8008b88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b28:	f107 0314 	add.w	r3, r7, #20
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7fd ff2f 	bl	8006990 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b36:	e027      	b.n	8008b88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b38:	f107 0308 	add.w	r3, r7, #8
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fe f873 	bl	8006c28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b46:	e01f      	b.n	8008b88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b48:	4b2b      	ldr	r3, [pc, #172]	; (8008bf8 <UART_SetConfig+0x94c>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f003 0320 	and.w	r3, r3, #32
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d009      	beq.n	8008b68 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b54:	4b28      	ldr	r3, [pc, #160]	; (8008bf8 <UART_SetConfig+0x94c>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	08db      	lsrs	r3, r3, #3
 8008b5a:	f003 0303 	and.w	r3, r3, #3
 8008b5e:	4a27      	ldr	r2, [pc, #156]	; (8008bfc <UART_SetConfig+0x950>)
 8008b60:	fa22 f303 	lsr.w	r3, r2, r3
 8008b64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b66:	e00f      	b.n	8008b88 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8008b68:	4b24      	ldr	r3, [pc, #144]	; (8008bfc <UART_SetConfig+0x950>)
 8008b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b6c:	e00c      	b.n	8008b88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b6e:	4b24      	ldr	r3, [pc, #144]	; (8008c00 <UART_SetConfig+0x954>)
 8008b70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b72:	e009      	b.n	8008b88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b7a:	e005      	b.n	8008b88 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008b86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f000 8121 	beq.w	8008dd2 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b94:	4a17      	ldr	r2, [pc, #92]	; (8008bf4 <UART_SetConfig+0x948>)
 8008b96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ba2:	005a      	lsls	r2, r3, #1
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	085b      	lsrs	r3, r3, #1
 8008baa:	441a      	add	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bba:	2b0f      	cmp	r3, #15
 8008bbc:	d916      	bls.n	8008bec <UART_SetConfig+0x940>
 8008bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bc4:	d212      	bcs.n	8008bec <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	f023 030f 	bic.w	r3, r3, #15
 8008bce:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd2:	085b      	lsrs	r3, r3, #1
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	f003 0307 	and.w	r3, r3, #7
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008bde:	4313      	orrs	r3, r2
 8008be0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008be8:	60da      	str	r2, [r3, #12]
 8008bea:	e0f2      	b.n	8008dd2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008bf2:	e0ee      	b.n	8008dd2 <UART_SetConfig+0xb26>
 8008bf4:	08009f00 	.word	0x08009f00
 8008bf8:	58024400 	.word	0x58024400
 8008bfc:	03d09000 	.word	0x03d09000
 8008c00:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008c08:	2b40      	cmp	r3, #64	; 0x40
 8008c0a:	f200 80b7 	bhi.w	8008d7c <UART_SetConfig+0xad0>
 8008c0e:	a201      	add	r2, pc, #4	; (adr r2, 8008c14 <UART_SetConfig+0x968>)
 8008c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c14:	08008d19 	.word	0x08008d19
 8008c18:	08008d21 	.word	0x08008d21
 8008c1c:	08008d7d 	.word	0x08008d7d
 8008c20:	08008d7d 	.word	0x08008d7d
 8008c24:	08008d29 	.word	0x08008d29
 8008c28:	08008d7d 	.word	0x08008d7d
 8008c2c:	08008d7d 	.word	0x08008d7d
 8008c30:	08008d7d 	.word	0x08008d7d
 8008c34:	08008d39 	.word	0x08008d39
 8008c38:	08008d7d 	.word	0x08008d7d
 8008c3c:	08008d7d 	.word	0x08008d7d
 8008c40:	08008d7d 	.word	0x08008d7d
 8008c44:	08008d7d 	.word	0x08008d7d
 8008c48:	08008d7d 	.word	0x08008d7d
 8008c4c:	08008d7d 	.word	0x08008d7d
 8008c50:	08008d7d 	.word	0x08008d7d
 8008c54:	08008d49 	.word	0x08008d49
 8008c58:	08008d7d 	.word	0x08008d7d
 8008c5c:	08008d7d 	.word	0x08008d7d
 8008c60:	08008d7d 	.word	0x08008d7d
 8008c64:	08008d7d 	.word	0x08008d7d
 8008c68:	08008d7d 	.word	0x08008d7d
 8008c6c:	08008d7d 	.word	0x08008d7d
 8008c70:	08008d7d 	.word	0x08008d7d
 8008c74:	08008d7d 	.word	0x08008d7d
 8008c78:	08008d7d 	.word	0x08008d7d
 8008c7c:	08008d7d 	.word	0x08008d7d
 8008c80:	08008d7d 	.word	0x08008d7d
 8008c84:	08008d7d 	.word	0x08008d7d
 8008c88:	08008d7d 	.word	0x08008d7d
 8008c8c:	08008d7d 	.word	0x08008d7d
 8008c90:	08008d7d 	.word	0x08008d7d
 8008c94:	08008d6f 	.word	0x08008d6f
 8008c98:	08008d7d 	.word	0x08008d7d
 8008c9c:	08008d7d 	.word	0x08008d7d
 8008ca0:	08008d7d 	.word	0x08008d7d
 8008ca4:	08008d7d 	.word	0x08008d7d
 8008ca8:	08008d7d 	.word	0x08008d7d
 8008cac:	08008d7d 	.word	0x08008d7d
 8008cb0:	08008d7d 	.word	0x08008d7d
 8008cb4:	08008d7d 	.word	0x08008d7d
 8008cb8:	08008d7d 	.word	0x08008d7d
 8008cbc:	08008d7d 	.word	0x08008d7d
 8008cc0:	08008d7d 	.word	0x08008d7d
 8008cc4:	08008d7d 	.word	0x08008d7d
 8008cc8:	08008d7d 	.word	0x08008d7d
 8008ccc:	08008d7d 	.word	0x08008d7d
 8008cd0:	08008d7d 	.word	0x08008d7d
 8008cd4:	08008d7d 	.word	0x08008d7d
 8008cd8:	08008d7d 	.word	0x08008d7d
 8008cdc:	08008d7d 	.word	0x08008d7d
 8008ce0:	08008d7d 	.word	0x08008d7d
 8008ce4:	08008d7d 	.word	0x08008d7d
 8008ce8:	08008d7d 	.word	0x08008d7d
 8008cec:	08008d7d 	.word	0x08008d7d
 8008cf0:	08008d7d 	.word	0x08008d7d
 8008cf4:	08008d7d 	.word	0x08008d7d
 8008cf8:	08008d7d 	.word	0x08008d7d
 8008cfc:	08008d7d 	.word	0x08008d7d
 8008d00:	08008d7d 	.word	0x08008d7d
 8008d04:	08008d7d 	.word	0x08008d7d
 8008d08:	08008d7d 	.word	0x08008d7d
 8008d0c:	08008d7d 	.word	0x08008d7d
 8008d10:	08008d7d 	.word	0x08008d7d
 8008d14:	08008d75 	.word	0x08008d75
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d18:	f7fc ff0a 	bl	8005b30 <HAL_RCC_GetPCLK1Freq>
 8008d1c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008d1e:	e033      	b.n	8008d88 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d20:	f7fc ff1c 	bl	8005b5c <HAL_RCC_GetPCLK2Freq>
 8008d24:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008d26:	e02f      	b.n	8008d88 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d28:	f107 0314 	add.w	r3, r7, #20
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7fd fe2f 	bl	8006990 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d36:	e027      	b.n	8008d88 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d38:	f107 0308 	add.w	r3, r7, #8
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7fd ff73 	bl	8006c28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d46:	e01f      	b.n	8008d88 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d48:	4b2c      	ldr	r3, [pc, #176]	; (8008dfc <UART_SetConfig+0xb50>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f003 0320 	and.w	r3, r3, #32
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d009      	beq.n	8008d68 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d54:	4b29      	ldr	r3, [pc, #164]	; (8008dfc <UART_SetConfig+0xb50>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	08db      	lsrs	r3, r3, #3
 8008d5a:	f003 0303 	and.w	r3, r3, #3
 8008d5e:	4a28      	ldr	r2, [pc, #160]	; (8008e00 <UART_SetConfig+0xb54>)
 8008d60:	fa22 f303 	lsr.w	r3, r2, r3
 8008d64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d66:	e00f      	b.n	8008d88 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8008d68:	4b25      	ldr	r3, [pc, #148]	; (8008e00 <UART_SetConfig+0xb54>)
 8008d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d6c:	e00c      	b.n	8008d88 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d6e:	4b25      	ldr	r3, [pc, #148]	; (8008e04 <UART_SetConfig+0xb58>)
 8008d70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d72:	e009      	b.n	8008d88 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d7a:	e005      	b.n	8008d88 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008d80:	2301      	movs	r3, #1
 8008d82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008d86:	bf00      	nop
    }

    if (pclk != 0U)
 8008d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d021      	beq.n	8008dd2 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d92:	4a1d      	ldr	r2, [pc, #116]	; (8008e08 <UART_SetConfig+0xb5c>)
 8008d94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d98:	461a      	mov	r2, r3
 8008d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	085b      	lsrs	r3, r3, #1
 8008da6:	441a      	add	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db6:	2b0f      	cmp	r3, #15
 8008db8:	d908      	bls.n	8008dcc <UART_SetConfig+0xb20>
 8008dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dc0:	d204      	bcs.n	8008dcc <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dc8:	60da      	str	r2, [r3, #12]
 8008dca:	e002      	b.n	8008dd2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008dee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3738      	adds	r7, #56	; 0x38
 8008df6:	46bd      	mov	sp, r7
 8008df8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8008dfc:	58024400 	.word	0x58024400
 8008e00:	03d09000 	.word	0x03d09000
 8008e04:	003d0900 	.word	0x003d0900
 8008e08:	08009f00 	.word	0x08009f00

08008e0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e18:	f003 0301 	and.w	r3, r3, #1
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00a      	beq.n	8008e36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	430a      	orrs	r2, r1
 8008e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3a:	f003 0302 	and.w	r3, r3, #2
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00a      	beq.n	8008e58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	430a      	orrs	r2, r1
 8008e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5c:	f003 0304 	and.w	r3, r3, #4
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00a      	beq.n	8008e7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	430a      	orrs	r2, r1
 8008e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e7e:	f003 0308 	and.w	r3, r3, #8
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00a      	beq.n	8008e9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	430a      	orrs	r2, r1
 8008e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea0:	f003 0310 	and.w	r3, r3, #16
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d00a      	beq.n	8008ebe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	430a      	orrs	r2, r1
 8008ebc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec2:	f003 0320 	and.w	r3, r3, #32
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00a      	beq.n	8008ee0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	430a      	orrs	r2, r1
 8008ede:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d01a      	beq.n	8008f22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	430a      	orrs	r2, r1
 8008f00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f0a:	d10a      	bne.n	8008f22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	430a      	orrs	r2, r1
 8008f20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00a      	beq.n	8008f44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	430a      	orrs	r2, r1
 8008f42:	605a      	str	r2, [r3, #4]
  }
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b086      	sub	sp, #24
 8008f54:	af02      	add	r7, sp, #8
 8008f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008f60:	f7fa f9c4 	bl	80032ec <HAL_GetTick>
 8008f64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f003 0308 	and.w	r3, r3, #8
 8008f70:	2b08      	cmp	r3, #8
 8008f72:	d10e      	bne.n	8008f92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f82c 	bl	8008fe0 <UART_WaitOnFlagUntilTimeout>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d001      	beq.n	8008f92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e022      	b.n	8008fd8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 0304 	and.w	r3, r3, #4
 8008f9c:	2b04      	cmp	r3, #4
 8008f9e:	d10e      	bne.n	8008fbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f816 	bl	8008fe0 <UART_WaitOnFlagUntilTimeout>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d001      	beq.n	8008fbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	e00c      	b.n	8008fd8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2220      	movs	r2, #32
 8008fc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2220      	movs	r2, #32
 8008fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	603b      	str	r3, [r7, #0]
 8008fec:	4613      	mov	r3, r2
 8008fee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ff0:	e062      	b.n	80090b8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff8:	d05e      	beq.n	80090b8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ffa:	f7fa f977 	bl	80032ec <HAL_GetTick>
 8008ffe:	4602      	mov	r2, r0
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	1ad3      	subs	r3, r2, r3
 8009004:	69ba      	ldr	r2, [r7, #24]
 8009006:	429a      	cmp	r2, r3
 8009008:	d302      	bcc.n	8009010 <UART_WaitOnFlagUntilTimeout+0x30>
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d11d      	bne.n	800904c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800901e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	689a      	ldr	r2, [r3, #8]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f022 0201 	bic.w	r2, r2, #1
 800902e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2220      	movs	r2, #32
 8009034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2220      	movs	r2, #32
 800903c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2200      	movs	r2, #0
 8009044:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009048:	2303      	movs	r3, #3
 800904a:	e045      	b.n	80090d8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f003 0304 	and.w	r3, r3, #4
 8009056:	2b00      	cmp	r3, #0
 8009058:	d02e      	beq.n	80090b8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	69db      	ldr	r3, [r3, #28]
 8009060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009068:	d126      	bne.n	80090b8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009072:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009082:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	689a      	ldr	r2, [r3, #8]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f022 0201 	bic.w	r2, r2, #1
 8009092:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2220      	movs	r2, #32
 8009098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2220      	movs	r2, #32
 80090a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2220      	movs	r2, #32
 80090a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80090b4:	2303      	movs	r3, #3
 80090b6:	e00f      	b.n	80090d8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	69da      	ldr	r2, [r3, #28]
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	4013      	ands	r3, r2
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	bf0c      	ite	eq
 80090c8:	2301      	moveq	r3, #1
 80090ca:	2300      	movne	r3, #0
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	461a      	mov	r2, r3
 80090d0:	79fb      	ldrb	r3, [r7, #7]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d08d      	beq.n	8008ff2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80090f6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	689a      	ldr	r2, [r3, #8]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009106:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2220      	movs	r2, #32
 800910c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009132:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	6899      	ldr	r1, [r3, #8]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	4b08      	ldr	r3, [pc, #32]	; (8009160 <UART_EndRxTransfer+0x44>)
 8009140:	400b      	ands	r3, r1
 8009142:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2220      	movs	r2, #32
 8009148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8009152:	bf00      	nop
 8009154:	370c      	adds	r7, #12
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	effffffe 	.word	0xeffffffe

08009164 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009170:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	69db      	ldr	r3, [r3, #28]
 8009176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800917a:	d014      	beq.n	80091a6 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	689a      	ldr	r2, [r3, #8]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009192:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091a2:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80091a4:	e002      	b.n	80091ac <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f7ff f862 	bl	8008270 <HAL_UART_TxCpltCallback>
}
 80091ac:	bf00      	nop
 80091ae:	3710      	adds	r7, #16
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f7ff f85e 	bl	8008284 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091c8:	bf00      	nop
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091dc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091e4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091ec:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091f8:	2b80      	cmp	r3, #128	; 0x80
 80091fa:	d109      	bne.n	8009210 <UART_DMAError+0x40>
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	2b21      	cmp	r3, #33	; 0x21
 8009200:	d106      	bne.n	8009210 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	2200      	movs	r2, #0
 8009206:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800920a:	6978      	ldr	r0, [r7, #20]
 800920c:	f7ff ff68 	bl	80090e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800921a:	2b40      	cmp	r3, #64	; 0x40
 800921c:	d109      	bne.n	8009232 <UART_DMAError+0x62>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2b22      	cmp	r3, #34	; 0x22
 8009222:	d106      	bne.n	8009232 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	2200      	movs	r2, #0
 8009228:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800922c:	6978      	ldr	r0, [r7, #20]
 800922e:	f7ff ff75 	bl	800911c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009238:	f043 0210 	orr.w	r2, r3, #16
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009242:	6978      	ldr	r0, [r7, #20]
 8009244:	f7ff f828 	bl	8008298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009248:	bf00      	nop
 800924a:	3718      	adds	r7, #24
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009250:	b480      	push	{r7}
 8009252:	b085      	sub	sp, #20
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800925e:	2b01      	cmp	r3, #1
 8009260:	d101      	bne.n	8009266 <HAL_UARTEx_DisableFifoMode+0x16>
 8009262:	2302      	movs	r3, #2
 8009264:	e027      	b.n	80092b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2201      	movs	r2, #1
 800926a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2224      	movs	r2, #36	; 0x24
 8009272:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f022 0201 	bic.w	r2, r2, #1
 800928c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009294:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2220      	movs	r2, #32
 80092a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3714      	adds	r7, #20
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr

080092c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b084      	sub	sp, #16
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d101      	bne.n	80092da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80092d6:	2302      	movs	r3, #2
 80092d8:	e02d      	b.n	8009336 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2224      	movs	r2, #36	; 0x24
 80092e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f022 0201 	bic.w	r2, r2, #1
 8009300:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f850 	bl	80093bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2220      	movs	r2, #32
 8009328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b084      	sub	sp, #16
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800934e:	2b01      	cmp	r3, #1
 8009350:	d101      	bne.n	8009356 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009352:	2302      	movs	r3, #2
 8009354:	e02d      	b.n	80093b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2201      	movs	r2, #1
 800935a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2224      	movs	r2, #36	; 0x24
 8009362:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f022 0201 	bic.w	r2, r2, #1
 800937c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	683a      	ldr	r2, [r7, #0]
 800938e:	430a      	orrs	r2, r1
 8009390:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f812 	bl	80093bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68fa      	ldr	r2, [r7, #12]
 800939e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2220      	movs	r2, #32
 80093a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
	...

080093bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80093bc:	b480      	push	{r7}
 80093be:	b089      	sub	sp, #36	; 0x24
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80093c4:	4a2f      	ldr	r2, [pc, #188]	; (8009484 <UARTEx_SetNbDataToProcess+0xc8>)
 80093c6:	f107 0314 	add.w	r3, r7, #20
 80093ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80093ce:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80093d2:	4a2d      	ldr	r2, [pc, #180]	; (8009488 <UARTEx_SetNbDataToProcess+0xcc>)
 80093d4:	f107 030c 	add.w	r3, r7, #12
 80093d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80093dc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d108      	bne.n	80093fa <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80093f8:	e03d      	b.n	8009476 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80093fa:	2310      	movs	r3, #16
 80093fc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80093fe:	2310      	movs	r3, #16
 8009400:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	0e5b      	lsrs	r3, r3, #25
 800940a:	b2db      	uxtb	r3, r3
 800940c:	f003 0307 	and.w	r3, r3, #7
 8009410:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	0f5b      	lsrs	r3, r3, #29
 800941a:	b2db      	uxtb	r3, r3
 800941c:	f003 0307 	and.w	r3, r3, #7
 8009420:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009422:	7fbb      	ldrb	r3, [r7, #30]
 8009424:	7f3a      	ldrb	r2, [r7, #28]
 8009426:	f107 0120 	add.w	r1, r7, #32
 800942a:	440a      	add	r2, r1
 800942c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009430:	fb02 f303 	mul.w	r3, r2, r3
 8009434:	7f3a      	ldrb	r2, [r7, #28]
 8009436:	f107 0120 	add.w	r1, r7, #32
 800943a:	440a      	add	r2, r1
 800943c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009440:	fb93 f3f2 	sdiv	r3, r3, r2
 8009444:	b29a      	uxth	r2, r3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800944c:	7ffb      	ldrb	r3, [r7, #31]
 800944e:	7f7a      	ldrb	r2, [r7, #29]
 8009450:	f107 0120 	add.w	r1, r7, #32
 8009454:	440a      	add	r2, r1
 8009456:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800945a:	fb02 f303 	mul.w	r3, r2, r3
 800945e:	7f7a      	ldrb	r2, [r7, #29]
 8009460:	f107 0120 	add.w	r1, r7, #32
 8009464:	440a      	add	r2, r1
 8009466:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800946a:	fb93 f3f2 	sdiv	r3, r3, r2
 800946e:	b29a      	uxth	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009476:	bf00      	nop
 8009478:	3724      	adds	r7, #36	; 0x24
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop
 8009484:	08009e24 	.word	0x08009e24
 8009488:	08009e2c 	.word	0x08009e2c

0800948c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800948c:	b084      	sub	sp, #16
 800948e:	b580      	push	{r7, lr}
 8009490:	b084      	sub	sp, #16
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
 8009496:	f107 001c 	add.w	r0, r7, #28
 800949a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800949e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d120      	bne.n	80094e6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	68da      	ldr	r2, [r3, #12]
 80094b4:	4b25      	ldr	r3, [pc, #148]	; (800954c <USB_CoreInit+0xc0>)
 80094b6:	4013      	ands	r3, r2
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80094c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d105      	bne.n	80094da <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 fa4c 	bl	8009978 <USB_CoreReset>
 80094e0:	4603      	mov	r3, r0
 80094e2:	73fb      	strb	r3, [r7, #15]
 80094e4:	e01a      	b.n	800951c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 fa40 	bl	8009978 <USB_CoreReset>
 80094f8:	4603      	mov	r3, r0
 80094fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80094fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d106      	bne.n	8009510 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009506:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	639a      	str	r2, [r3, #56]	; 0x38
 800950e:	e005      	b.n	800951c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009514:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800951c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951e:	2b01      	cmp	r3, #1
 8009520:	d10b      	bne.n	800953a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	f043 0206 	orr.w	r2, r3, #6
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	f043 0220 	orr.w	r2, r3, #32
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800953a:	7bfb      	ldrb	r3, [r7, #15]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009546:	b004      	add	sp, #16
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	ffbdffbf 	.word	0xffbdffbf

08009550 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	f023 0201 	bic.w	r2, r3, #1
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	370c      	adds	r7, #12
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr

08009572 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b082      	sub	sp, #8
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
 800957a:	460b      	mov	r3, r1
 800957c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800958a:	78fb      	ldrb	r3, [r7, #3]
 800958c:	2b01      	cmp	r3, #1
 800958e:	d106      	bne.n	800959e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	60da      	str	r2, [r3, #12]
 800959c:	e00b      	b.n	80095b6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800959e:	78fb      	ldrb	r3, [r7, #3]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d106      	bne.n	80095b2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	60da      	str	r2, [r3, #12]
 80095b0:	e001      	b.n	80095b6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	e003      	b.n	80095be <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80095b6:	2032      	movs	r0, #50	; 0x32
 80095b8:	f7f9 fea4 	bl	8003304 <HAL_Delay>

  return HAL_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
	...

080095c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80095c8:	b084      	sub	sp, #16
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b086      	sub	sp, #24
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
 80095d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80095d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80095da:	2300      	movs	r3, #0
 80095dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80095e2:	2300      	movs	r3, #0
 80095e4:	613b      	str	r3, [r7, #16]
 80095e6:	e009      	b.n	80095fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	3340      	adds	r3, #64	; 0x40
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	4413      	add	r3, r2
 80095f2:	2200      	movs	r2, #0
 80095f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	3301      	adds	r3, #1
 80095fa:	613b      	str	r3, [r7, #16]
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	2b0e      	cmp	r3, #14
 8009600:	d9f2      	bls.n	80095e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009604:	2b00      	cmp	r3, #0
 8009606:	d11c      	bne.n	8009642 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	68fa      	ldr	r2, [r7, #12]
 8009612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009616:	f043 0302 	orr.w	r3, r3, #2
 800961a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009620:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	601a      	str	r2, [r3, #0]
 8009640:	e005      	b.n	800964e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009646:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009654:	461a      	mov	r2, r3
 8009656:	2300      	movs	r3, #0
 8009658:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009660:	4619      	mov	r1, r3
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009668:	461a      	mov	r2, r3
 800966a:	680b      	ldr	r3, [r1, #0]
 800966c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800966e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009670:	2b01      	cmp	r3, #1
 8009672:	d10c      	bne.n	800968e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009676:	2b00      	cmp	r3, #0
 8009678:	d104      	bne.n	8009684 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800967a:	2100      	movs	r1, #0
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 f949 	bl	8009914 <USB_SetDevSpeed>
 8009682:	e008      	b.n	8009696 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009684:	2101      	movs	r1, #1
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 f944 	bl	8009914 <USB_SetDevSpeed>
 800968c:	e003      	b.n	8009696 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800968e:	2103      	movs	r1, #3
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 f93f 	bl	8009914 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009696:	2110      	movs	r1, #16
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 f8f3 	bl	8009884 <USB_FlushTxFifo>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 f911 	bl	80098d0 <USB_FlushRxFifo>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096be:	461a      	mov	r2, r3
 80096c0:	2300      	movs	r3, #0
 80096c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ca:	461a      	mov	r2, r3
 80096cc:	2300      	movs	r3, #0
 80096ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096d6:	461a      	mov	r2, r3
 80096d8:	2300      	movs	r3, #0
 80096da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096dc:	2300      	movs	r3, #0
 80096de:	613b      	str	r3, [r7, #16]
 80096e0:	e043      	b.n	800976a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	015a      	lsls	r2, r3, #5
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	4413      	add	r3, r2
 80096ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096f8:	d118      	bne.n	800972c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10a      	bne.n	8009716 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	015a      	lsls	r2, r3, #5
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	4413      	add	r3, r2
 8009708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800970c:	461a      	mov	r2, r3
 800970e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009712:	6013      	str	r3, [r2, #0]
 8009714:	e013      	b.n	800973e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	015a      	lsls	r2, r3, #5
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	4413      	add	r3, r2
 800971e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009722:	461a      	mov	r2, r3
 8009724:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009728:	6013      	str	r3, [r2, #0]
 800972a:	e008      	b.n	800973e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	015a      	lsls	r2, r3, #5
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	4413      	add	r3, r2
 8009734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009738:	461a      	mov	r2, r3
 800973a:	2300      	movs	r3, #0
 800973c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	015a      	lsls	r2, r3, #5
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	4413      	add	r3, r2
 8009746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800974a:	461a      	mov	r2, r3
 800974c:	2300      	movs	r3, #0
 800974e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	015a      	lsls	r2, r3, #5
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	4413      	add	r3, r2
 8009758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800975c:	461a      	mov	r2, r3
 800975e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009762:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	3301      	adds	r3, #1
 8009768:	613b      	str	r3, [r7, #16]
 800976a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976c:	693a      	ldr	r2, [r7, #16]
 800976e:	429a      	cmp	r2, r3
 8009770:	d3b7      	bcc.n	80096e2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009772:	2300      	movs	r3, #0
 8009774:	613b      	str	r3, [r7, #16]
 8009776:	e043      	b.n	8009800 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	015a      	lsls	r2, r3, #5
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	4413      	add	r3, r2
 8009780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800978a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800978e:	d118      	bne.n	80097c2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d10a      	bne.n	80097ac <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	015a      	lsls	r2, r3, #5
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	4413      	add	r3, r2
 800979e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a2:	461a      	mov	r2, r3
 80097a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80097a8:	6013      	str	r3, [r2, #0]
 80097aa:	e013      	b.n	80097d4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	015a      	lsls	r2, r3, #5
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	4413      	add	r3, r2
 80097b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097b8:	461a      	mov	r2, r3
 80097ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80097be:	6013      	str	r3, [r2, #0]
 80097c0:	e008      	b.n	80097d4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	015a      	lsls	r2, r3, #5
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	4413      	add	r3, r2
 80097ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ce:	461a      	mov	r2, r3
 80097d0:	2300      	movs	r3, #0
 80097d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	015a      	lsls	r2, r3, #5
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	4413      	add	r3, r2
 80097dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097e0:	461a      	mov	r2, r3
 80097e2:	2300      	movs	r3, #0
 80097e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	015a      	lsls	r2, r3, #5
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	4413      	add	r3, r2
 80097ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097f2:	461a      	mov	r2, r3
 80097f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80097f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	3301      	adds	r3, #1
 80097fe:	613b      	str	r3, [r7, #16]
 8009800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009802:	693a      	ldr	r2, [r7, #16]
 8009804:	429a      	cmp	r2, r3
 8009806:	d3b7      	bcc.n	8009778 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009816:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800981a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009828:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800982a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800982c:	2b00      	cmp	r3, #0
 800982e:	d105      	bne.n	800983c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	699b      	ldr	r3, [r3, #24]
 8009834:	f043 0210 	orr.w	r2, r3, #16
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	699a      	ldr	r2, [r3, #24]
 8009840:	4b0e      	ldr	r3, [pc, #56]	; (800987c <USB_DevInit+0x2b4>)
 8009842:	4313      	orrs	r3, r2
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800984a:	2b00      	cmp	r3, #0
 800984c:	d005      	beq.n	800985a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	699b      	ldr	r3, [r3, #24]
 8009852:	f043 0208 	orr.w	r2, r3, #8
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800985a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800985c:	2b01      	cmp	r3, #1
 800985e:	d105      	bne.n	800986c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	699a      	ldr	r2, [r3, #24]
 8009864:	4b06      	ldr	r3, [pc, #24]	; (8009880 <USB_DevInit+0x2b8>)
 8009866:	4313      	orrs	r3, r2
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800986c:	7dfb      	ldrb	r3, [r7, #23]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3718      	adds	r7, #24
 8009872:	46bd      	mov	sp, r7
 8009874:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009878:	b004      	add	sp, #16
 800987a:	4770      	bx	lr
 800987c:	803c3800 	.word	0x803c3800
 8009880:	40000004 	.word	0x40000004

08009884 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800988e:	2300      	movs	r3, #0
 8009890:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	019b      	lsls	r3, r3, #6
 8009896:	f043 0220 	orr.w	r2, r3, #32
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	3301      	adds	r3, #1
 80098a2:	60fb      	str	r3, [r7, #12]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	4a09      	ldr	r2, [pc, #36]	; (80098cc <USB_FlushTxFifo+0x48>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d901      	bls.n	80098b0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80098ac:	2303      	movs	r3, #3
 80098ae:	e006      	b.n	80098be <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	f003 0320 	and.w	r3, r3, #32
 80098b8:	2b20      	cmp	r3, #32
 80098ba:	d0f0      	beq.n	800989e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop
 80098cc:	00030d40 	.word	0x00030d40

080098d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80098d8:	2300      	movs	r3, #0
 80098da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2210      	movs	r2, #16
 80098e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	3301      	adds	r3, #1
 80098e6:	60fb      	str	r3, [r7, #12]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	4a09      	ldr	r2, [pc, #36]	; (8009910 <USB_FlushRxFifo+0x40>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d901      	bls.n	80098f4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80098f0:	2303      	movs	r3, #3
 80098f2:	e006      	b.n	8009902 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	f003 0310 	and.w	r3, r3, #16
 80098fc:	2b10      	cmp	r3, #16
 80098fe:	d0f0      	beq.n	80098e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3714      	adds	r7, #20
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	00030d40 	.word	0x00030d40

08009914 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009914:	b480      	push	{r7}
 8009916:	b085      	sub	sp, #20
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	460b      	mov	r3, r1
 800991e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	78fb      	ldrb	r3, [r7, #3]
 800992e:	68f9      	ldr	r1, [r7, #12]
 8009930:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009934:	4313      	orrs	r3, r2
 8009936:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3714      	adds	r7, #20
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr

08009946 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b084      	sub	sp, #16
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009960:	f043 0302 	orr.w	r3, r3, #2
 8009964:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009966:	2003      	movs	r0, #3
 8009968:	f7f9 fccc 	bl	8003304 <HAL_Delay>

  return HAL_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
	...

08009978 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009978:	b480      	push	{r7}
 800997a:	b085      	sub	sp, #20
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009980:	2300      	movs	r3, #0
 8009982:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	3301      	adds	r3, #1
 8009988:	60fb      	str	r3, [r7, #12]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	4a13      	ldr	r2, [pc, #76]	; (80099dc <USB_CoreReset+0x64>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d901      	bls.n	8009996 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009992:	2303      	movs	r3, #3
 8009994:	e01b      	b.n	80099ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	691b      	ldr	r3, [r3, #16]
 800999a:	2b00      	cmp	r3, #0
 800999c:	daf2      	bge.n	8009984 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800999e:	2300      	movs	r3, #0
 80099a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	f043 0201 	orr.w	r2, r3, #1
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	3301      	adds	r3, #1
 80099b2:	60fb      	str	r3, [r7, #12]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	4a09      	ldr	r2, [pc, #36]	; (80099dc <USB_CoreReset+0x64>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d901      	bls.n	80099c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80099bc:	2303      	movs	r3, #3
 80099be:	e006      	b.n	80099ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	691b      	ldr	r3, [r3, #16]
 80099c4:	f003 0301 	and.w	r3, r3, #1
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d0f0      	beq.n	80099ae <USB_CoreReset+0x36>

  return HAL_OK;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3714      	adds	r7, #20
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	00030d40 	.word	0x00030d40

080099e0 <__cxa_pure_virtual>:
 80099e0:	b508      	push	{r3, lr}
 80099e2:	f000 f80d 	bl	8009a00 <_ZSt9terminatev>

080099e6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80099e6:	b508      	push	{r3, lr}
 80099e8:	4780      	blx	r0
 80099ea:	f000 f80e 	bl	8009a0a <abort>
	...

080099f0 <_ZSt13get_terminatev>:
 80099f0:	4b02      	ldr	r3, [pc, #8]	; (80099fc <_ZSt13get_terminatev+0xc>)
 80099f2:	6818      	ldr	r0, [r3, #0]
 80099f4:	f3bf 8f5b 	dmb	ish
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	24000010 	.word	0x24000010

08009a00 <_ZSt9terminatev>:
 8009a00:	b508      	push	{r3, lr}
 8009a02:	f7ff fff5 	bl	80099f0 <_ZSt13get_terminatev>
 8009a06:	f7ff ffee 	bl	80099e6 <_ZN10__cxxabiv111__terminateEPFvvE>

08009a0a <abort>:
 8009a0a:	b508      	push	{r3, lr}
 8009a0c:	2006      	movs	r0, #6
 8009a0e:	f000 f871 	bl	8009af4 <raise>
 8009a12:	2001      	movs	r0, #1
 8009a14:	f7f9 fac2 	bl	8002f9c <_exit>

08009a18 <__errno>:
 8009a18:	4b01      	ldr	r3, [pc, #4]	; (8009a20 <__errno+0x8>)
 8009a1a:	6818      	ldr	r0, [r3, #0]
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop
 8009a20:	24000014 	.word	0x24000014

08009a24 <__libc_init_array>:
 8009a24:	b570      	push	{r4, r5, r6, lr}
 8009a26:	4e0d      	ldr	r6, [pc, #52]	; (8009a5c <__libc_init_array+0x38>)
 8009a28:	4c0d      	ldr	r4, [pc, #52]	; (8009a60 <__libc_init_array+0x3c>)
 8009a2a:	1ba4      	subs	r4, r4, r6
 8009a2c:	10a4      	asrs	r4, r4, #2
 8009a2e:	2500      	movs	r5, #0
 8009a30:	42a5      	cmp	r5, r4
 8009a32:	d109      	bne.n	8009a48 <__libc_init_array+0x24>
 8009a34:	4e0b      	ldr	r6, [pc, #44]	; (8009a64 <__libc_init_array+0x40>)
 8009a36:	4c0c      	ldr	r4, [pc, #48]	; (8009a68 <__libc_init_array+0x44>)
 8009a38:	f000 f960 	bl	8009cfc <_init>
 8009a3c:	1ba4      	subs	r4, r4, r6
 8009a3e:	10a4      	asrs	r4, r4, #2
 8009a40:	2500      	movs	r5, #0
 8009a42:	42a5      	cmp	r5, r4
 8009a44:	d105      	bne.n	8009a52 <__libc_init_array+0x2e>
 8009a46:	bd70      	pop	{r4, r5, r6, pc}
 8009a48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a4c:	4798      	blx	r3
 8009a4e:	3501      	adds	r5, #1
 8009a50:	e7ee      	b.n	8009a30 <__libc_init_array+0xc>
 8009a52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a56:	4798      	blx	r3
 8009a58:	3501      	adds	r5, #1
 8009a5a:	e7f2      	b.n	8009a42 <__libc_init_array+0x1e>
 8009a5c:	08009f20 	.word	0x08009f20
 8009a60:	08009f20 	.word	0x08009f20
 8009a64:	08009f20 	.word	0x08009f20
 8009a68:	08009f28 	.word	0x08009f28

08009a6c <memcpy>:
 8009a6c:	b510      	push	{r4, lr}
 8009a6e:	1e43      	subs	r3, r0, #1
 8009a70:	440a      	add	r2, r1
 8009a72:	4291      	cmp	r1, r2
 8009a74:	d100      	bne.n	8009a78 <memcpy+0xc>
 8009a76:	bd10      	pop	{r4, pc}
 8009a78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a80:	e7f7      	b.n	8009a72 <memcpy+0x6>

08009a82 <memset>:
 8009a82:	4402      	add	r2, r0
 8009a84:	4603      	mov	r3, r0
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d100      	bne.n	8009a8c <memset+0xa>
 8009a8a:	4770      	bx	lr
 8009a8c:	f803 1b01 	strb.w	r1, [r3], #1
 8009a90:	e7f9      	b.n	8009a86 <memset+0x4>
	...

08009a94 <realloc>:
 8009a94:	4b02      	ldr	r3, [pc, #8]	; (8009aa0 <realloc+0xc>)
 8009a96:	460a      	mov	r2, r1
 8009a98:	4601      	mov	r1, r0
 8009a9a:	6818      	ldr	r0, [r3, #0]
 8009a9c:	f000 b8a0 	b.w	8009be0 <_realloc_r>
 8009aa0:	24000014 	.word	0x24000014

08009aa4 <_raise_r>:
 8009aa4:	291f      	cmp	r1, #31
 8009aa6:	b538      	push	{r3, r4, r5, lr}
 8009aa8:	4604      	mov	r4, r0
 8009aaa:	460d      	mov	r5, r1
 8009aac:	d904      	bls.n	8009ab8 <_raise_r+0x14>
 8009aae:	2316      	movs	r3, #22
 8009ab0:	6003      	str	r3, [r0, #0]
 8009ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab6:	bd38      	pop	{r3, r4, r5, pc}
 8009ab8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009aba:	b112      	cbz	r2, 8009ac2 <_raise_r+0x1e>
 8009abc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ac0:	b94b      	cbnz	r3, 8009ad6 <_raise_r+0x32>
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f000 f830 	bl	8009b28 <_getpid_r>
 8009ac8:	462a      	mov	r2, r5
 8009aca:	4601      	mov	r1, r0
 8009acc:	4620      	mov	r0, r4
 8009ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ad2:	f000 b817 	b.w	8009b04 <_kill_r>
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d00a      	beq.n	8009af0 <_raise_r+0x4c>
 8009ada:	1c59      	adds	r1, r3, #1
 8009adc:	d103      	bne.n	8009ae6 <_raise_r+0x42>
 8009ade:	2316      	movs	r3, #22
 8009ae0:	6003      	str	r3, [r0, #0]
 8009ae2:	2001      	movs	r0, #1
 8009ae4:	e7e7      	b.n	8009ab6 <_raise_r+0x12>
 8009ae6:	2400      	movs	r4, #0
 8009ae8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009aec:	4628      	mov	r0, r5
 8009aee:	4798      	blx	r3
 8009af0:	2000      	movs	r0, #0
 8009af2:	e7e0      	b.n	8009ab6 <_raise_r+0x12>

08009af4 <raise>:
 8009af4:	4b02      	ldr	r3, [pc, #8]	; (8009b00 <raise+0xc>)
 8009af6:	4601      	mov	r1, r0
 8009af8:	6818      	ldr	r0, [r3, #0]
 8009afa:	f7ff bfd3 	b.w	8009aa4 <_raise_r>
 8009afe:	bf00      	nop
 8009b00:	24000014 	.word	0x24000014

08009b04 <_kill_r>:
 8009b04:	b538      	push	{r3, r4, r5, lr}
 8009b06:	4c07      	ldr	r4, [pc, #28]	; (8009b24 <_kill_r+0x20>)
 8009b08:	2300      	movs	r3, #0
 8009b0a:	4605      	mov	r5, r0
 8009b0c:	4608      	mov	r0, r1
 8009b0e:	4611      	mov	r1, r2
 8009b10:	6023      	str	r3, [r4, #0]
 8009b12:	f7f9 fa33 	bl	8002f7c <_kill>
 8009b16:	1c43      	adds	r3, r0, #1
 8009b18:	d102      	bne.n	8009b20 <_kill_r+0x1c>
 8009b1a:	6823      	ldr	r3, [r4, #0]
 8009b1c:	b103      	cbz	r3, 8009b20 <_kill_r+0x1c>
 8009b1e:	602b      	str	r3, [r5, #0]
 8009b20:	bd38      	pop	{r3, r4, r5, pc}
 8009b22:	bf00      	nop
 8009b24:	240010c0 	.word	0x240010c0

08009b28 <_getpid_r>:
 8009b28:	f7f9 ba20 	b.w	8002f6c <_getpid>

08009b2c <_malloc_r>:
 8009b2c:	b570      	push	{r4, r5, r6, lr}
 8009b2e:	1ccd      	adds	r5, r1, #3
 8009b30:	f025 0503 	bic.w	r5, r5, #3
 8009b34:	3508      	adds	r5, #8
 8009b36:	2d0c      	cmp	r5, #12
 8009b38:	bf38      	it	cc
 8009b3a:	250c      	movcc	r5, #12
 8009b3c:	2d00      	cmp	r5, #0
 8009b3e:	4606      	mov	r6, r0
 8009b40:	db01      	blt.n	8009b46 <_malloc_r+0x1a>
 8009b42:	42a9      	cmp	r1, r5
 8009b44:	d903      	bls.n	8009b4e <_malloc_r+0x22>
 8009b46:	230c      	movs	r3, #12
 8009b48:	6033      	str	r3, [r6, #0]
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	bd70      	pop	{r4, r5, r6, pc}
 8009b4e:	f000 f87d 	bl	8009c4c <__malloc_lock>
 8009b52:	4a21      	ldr	r2, [pc, #132]	; (8009bd8 <_malloc_r+0xac>)
 8009b54:	6814      	ldr	r4, [r2, #0]
 8009b56:	4621      	mov	r1, r4
 8009b58:	b991      	cbnz	r1, 8009b80 <_malloc_r+0x54>
 8009b5a:	4c20      	ldr	r4, [pc, #128]	; (8009bdc <_malloc_r+0xb0>)
 8009b5c:	6823      	ldr	r3, [r4, #0]
 8009b5e:	b91b      	cbnz	r3, 8009b68 <_malloc_r+0x3c>
 8009b60:	4630      	mov	r0, r6
 8009b62:	f000 f863 	bl	8009c2c <_sbrk_r>
 8009b66:	6020      	str	r0, [r4, #0]
 8009b68:	4629      	mov	r1, r5
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	f000 f85e 	bl	8009c2c <_sbrk_r>
 8009b70:	1c43      	adds	r3, r0, #1
 8009b72:	d124      	bne.n	8009bbe <_malloc_r+0x92>
 8009b74:	230c      	movs	r3, #12
 8009b76:	6033      	str	r3, [r6, #0]
 8009b78:	4630      	mov	r0, r6
 8009b7a:	f000 f868 	bl	8009c4e <__malloc_unlock>
 8009b7e:	e7e4      	b.n	8009b4a <_malloc_r+0x1e>
 8009b80:	680b      	ldr	r3, [r1, #0]
 8009b82:	1b5b      	subs	r3, r3, r5
 8009b84:	d418      	bmi.n	8009bb8 <_malloc_r+0x8c>
 8009b86:	2b0b      	cmp	r3, #11
 8009b88:	d90f      	bls.n	8009baa <_malloc_r+0x7e>
 8009b8a:	600b      	str	r3, [r1, #0]
 8009b8c:	50cd      	str	r5, [r1, r3]
 8009b8e:	18cc      	adds	r4, r1, r3
 8009b90:	4630      	mov	r0, r6
 8009b92:	f000 f85c 	bl	8009c4e <__malloc_unlock>
 8009b96:	f104 000b 	add.w	r0, r4, #11
 8009b9a:	1d23      	adds	r3, r4, #4
 8009b9c:	f020 0007 	bic.w	r0, r0, #7
 8009ba0:	1ac3      	subs	r3, r0, r3
 8009ba2:	d0d3      	beq.n	8009b4c <_malloc_r+0x20>
 8009ba4:	425a      	negs	r2, r3
 8009ba6:	50e2      	str	r2, [r4, r3]
 8009ba8:	e7d0      	b.n	8009b4c <_malloc_r+0x20>
 8009baa:	428c      	cmp	r4, r1
 8009bac:	684b      	ldr	r3, [r1, #4]
 8009bae:	bf16      	itet	ne
 8009bb0:	6063      	strne	r3, [r4, #4]
 8009bb2:	6013      	streq	r3, [r2, #0]
 8009bb4:	460c      	movne	r4, r1
 8009bb6:	e7eb      	b.n	8009b90 <_malloc_r+0x64>
 8009bb8:	460c      	mov	r4, r1
 8009bba:	6849      	ldr	r1, [r1, #4]
 8009bbc:	e7cc      	b.n	8009b58 <_malloc_r+0x2c>
 8009bbe:	1cc4      	adds	r4, r0, #3
 8009bc0:	f024 0403 	bic.w	r4, r4, #3
 8009bc4:	42a0      	cmp	r0, r4
 8009bc6:	d005      	beq.n	8009bd4 <_malloc_r+0xa8>
 8009bc8:	1a21      	subs	r1, r4, r0
 8009bca:	4630      	mov	r0, r6
 8009bcc:	f000 f82e 	bl	8009c2c <_sbrk_r>
 8009bd0:	3001      	adds	r0, #1
 8009bd2:	d0cf      	beq.n	8009b74 <_malloc_r+0x48>
 8009bd4:	6025      	str	r5, [r4, #0]
 8009bd6:	e7db      	b.n	8009b90 <_malloc_r+0x64>
 8009bd8:	240010b4 	.word	0x240010b4
 8009bdc:	240010b8 	.word	0x240010b8

08009be0 <_realloc_r>:
 8009be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009be2:	4607      	mov	r7, r0
 8009be4:	4614      	mov	r4, r2
 8009be6:	460e      	mov	r6, r1
 8009be8:	b921      	cbnz	r1, 8009bf4 <_realloc_r+0x14>
 8009bea:	4611      	mov	r1, r2
 8009bec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009bf0:	f7ff bf9c 	b.w	8009b2c <_malloc_r>
 8009bf4:	b922      	cbnz	r2, 8009c00 <_realloc_r+0x20>
 8009bf6:	f000 f82b 	bl	8009c50 <_free_r>
 8009bfa:	4625      	mov	r5, r4
 8009bfc:	4628      	mov	r0, r5
 8009bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c00:	f000 f874 	bl	8009cec <_malloc_usable_size_r>
 8009c04:	42a0      	cmp	r0, r4
 8009c06:	d20f      	bcs.n	8009c28 <_realloc_r+0x48>
 8009c08:	4621      	mov	r1, r4
 8009c0a:	4638      	mov	r0, r7
 8009c0c:	f7ff ff8e 	bl	8009b2c <_malloc_r>
 8009c10:	4605      	mov	r5, r0
 8009c12:	2800      	cmp	r0, #0
 8009c14:	d0f2      	beq.n	8009bfc <_realloc_r+0x1c>
 8009c16:	4631      	mov	r1, r6
 8009c18:	4622      	mov	r2, r4
 8009c1a:	f7ff ff27 	bl	8009a6c <memcpy>
 8009c1e:	4631      	mov	r1, r6
 8009c20:	4638      	mov	r0, r7
 8009c22:	f000 f815 	bl	8009c50 <_free_r>
 8009c26:	e7e9      	b.n	8009bfc <_realloc_r+0x1c>
 8009c28:	4635      	mov	r5, r6
 8009c2a:	e7e7      	b.n	8009bfc <_realloc_r+0x1c>

08009c2c <_sbrk_r>:
 8009c2c:	b538      	push	{r3, r4, r5, lr}
 8009c2e:	4c06      	ldr	r4, [pc, #24]	; (8009c48 <_sbrk_r+0x1c>)
 8009c30:	2300      	movs	r3, #0
 8009c32:	4605      	mov	r5, r0
 8009c34:	4608      	mov	r0, r1
 8009c36:	6023      	str	r3, [r4, #0]
 8009c38:	f7f9 f9ba 	bl	8002fb0 <_sbrk>
 8009c3c:	1c43      	adds	r3, r0, #1
 8009c3e:	d102      	bne.n	8009c46 <_sbrk_r+0x1a>
 8009c40:	6823      	ldr	r3, [r4, #0]
 8009c42:	b103      	cbz	r3, 8009c46 <_sbrk_r+0x1a>
 8009c44:	602b      	str	r3, [r5, #0]
 8009c46:	bd38      	pop	{r3, r4, r5, pc}
 8009c48:	240010c0 	.word	0x240010c0

08009c4c <__malloc_lock>:
 8009c4c:	4770      	bx	lr

08009c4e <__malloc_unlock>:
 8009c4e:	4770      	bx	lr

08009c50 <_free_r>:
 8009c50:	b538      	push	{r3, r4, r5, lr}
 8009c52:	4605      	mov	r5, r0
 8009c54:	2900      	cmp	r1, #0
 8009c56:	d045      	beq.n	8009ce4 <_free_r+0x94>
 8009c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c5c:	1f0c      	subs	r4, r1, #4
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	bfb8      	it	lt
 8009c62:	18e4      	addlt	r4, r4, r3
 8009c64:	f7ff fff2 	bl	8009c4c <__malloc_lock>
 8009c68:	4a1f      	ldr	r2, [pc, #124]	; (8009ce8 <_free_r+0x98>)
 8009c6a:	6813      	ldr	r3, [r2, #0]
 8009c6c:	4610      	mov	r0, r2
 8009c6e:	b933      	cbnz	r3, 8009c7e <_free_r+0x2e>
 8009c70:	6063      	str	r3, [r4, #4]
 8009c72:	6014      	str	r4, [r2, #0]
 8009c74:	4628      	mov	r0, r5
 8009c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c7a:	f7ff bfe8 	b.w	8009c4e <__malloc_unlock>
 8009c7e:	42a3      	cmp	r3, r4
 8009c80:	d90c      	bls.n	8009c9c <_free_r+0x4c>
 8009c82:	6821      	ldr	r1, [r4, #0]
 8009c84:	1862      	adds	r2, r4, r1
 8009c86:	4293      	cmp	r3, r2
 8009c88:	bf04      	itt	eq
 8009c8a:	681a      	ldreq	r2, [r3, #0]
 8009c8c:	685b      	ldreq	r3, [r3, #4]
 8009c8e:	6063      	str	r3, [r4, #4]
 8009c90:	bf04      	itt	eq
 8009c92:	1852      	addeq	r2, r2, r1
 8009c94:	6022      	streq	r2, [r4, #0]
 8009c96:	6004      	str	r4, [r0, #0]
 8009c98:	e7ec      	b.n	8009c74 <_free_r+0x24>
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	b10a      	cbz	r2, 8009ca4 <_free_r+0x54>
 8009ca0:	42a2      	cmp	r2, r4
 8009ca2:	d9fa      	bls.n	8009c9a <_free_r+0x4a>
 8009ca4:	6819      	ldr	r1, [r3, #0]
 8009ca6:	1858      	adds	r0, r3, r1
 8009ca8:	42a0      	cmp	r0, r4
 8009caa:	d10b      	bne.n	8009cc4 <_free_r+0x74>
 8009cac:	6820      	ldr	r0, [r4, #0]
 8009cae:	4401      	add	r1, r0
 8009cb0:	1858      	adds	r0, r3, r1
 8009cb2:	4282      	cmp	r2, r0
 8009cb4:	6019      	str	r1, [r3, #0]
 8009cb6:	d1dd      	bne.n	8009c74 <_free_r+0x24>
 8009cb8:	6810      	ldr	r0, [r2, #0]
 8009cba:	6852      	ldr	r2, [r2, #4]
 8009cbc:	605a      	str	r2, [r3, #4]
 8009cbe:	4401      	add	r1, r0
 8009cc0:	6019      	str	r1, [r3, #0]
 8009cc2:	e7d7      	b.n	8009c74 <_free_r+0x24>
 8009cc4:	d902      	bls.n	8009ccc <_free_r+0x7c>
 8009cc6:	230c      	movs	r3, #12
 8009cc8:	602b      	str	r3, [r5, #0]
 8009cca:	e7d3      	b.n	8009c74 <_free_r+0x24>
 8009ccc:	6820      	ldr	r0, [r4, #0]
 8009cce:	1821      	adds	r1, r4, r0
 8009cd0:	428a      	cmp	r2, r1
 8009cd2:	bf04      	itt	eq
 8009cd4:	6811      	ldreq	r1, [r2, #0]
 8009cd6:	6852      	ldreq	r2, [r2, #4]
 8009cd8:	6062      	str	r2, [r4, #4]
 8009cda:	bf04      	itt	eq
 8009cdc:	1809      	addeq	r1, r1, r0
 8009cde:	6021      	streq	r1, [r4, #0]
 8009ce0:	605c      	str	r4, [r3, #4]
 8009ce2:	e7c7      	b.n	8009c74 <_free_r+0x24>
 8009ce4:	bd38      	pop	{r3, r4, r5, pc}
 8009ce6:	bf00      	nop
 8009ce8:	240010b4 	.word	0x240010b4

08009cec <_malloc_usable_size_r>:
 8009cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cf0:	1f18      	subs	r0, r3, #4
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	bfbc      	itt	lt
 8009cf6:	580b      	ldrlt	r3, [r1, r0]
 8009cf8:	18c0      	addlt	r0, r0, r3
 8009cfa:	4770      	bx	lr

08009cfc <_init>:
 8009cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cfe:	bf00      	nop
 8009d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d02:	bc08      	pop	{r3}
 8009d04:	469e      	mov	lr, r3
 8009d06:	4770      	bx	lr

08009d08 <_fini>:
 8009d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0a:	bf00      	nop
 8009d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d0e:	bc08      	pop	{r3}
 8009d10:	469e      	mov	lr, r3
 8009d12:	4770      	bx	lr
