
STM32H743ZI2ROS01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000707c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007314  08007314  00017314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800734c  0800734c  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800734c  0800734c  0001734c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007354  08007354  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007354  08007354  00017354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007358  08007358  00017358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800735c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  0800736c  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  080073cc  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000063c  240000d0  0800742c  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2400070c  0800742c  0002070c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00022b7f  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000031bb  00000000  00000000  00042c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001480  00000000  00000000  00045e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001358  00000000  00000000  000472b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00037d70  00000000  00000000  00048610  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00010bd1  00000000  00000000  00080380  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00167e43  00000000  00000000  00090f51  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001f8d94  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000058a4  00000000  00000000  001f8e10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080072fc 	.word	0x080072fc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	080072fc 	.word	0x080072fc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 ffce 	bl	800157c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f810 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 fb50 	bl	8000c88 <MX_GPIO_Init>
  MX_ETH_Init();
 80005e8:	f000 f8cc 	bl	8000784 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ec:	f000 fb1a 	bl	8000c24 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 80005f0:	f000 f91a 	bl	8000828 <MX_TIM1_Init>
  MX_TIM3_Init();
 80005f4:	f000 f9d0 	bl	8000998 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005f8:	f000 fa46 	bl	8000a88 <MX_TIM4_Init>
  MX_UART4_Init();
 80005fc:	f000 fac6 	bl	8000b8c <MX_UART4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000600:	e7fe      	b.n	8000600 <main+0x28>
	...

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b0cc      	sub	sp, #304	; 0x130
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800060e:	224c      	movs	r2, #76	; 0x4c
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f006 fe6a 	bl	80072ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800061c:	2220      	movs	r2, #32
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f006 fe63 	bl	80072ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	4618      	mov	r0, r3
 800062c:	23bc      	movs	r3, #188	; 0xbc
 800062e:	461a      	mov	r2, r3
 8000630:	2100      	movs	r1, #0
 8000632:	f006 fe5b 	bl	80072ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000636:	2002      	movs	r0, #2
 8000638:	f002 f880 	bl	800273c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	4b4d      	ldr	r3, [pc, #308]	; (8000778 <SystemClock_Config+0x174>)
 8000644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000646:	4a4c      	ldr	r2, [pc, #304]	; (8000778 <SystemClock_Config+0x174>)
 8000648:	f023 0301 	bic.w	r3, r3, #1
 800064c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800064e:	4b4a      	ldr	r3, [pc, #296]	; (8000778 <SystemClock_Config+0x174>)
 8000650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000652:	f003 0201 	and.w	r2, r3, #1
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	4b48      	ldr	r3, [pc, #288]	; (800077c <SystemClock_Config+0x178>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000662:	4a46      	ldr	r2, [pc, #280]	; (800077c <SystemClock_Config+0x178>)
 8000664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000668:	6193      	str	r3, [r2, #24]
 800066a:	4b44      	ldr	r3, [pc, #272]	; (800077c <SystemClock_Config+0x178>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800067a:	bf00      	nop
 800067c:	4b3f      	ldr	r3, [pc, #252]	; (800077c <SystemClock_Config+0x178>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000688:	d1f8      	bne.n	800067c <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800068a:	2303      	movs	r3, #3
 800068c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000690:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000694:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000698:	2301      	movs	r3, #1
 800069a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069e:	2340      	movs	r3, #64	; 0x40
 80006a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a4:	2302      	movs	r3, #2
 80006a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	2302      	movs	r3, #2
 80006ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006b6:	2318      	movs	r3, #24
 80006b8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006bc:	2302      	movs	r3, #2
 80006be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c2:	2304      	movs	r3, #4
 80006c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006ce:	230c      	movs	r3, #12
 80006d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 f873 	bl	80027d0 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80006f0:	f000 fbd8 	bl	8000ea4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	233f      	movs	r3, #63	; 0x3f
 80006f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006fa:	2300      	movs	r3, #0
 80006fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000724:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f002 fc60 	bl	8002ff0 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x136>
  {
    Error_Handler();
 8000736:	f000 fbb5 	bl	8000ea4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_USB;
 800073a:	f107 0308 	add.w	r3, r7, #8
 800073e:	4a10      	ldr	r2, [pc, #64]	; (8000780 <SystemClock_Config+0x17c>)
 8000740:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	2200      	movs	r2, #0
 8000748:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800074a:	f107 0308 	add.w	r3, r7, #8
 800074e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000756:	f107 0308 	add.w	r3, r7, #8
 800075a:	4618      	mov	r0, r3
 800075c:	f002 ffcc 	bl	80036f8 <HAL_RCCEx_PeriphCLKConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x166>
  {
    Error_Handler();
 8000766:	f000 fb9d 	bl	8000ea4 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800076a:	f002 f821 	bl	80027b0 <HAL_PWREx_EnableUSBVoltageDetector>
}
 800076e:	bf00      	nop
 8000770:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	58000400 	.word	0x58000400
 800077c:	58024800 	.word	0x58024800
 8000780:	00040002 	.word	0x00040002

08000784 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000788:	4b22      	ldr	r3, [pc, #136]	; (8000814 <MX_ETH_Init+0x90>)
 800078a:	4a23      	ldr	r2, [pc, #140]	; (8000818 <MX_ETH_Init+0x94>)
 800078c:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 800078e:	4b21      	ldr	r3, [pc, #132]	; (8000814 <MX_ETH_Init+0x90>)
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000796:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <MX_ETH_Init+0x90>)
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	3301      	adds	r3, #1
 800079c:	2280      	movs	r2, #128	; 0x80
 800079e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80007a0:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <MX_ETH_Init+0x90>)
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	3302      	adds	r3, #2
 80007a6:	22e1      	movs	r2, #225	; 0xe1
 80007a8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_ETH_Init+0x90>)
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	3303      	adds	r3, #3
 80007b0:	2200      	movs	r2, #0
 80007b2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80007b4:	4b17      	ldr	r3, [pc, #92]	; (8000814 <MX_ETH_Init+0x90>)
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	3304      	adds	r3, #4
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_ETH_Init+0x90>)
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	3305      	adds	r3, #5
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_ETH_Init+0x90>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_ETH_Init+0x90>)
 80007d0:	4a12      	ldr	r2, [pc, #72]	; (800081c <MX_ETH_Init+0x98>)
 80007d2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_ETH_Init+0x90>)
 80007d6:	4a12      	ldr	r2, [pc, #72]	; (8000820 <MX_ETH_Init+0x9c>)
 80007d8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_ETH_Init+0x90>)
 80007dc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007e0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007e2:	480c      	ldr	r0, [pc, #48]	; (8000814 <MX_ETH_Init+0x90>)
 80007e4:	f001 f882 	bl	80018ec <HAL_ETH_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 80007ee:	f000 fb59 	bl	8000ea4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007f2:	2234      	movs	r2, #52	; 0x34
 80007f4:	2100      	movs	r1, #0
 80007f6:	480b      	ldr	r0, [pc, #44]	; (8000824 <MX_ETH_Init+0xa0>)
 80007f8:	f006 fd78 	bl	80072ec <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_ETH_Init+0xa0>)
 80007fe:	2221      	movs	r2, #33	; 0x21
 8000800:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_ETH_Init+0xa0>)
 8000804:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000808:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_ETH_Init+0xa0>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	24000664 	.word	0x24000664
 8000818:	40028000 	.word	0x40028000
 800081c:	24000070 	.word	0x24000070
 8000820:	24000010 	.word	0x24000010
 8000824:	240006d4 	.word	0x240006d4

08000828 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b09a      	sub	sp, #104	; 0x68
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000848:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
 8000858:	615a      	str	r2, [r3, #20]
 800085a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	222c      	movs	r2, #44	; 0x2c
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f006 fd42 	bl	80072ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000868:	4b49      	ldr	r3, [pc, #292]	; (8000990 <MX_TIM1_Init+0x168>)
 800086a:	4a4a      	ldr	r2, [pc, #296]	; (8000994 <MX_TIM1_Init+0x16c>)
 800086c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800086e:	4b48      	ldr	r3, [pc, #288]	; (8000990 <MX_TIM1_Init+0x168>)
 8000870:	2200      	movs	r2, #0
 8000872:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000874:	4b46      	ldr	r3, [pc, #280]	; (8000990 <MX_TIM1_Init+0x168>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800087a:	4b45      	ldr	r3, [pc, #276]	; (8000990 <MX_TIM1_Init+0x168>)
 800087c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000880:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000882:	4b43      	ldr	r3, [pc, #268]	; (8000990 <MX_TIM1_Init+0x168>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000888:	4b41      	ldr	r3, [pc, #260]	; (8000990 <MX_TIM1_Init+0x168>)
 800088a:	2200      	movs	r2, #0
 800088c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088e:	4b40      	ldr	r3, [pc, #256]	; (8000990 <MX_TIM1_Init+0x168>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000894:	483e      	ldr	r0, [pc, #248]	; (8000990 <MX_TIM1_Init+0x168>)
 8000896:	f004 fa2f 	bl	8004cf8 <HAL_TIM_Base_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80008a0:	f000 fb00 	bl	8000ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008ae:	4619      	mov	r1, r3
 80008b0:	4837      	ldr	r0, [pc, #220]	; (8000990 <MX_TIM1_Init+0x168>)
 80008b2:	f004 fbe9 	bl	8005088 <HAL_TIM_ConfigClockSource>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80008bc:	f000 faf2 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008c0:	4833      	ldr	r0, [pc, #204]	; (8000990 <MX_TIM1_Init+0x168>)
 80008c2:	f004 fa70 	bl	8004da6 <HAL_TIM_PWM_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80008cc:	f000 faea 	bl	8000ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d0:	2300      	movs	r3, #0
 80008d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008d4:	2300      	movs	r3, #0
 80008d6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008e0:	4619      	mov	r1, r3
 80008e2:	482b      	ldr	r0, [pc, #172]	; (8000990 <MX_TIM1_Init+0x168>)
 80008e4:	f005 f8a6 	bl	8005a34 <HAL_TIMEx_MasterConfigSynchronization>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80008ee:	f000 fad9 	bl	8000ea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f2:	2360      	movs	r3, #96	; 0x60
 80008f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008fa:	2300      	movs	r3, #0
 80008fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008fe:	2300      	movs	r3, #0
 8000900:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000906:	2300      	movs	r3, #0
 8000908:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800090a:	2300      	movs	r3, #0
 800090c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800090e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000912:	2204      	movs	r2, #4
 8000914:	4619      	mov	r1, r3
 8000916:	481e      	ldr	r0, [pc, #120]	; (8000990 <MX_TIM1_Init+0x168>)
 8000918:	f004 faa6 	bl	8004e68 <HAL_TIM_PWM_ConfigChannel>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000922:	f000 fabf 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000926:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800092a:	2208      	movs	r2, #8
 800092c:	4619      	mov	r1, r3
 800092e:	4818      	ldr	r0, [pc, #96]	; (8000990 <MX_TIM1_Init+0x168>)
 8000930:	f004 fa9a 	bl	8004e68 <HAL_TIM_PWM_ConfigChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800093a:	f000 fab3 	bl	8000ea4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000952:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000956:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000960:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	4619      	mov	r1, r3
 8000972:	4807      	ldr	r0, [pc, #28]	; (8000990 <MX_TIM1_Init+0x168>)
 8000974:	f005 f8e6 	bl	8005b44 <HAL_TIMEx_ConfigBreakDeadTime>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800097e:	f000 fa91 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000982:	4803      	ldr	r0, [pc, #12]	; (8000990 <MX_TIM1_Init+0x168>)
 8000984:	f000 fbca 	bl	800111c <HAL_TIM_MspPostInit>

}
 8000988:	bf00      	nop
 800098a:	3768      	adds	r7, #104	; 0x68
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	2400058c 	.word	0x2400058c
 8000994:	40010000 	.word	0x40010000

08000998 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08e      	sub	sp, #56	; 0x38
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b8:	463b      	mov	r3, r7
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]
 80009c6:	615a      	str	r2, [r3, #20]
 80009c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009ca:	4b2d      	ldr	r3, [pc, #180]	; (8000a80 <MX_TIM3_Init+0xe8>)
 80009cc:	4a2d      	ldr	r2, [pc, #180]	; (8000a84 <MX_TIM3_Init+0xec>)
 80009ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009d0:	4b2b      	ldr	r3, [pc, #172]	; (8000a80 <MX_TIM3_Init+0xe8>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d6:	4b2a      	ldr	r3, [pc, #168]	; (8000a80 <MX_TIM3_Init+0xe8>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009dc:	4b28      	ldr	r3, [pc, #160]	; (8000a80 <MX_TIM3_Init+0xe8>)
 80009de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e4:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <MX_TIM3_Init+0xe8>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ea:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <MX_TIM3_Init+0xe8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009f0:	4823      	ldr	r0, [pc, #140]	; (8000a80 <MX_TIM3_Init+0xe8>)
 80009f2:	f004 f981 	bl	8004cf8 <HAL_TIM_Base_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80009fc:	f000 fa52 	bl	8000ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	481c      	ldr	r0, [pc, #112]	; (8000a80 <MX_TIM3_Init+0xe8>)
 8000a0e:	f004 fb3b 	bl	8005088 <HAL_TIM_ConfigClockSource>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000a18:	f000 fa44 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a1c:	4818      	ldr	r0, [pc, #96]	; (8000a80 <MX_TIM3_Init+0xe8>)
 8000a1e:	f004 f9c2 	bl	8004da6 <HAL_TIM_PWM_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000a28:	f000 fa3c 	bl	8000ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4811      	ldr	r0, [pc, #68]	; (8000a80 <MX_TIM3_Init+0xe8>)
 8000a3c:	f004 fffa 	bl	8005a34 <HAL_TIMEx_MasterConfigSynchronization>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000a46:	f000 fa2d 	bl	8000ea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a4a:	2360      	movs	r3, #96	; 0x60
 8000a4c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4807      	ldr	r0, [pc, #28]	; (8000a80 <MX_TIM3_Init+0xe8>)
 8000a62:	f004 fa01 	bl	8004e68 <HAL_TIM_PWM_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000a6c:	f000 fa1a 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a70:	4803      	ldr	r0, [pc, #12]	; (8000a80 <MX_TIM3_Init+0xe8>)
 8000a72:	f000 fb53 	bl	800111c <HAL_TIM_MspPostInit>

}
 8000a76:	bf00      	nop
 8000a78:	3738      	adds	r7, #56	; 0x38
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	24000540 	.word	0x24000540
 8000a84:	40000400 	.word	0x40000400

08000a88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08e      	sub	sp, #56	; 0x38
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]
 8000ab6:	615a      	str	r2, [r3, #20]
 8000ab8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000aba:	4b32      	ldr	r3, [pc, #200]	; (8000b84 <MX_TIM4_Init+0xfc>)
 8000abc:	4a32      	ldr	r2, [pc, #200]	; (8000b88 <MX_TIM4_Init+0x100>)
 8000abe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ac0:	4b30      	ldr	r3, [pc, #192]	; (8000b84 <MX_TIM4_Init+0xfc>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac6:	4b2f      	ldr	r3, [pc, #188]	; (8000b84 <MX_TIM4_Init+0xfc>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000acc:	4b2d      	ldr	r3, [pc, #180]	; (8000b84 <MX_TIM4_Init+0xfc>)
 8000ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ad2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad4:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <MX_TIM4_Init+0xfc>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ada:	4b2a      	ldr	r3, [pc, #168]	; (8000b84 <MX_TIM4_Init+0xfc>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ae0:	4828      	ldr	r0, [pc, #160]	; (8000b84 <MX_TIM4_Init+0xfc>)
 8000ae2:	f004 f909 	bl	8004cf8 <HAL_TIM_Base_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000aec:	f000 f9da 	bl	8000ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000af6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000afa:	4619      	mov	r1, r3
 8000afc:	4821      	ldr	r0, [pc, #132]	; (8000b84 <MX_TIM4_Init+0xfc>)
 8000afe:	f004 fac3 	bl	8005088 <HAL_TIM_ConfigClockSource>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000b08:	f000 f9cc 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b0c:	481d      	ldr	r0, [pc, #116]	; (8000b84 <MX_TIM4_Init+0xfc>)
 8000b0e:	f004 f94a 	bl	8004da6 <HAL_TIM_PWM_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000b18:	f000 f9c4 	bl	8000ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4816      	ldr	r0, [pc, #88]	; (8000b84 <MX_TIM4_Init+0xfc>)
 8000b2c:	f004 ff82 	bl	8005a34 <HAL_TIMEx_MasterConfigSynchronization>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000b36:	f000 f9b5 	bl	8000ea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b3a:	2360      	movs	r3, #96	; 0x60
 8000b3c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	2204      	movs	r2, #4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	480c      	ldr	r0, [pc, #48]	; (8000b84 <MX_TIM4_Init+0xfc>)
 8000b52:	f004 f989 	bl	8004e68 <HAL_TIM_PWM_ConfigChannel>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000b5c:	f000 f9a2 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b60:	463b      	mov	r3, r7
 8000b62:	220c      	movs	r2, #12
 8000b64:	4619      	mov	r1, r3
 8000b66:	4807      	ldr	r0, [pc, #28]	; (8000b84 <MX_TIM4_Init+0xfc>)
 8000b68:	f004 f97e 	bl	8004e68 <HAL_TIM_PWM_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000b72:	f000 f997 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b76:	4803      	ldr	r0, [pc, #12]	; (8000b84 <MX_TIM4_Init+0xfc>)
 8000b78:	f000 fad0 	bl	800111c <HAL_TIM_MspPostInit>

}
 8000b7c:	bf00      	nop
 8000b7e:	3738      	adds	r7, #56	; 0x38
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	240000ec 	.word	0x240000ec
 8000b88:	40000800 	.word	0x40000800

08000b8c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b90:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <MX_UART4_Init+0x90>)
 8000b92:	4a23      	ldr	r2, [pc, #140]	; (8000c20 <MX_UART4_Init+0x94>)
 8000b94:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b96:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <MX_UART4_Init+0x90>)
 8000b98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b9c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <MX_UART4_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <MX_UART4_Init+0x90>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <MX_UART4_Init+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <MX_UART4_Init+0x90>)
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <MX_UART4_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bbc:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <MX_UART4_Init+0x90>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <MX_UART4_Init+0x90>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_UART4_Init+0x90>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <MX_UART4_Init+0x90>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000bd4:	4811      	ldr	r0, [pc, #68]	; (8000c1c <MX_UART4_Init+0x90>)
 8000bd6:	f005 f833 	bl	8005c40 <HAL_UART_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000be0:	f000 f960 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be4:	2100      	movs	r1, #0
 8000be6:	480d      	ldr	r0, [pc, #52]	; (8000c1c <MX_UART4_Init+0x90>)
 8000be8:	f005 ffcd 	bl	8006b86 <HAL_UARTEx_SetTxFifoThreshold>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000bf2:	f000 f957 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4808      	ldr	r0, [pc, #32]	; (8000c1c <MX_UART4_Init+0x90>)
 8000bfa:	f006 f802 	bl	8006c02 <HAL_UARTEx_SetRxFifoThreshold>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000c04:	f000 f94e 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000c08:	4804      	ldr	r0, [pc, #16]	; (8000c1c <MX_UART4_Init+0x90>)
 8000c0a:	f005 ff83 	bl	8006b14 <HAL_UARTEx_DisableFifoMode>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000c14:	f000 f946 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	240005d8 	.word	0x240005d8
 8000c20:	40004c00 	.word	0x40004c00

08000c24 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c28:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c2a:	4a16      	ldr	r2, [pc, #88]	; (8000c84 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000c2e:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c30:	2209      	movs	r2, #9
 8000c32:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c36:	2202      	movs	r2, #2
 8000c38:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c42:	2202      	movs	r2, #2
 8000c44:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c6c:	f001 fc1d 	bl	80024aa <HAL_PCD_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000c76:	f000 f915 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	24000138 	.word	0x24000138
 8000c84:	40080000 	.word	0x40080000

08000c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08c      	sub	sp, #48	; 0x30
 8000c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c9e:	4b79      	ldr	r3, [pc, #484]	; (8000e84 <MX_GPIO_Init+0x1fc>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	4a77      	ldr	r2, [pc, #476]	; (8000e84 <MX_GPIO_Init+0x1fc>)
 8000ca6:	f043 0310 	orr.w	r3, r3, #16
 8000caa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cae:	4b75      	ldr	r3, [pc, #468]	; (8000e84 <MX_GPIO_Init+0x1fc>)
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb4:	f003 0310 	and.w	r3, r3, #16
 8000cb8:	61bb      	str	r3, [r7, #24]
 8000cba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbc:	4b71      	ldr	r3, [pc, #452]	; (8000e84 <MX_GPIO_Init+0x1fc>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	4a70      	ldr	r2, [pc, #448]	; (8000e84 <MX_GPIO_Init+0x1fc>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ccc:	4b6d      	ldr	r3, [pc, #436]	; (8000e84 <MX_GPIO_Init+0x1fc>)
 8000cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd2:	f003 0304 	and.w	r3, r3, #4
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cda:	4b6a      	ldr	r3, [pc, #424]	; (8000e84 <MX_GPIO_Init+0x1fc>)
 8000cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce0:	4a68      	ldr	r2, [pc, #416]	; (8000e84 <MX_GPIO_Init+0x1fc>)
 8000ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cea:	4b66      	ldr	r3, [pc, #408]	; (8000e84 <MX_GPIO_Init+0x1fc>)
 8000cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf8:	4b62      	ldr	r3, [pc, #392]	; (8000e84 <MX_GPIO_Init+0x1fc>)
 8000cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfe:	4a61      	ldr	r2, [pc, #388]	; (8000e84 <MX_GPIO_Init+0x1fc>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d08:	4b5e      	ldr	r3, [pc, #376]	; (8000e84 <MX_GPIO_Init+0x1fc>)
 8000d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	4b5b      	ldr	r3, [pc, #364]	; (8000e84 <MX_GPIO_Init+0x1fc>)
 8000d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1c:	4a59      	ldr	r2, [pc, #356]	; (8000e84 <MX_GPIO_Init+0x1fc>)
 8000d1e:	f043 0302 	orr.w	r3, r3, #2
 8000d22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d26:	4b57      	ldr	r3, [pc, #348]	; (8000e84 <MX_GPIO_Init+0x1fc>)
 8000d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d34:	4b53      	ldr	r3, [pc, #332]	; (8000e84 <MX_GPIO_Init+0x1fc>)
 8000d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3a:	4a52      	ldr	r2, [pc, #328]	; (8000e84 <MX_GPIO_Init+0x1fc>)
 8000d3c:	f043 0308 	orr.w	r3, r3, #8
 8000d40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d44:	4b4f      	ldr	r3, [pc, #316]	; (8000e84 <MX_GPIO_Init+0x1fc>)
 8000d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4a:	f003 0308 	and.w	r3, r3, #8
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d52:	4b4c      	ldr	r3, [pc, #304]	; (8000e84 <MX_GPIO_Init+0x1fc>)
 8000d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d58:	4a4a      	ldr	r2, [pc, #296]	; (8000e84 <MX_GPIO_Init+0x1fc>)
 8000d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d62:	4b48      	ldr	r3, [pc, #288]	; (8000e84 <MX_GPIO_Init+0x1fc>)
 8000d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_5_GPIO_Port, DIR_5_Pin, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2140      	movs	r1, #64	; 0x40
 8000d74:	4844      	ldr	r0, [pc, #272]	; (8000e88 <MX_GPIO_Init+0x200>)
 8000d76:	f001 fb7f 	bl	8002478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|DIR_1_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f244 0141 	movw	r1, #16449	; 0x4041
 8000d80:	4842      	ldr	r0, [pc, #264]	; (8000e8c <MX_GPIO_Init+0x204>)
 8000d82:	f001 fb79 	bl	8002478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_3_Pin|DIR_2_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f244 2102 	movw	r1, #16898	; 0x4202
 8000d8c:	4840      	ldr	r0, [pc, #256]	; (8000e90 <MX_GPIO_Init+0x208>)
 8000d8e:	f001 fb73 	bl	8002478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|DIR_4_Pin, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 8000d98:	483e      	ldr	r0, [pc, #248]	; (8000e94 <MX_GPIO_Init+0x20c>)
 8000d9a:	f001 fb6d 	bl	8002478 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LM4_Pin LM3_Pin LM5_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin|LM5_Pin;
 8000d9e:	f249 0340 	movw	r3, #36928	; 0x9040
 8000da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	4619      	mov	r1, r3
 8000db2:	4837      	ldr	r0, [pc, #220]	; (8000e90 <MX_GPIO_Init+0x208>)
 8000db4:	f001 f9b0 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000db8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4832      	ldr	r0, [pc, #200]	; (8000e98 <MX_GPIO_Init+0x210>)
 8000dce:	f001 f9a3 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_5_Pin */
  GPIO_InitStruct.Pin = DIR_5_Pin;
 8000dd2:	2340      	movs	r3, #64	; 0x40
 8000dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DIR_5_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	4619      	mov	r1, r3
 8000de8:	4827      	ldr	r0, [pc, #156]	; (8000e88 <MX_GPIO_Init+0x200>)
 8000dea:	f001 f995 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin DIR_1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|DIR_1_Pin;
 8000dee:	f244 0341 	movw	r3, #16449	; 0x4041
 8000df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e00:	f107 031c 	add.w	r3, r7, #28
 8000e04:	4619      	mov	r1, r3
 8000e06:	4821      	ldr	r0, [pc, #132]	; (8000e8c <MX_GPIO_Init+0x204>)
 8000e08:	f001 f986 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_3_Pin DIR_2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_3_Pin|DIR_2_Pin|LD2_Pin;
 8000e0c:	f244 2302 	movw	r3, #16898	; 0x4202
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	4619      	mov	r1, r3
 8000e24:	481a      	ldr	r0, [pc, #104]	; (8000e90 <MX_GPIO_Init+0x208>)
 8000e26:	f001 f977 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM1_Pin LM2_Pin */
  GPIO_InitStruct.Pin = LM1_Pin|LM2_Pin;
 8000e2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4813      	ldr	r0, [pc, #76]	; (8000e8c <MX_GPIO_Init+0x204>)
 8000e40:	f001 f96a 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin DIR_4_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|DIR_4_Pin;
 8000e44:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	480d      	ldr	r0, [pc, #52]	; (8000e94 <MX_GPIO_Init+0x20c>)
 8000e5e:	f001 f95b 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000e62:	2380      	movs	r3, #128	; 0x80
 8000e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e66:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <MX_GPIO_Init+0x214>)
 8000e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	4619      	mov	r1, r3
 8000e74:	480a      	ldr	r0, [pc, #40]	; (8000ea0 <MX_GPIO_Init+0x218>)
 8000e76:	f001 f94f 	bl	8002118 <HAL_GPIO_Init>

}
 8000e7a:	bf00      	nop
 8000e7c:	3730      	adds	r7, #48	; 0x30
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	58024400 	.word	0x58024400
 8000e88:	58020000 	.word	0x58020000
 8000e8c:	58020400 	.word	0x58020400
 8000e90:	58021000 	.word	0x58021000
 8000e94:	58020c00 	.word	0x58020c00
 8000e98:	58020800 	.word	0x58020800
 8000e9c:	11110000 	.word	0x11110000
 8000ea0:	58021800 	.word	0x58021800

08000ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <Error_Handler+0x6>

08000eac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_MspInit+0x30>)
 8000eb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000eb8:	4a08      	ldr	r2, [pc, #32]	; (8000edc <HAL_MspInit+0x30>)
 8000eba:	f043 0302 	orr.w	r3, r3, #2
 8000ebe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_MspInit+0x30>)
 8000ec4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	58024400 	.word	0x58024400

08000ee0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08e      	sub	sp, #56	; 0x38
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a59      	ldr	r2, [pc, #356]	; (8001064 <HAL_ETH_MspInit+0x184>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	f040 80ab 	bne.w	800105a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f04:	4b58      	ldr	r3, [pc, #352]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f0a:	4a57      	ldr	r2, [pc, #348]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f10:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f14:	4b54      	ldr	r3, [pc, #336]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f1e:	623b      	str	r3, [r7, #32]
 8000f20:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f22:	4b51      	ldr	r3, [pc, #324]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f28:	4a4f      	ldr	r2, [pc, #316]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f2e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f32:	4b4d      	ldr	r3, [pc, #308]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f3c:	61fb      	str	r3, [r7, #28]
 8000f3e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000f40:	4b49      	ldr	r3, [pc, #292]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f46:	4a48      	ldr	r2, [pc, #288]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f4c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f50:	4b45      	ldr	r3, [pc, #276]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	61bb      	str	r3, [r7, #24]
 8000f5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5e:	4b42      	ldr	r3, [pc, #264]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f64:	4a40      	ldr	r2, [pc, #256]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f66:	f043 0304 	orr.w	r3, r3, #4
 8000f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f6e:	4b3e      	ldr	r3, [pc, #248]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	617b      	str	r3, [r7, #20]
 8000f7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7c:	4b3a      	ldr	r3, [pc, #232]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f82:	4a39      	ldr	r2, [pc, #228]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f8c:	4b36      	ldr	r3, [pc, #216]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	4b33      	ldr	r3, [pc, #204]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa0:	4a31      	ldr	r2, [pc, #196]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000fa2:	f043 0302 	orr.w	r3, r3, #2
 8000fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000faa:	4b2f      	ldr	r3, [pc, #188]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fb8:	4b2b      	ldr	r3, [pc, #172]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbe:	4a2a      	ldr	r2, [pc, #168]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc8:	4b27      	ldr	r3, [pc, #156]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000fd6:	2332      	movs	r3, #50	; 0x32
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fe6:	230b      	movs	r3, #11
 8000fe8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fee:	4619      	mov	r1, r3
 8000ff0:	481e      	ldr	r0, [pc, #120]	; (800106c <HAL_ETH_MspInit+0x18c>)
 8000ff2:	f001 f891 	bl	8002118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000ff6:	2386      	movs	r3, #134	; 0x86
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001006:	230b      	movs	r3, #11
 8001008:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100e:	4619      	mov	r1, r3
 8001010:	4817      	ldr	r0, [pc, #92]	; (8001070 <HAL_ETH_MspInit+0x190>)
 8001012:	f001 f881 	bl	8002118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001016:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001028:	230b      	movs	r3, #11
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	4619      	mov	r1, r3
 8001032:	4810      	ldr	r0, [pc, #64]	; (8001074 <HAL_ETH_MspInit+0x194>)
 8001034:	f001 f870 	bl	8002118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001038:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800104a:	230b      	movs	r3, #11
 800104c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	4619      	mov	r1, r3
 8001054:	4808      	ldr	r0, [pc, #32]	; (8001078 <HAL_ETH_MspInit+0x198>)
 8001056:	f001 f85f 	bl	8002118 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800105a:	bf00      	nop
 800105c:	3738      	adds	r7, #56	; 0x38
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40028000 	.word	0x40028000
 8001068:	58024400 	.word	0x58024400
 800106c:	58020800 	.word	0x58020800
 8001070:	58020000 	.word	0x58020000
 8001074:	58020400 	.word	0x58020400
 8001078:	58021800 	.word	0x58021800

0800107c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800107c:	b480      	push	{r7}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a20      	ldr	r2, [pc, #128]	; (800110c <HAL_TIM_Base_MspInit+0x90>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d10f      	bne.n	80010ae <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800108e:	4b20      	ldr	r3, [pc, #128]	; (8001110 <HAL_TIM_Base_MspInit+0x94>)
 8001090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001094:	4a1e      	ldr	r2, [pc, #120]	; (8001110 <HAL_TIM_Base_MspInit+0x94>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800109e:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <HAL_TIM_Base_MspInit+0x94>)
 80010a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80010ac:	e028      	b.n	8001100 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM3)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a18      	ldr	r2, [pc, #96]	; (8001114 <HAL_TIM_Base_MspInit+0x98>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d10f      	bne.n	80010d8 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <HAL_TIM_Base_MspInit+0x94>)
 80010ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010be:	4a14      	ldr	r2, [pc, #80]	; (8001110 <HAL_TIM_Base_MspInit+0x94>)
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <HAL_TIM_Base_MspInit+0x94>)
 80010ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
}
 80010d6:	e013      	b.n	8001100 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM4)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <HAL_TIM_Base_MspInit+0x9c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d10e      	bne.n	8001100 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <HAL_TIM_Base_MspInit+0x94>)
 80010e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010e8:	4a09      	ldr	r2, [pc, #36]	; (8001110 <HAL_TIM_Base_MspInit+0x94>)
 80010ea:	f043 0304 	orr.w	r3, r3, #4
 80010ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <HAL_TIM_Base_MspInit+0x94>)
 80010f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010f8:	f003 0304 	and.w	r3, r3, #4
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]
}
 8001100:	bf00      	nop
 8001102:	371c      	adds	r7, #28
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	40010000 	.word	0x40010000
 8001110:	58024400 	.word	0x58024400
 8001114:	40000400 	.word	0x40000400
 8001118:	40000800 	.word	0x40000800

0800111c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	; 0x30
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a48      	ldr	r2, [pc, #288]	; (800125c <HAL_TIM_MspPostInit+0x140>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d120      	bne.n	8001180 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800113e:	4b48      	ldr	r3, [pc, #288]	; (8001260 <HAL_TIM_MspPostInit+0x144>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001144:	4a46      	ldr	r2, [pc, #280]	; (8001260 <HAL_TIM_MspPostInit+0x144>)
 8001146:	f043 0310 	orr.w	r3, r3, #16
 800114a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800114e:	4b44      	ldr	r3, [pc, #272]	; (8001260 <HAL_TIM_MspPostInit+0x144>)
 8001150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001154:	f003 0310 	and.w	r3, r3, #16
 8001158:	61bb      	str	r3, [r7, #24]
 800115a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PUL_3_Pin|PUL_2_Pin;
 800115c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2300      	movs	r3, #0
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800116e:	2301      	movs	r3, #1
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	4619      	mov	r1, r3
 8001178:	483a      	ldr	r0, [pc, #232]	; (8001264 <HAL_TIM_MspPostInit+0x148>)
 800117a:	f000 ffcd 	bl	8002118 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800117e:	e068      	b.n	8001252 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM3)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a38      	ldr	r2, [pc, #224]	; (8001268 <HAL_TIM_MspPostInit+0x14c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d11f      	bne.n	80011ca <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118a:	4b35      	ldr	r3, [pc, #212]	; (8001260 <HAL_TIM_MspPostInit+0x144>)
 800118c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001190:	4a33      	ldr	r2, [pc, #204]	; (8001260 <HAL_TIM_MspPostInit+0x144>)
 8001192:	f043 0302 	orr.w	r3, r3, #2
 8001196:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800119a:	4b31      	ldr	r3, [pc, #196]	; (8001260 <HAL_TIM_MspPostInit+0x144>)
 800119c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PUL_5_Pin;
 80011a8:	2320      	movs	r3, #32
 80011aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011b8:	2302      	movs	r3, #2
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PUL_5_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 031c 	add.w	r3, r7, #28
 80011c0:	4619      	mov	r1, r3
 80011c2:	482a      	ldr	r0, [pc, #168]	; (800126c <HAL_TIM_MspPostInit+0x150>)
 80011c4:	f000 ffa8 	bl	8002118 <HAL_GPIO_Init>
}
 80011c8:	e043      	b.n	8001252 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a28      	ldr	r2, [pc, #160]	; (8001270 <HAL_TIM_MspPostInit+0x154>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d13e      	bne.n	8001252 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d4:	4b22      	ldr	r3, [pc, #136]	; (8001260 <HAL_TIM_MspPostInit+0x144>)
 80011d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011da:	4a21      	ldr	r2, [pc, #132]	; (8001260 <HAL_TIM_MspPostInit+0x144>)
 80011dc:	f043 0308 	orr.w	r3, r3, #8
 80011e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e4:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <HAL_TIM_MspPostInit+0x144>)
 80011e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <HAL_TIM_MspPostInit+0x144>)
 80011f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f8:	4a19      	ldr	r2, [pc, #100]	; (8001260 <HAL_TIM_MspPostInit+0x144>)
 80011fa:	f043 0302 	orr.w	r3, r3, #2
 80011fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <HAL_TIM_MspPostInit+0x144>)
 8001204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PUL_4_Pin;
 8001210:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001222:	2302      	movs	r3, #2
 8001224:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PUL_4_GPIO_Port, &GPIO_InitStruct);
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	4619      	mov	r1, r3
 800122c:	4811      	ldr	r0, [pc, #68]	; (8001274 <HAL_TIM_MspPostInit+0x158>)
 800122e:	f000 ff73 	bl	8002118 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PUL_1_Pin;
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001242:	2302      	movs	r3, #2
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PUL_1_GPIO_Port, &GPIO_InitStruct);
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4619      	mov	r1, r3
 800124c:	4807      	ldr	r0, [pc, #28]	; (800126c <HAL_TIM_MspPostInit+0x150>)
 800124e:	f000 ff63 	bl	8002118 <HAL_GPIO_Init>
}
 8001252:	bf00      	nop
 8001254:	3730      	adds	r7, #48	; 0x30
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40010000 	.word	0x40010000
 8001260:	58024400 	.word	0x58024400
 8001264:	58021000 	.word	0x58021000
 8001268:	40000400 	.word	0x40000400
 800126c:	58020400 	.word	0x58020400
 8001270:	40000800 	.word	0x40000800
 8001274:	58020c00 	.word	0x58020c00

08001278 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a1a      	ldr	r2, [pc, #104]	; (8001300 <HAL_UART_MspInit+0x88>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d12d      	bne.n	80012f6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <HAL_UART_MspInit+0x8c>)
 800129c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012a0:	4a18      	ldr	r2, [pc, #96]	; (8001304 <HAL_UART_MspInit+0x8c>)
 80012a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <HAL_UART_MspInit+0x8c>)
 80012ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_UART_MspInit+0x8c>)
 80012ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012be:	4a11      	ldr	r2, [pc, #68]	; (8001304 <HAL_UART_MspInit+0x8c>)
 80012c0:	f043 0308 	orr.w	r3, r3, #8
 80012c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <HAL_UART_MspInit+0x8c>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = STLINK_RX1_Pin|STLINK_TX1_Pin;
 80012d6:	2303      	movs	r3, #3
 80012d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80012e6:	2308      	movs	r3, #8
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	4805      	ldr	r0, [pc, #20]	; (8001308 <HAL_UART_MspInit+0x90>)
 80012f2:	f000 ff11 	bl	8002118 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80012f6:	bf00      	nop
 80012f8:	3728      	adds	r7, #40	; 0x28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40004c00 	.word	0x40004c00
 8001304:	58024400 	.word	0x58024400
 8001308:	58020c00 	.word	0x58020c00

0800130c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a21      	ldr	r2, [pc, #132]	; (80013b0 <HAL_PCD_MspInit+0xa4>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d13b      	bne.n	80013a6 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <HAL_PCD_MspInit+0xa8>)
 8001330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001334:	4a1f      	ldr	r2, [pc, #124]	; (80013b4 <HAL_PCD_MspInit+0xa8>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800133e:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <HAL_PCD_MspInit+0xa8>)
 8001340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800134c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800135e:	230a      	movs	r3, #10
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	4813      	ldr	r0, [pc, #76]	; (80013b8 <HAL_PCD_MspInit+0xac>)
 800136a:	f000 fed5 	bl	8002118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800136e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001374:	2300      	movs	r3, #0
 8001376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	480d      	ldr	r0, [pc, #52]	; (80013b8 <HAL_PCD_MspInit+0xac>)
 8001384:	f000 fec8 	bl	8002118 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001388:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_PCD_MspInit+0xa8>)
 800138a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800138e:	4a09      	ldr	r2, [pc, #36]	; (80013b4 <HAL_PCD_MspInit+0xa8>)
 8001390:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001394:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_PCD_MspInit+0xa8>)
 800139a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800139e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013a6:	bf00      	nop
 80013a8:	3728      	adds	r7, #40	; 0x28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40080000 	.word	0x40080000
 80013b4:	58024400 	.word	0x58024400
 80013b8:	58020000 	.word	0x58020000

080013bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <NMI_Handler+0x4>

080013c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <HardFault_Handler+0x4>

080013c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <MemManage_Handler+0x4>

080013ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <BusFault_Handler+0x4>

080013d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <UsageFault_Handler+0x4>

080013da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001408:	f000 f92a 	bl	8001660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}

08001410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001414:	4b39      	ldr	r3, [pc, #228]	; (80014fc <SystemInit+0xec>)
 8001416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800141a:	4a38      	ldr	r2, [pc, #224]	; (80014fc <SystemInit+0xec>)
 800141c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001424:	4b36      	ldr	r3, [pc, #216]	; (8001500 <SystemInit+0xf0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 030f 	and.w	r3, r3, #15
 800142c:	2b06      	cmp	r3, #6
 800142e:	d807      	bhi.n	8001440 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001430:	4b33      	ldr	r3, [pc, #204]	; (8001500 <SystemInit+0xf0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f023 030f 	bic.w	r3, r3, #15
 8001438:	4a31      	ldr	r2, [pc, #196]	; (8001500 <SystemInit+0xf0>)
 800143a:	f043 0307 	orr.w	r3, r3, #7
 800143e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001440:	4b30      	ldr	r3, [pc, #192]	; (8001504 <SystemInit+0xf4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a2f      	ldr	r2, [pc, #188]	; (8001504 <SystemInit+0xf4>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800144c:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <SystemInit+0xf4>)
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001452:	4b2c      	ldr	r3, [pc, #176]	; (8001504 <SystemInit+0xf4>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	492b      	ldr	r1, [pc, #172]	; (8001504 <SystemInit+0xf4>)
 8001458:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <SystemInit+0xf8>)
 800145a:	4013      	ands	r3, r2
 800145c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800145e:	4b28      	ldr	r3, [pc, #160]	; (8001500 <SystemInit+0xf0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	2b07      	cmp	r3, #7
 8001468:	d907      	bls.n	800147a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800146a:	4b25      	ldr	r3, [pc, #148]	; (8001500 <SystemInit+0xf0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f023 030f 	bic.w	r3, r3, #15
 8001472:	4a23      	ldr	r2, [pc, #140]	; (8001500 <SystemInit+0xf0>)
 8001474:	f043 0307 	orr.w	r3, r3, #7
 8001478:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800147a:	4b22      	ldr	r3, [pc, #136]	; (8001504 <SystemInit+0xf4>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001480:	4b20      	ldr	r3, [pc, #128]	; (8001504 <SystemInit+0xf4>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001486:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <SystemInit+0xf4>)
 8001488:	2200      	movs	r2, #0
 800148a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800148c:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <SystemInit+0xf4>)
 800148e:	4a1f      	ldr	r2, [pc, #124]	; (800150c <SystemInit+0xfc>)
 8001490:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <SystemInit+0xf4>)
 8001494:	4a1e      	ldr	r2, [pc, #120]	; (8001510 <SystemInit+0x100>)
 8001496:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001498:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <SystemInit+0xf4>)
 800149a:	4a1e      	ldr	r2, [pc, #120]	; (8001514 <SystemInit+0x104>)
 800149c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800149e:	4b19      	ldr	r3, [pc, #100]	; (8001504 <SystemInit+0xf4>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014a4:	4b17      	ldr	r3, [pc, #92]	; (8001504 <SystemInit+0xf4>)
 80014a6:	4a1b      	ldr	r2, [pc, #108]	; (8001514 <SystemInit+0x104>)
 80014a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <SystemInit+0xf4>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <SystemInit+0xf4>)
 80014b2:	4a18      	ldr	r2, [pc, #96]	; (8001514 <SystemInit+0x104>)
 80014b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <SystemInit+0xf4>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <SystemInit+0xf4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a10      	ldr	r2, [pc, #64]	; (8001504 <SystemInit+0xf4>)
 80014c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <SystemInit+0xf4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80014ce:	4b12      	ldr	r3, [pc, #72]	; (8001518 <SystemInit+0x108>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <SystemInit+0x10c>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014da:	d202      	bcs.n	80014e2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014dc:	4b10      	ldr	r3, [pc, #64]	; (8001520 <SystemInit+0x110>)
 80014de:	2201      	movs	r2, #1
 80014e0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <SystemInit+0x114>)
 80014e4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80014e8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014ea:	4b04      	ldr	r3, [pc, #16]	; (80014fc <SystemInit+0xec>)
 80014ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014f0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000ed00 	.word	0xe000ed00
 8001500:	52002000 	.word	0x52002000
 8001504:	58024400 	.word	0x58024400
 8001508:	eaf6ed7f 	.word	0xeaf6ed7f
 800150c:	02020200 	.word	0x02020200
 8001510:	01ff0000 	.word	0x01ff0000
 8001514:	01010280 	.word	0x01010280
 8001518:	5c001000 	.word	0x5c001000
 800151c:	ffff0000 	.word	0xffff0000
 8001520:	51008108 	.word	0x51008108
 8001524:	52004000 	.word	0x52004000

08001528 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001528:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001560 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800152c:	f7ff ff70 	bl	8001410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001530:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001532:	e003      	b.n	800153c <LoopCopyDataInit>

08001534 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001536:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001538:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800153a:	3104      	adds	r1, #4

0800153c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800153c:	480a      	ldr	r0, [pc, #40]	; (8001568 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001540:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001542:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001544:	d3f6      	bcc.n	8001534 <CopyDataInit>
  ldr  r2, =_sbss
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001548:	e002      	b.n	8001550 <LoopFillZerobss>

0800154a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800154a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800154c:	f842 3b04 	str.w	r3, [r2], #4

08001550 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001552:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001554:	d3f9      	bcc.n	800154a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001556:	f005 fea5 	bl	80072a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800155a:	f7ff f83d 	bl	80005d8 <main>
  bx  lr    
 800155e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001560:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001564:	0800735c 	.word	0x0800735c
  ldr  r0, =_sdata
 8001568:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800156c:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8001570:	240000d0 	.word	0x240000d0
  ldr  r3, = _ebss
 8001574:	2400070c 	.word	0x2400070c

08001578 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001578:	e7fe      	b.n	8001578 <ADC3_IRQHandler>
	...

0800157c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001582:	2003      	movs	r0, #3
 8001584:	f000 f980 	bl	8001888 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001588:	f001 fee8 	bl	800335c <HAL_RCC_GetSysClockFreq>
 800158c:	4601      	mov	r1, r0
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_Init+0x68>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	0a1b      	lsrs	r3, r3, #8
 8001594:	f003 030f 	and.w	r3, r3, #15
 8001598:	4a13      	ldr	r2, [pc, #76]	; (80015e8 <HAL_Init+0x6c>)
 800159a:	5cd3      	ldrb	r3, [r2, r3]
 800159c:	f003 031f 	and.w	r3, r3, #31
 80015a0:	fa21 f303 	lsr.w	r3, r1, r3
 80015a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <HAL_Init+0x68>)
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <HAL_Init+0x6c>)
 80015b0:	5cd3      	ldrb	r3, [r2, r3]
 80015b2:	f003 031f 	and.w	r3, r3, #31
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	fa22 f303 	lsr.w	r3, r2, r3
 80015bc:	4a0b      	ldr	r2, [pc, #44]	; (80015ec <HAL_Init+0x70>)
 80015be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015c0:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <HAL_Init+0x74>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015c6:	2000      	movs	r0, #0
 80015c8:	f000 f814 	bl	80015f4 <HAL_InitTick>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e002      	b.n	80015dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015d6:	f7ff fc69 	bl	8000eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	58024400 	.word	0x58024400
 80015e8:	08007324 	.word	0x08007324
 80015ec:	24000004 	.word	0x24000004
 80015f0:	24000000 	.word	0x24000000

080015f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <HAL_InitTick+0x60>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e021      	b.n	800164c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <HAL_InitTick+0x64>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <HAL_InitTick+0x60>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4619      	mov	r1, r3
 8001612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001616:	fbb3 f3f1 	udiv	r3, r3, r1
 800161a:	fbb2 f3f3 	udiv	r3, r2, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f000 f957 	bl	80018d2 <HAL_SYSTICK_Config>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e00e      	b.n	800164c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b0f      	cmp	r3, #15
 8001632:	d80a      	bhi.n	800164a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001634:	2200      	movs	r2, #0
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
 800163c:	f000 f92f 	bl	800189e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001640:	4a06      	ldr	r2, [pc, #24]	; (800165c <HAL_InitTick+0x68>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	e000      	b.n	800164c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
}
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	2400000c 	.word	0x2400000c
 8001658:	24000000 	.word	0x24000000
 800165c:	24000008 	.word	0x24000008

08001660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_IncTick+0x20>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_IncTick+0x24>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4413      	add	r3, r2
 8001670:	4a04      	ldr	r2, [pc, #16]	; (8001684 <HAL_IncTick+0x24>)
 8001672:	6013      	str	r3, [r2, #0]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	2400000c 	.word	0x2400000c
 8001684:	24000708 	.word	0x24000708

08001688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return uwTick;
 800168c:	4b03      	ldr	r3, [pc, #12]	; (800169c <HAL_GetTick+0x14>)
 800168e:	681b      	ldr	r3, [r3, #0]
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	24000708 	.word	0x24000708

080016a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a8:	f7ff ffee 	bl	8001688 <HAL_GetTick>
 80016ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b8:	d005      	beq.n	80016c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <HAL_Delay+0x40>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4413      	add	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016c6:	bf00      	nop
 80016c8:	f7ff ffde 	bl	8001688 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d8f7      	bhi.n	80016c8 <HAL_Delay+0x28>
  {
  }
}
 80016d8:	bf00      	nop
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	2400000c 	.word	0x2400000c

080016e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <HAL_GetREVID+0x14>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	0c1b      	lsrs	r3, r3, #16
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	5c001000 	.word	0x5c001000

080016fc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800170c:	4904      	ldr	r1, [pc, #16]	; (8001720 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4313      	orrs	r3, r2
 8001712:	604b      	str	r3, [r1, #4]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	58000400 	.word	0x58000400

08001724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <__NVIC_SetPriorityGrouping+0x40>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001740:	4013      	ands	r3, r2
 8001742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <__NVIC_SetPriorityGrouping+0x44>)
 800174e:	4313      	orrs	r3, r2
 8001750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001752:	4a04      	ldr	r2, [pc, #16]	; (8001764 <__NVIC_SetPriorityGrouping+0x40>)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	60d3      	str	r3, [r2, #12]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00
 8001768:	05fa0000 	.word	0x05fa0000

0800176c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <__NVIC_GetPriorityGrouping+0x18>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	0a1b      	lsrs	r3, r3, #8
 8001776:	f003 0307 	and.w	r3, r3, #7
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001794:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001798:	2b00      	cmp	r3, #0
 800179a:	db0a      	blt.n	80017b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	490c      	ldr	r1, [pc, #48]	; (80017d4 <__NVIC_SetPriority+0x4c>)
 80017a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017a6:	0112      	lsls	r2, r2, #4
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	440b      	add	r3, r1
 80017ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b0:	e00a      	b.n	80017c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4908      	ldr	r1, [pc, #32]	; (80017d8 <__NVIC_SetPriority+0x50>)
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	3b04      	subs	r3, #4
 80017c0:	0112      	lsls	r2, r2, #4
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	440b      	add	r3, r1
 80017c6:	761a      	strb	r2, [r3, #24]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000e100 	.word	0xe000e100
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b089      	sub	sp, #36	; 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f1c3 0307 	rsb	r3, r3, #7
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	bf28      	it	cs
 80017fa:	2304      	movcs	r3, #4
 80017fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3304      	adds	r3, #4
 8001802:	2b06      	cmp	r3, #6
 8001804:	d902      	bls.n	800180c <NVIC_EncodePriority+0x30>
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3b03      	subs	r3, #3
 800180a:	e000      	b.n	800180e <NVIC_EncodePriority+0x32>
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	f04f 32ff 	mov.w	r2, #4294967295
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43da      	mvns	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	401a      	ands	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001824:	f04f 31ff 	mov.w	r1, #4294967295
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	43d9      	mvns	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	4313      	orrs	r3, r2
         );
}
 8001836:	4618      	mov	r0, r3
 8001838:	3724      	adds	r7, #36	; 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001854:	d301      	bcc.n	800185a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001856:	2301      	movs	r3, #1
 8001858:	e00f      	b.n	800187a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <SysTick_Config+0x40>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3b01      	subs	r3, #1
 8001860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001862:	210f      	movs	r1, #15
 8001864:	f04f 30ff 	mov.w	r0, #4294967295
 8001868:	f7ff ff8e 	bl	8001788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <SysTick_Config+0x40>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001872:	4b04      	ldr	r3, [pc, #16]	; (8001884 <SysTick_Config+0x40>)
 8001874:	2207      	movs	r2, #7
 8001876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	e000e010 	.word	0xe000e010

08001888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff ff47 	bl	8001724 <__NVIC_SetPriorityGrouping>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b086      	sub	sp, #24
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	4603      	mov	r3, r0
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018ac:	f7ff ff5e 	bl	800176c <__NVIC_GetPriorityGrouping>
 80018b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	6978      	ldr	r0, [r7, #20]
 80018b8:	f7ff ff90 	bl	80017dc <NVIC_EncodePriority>
 80018bc:	4602      	mov	r2, r0
 80018be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff5f 	bl	8001788 <__NVIC_SetPriority>
}
 80018ca:	bf00      	nop
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ffb2 	bl	8001844 <SysTick_Config>
 80018e0:	4603      	mov	r3, r0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e0c6      	b.n	8001a8c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001902:	2b00      	cmp	r3, #0
 8001904:	d102      	bne.n	800190c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff faea 	bl	8000ee0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2223      	movs	r2, #35	; 0x23
 8001910:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001912:	4b60      	ldr	r3, [pc, #384]	; (8001a94 <HAL_ETH_Init+0x1a8>)
 8001914:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001918:	4a5e      	ldr	r2, [pc, #376]	; (8001a94 <HAL_ETH_Init+0x1a8>)
 800191a:	f043 0302 	orr.w	r3, r3, #2
 800191e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001922:	4b5c      	ldr	r3, [pc, #368]	; (8001a94 <HAL_ETH_Init+0x1a8>)
 8001924:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	7a1b      	ldrb	r3, [r3, #8]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d103      	bne.n	8001940 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001938:	2000      	movs	r0, #0
 800193a:	f7ff fedf 	bl	80016fc <HAL_SYSCFG_ETHInterfaceSelect>
 800193e:	e003      	b.n	8001948 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001940:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001944:	f7ff feda 	bl	80016fc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0201 	orr.w	r2, r2, #1
 800195a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800195e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001960:	f7ff fe92 	bl	8001688 <HAL_GetTick>
 8001964:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001966:	e00f      	b.n	8001988 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001968:	f7ff fe8e 	bl	8001688 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001976:	d907      	bls.n	8001988 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2204      	movs	r2, #4
 800197c:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	22e0      	movs	r2, #224	; 0xe0
 8001982:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e081      	b.n	8001a8c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1e6      	bne.n	8001968 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 fac0 	bl	8001f20 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80019a0:	f001 fe4e 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 80019a4:	4602      	mov	r2, r0
 80019a6:	4b3c      	ldr	r3, [pc, #240]	; (8001a98 <HAL_ETH_Init+0x1ac>)
 80019a8:	fba3 2302 	umull	r2, r3, r3, r2
 80019ac:	0c9a      	lsrs	r2, r3, #18
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	3a01      	subs	r2, #1
 80019b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 fa13 	bl	8001de4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80019d4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80019d8:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d007      	beq.n	80019f6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	22e0      	movs	r2, #224	; 0xe0
 80019f0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e04a      	b.n	8001a8c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	f241 1308 	movw	r3, #4360	; 0x1108
 80019fe:	4413      	add	r3, r2
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	4b26      	ldr	r3, [pc, #152]	; (8001a9c <HAL_ETH_Init+0x1b0>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6952      	ldr	r2, [r2, #20]
 8001a0a:	0052      	lsls	r2, r2, #1
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	6809      	ldr	r1, [r1, #0]
 8001a10:	431a      	orrs	r2, r3
 8001a12:	f241 1308 	movw	r3, #4360	; 0x1108
 8001a16:	440b      	add	r3, r1
 8001a18:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 fad8 	bl	8001fd0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 fb1c 	bl	800205e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	3305      	adds	r3, #5
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	021a      	lsls	r2, r3, #8
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	3304      	adds	r3, #4
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	3303      	adds	r3, #3
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	061a      	lsls	r2, r3, #24
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	3302      	adds	r3, #2
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	041b      	lsls	r3, r3, #16
 8001a58:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a64:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a72:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a74:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2210      	movs	r2, #16
 8001a82:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2210      	movs	r2, #16
 8001a88:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	58024400 	.word	0x58024400
 8001a98:	431bde83 	.word	0x431bde83
 8001a9c:	ffff8001 	.word	0xffff8001

08001aa0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001ab2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	791b      	ldrb	r3, [r3, #4]
 8001ab8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001aba:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	7b1b      	ldrb	r3, [r3, #12]
 8001ac0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001ac2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	7b5b      	ldrb	r3, [r3, #13]
 8001ac8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001aca:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	7b9b      	ldrb	r3, [r3, #14]
 8001ad0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001ad2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	7bdb      	ldrb	r3, [r3, #15]
 8001ad8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001ada:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	7c12      	ldrb	r2, [r2, #16]
 8001ae0:	2a00      	cmp	r2, #0
 8001ae2:	d102      	bne.n	8001aea <ETH_SetMACConfig+0x4a>
 8001ae4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ae8:	e000      	b.n	8001aec <ETH_SetMACConfig+0x4c>
 8001aea:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001aec:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	7c52      	ldrb	r2, [r2, #17]
 8001af2:	2a00      	cmp	r2, #0
 8001af4:	d102      	bne.n	8001afc <ETH_SetMACConfig+0x5c>
 8001af6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001afa:	e000      	b.n	8001afe <ETH_SetMACConfig+0x5e>
 8001afc:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001afe:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	7c9b      	ldrb	r3, [r3, #18]
 8001b04:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b06:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001b0c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001b12:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	7f1b      	ldrb	r3, [r3, #28]
 8001b18:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001b1a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	7f5b      	ldrb	r3, [r3, #29]
 8001b20:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001b22:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	7f92      	ldrb	r2, [r2, #30]
 8001b28:	2a00      	cmp	r2, #0
 8001b2a:	d102      	bne.n	8001b32 <ETH_SetMACConfig+0x92>
 8001b2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b30:	e000      	b.n	8001b34 <ETH_SetMACConfig+0x94>
 8001b32:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001b34:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	7fdb      	ldrb	r3, [r3, #31]
 8001b3a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001b3c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001b44:	2a00      	cmp	r2, #0
 8001b46:	d102      	bne.n	8001b4e <ETH_SetMACConfig+0xae>
 8001b48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b4c:	e000      	b.n	8001b50 <ETH_SetMACConfig+0xb0>
 8001b4e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001b50:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001b56:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b5e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001b60:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001b66:	4313      	orrs	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b56      	ldr	r3, [pc, #344]	; (8001ccc <ETH_SetMACConfig+0x22c>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	68f9      	ldr	r1, [r7, #12]
 8001b7a:	430b      	orrs	r3, r1
 8001b7c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b82:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b8a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001b8c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b94:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001b96:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001b9e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001ba0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001ba8:	2a00      	cmp	r2, #0
 8001baa:	d102      	bne.n	8001bb2 <ETH_SetMACConfig+0x112>
 8001bac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bb0:	e000      	b.n	8001bb4 <ETH_SetMACConfig+0x114>
 8001bb2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001bb4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	4b42      	ldr	r3, [pc, #264]	; (8001cd0 <ETH_SetMACConfig+0x230>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	68f9      	ldr	r1, [r7, #12]
 8001bce:	430b      	orrs	r3, r1
 8001bd0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bd8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001bde:	4313      	orrs	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	4b3a      	ldr	r3, [pc, #232]	; (8001cd4 <ETH_SetMACConfig+0x234>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	68f9      	ldr	r1, [r7, #12]
 8001bf2:	430b      	orrs	r3, r1
 8001bf4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001bfc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c02:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001c0a:	2a00      	cmp	r2, #0
 8001c0c:	d101      	bne.n	8001c12 <ETH_SetMACConfig+0x172>
 8001c0e:	2280      	movs	r2, #128	; 0x80
 8001c10:	e000      	b.n	8001c14 <ETH_SetMACConfig+0x174>
 8001c12:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001c14:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c26:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	68f9      	ldr	r1, [r7, #12]
 8001c32:	430b      	orrs	r3, r1
 8001c34:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001c3c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001c44:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c46:	4313      	orrs	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c52:	f023 0103 	bic.w	r1, r3, #3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001c6a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001c86:	2a00      	cmp	r2, #0
 8001c88:	d101      	bne.n	8001c8e <ETH_SetMACConfig+0x1ee>
 8001c8a:	2240      	movs	r2, #64	; 0x40
 8001c8c:	e000      	b.n	8001c90 <ETH_SetMACConfig+0x1f0>
 8001c8e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001c90:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001c98:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c9a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001ca2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001cb0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	00048083 	.word	0x00048083
 8001cd0:	c0f88000 	.word	0xc0f88000
 8001cd4:	fffffef0 	.word	0xfffffef0

08001cd8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b38      	ldr	r3, [pc, #224]	; (8001dd0 <ETH_SetDMAConfig+0xf8>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	6809      	ldr	r1, [r1, #0]
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001cfe:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	791b      	ldrb	r3, [r3, #4]
 8001d04:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d0a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	7b1b      	ldrb	r3, [r3, #12]
 8001d10:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d12:	4313      	orrs	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	f241 0304 	movw	r3, #4100	; 0x1004
 8001d1e:	4413      	add	r3, r2
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	4b2c      	ldr	r3, [pc, #176]	; (8001dd4 <ETH_SetDMAConfig+0xfc>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6811      	ldr	r1, [r2, #0]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	f241 0304 	movw	r3, #4100	; 0x1004
 8001d32:	440b      	add	r3, r1
 8001d34:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	7b5b      	ldrb	r3, [r3, #13]
 8001d3a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d40:	4313      	orrs	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	4b22      	ldr	r3, [pc, #136]	; (8001dd8 <ETH_SetDMAConfig+0x100>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6811      	ldr	r1, [r2, #0]
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001d5e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	7d1b      	ldrb	r3, [r3, #20]
 8001d68:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d6a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	7f5b      	ldrb	r3, [r3, #29]
 8001d70:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d72:	4313      	orrs	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	f241 1304 	movw	r3, #4356	; 0x1104
 8001d7e:	4413      	add	r3, r2
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <ETH_SetDMAConfig+0x104>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6811      	ldr	r1, [r2, #0]
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	f241 1304 	movw	r3, #4356	; 0x1104
 8001d92:	440b      	add	r3, r1
 8001d94:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	7f1b      	ldrb	r3, [r3, #28]
 8001d9a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001da0:	4313      	orrs	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	f241 1308 	movw	r3, #4360	; 0x1108
 8001dac:	4413      	add	r3, r2
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <ETH_SetDMAConfig+0x108>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6811      	ldr	r1, [r2, #0]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	f241 1308 	movw	r3, #4360	; 0x1108
 8001dc0:	440b      	add	r3, r1
 8001dc2:	601a      	str	r2, [r3, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	ffff87fd 	.word	0xffff87fd
 8001dd4:	ffff2ffe 	.word	0xffff2ffe
 8001dd8:	fffec000 	.word	0xfffec000
 8001ddc:	ffc0efef 	.word	0xffc0efef
 8001de0:	7fc0ffff 	.word	0x7fc0ffff

08001de4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b0a4      	sub	sp, #144	; 0x90
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001dec:	2301      	movs	r3, #1
 8001dee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001df2:	2300      	movs	r3, #0
 8001df4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001e02:	2301      	movs	r3, #1
 8001e04:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e24:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001e3c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001e40:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001e66:	2300      	movs	r3, #0
 8001e68:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001e76:	2301      	movs	r3, #1
 8001e78:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001e7c:	2320      	movs	r3, #32
 8001e7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001e82:	2301      	movs	r3, #1
 8001e84:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001e8e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e98:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ec8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ecc:	4619      	mov	r1, r3
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff fde6 	bl	8001aa0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001eee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ef2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ef8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001efc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001f04:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f0a:	f107 0308 	add.w	r3, r7, #8
 8001f0e:	4619      	mov	r1, r3
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff fee1 	bl	8001cd8 <ETH_SetDMAConfig>
}
 8001f16:	bf00      	nop
 8001f18:	3790      	adds	r7, #144	; 0x90
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f30:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001f3a:	f001 fb81 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 8001f3e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	4a1e      	ldr	r2, [pc, #120]	; (8001fbc <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d908      	bls.n	8001f5a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	4a1d      	ldr	r2, [pc, #116]	; (8001fc0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d804      	bhi.n	8001f5a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	e027      	b.n	8001faa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	4a18      	ldr	r2, [pc, #96]	; (8001fc0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d908      	bls.n	8001f74 <ETH_MAC_MDIO_ClkConfig+0x54>
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	4a17      	ldr	r2, [pc, #92]	; (8001fc4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d804      	bhi.n	8001f74 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	e01a      	b.n	8001faa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	4a13      	ldr	r2, [pc, #76]	; (8001fc4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d903      	bls.n	8001f84 <ETH_MAC_MDIO_ClkConfig+0x64>
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	4a12      	ldr	r2, [pc, #72]	; (8001fc8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d911      	bls.n	8001fa8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	4a10      	ldr	r2, [pc, #64]	; (8001fc8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d908      	bls.n	8001f9e <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	4a0f      	ldr	r2, [pc, #60]	; (8001fcc <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d804      	bhi.n	8001f9e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	e005      	b.n	8001faa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	e000      	b.n	8001faa <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001fa8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001fb4:	bf00      	nop
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	01312cff 	.word	0x01312cff
 8001fc0:	02160ebf 	.word	0x02160ebf
 8001fc4:	039386ff 	.word	0x039386ff
 8001fc8:	05f5e0ff 	.word	0x05f5e0ff
 8001fcc:	08f0d17f 	.word	0x08f0d17f

08001fd0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	e01d      	b.n	800201a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68d9      	ldr	r1, [r3, #12]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	440b      	add	r3, r1
 8001fee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2200      	movs	r2, #0
 8002006:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	3206      	adds	r2, #6
 8002010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	3301      	adds	r3, #1
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2b03      	cmp	r3, #3
 800201e:	d9de      	bls.n	8001fde <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	f241 132c 	movw	r3, #4396	; 0x112c
 800202e:	4413      	add	r3, r2
 8002030:	2203      	movs	r2, #3
 8002032:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68d9      	ldr	r1, [r3, #12]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	f241 1314 	movw	r3, #4372	; 0x1114
 8002040:	4413      	add	r3, r2
 8002042:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002050:	601a      	str	r2, [r3, #0]
}
 8002052:	bf00      	nop
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800205e:	b480      	push	{r7}
 8002060:	b085      	sub	sp, #20
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	e024      	b.n	80020b6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6919      	ldr	r1, [r3, #16]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4613      	mov	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	440b      	add	r3, r1
 800207c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2200      	movs	r2, #0
 8002088:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2200      	movs	r2, #0
 80020a0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	330a      	adds	r3, #10
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	3301      	adds	r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	d9d7      	bls.n	800206c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	f241 1330 	movw	r3, #4400	; 0x1130
 80020e2:	4413      	add	r3, r2
 80020e4:	2203      	movs	r2, #3
 80020e6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6919      	ldr	r1, [r3, #16]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	f241 131c 	movw	r3, #4380	; 0x111c
 80020f4:	4413      	add	r3, r2
 80020f6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	f241 1328 	movw	r3, #4392	; 0x1128
 8002108:	4413      	add	r3, r2
 800210a:	6019      	str	r1, [r3, #0]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	; 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002126:	4b89      	ldr	r3, [pc, #548]	; (800234c <HAL_GPIO_Init+0x234>)
 8002128:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800212a:	e194      	b.n	8002456 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	2101      	movs	r1, #1
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	4013      	ands	r3, r2
 800213a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 8186 	beq.w	8002450 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d00b      	beq.n	8002164 <HAL_GPIO_Init+0x4c>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b02      	cmp	r3, #2
 8002152:	d007      	beq.n	8002164 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002158:	2b11      	cmp	r3, #17
 800215a:	d003      	beq.n	8002164 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b12      	cmp	r3, #18
 8002162:	d130      	bne.n	80021c6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	2203      	movs	r2, #3
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800219a:	2201      	movs	r2, #1
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4013      	ands	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	091b      	lsrs	r3, r3, #4
 80021b0:	f003 0201 	and.w	r2, r3, #1
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	2203      	movs	r2, #3
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4013      	ands	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_Init+0xee>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b12      	cmp	r3, #18
 8002204:	d123      	bne.n	800224e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	08da      	lsrs	r2, r3, #3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3208      	adds	r2, #8
 800220e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	220f      	movs	r2, #15
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	08da      	lsrs	r2, r3, #3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3208      	adds	r2, #8
 8002248:	69b9      	ldr	r1, [r7, #24]
 800224a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	2203      	movs	r2, #3
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0203 	and.w	r2, r3, #3
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 80e0 	beq.w	8002450 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002290:	4b2f      	ldr	r3, [pc, #188]	; (8002350 <HAL_GPIO_Init+0x238>)
 8002292:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002296:	4a2e      	ldr	r2, [pc, #184]	; (8002350 <HAL_GPIO_Init+0x238>)
 8002298:	f043 0302 	orr.w	r3, r3, #2
 800229c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80022a0:	4b2b      	ldr	r3, [pc, #172]	; (8002350 <HAL_GPIO_Init+0x238>)
 80022a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ae:	4a29      	ldr	r2, [pc, #164]	; (8002354 <HAL_GPIO_Init+0x23c>)
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	089b      	lsrs	r3, r3, #2
 80022b4:	3302      	adds	r3, #2
 80022b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	220f      	movs	r2, #15
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a20      	ldr	r2, [pc, #128]	; (8002358 <HAL_GPIO_Init+0x240>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d052      	beq.n	8002380 <HAL_GPIO_Init+0x268>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a1f      	ldr	r2, [pc, #124]	; (800235c <HAL_GPIO_Init+0x244>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d031      	beq.n	8002346 <HAL_GPIO_Init+0x22e>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a1e      	ldr	r2, [pc, #120]	; (8002360 <HAL_GPIO_Init+0x248>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d02b      	beq.n	8002342 <HAL_GPIO_Init+0x22a>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a1d      	ldr	r2, [pc, #116]	; (8002364 <HAL_GPIO_Init+0x24c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d025      	beq.n	800233e <HAL_GPIO_Init+0x226>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a1c      	ldr	r2, [pc, #112]	; (8002368 <HAL_GPIO_Init+0x250>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d01f      	beq.n	800233a <HAL_GPIO_Init+0x222>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a1b      	ldr	r2, [pc, #108]	; (800236c <HAL_GPIO_Init+0x254>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d019      	beq.n	8002336 <HAL_GPIO_Init+0x21e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a1a      	ldr	r2, [pc, #104]	; (8002370 <HAL_GPIO_Init+0x258>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d013      	beq.n	8002332 <HAL_GPIO_Init+0x21a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a19      	ldr	r2, [pc, #100]	; (8002374 <HAL_GPIO_Init+0x25c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d00d      	beq.n	800232e <HAL_GPIO_Init+0x216>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a18      	ldr	r2, [pc, #96]	; (8002378 <HAL_GPIO_Init+0x260>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d007      	beq.n	800232a <HAL_GPIO_Init+0x212>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a17      	ldr	r2, [pc, #92]	; (800237c <HAL_GPIO_Init+0x264>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d101      	bne.n	8002326 <HAL_GPIO_Init+0x20e>
 8002322:	2309      	movs	r3, #9
 8002324:	e02d      	b.n	8002382 <HAL_GPIO_Init+0x26a>
 8002326:	230a      	movs	r3, #10
 8002328:	e02b      	b.n	8002382 <HAL_GPIO_Init+0x26a>
 800232a:	2308      	movs	r3, #8
 800232c:	e029      	b.n	8002382 <HAL_GPIO_Init+0x26a>
 800232e:	2307      	movs	r3, #7
 8002330:	e027      	b.n	8002382 <HAL_GPIO_Init+0x26a>
 8002332:	2306      	movs	r3, #6
 8002334:	e025      	b.n	8002382 <HAL_GPIO_Init+0x26a>
 8002336:	2305      	movs	r3, #5
 8002338:	e023      	b.n	8002382 <HAL_GPIO_Init+0x26a>
 800233a:	2304      	movs	r3, #4
 800233c:	e021      	b.n	8002382 <HAL_GPIO_Init+0x26a>
 800233e:	2303      	movs	r3, #3
 8002340:	e01f      	b.n	8002382 <HAL_GPIO_Init+0x26a>
 8002342:	2302      	movs	r3, #2
 8002344:	e01d      	b.n	8002382 <HAL_GPIO_Init+0x26a>
 8002346:	2301      	movs	r3, #1
 8002348:	e01b      	b.n	8002382 <HAL_GPIO_Init+0x26a>
 800234a:	bf00      	nop
 800234c:	58000080 	.word	0x58000080
 8002350:	58024400 	.word	0x58024400
 8002354:	58000400 	.word	0x58000400
 8002358:	58020000 	.word	0x58020000
 800235c:	58020400 	.word	0x58020400
 8002360:	58020800 	.word	0x58020800
 8002364:	58020c00 	.word	0x58020c00
 8002368:	58021000 	.word	0x58021000
 800236c:	58021400 	.word	0x58021400
 8002370:	58021800 	.word	0x58021800
 8002374:	58021c00 	.word	0x58021c00
 8002378:	58022000 	.word	0x58022000
 800237c:	58022400 	.word	0x58022400
 8002380:	2300      	movs	r3, #0
 8002382:	69fa      	ldr	r2, [r7, #28]
 8002384:	f002 0203 	and.w	r2, r2, #3
 8002388:	0092      	lsls	r2, r2, #2
 800238a:	4093      	lsls	r3, r2
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002392:	4938      	ldr	r1, [pc, #224]	; (8002474 <HAL_GPIO_Init+0x35c>)
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	089b      	lsrs	r3, r3, #2
 8002398:	3302      	adds	r3, #2
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	43db      	mvns	r3, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4013      	ands	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	43db      	mvns	r3, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800241a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002448:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	3301      	adds	r3, #1
 8002454:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	fa22 f303 	lsr.w	r3, r2, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	f47f ae63 	bne.w	800212c <HAL_GPIO_Init+0x14>
  }
}
 8002466:	bf00      	nop
 8002468:	3724      	adds	r7, #36	; 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	58000400 	.word	0x58000400

08002478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	807b      	strh	r3, [r7, #2]
 8002484:	4613      	mov	r3, r2
 8002486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002488:	787b      	ldrb	r3, [r7, #1]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800248e:	887a      	ldrh	r2, [r7, #2]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002494:	e003      	b.n	800249e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002496:	887b      	ldrh	r3, [r7, #2]
 8002498:	041a      	lsls	r2, r3, #16
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	619a      	str	r2, [r3, #24]
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ac:	b08f      	sub	sp, #60	; 0x3c
 80024ae:	af0a      	add	r7, sp, #40	; 0x28
 80024b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e116      	b.n	80026ea <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d106      	bne.n	80024dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7fe ff18 	bl	800130c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2203      	movs	r2, #3
 80024e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f004 fc8a 	bl	8006e14 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	603b      	str	r3, [r7, #0]
 8002506:	687e      	ldr	r6, [r7, #4]
 8002508:	466d      	mov	r5, sp
 800250a:	f106 0410 	add.w	r4, r6, #16
 800250e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002514:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002516:	e894 0003 	ldmia.w	r4, {r0, r1}
 800251a:	e885 0003 	stmia.w	r5, {r0, r1}
 800251e:	1d33      	adds	r3, r6, #4
 8002520:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002522:	6838      	ldr	r0, [r7, #0]
 8002524:	f004 fc14 	bl	8006d50 <USB_CoreInit>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d005      	beq.n	800253a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2202      	movs	r2, #2
 8002532:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e0d7      	b.n	80026ea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2100      	movs	r1, #0
 8002540:	4618      	mov	r0, r3
 8002542:	f004 fc78 	bl	8006e36 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002546:	2300      	movs	r3, #0
 8002548:	73fb      	strb	r3, [r7, #15]
 800254a:	e04a      	b.n	80025e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800254c:	7bfa      	ldrb	r2, [r7, #15]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	333d      	adds	r3, #61	; 0x3d
 800255c:	2201      	movs	r2, #1
 800255e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002560:	7bfa      	ldrb	r2, [r7, #15]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	333c      	adds	r3, #60	; 0x3c
 8002570:	7bfa      	ldrb	r2, [r7, #15]
 8002572:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002574:	7bfa      	ldrb	r2, [r7, #15]
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	b298      	uxth	r0, r3
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	1a9b      	subs	r3, r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	3342      	adds	r3, #66	; 0x42
 8002588:	4602      	mov	r2, r0
 800258a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800258c:	7bfa      	ldrb	r2, [r7, #15]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	333f      	adds	r3, #63	; 0x3f
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	3344      	adds	r3, #68	; 0x44
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025b4:	7bfa      	ldrb	r2, [r7, #15]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	3348      	adds	r3, #72	; 0x48
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025c8:	7bfa      	ldrb	r2, [r7, #15]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	3350      	adds	r3, #80	; 0x50
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	3301      	adds	r3, #1
 80025e0:	73fb      	strb	r3, [r7, #15]
 80025e2:	7bfa      	ldrb	r2, [r7, #15]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d3af      	bcc.n	800254c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ec:	2300      	movs	r3, #0
 80025ee:	73fb      	strb	r3, [r7, #15]
 80025f0:	e044      	b.n	800267c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025f2:	7bfa      	ldrb	r2, [r7, #15]
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	1a9b      	subs	r3, r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	440b      	add	r3, r1
 8002600:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002608:	7bfa      	ldrb	r2, [r7, #15]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800261a:	7bfa      	ldrb	r2, [r7, #15]
 800261c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800261e:	7bfa      	ldrb	r2, [r7, #15]
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	1a9b      	subs	r3, r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002630:	2200      	movs	r2, #0
 8002632:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002634:	7bfa      	ldrb	r2, [r7, #15]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	1a9b      	subs	r3, r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800264a:	7bfa      	ldrb	r2, [r7, #15]
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	1a9b      	subs	r3, r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	3301      	adds	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
 800267c:	7bfa      	ldrb	r2, [r7, #15]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	429a      	cmp	r2, r3
 8002684:	d3b5      	bcc.n	80025f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	687e      	ldr	r6, [r7, #4]
 800268e:	466d      	mov	r5, sp
 8002690:	f106 0410 	add.w	r4, r6, #16
 8002694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002696:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002698:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800269a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800269c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80026a4:	1d33      	adds	r3, r6, #4
 80026a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026a8:	6838      	ldr	r0, [r7, #0]
 80026aa:	f004 fbef 	bl	8006e8c <USB_DevInit>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e014      	b.n	80026ea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d102      	bne.n	80026de <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f80b 	bl	80026f4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f004 fd91 	bl	800720a <USB_DevDisconnect>

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080026f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002722:	4b05      	ldr	r3, [pc, #20]	; (8002738 <HAL_PCDEx_ActivateLPM+0x44>)
 8002724:	4313      	orrs	r3, r2
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	10000003 	.word	0x10000003

0800273c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002744:	4b19      	ldr	r3, [pc, #100]	; (80027ac <HAL_PWREx_ConfigSupply+0x70>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b04      	cmp	r3, #4
 800274e:	d00a      	beq.n	8002766 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002750:	4b16      	ldr	r3, [pc, #88]	; (80027ac <HAL_PWREx_ConfigSupply+0x70>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	429a      	cmp	r2, r3
 800275c:	d001      	beq.n	8002762 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e01f      	b.n	80027a2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	e01d      	b.n	80027a2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002766:	4b11      	ldr	r3, [pc, #68]	; (80027ac <HAL_PWREx_ConfigSupply+0x70>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f023 0207 	bic.w	r2, r3, #7
 800276e:	490f      	ldr	r1, [pc, #60]	; (80027ac <HAL_PWREx_ConfigSupply+0x70>)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4313      	orrs	r3, r2
 8002774:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002776:	f7fe ff87 	bl	8001688 <HAL_GetTick>
 800277a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800277c:	e009      	b.n	8002792 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800277e:	f7fe ff83 	bl	8001688 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800278c:	d901      	bls.n	8002792 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e007      	b.n	80027a2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002792:	4b06      	ldr	r3, [pc, #24]	; (80027ac <HAL_PWREx_ConfigSupply+0x70>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800279a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800279e:	d1ee      	bne.n	800277e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	58024800 	.word	0x58024800

080027b0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	4a04      	ldr	r2, [pc, #16]	; (80027cc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80027ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027be:	60d3      	str	r3, [r2, #12]
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	58024800 	.word	0x58024800

080027d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08c      	sub	sp, #48	; 0x30
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e3ff      	b.n	8002fe2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 8087 	beq.w	80028fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f0:	4b99      	ldr	r3, [pc, #612]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027fa:	4b97      	ldr	r3, [pc, #604]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 80027fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fe:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002802:	2b10      	cmp	r3, #16
 8002804:	d007      	beq.n	8002816 <HAL_RCC_OscConfig+0x46>
 8002806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002808:	2b18      	cmp	r3, #24
 800280a:	d110      	bne.n	800282e <HAL_RCC_OscConfig+0x5e>
 800280c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d10b      	bne.n	800282e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002816:	4b90      	ldr	r3, [pc, #576]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d06c      	beq.n	80028fc <HAL_RCC_OscConfig+0x12c>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d168      	bne.n	80028fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e3d9      	b.n	8002fe2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002836:	d106      	bne.n	8002846 <HAL_RCC_OscConfig+0x76>
 8002838:	4b87      	ldr	r3, [pc, #540]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a86      	ldr	r2, [pc, #536]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 800283e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	e02e      	b.n	80028a4 <HAL_RCC_OscConfig+0xd4>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10c      	bne.n	8002868 <HAL_RCC_OscConfig+0x98>
 800284e:	4b82      	ldr	r3, [pc, #520]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a81      	ldr	r2, [pc, #516]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	4b7f      	ldr	r3, [pc, #508]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a7e      	ldr	r2, [pc, #504]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002860:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	e01d      	b.n	80028a4 <HAL_RCC_OscConfig+0xd4>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002870:	d10c      	bne.n	800288c <HAL_RCC_OscConfig+0xbc>
 8002872:	4b79      	ldr	r3, [pc, #484]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a78      	ldr	r2, [pc, #480]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	4b76      	ldr	r3, [pc, #472]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a75      	ldr	r2, [pc, #468]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	e00b      	b.n	80028a4 <HAL_RCC_OscConfig+0xd4>
 800288c:	4b72      	ldr	r3, [pc, #456]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a71      	ldr	r2, [pc, #452]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	4b6f      	ldr	r3, [pc, #444]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a6e      	ldr	r2, [pc, #440]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 800289e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d013      	beq.n	80028d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ac:	f7fe feec 	bl	8001688 <HAL_GetTick>
 80028b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b4:	f7fe fee8 	bl	8001688 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b64      	cmp	r3, #100	; 0x64
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e38d      	b.n	8002fe2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028c6:	4b64      	ldr	r3, [pc, #400]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0xe4>
 80028d2:	e014      	b.n	80028fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7fe fed8 	bl	8001688 <HAL_GetTick>
 80028d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028dc:	f7fe fed4 	bl	8001688 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	; 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e379      	b.n	8002fe2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028ee:	4b5a      	ldr	r3, [pc, #360]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x10c>
 80028fa:	e000      	b.n	80028fe <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 80ae 	beq.w	8002a68 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800290c:	4b52      	ldr	r3, [pc, #328]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002914:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002916:	4b50      	ldr	r3, [pc, #320]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d007      	beq.n	8002932 <HAL_RCC_OscConfig+0x162>
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	2b18      	cmp	r3, #24
 8002926:	d13a      	bne.n	800299e <HAL_RCC_OscConfig+0x1ce>
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d135      	bne.n	800299e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002932:	4b49      	ldr	r3, [pc, #292]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <HAL_RCC_OscConfig+0x17a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e34b      	b.n	8002fe2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294a:	f7fe fecb 	bl	80016e4 <HAL_GetREVID>
 800294e:	4602      	mov	r2, r0
 8002950:	f241 0303 	movw	r3, #4099	; 0x1003
 8002954:	429a      	cmp	r2, r3
 8002956:	d817      	bhi.n	8002988 <HAL_RCC_OscConfig+0x1b8>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	2b40      	cmp	r3, #64	; 0x40
 800295e:	d108      	bne.n	8002972 <HAL_RCC_OscConfig+0x1a2>
 8002960:	4b3d      	ldr	r3, [pc, #244]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002968:	4a3b      	ldr	r2, [pc, #236]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 800296a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800296e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002970:	e07a      	b.n	8002a68 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002972:	4b39      	ldr	r3, [pc, #228]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	031b      	lsls	r3, r3, #12
 8002980:	4935      	ldr	r1, [pc, #212]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002982:	4313      	orrs	r3, r2
 8002984:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002986:	e06f      	b.n	8002a68 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002988:	4b33      	ldr	r3, [pc, #204]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	061b      	lsls	r3, r3, #24
 8002996:	4930      	ldr	r1, [pc, #192]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002998:	4313      	orrs	r3, r2
 800299a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800299c:	e064      	b.n	8002a68 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d045      	beq.n	8002a32 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029a6:	4b2c      	ldr	r3, [pc, #176]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f023 0219 	bic.w	r2, r3, #25
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	4929      	ldr	r1, [pc, #164]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7fe fe66 	bl	8001688 <HAL_GetTick>
 80029bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c0:	f7fe fe62 	bl	8001688 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e307      	b.n	8002fe2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029d2:	4b21      	ldr	r3, [pc, #132]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029de:	f7fe fe81 	bl	80016e4 <HAL_GetREVID>
 80029e2:	4602      	mov	r2, r0
 80029e4:	f241 0303 	movw	r3, #4099	; 0x1003
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d817      	bhi.n	8002a1c <HAL_RCC_OscConfig+0x24c>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	2b40      	cmp	r3, #64	; 0x40
 80029f2:	d108      	bne.n	8002a06 <HAL_RCC_OscConfig+0x236>
 80029f4:	4b18      	ldr	r3, [pc, #96]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80029fc:	4a16      	ldr	r2, [pc, #88]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 80029fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a02:	6053      	str	r3, [r2, #4]
 8002a04:	e030      	b.n	8002a68 <HAL_RCC_OscConfig+0x298>
 8002a06:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	031b      	lsls	r3, r3, #12
 8002a14:	4910      	ldr	r1, [pc, #64]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	604b      	str	r3, [r1, #4]
 8002a1a:	e025      	b.n	8002a68 <HAL_RCC_OscConfig+0x298>
 8002a1c:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	061b      	lsls	r3, r3, #24
 8002a2a:	490b      	ldr	r1, [pc, #44]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	604b      	str	r3, [r1, #4]
 8002a30:	e01a      	b.n	8002a68 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a32:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a08      	ldr	r2, [pc, #32]	; (8002a58 <HAL_RCC_OscConfig+0x288>)
 8002a38:	f023 0301 	bic.w	r3, r3, #1
 8002a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3e:	f7fe fe23 	bl	8001688 <HAL_GetTick>
 8002a42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a44:	e00a      	b.n	8002a5c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a46:	f7fe fe1f 	bl	8001688 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d903      	bls.n	8002a5c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e2c4      	b.n	8002fe2 <HAL_RCC_OscConfig+0x812>
 8002a58:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a5c:	4ba4      	ldr	r3, [pc, #656]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1ee      	bne.n	8002a46 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 80a9 	beq.w	8002bc8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a76:	4b9e      	ldr	r3, [pc, #632]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a7e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a80:	4b9b      	ldr	r3, [pc, #620]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a84:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d007      	beq.n	8002a9c <HAL_RCC_OscConfig+0x2cc>
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	2b18      	cmp	r3, #24
 8002a90:	d13a      	bne.n	8002b08 <HAL_RCC_OscConfig+0x338>
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d135      	bne.n	8002b08 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a9c:	4b94      	ldr	r3, [pc, #592]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x2e4>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	2b80      	cmp	r3, #128	; 0x80
 8002aae:	d001      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e296      	b.n	8002fe2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ab4:	f7fe fe16 	bl	80016e4 <HAL_GetREVID>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	f241 0303 	movw	r3, #4099	; 0x1003
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d817      	bhi.n	8002af2 <HAL_RCC_OscConfig+0x322>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	2b20      	cmp	r3, #32
 8002ac8:	d108      	bne.n	8002adc <HAL_RCC_OscConfig+0x30c>
 8002aca:	4b89      	ldr	r3, [pc, #548]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002ad2:	4a87      	ldr	r2, [pc, #540]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002ad4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ad8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ada:	e075      	b.n	8002bc8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002adc:	4b84      	ldr	r3, [pc, #528]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	069b      	lsls	r3, r3, #26
 8002aea:	4981      	ldr	r1, [pc, #516]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002af0:	e06a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002af2:	4b7f      	ldr	r3, [pc, #508]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	061b      	lsls	r3, r3, #24
 8002b00:	497b      	ldr	r1, [pc, #492]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b06:	e05f      	b.n	8002bc8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d042      	beq.n	8002b96 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002b10:	4b77      	ldr	r3, [pc, #476]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a76      	ldr	r2, [pc, #472]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7fe fdb4 	bl	8001688 <HAL_GetTick>
 8002b20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b24:	f7fe fdb0 	bl	8001688 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e255      	b.n	8002fe2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b36:	4b6e      	ldr	r3, [pc, #440]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b42:	f7fe fdcf 	bl	80016e4 <HAL_GetREVID>
 8002b46:	4602      	mov	r2, r0
 8002b48:	f241 0303 	movw	r3, #4099	; 0x1003
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d817      	bhi.n	8002b80 <HAL_RCC_OscConfig+0x3b0>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	d108      	bne.n	8002b6a <HAL_RCC_OscConfig+0x39a>
 8002b58:	4b65      	ldr	r3, [pc, #404]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b60:	4a63      	ldr	r2, [pc, #396]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002b62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b66:	6053      	str	r3, [r2, #4]
 8002b68:	e02e      	b.n	8002bc8 <HAL_RCC_OscConfig+0x3f8>
 8002b6a:	4b61      	ldr	r3, [pc, #388]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	069b      	lsls	r3, r3, #26
 8002b78:	495d      	ldr	r1, [pc, #372]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	604b      	str	r3, [r1, #4]
 8002b7e:	e023      	b.n	8002bc8 <HAL_RCC_OscConfig+0x3f8>
 8002b80:	4b5b      	ldr	r3, [pc, #364]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	061b      	lsls	r3, r3, #24
 8002b8e:	4958      	ldr	r1, [pc, #352]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	60cb      	str	r3, [r1, #12]
 8002b94:	e018      	b.n	8002bc8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b96:	4b56      	ldr	r3, [pc, #344]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a55      	ldr	r2, [pc, #340]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002b9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba2:	f7fe fd71 	bl	8001688 <HAL_GetTick>
 8002ba6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002baa:	f7fe fd6d 	bl	8001688 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e212      	b.n	8002fe2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002bbc:	4b4c      	ldr	r3, [pc, #304]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1f0      	bne.n	8002baa <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d036      	beq.n	8002c42 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d019      	beq.n	8002c10 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bdc:	4b44      	ldr	r3, [pc, #272]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be0:	4a43      	ldr	r2, [pc, #268]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be8:	f7fe fd4e 	bl	8001688 <HAL_GetTick>
 8002bec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf0:	f7fe fd4a 	bl	8001688 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e1ef      	b.n	8002fe2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c02:	4b3b      	ldr	r3, [pc, #236]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x420>
 8002c0e:	e018      	b.n	8002c42 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c10:	4b37      	ldr	r3, [pc, #220]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c14:	4a36      	ldr	r2, [pc, #216]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002c16:	f023 0301 	bic.w	r3, r3, #1
 8002c1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1c:	f7fe fd34 	bl	8001688 <HAL_GetTick>
 8002c20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c24:	f7fe fd30 	bl	8001688 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e1d5      	b.n	8002fe2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c36:	4b2e      	ldr	r3, [pc, #184]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0320 	and.w	r3, r3, #32
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d036      	beq.n	8002cbc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d019      	beq.n	8002c8a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c56:	4b26      	ldr	r3, [pc, #152]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a25      	ldr	r2, [pc, #148]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002c5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c60:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c62:	f7fe fd11 	bl	8001688 <HAL_GetTick>
 8002c66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c6a:	f7fe fd0d 	bl	8001688 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e1b2      	b.n	8002fe2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c7c:	4b1c      	ldr	r3, [pc, #112]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0f0      	beq.n	8002c6a <HAL_RCC_OscConfig+0x49a>
 8002c88:	e018      	b.n	8002cbc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c8a:	4b19      	ldr	r3, [pc, #100]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a18      	ldr	r2, [pc, #96]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002c90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c96:	f7fe fcf7 	bl	8001688 <HAL_GetTick>
 8002c9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c9e:	f7fe fcf3 	bl	8001688 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e198      	b.n	8002fe2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <HAL_RCC_OscConfig+0x520>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1f0      	bne.n	8002c9e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 8085 	beq.w	8002dd4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002cca:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <HAL_RCC_OscConfig+0x524>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a09      	ldr	r2, [pc, #36]	; (8002cf4 <HAL_RCC_OscConfig+0x524>)
 8002cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cd6:	f7fe fcd7 	bl	8001688 <HAL_GetTick>
 8002cda:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cdc:	e00c      	b.n	8002cf8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002cde:	f7fe fcd3 	bl	8001688 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b64      	cmp	r3, #100	; 0x64
 8002cea:	d905      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e178      	b.n	8002fe2 <HAL_RCC_OscConfig+0x812>
 8002cf0:	58024400 	.word	0x58024400
 8002cf4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cf8:	4b96      	ldr	r3, [pc, #600]	; (8002f54 <HAL_RCC_OscConfig+0x784>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0ec      	beq.n	8002cde <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d106      	bne.n	8002d1a <HAL_RCC_OscConfig+0x54a>
 8002d0c:	4b92      	ldr	r3, [pc, #584]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d10:	4a91      	ldr	r2, [pc, #580]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	6713      	str	r3, [r2, #112]	; 0x70
 8002d18:	e02d      	b.n	8002d76 <HAL_RCC_OscConfig+0x5a6>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x56c>
 8002d22:	4b8d      	ldr	r3, [pc, #564]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d26:	4a8c      	ldr	r2, [pc, #560]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002d28:	f023 0301 	bic.w	r3, r3, #1
 8002d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2e:	4b8a      	ldr	r3, [pc, #552]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d32:	4a89      	ldr	r2, [pc, #548]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002d34:	f023 0304 	bic.w	r3, r3, #4
 8002d38:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3a:	e01c      	b.n	8002d76 <HAL_RCC_OscConfig+0x5a6>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b05      	cmp	r3, #5
 8002d42:	d10c      	bne.n	8002d5e <HAL_RCC_OscConfig+0x58e>
 8002d44:	4b84      	ldr	r3, [pc, #528]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d48:	4a83      	ldr	r2, [pc, #524]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002d4a:	f043 0304 	orr.w	r3, r3, #4
 8002d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d50:	4b81      	ldr	r3, [pc, #516]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d54:	4a80      	ldr	r2, [pc, #512]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5c:	e00b      	b.n	8002d76 <HAL_RCC_OscConfig+0x5a6>
 8002d5e:	4b7e      	ldr	r3, [pc, #504]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d62:	4a7d      	ldr	r2, [pc, #500]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	6713      	str	r3, [r2, #112]	; 0x70
 8002d6a:	4b7b      	ldr	r3, [pc, #492]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6e:	4a7a      	ldr	r2, [pc, #488]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002d70:	f023 0304 	bic.w	r3, r3, #4
 8002d74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d015      	beq.n	8002daa <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7e:	f7fe fc83 	bl	8001688 <HAL_GetTick>
 8002d82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d84:	e00a      	b.n	8002d9c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d86:	f7fe fc7f 	bl	8001688 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e122      	b.n	8002fe2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d9c:	4b6e      	ldr	r3, [pc, #440]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0ee      	beq.n	8002d86 <HAL_RCC_OscConfig+0x5b6>
 8002da8:	e014      	b.n	8002dd4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002daa:	f7fe fc6d 	bl	8001688 <HAL_GetTick>
 8002dae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db2:	f7fe fc69 	bl	8001688 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e10c      	b.n	8002fe2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002dc8:	4b63      	ldr	r3, [pc, #396]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1ee      	bne.n	8002db2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 8101 	beq.w	8002fe0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002dde:	4b5e      	ldr	r3, [pc, #376]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002de6:	2b18      	cmp	r3, #24
 8002de8:	f000 80bc 	beq.w	8002f64 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	f040 8095 	bne.w	8002f20 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df6:	4b58      	ldr	r3, [pc, #352]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a57      	ldr	r2, [pc, #348]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002dfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e02:	f7fe fc41 	bl	8001688 <HAL_GetTick>
 8002e06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e0a:	f7fe fc3d 	bl	8001688 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e0e2      	b.n	8002fe2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e1c:	4b4e      	ldr	r3, [pc, #312]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f0      	bne.n	8002e0a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e28:	4b4b      	ldr	r3, [pc, #300]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002e2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e2c:	4b4b      	ldr	r3, [pc, #300]	; (8002f5c <HAL_RCC_OscConfig+0x78c>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e38:	0112      	lsls	r2, r2, #4
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	4946      	ldr	r1, [pc, #280]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	628b      	str	r3, [r1, #40]	; 0x28
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	3b01      	subs	r3, #1
 8002e48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e50:	3b01      	subs	r3, #1
 8002e52:	025b      	lsls	r3, r3, #9
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	041b      	lsls	r3, r3, #16
 8002e60:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002e64:	431a      	orrs	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	061b      	lsls	r3, r3, #24
 8002e6e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002e72:	4939      	ldr	r1, [pc, #228]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002e78:	4b37      	ldr	r3, [pc, #220]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7c:	4a36      	ldr	r2, [pc, #216]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002e7e:	f023 0301 	bic.w	r3, r3, #1
 8002e82:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e84:	4b34      	ldr	r3, [pc, #208]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e88:	4b35      	ldr	r3, [pc, #212]	; (8002f60 <HAL_RCC_OscConfig+0x790>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e90:	00d2      	lsls	r2, r2, #3
 8002e92:	4931      	ldr	r1, [pc, #196]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e98:	4b2f      	ldr	r3, [pc, #188]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	f023 020c 	bic.w	r2, r3, #12
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	492c      	ldr	r1, [pc, #176]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002eaa:	4b2b      	ldr	r3, [pc, #172]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eae:	f023 0202 	bic.w	r2, r3, #2
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	4928      	ldr	r1, [pc, #160]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ebc:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	4a25      	ldr	r2, [pc, #148]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ec8:	4b23      	ldr	r3, [pc, #140]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ecc:	4a22      	ldr	r2, [pc, #136]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ed4:	4b20      	ldr	r3, [pc, #128]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	4a1f      	ldr	r2, [pc, #124]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002eda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ede:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002ee0:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	4a1c      	ldr	r2, [pc, #112]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eec:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a19      	ldr	r2, [pc, #100]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fe fbc6 	bl	8001688 <HAL_GetTick>
 8002efc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f00:	f7fe fbc2 	bl	8001688 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e067      	b.n	8002fe2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f12:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0x730>
 8002f1e:	e05f      	b.n	8002fe0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f20:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a0c      	ldr	r2, [pc, #48]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002f26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2c:	f7fe fbac 	bl	8001688 <HAL_GetTick>
 8002f30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f34:	f7fe fba8 	bl	8001688 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e04d      	b.n	8002fe2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f46:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <HAL_RCC_OscConfig+0x788>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0x764>
 8002f52:	e045      	b.n	8002fe0 <HAL_RCC_OscConfig+0x810>
 8002f54:	58024800 	.word	0x58024800
 8002f58:	58024400 	.word	0x58024400
 8002f5c:	fffffc0c 	.word	0xfffffc0c
 8002f60:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002f64:	4b21      	ldr	r3, [pc, #132]	; (8002fec <HAL_RCC_OscConfig+0x81c>)
 8002f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f68:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002f6a:	4b20      	ldr	r3, [pc, #128]	; (8002fec <HAL_RCC_OscConfig+0x81c>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d031      	beq.n	8002fdc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f003 0203 	and.w	r2, r3, #3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d12a      	bne.n	8002fdc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d122      	bne.n	8002fdc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d11a      	bne.n	8002fdc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	0a5b      	lsrs	r3, r3, #9
 8002faa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d111      	bne.n	8002fdc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	0c1b      	lsrs	r3, r3, #16
 8002fbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d108      	bne.n	8002fdc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	0e1b      	lsrs	r3, r3, #24
 8002fce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e000      	b.n	8002fe2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3730      	adds	r7, #48	; 0x30
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	58024400 	.word	0x58024400

08002ff0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e19c      	b.n	800333e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003004:	4b8a      	ldr	r3, [pc, #552]	; (8003230 <HAL_RCC_ClockConfig+0x240>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d910      	bls.n	8003034 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003012:	4b87      	ldr	r3, [pc, #540]	; (8003230 <HAL_RCC_ClockConfig+0x240>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f023 020f 	bic.w	r2, r3, #15
 800301a:	4985      	ldr	r1, [pc, #532]	; (8003230 <HAL_RCC_ClockConfig+0x240>)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	4313      	orrs	r3, r2
 8003020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003022:	4b83      	ldr	r3, [pc, #524]	; (8003230 <HAL_RCC_ClockConfig+0x240>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d001      	beq.n	8003034 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e184      	b.n	800333e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b00      	cmp	r3, #0
 800303e:	d010      	beq.n	8003062 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691a      	ldr	r2, [r3, #16]
 8003044:	4b7b      	ldr	r3, [pc, #492]	; (8003234 <HAL_RCC_ClockConfig+0x244>)
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800304c:	429a      	cmp	r2, r3
 800304e:	d908      	bls.n	8003062 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003050:	4b78      	ldr	r3, [pc, #480]	; (8003234 <HAL_RCC_ClockConfig+0x244>)
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	4975      	ldr	r1, [pc, #468]	; (8003234 <HAL_RCC_ClockConfig+0x244>)
 800305e:	4313      	orrs	r3, r2
 8003060:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d010      	beq.n	8003090 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	4b70      	ldr	r3, [pc, #448]	; (8003234 <HAL_RCC_ClockConfig+0x244>)
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800307a:	429a      	cmp	r2, r3
 800307c:	d908      	bls.n	8003090 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800307e:	4b6d      	ldr	r3, [pc, #436]	; (8003234 <HAL_RCC_ClockConfig+0x244>)
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	496a      	ldr	r1, [pc, #424]	; (8003234 <HAL_RCC_ClockConfig+0x244>)
 800308c:	4313      	orrs	r3, r2
 800308e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b00      	cmp	r3, #0
 800309a:	d010      	beq.n	80030be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699a      	ldr	r2, [r3, #24]
 80030a0:	4b64      	ldr	r3, [pc, #400]	; (8003234 <HAL_RCC_ClockConfig+0x244>)
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d908      	bls.n	80030be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030ac:	4b61      	ldr	r3, [pc, #388]	; (8003234 <HAL_RCC_ClockConfig+0x244>)
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	495e      	ldr	r1, [pc, #376]	; (8003234 <HAL_RCC_ClockConfig+0x244>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d010      	beq.n	80030ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69da      	ldr	r2, [r3, #28]
 80030ce:	4b59      	ldr	r3, [pc, #356]	; (8003234 <HAL_RCC_ClockConfig+0x244>)
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d908      	bls.n	80030ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80030da:	4b56      	ldr	r3, [pc, #344]	; (8003234 <HAL_RCC_ClockConfig+0x244>)
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	4953      	ldr	r1, [pc, #332]	; (8003234 <HAL_RCC_ClockConfig+0x244>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d010      	beq.n	800311a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	4b4d      	ldr	r3, [pc, #308]	; (8003234 <HAL_RCC_ClockConfig+0x244>)
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	f003 030f 	and.w	r3, r3, #15
 8003104:	429a      	cmp	r2, r3
 8003106:	d908      	bls.n	800311a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003108:	4b4a      	ldr	r3, [pc, #296]	; (8003234 <HAL_RCC_ClockConfig+0x244>)
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	f023 020f 	bic.w	r2, r3, #15
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	4947      	ldr	r1, [pc, #284]	; (8003234 <HAL_RCC_ClockConfig+0x244>)
 8003116:	4313      	orrs	r3, r2
 8003118:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d055      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003126:	4b43      	ldr	r3, [pc, #268]	; (8003234 <HAL_RCC_ClockConfig+0x244>)
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	4940      	ldr	r1, [pc, #256]	; (8003234 <HAL_RCC_ClockConfig+0x244>)
 8003134:	4313      	orrs	r3, r2
 8003136:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d107      	bne.n	8003150 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003140:	4b3c      	ldr	r3, [pc, #240]	; (8003234 <HAL_RCC_ClockConfig+0x244>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d121      	bne.n	8003190 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0f6      	b.n	800333e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b03      	cmp	r3, #3
 8003156:	d107      	bne.n	8003168 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003158:	4b36      	ldr	r3, [pc, #216]	; (8003234 <HAL_RCC_ClockConfig+0x244>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d115      	bne.n	8003190 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0ea      	b.n	800333e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d107      	bne.n	8003180 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003170:	4b30      	ldr	r3, [pc, #192]	; (8003234 <HAL_RCC_ClockConfig+0x244>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003178:	2b00      	cmp	r3, #0
 800317a:	d109      	bne.n	8003190 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e0de      	b.n	800333e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003180:	4b2c      	ldr	r3, [pc, #176]	; (8003234 <HAL_RCC_ClockConfig+0x244>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0d6      	b.n	800333e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003190:	4b28      	ldr	r3, [pc, #160]	; (8003234 <HAL_RCC_ClockConfig+0x244>)
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	f023 0207 	bic.w	r2, r3, #7
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	4925      	ldr	r1, [pc, #148]	; (8003234 <HAL_RCC_ClockConfig+0x244>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a2:	f7fe fa71 	bl	8001688 <HAL_GetTick>
 80031a6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a8:	e00a      	b.n	80031c0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031aa:	f7fe fa6d 	bl	8001688 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e0be      	b.n	800333e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c0:	4b1c      	ldr	r3, [pc, #112]	; (8003234 <HAL_RCC_ClockConfig+0x244>)
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d1eb      	bne.n	80031aa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d010      	beq.n	8003200 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	4b14      	ldr	r3, [pc, #80]	; (8003234 <HAL_RCC_ClockConfig+0x244>)
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d208      	bcs.n	8003200 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031ee:	4b11      	ldr	r3, [pc, #68]	; (8003234 <HAL_RCC_ClockConfig+0x244>)
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	f023 020f 	bic.w	r2, r3, #15
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	490e      	ldr	r1, [pc, #56]	; (8003234 <HAL_RCC_ClockConfig+0x244>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003200:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <HAL_RCC_ClockConfig+0x240>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d214      	bcs.n	8003238 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b08      	ldr	r3, [pc, #32]	; (8003230 <HAL_RCC_ClockConfig+0x240>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 020f 	bic.w	r2, r3, #15
 8003216:	4906      	ldr	r1, [pc, #24]	; (8003230 <HAL_RCC_ClockConfig+0x240>)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b04      	ldr	r3, [pc, #16]	; (8003230 <HAL_RCC_ClockConfig+0x240>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d005      	beq.n	8003238 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e086      	b.n	800333e <HAL_RCC_ClockConfig+0x34e>
 8003230:	52002000 	.word	0x52002000
 8003234:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d010      	beq.n	8003266 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	4b3f      	ldr	r3, [pc, #252]	; (8003348 <HAL_RCC_ClockConfig+0x358>)
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003250:	429a      	cmp	r2, r3
 8003252:	d208      	bcs.n	8003266 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003254:	4b3c      	ldr	r3, [pc, #240]	; (8003348 <HAL_RCC_ClockConfig+0x358>)
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	4939      	ldr	r1, [pc, #228]	; (8003348 <HAL_RCC_ClockConfig+0x358>)
 8003262:	4313      	orrs	r3, r2
 8003264:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d010      	beq.n	8003294 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695a      	ldr	r2, [r3, #20]
 8003276:	4b34      	ldr	r3, [pc, #208]	; (8003348 <HAL_RCC_ClockConfig+0x358>)
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800327e:	429a      	cmp	r2, r3
 8003280:	d208      	bcs.n	8003294 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003282:	4b31      	ldr	r3, [pc, #196]	; (8003348 <HAL_RCC_ClockConfig+0x358>)
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	492e      	ldr	r1, [pc, #184]	; (8003348 <HAL_RCC_ClockConfig+0x358>)
 8003290:	4313      	orrs	r3, r2
 8003292:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	2b00      	cmp	r3, #0
 800329e:	d010      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699a      	ldr	r2, [r3, #24]
 80032a4:	4b28      	ldr	r3, [pc, #160]	; (8003348 <HAL_RCC_ClockConfig+0x358>)
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d208      	bcs.n	80032c2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032b0:	4b25      	ldr	r3, [pc, #148]	; (8003348 <HAL_RCC_ClockConfig+0x358>)
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	4922      	ldr	r1, [pc, #136]	; (8003348 <HAL_RCC_ClockConfig+0x358>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d010      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69da      	ldr	r2, [r3, #28]
 80032d2:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <HAL_RCC_ClockConfig+0x358>)
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032da:	429a      	cmp	r2, r3
 80032dc:	d208      	bcs.n	80032f0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80032de:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <HAL_RCC_ClockConfig+0x358>)
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	4917      	ldr	r1, [pc, #92]	; (8003348 <HAL_RCC_ClockConfig+0x358>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80032f0:	f000 f834 	bl	800335c <HAL_RCC_GetSysClockFreq>
 80032f4:	4601      	mov	r1, r0
 80032f6:	4b14      	ldr	r3, [pc, #80]	; (8003348 <HAL_RCC_ClockConfig+0x358>)
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	0a1b      	lsrs	r3, r3, #8
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	4a12      	ldr	r2, [pc, #72]	; (800334c <HAL_RCC_ClockConfig+0x35c>)
 8003302:	5cd3      	ldrb	r3, [r2, r3]
 8003304:	f003 031f 	and.w	r3, r3, #31
 8003308:	fa21 f303 	lsr.w	r3, r1, r3
 800330c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800330e:	4b0e      	ldr	r3, [pc, #56]	; (8003348 <HAL_RCC_ClockConfig+0x358>)
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	4a0d      	ldr	r2, [pc, #52]	; (800334c <HAL_RCC_ClockConfig+0x35c>)
 8003318:	5cd3      	ldrb	r3, [r2, r3]
 800331a:	f003 031f 	and.w	r3, r3, #31
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	fa22 f303 	lsr.w	r3, r2, r3
 8003324:	4a0a      	ldr	r2, [pc, #40]	; (8003350 <HAL_RCC_ClockConfig+0x360>)
 8003326:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003328:	4a0a      	ldr	r2, [pc, #40]	; (8003354 <HAL_RCC_ClockConfig+0x364>)
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800332e:	4b0a      	ldr	r3, [pc, #40]	; (8003358 <HAL_RCC_ClockConfig+0x368>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7fe f95e 	bl	80015f4 <HAL_InitTick>
 8003338:	4603      	mov	r3, r0
 800333a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800333c:	7bfb      	ldrb	r3, [r7, #15]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	58024400 	.word	0x58024400
 800334c:	08007324 	.word	0x08007324
 8003350:	24000004 	.word	0x24000004
 8003354:	24000000 	.word	0x24000000
 8003358:	24000008 	.word	0x24000008

0800335c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800335c:	b480      	push	{r7}
 800335e:	b089      	sub	sp, #36	; 0x24
 8003360:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003362:	4baf      	ldr	r3, [pc, #700]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800336a:	2b18      	cmp	r3, #24
 800336c:	f200 814e 	bhi.w	800360c <HAL_RCC_GetSysClockFreq+0x2b0>
 8003370:	a201      	add	r2, pc, #4	; (adr r2, 8003378 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003376:	bf00      	nop
 8003378:	080033dd 	.word	0x080033dd
 800337c:	0800360d 	.word	0x0800360d
 8003380:	0800360d 	.word	0x0800360d
 8003384:	0800360d 	.word	0x0800360d
 8003388:	0800360d 	.word	0x0800360d
 800338c:	0800360d 	.word	0x0800360d
 8003390:	0800360d 	.word	0x0800360d
 8003394:	0800360d 	.word	0x0800360d
 8003398:	08003403 	.word	0x08003403
 800339c:	0800360d 	.word	0x0800360d
 80033a0:	0800360d 	.word	0x0800360d
 80033a4:	0800360d 	.word	0x0800360d
 80033a8:	0800360d 	.word	0x0800360d
 80033ac:	0800360d 	.word	0x0800360d
 80033b0:	0800360d 	.word	0x0800360d
 80033b4:	0800360d 	.word	0x0800360d
 80033b8:	08003409 	.word	0x08003409
 80033bc:	0800360d 	.word	0x0800360d
 80033c0:	0800360d 	.word	0x0800360d
 80033c4:	0800360d 	.word	0x0800360d
 80033c8:	0800360d 	.word	0x0800360d
 80033cc:	0800360d 	.word	0x0800360d
 80033d0:	0800360d 	.word	0x0800360d
 80033d4:	0800360d 	.word	0x0800360d
 80033d8:	0800340f 	.word	0x0800340f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033dc:	4b90      	ldr	r3, [pc, #576]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0320 	and.w	r3, r3, #32
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d009      	beq.n	80033fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80033e8:	4b8d      	ldr	r3, [pc, #564]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	08db      	lsrs	r3, r3, #3
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	4a8c      	ldr	r2, [pc, #560]	; (8003624 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80033f4:	fa22 f303 	lsr.w	r3, r2, r3
 80033f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80033fa:	e10a      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80033fc:	4b89      	ldr	r3, [pc, #548]	; (8003624 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80033fe:	61bb      	str	r3, [r7, #24]
    break;
 8003400:	e107      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003402:	4b89      	ldr	r3, [pc, #548]	; (8003628 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003404:	61bb      	str	r3, [r7, #24]
    break;
 8003406:	e104      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003408:	4b88      	ldr	r3, [pc, #544]	; (800362c <HAL_RCC_GetSysClockFreq+0x2d0>)
 800340a:	61bb      	str	r3, [r7, #24]
    break;
 800340c:	e101      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800340e:	4b84      	ldr	r3, [pc, #528]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003418:	4b81      	ldr	r3, [pc, #516]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341c:	091b      	lsrs	r3, r3, #4
 800341e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003422:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003424:	4b7e      	ldr	r3, [pc, #504]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800342e:	4b7c      	ldr	r3, [pc, #496]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003432:	08db      	lsrs	r3, r3, #3
 8003434:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	fb02 f303 	mul.w	r3, r2, r3
 800343e:	ee07 3a90 	vmov	s15, r3
 8003442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003446:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80da 	beq.w	8003606 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d05a      	beq.n	800350e <HAL_RCC_GetSysClockFreq+0x1b2>
 8003458:	2b01      	cmp	r3, #1
 800345a:	d302      	bcc.n	8003462 <HAL_RCC_GetSysClockFreq+0x106>
 800345c:	2b02      	cmp	r3, #2
 800345e:	d078      	beq.n	8003552 <HAL_RCC_GetSysClockFreq+0x1f6>
 8003460:	e099      	b.n	8003596 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003462:	4b6f      	ldr	r3, [pc, #444]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b00      	cmp	r3, #0
 800346c:	d02d      	beq.n	80034ca <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800346e:	4b6c      	ldr	r3, [pc, #432]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	08db      	lsrs	r3, r3, #3
 8003474:	f003 0303 	and.w	r3, r3, #3
 8003478:	4a6a      	ldr	r2, [pc, #424]	; (8003624 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800347a:	fa22 f303 	lsr.w	r3, r2, r3
 800347e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	ee07 3a90 	vmov	s15, r3
 8003486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	ee07 3a90 	vmov	s15, r3
 8003490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003494:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003498:	4b61      	ldr	r3, [pc, #388]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034a0:	ee07 3a90 	vmov	s15, r3
 80034a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80034ac:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003630 <HAL_RCC_GetSysClockFreq+0x2d4>
 80034b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80034c8:	e087      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	ee07 3a90 	vmov	s15, r3
 80034d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003634 <HAL_RCC_GetSysClockFreq+0x2d8>
 80034d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034dc:	4b50      	ldr	r3, [pc, #320]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e4:	ee07 3a90 	vmov	s15, r3
 80034e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80034f0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003630 <HAL_RCC_GetSysClockFreq+0x2d4>
 80034f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003500:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003504:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003508:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800350c:	e065      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	ee07 3a90 	vmov	s15, r3
 8003514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003518:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003638 <HAL_RCC_GetSysClockFreq+0x2dc>
 800351c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003520:	4b3f      	ldr	r3, [pc, #252]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003528:	ee07 3a90 	vmov	s15, r3
 800352c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003530:	ed97 6a02 	vldr	s12, [r7, #8]
 8003534:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003630 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003538:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800353c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003540:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003544:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800354c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003550:	e043      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	ee07 3a90 	vmov	s15, r3
 8003558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800355c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800363c <HAL_RCC_GetSysClockFreq+0x2e0>
 8003560:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003564:	4b2e      	ldr	r3, [pc, #184]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800356c:	ee07 3a90 	vmov	s15, r3
 8003570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003574:	ed97 6a02 	vldr	s12, [r7, #8]
 8003578:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003630 <HAL_RCC_GetSysClockFreq+0x2d4>
 800357c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003580:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003584:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003588:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800358c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003590:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003594:	e021      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	ee07 3a90 	vmov	s15, r3
 800359c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035a0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003638 <HAL_RCC_GetSysClockFreq+0x2dc>
 80035a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035a8:	4b1d      	ldr	r3, [pc, #116]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b0:	ee07 3a90 	vmov	s15, r3
 80035b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80035bc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003630 <HAL_RCC_GetSysClockFreq+0x2d4>
 80035c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035d8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80035da:	4b11      	ldr	r3, [pc, #68]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	0a5b      	lsrs	r3, r3, #9
 80035e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035e4:	3301      	adds	r3, #1
 80035e6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	ee07 3a90 	vmov	s15, r3
 80035ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80035f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035fe:	ee17 3a90 	vmov	r3, s15
 8003602:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003604:	e005      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003606:	2300      	movs	r3, #0
 8003608:	61bb      	str	r3, [r7, #24]
    break;
 800360a:	e002      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800360c:	4b06      	ldr	r3, [pc, #24]	; (8003628 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800360e:	61bb      	str	r3, [r7, #24]
    break;
 8003610:	bf00      	nop
  }

  return sysclockfreq;
 8003612:	69bb      	ldr	r3, [r7, #24]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3724      	adds	r7, #36	; 0x24
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	58024400 	.word	0x58024400
 8003624:	03d09000 	.word	0x03d09000
 8003628:	003d0900 	.word	0x003d0900
 800362c:	007a1200 	.word	0x007a1200
 8003630:	46000000 	.word	0x46000000
 8003634:	4c742400 	.word	0x4c742400
 8003638:	4a742400 	.word	0x4a742400
 800363c:	4af42400 	.word	0x4af42400

08003640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003646:	f7ff fe89 	bl	800335c <HAL_RCC_GetSysClockFreq>
 800364a:	4601      	mov	r1, r0
 800364c:	4b10      	ldr	r3, [pc, #64]	; (8003690 <HAL_RCC_GetHCLKFreq+0x50>)
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	0a1b      	lsrs	r3, r3, #8
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	4a0f      	ldr	r2, [pc, #60]	; (8003694 <HAL_RCC_GetHCLKFreq+0x54>)
 8003658:	5cd3      	ldrb	r3, [r2, r3]
 800365a:	f003 031f 	and.w	r3, r3, #31
 800365e:	fa21 f303 	lsr.w	r3, r1, r3
 8003662:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003664:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <HAL_RCC_GetHCLKFreq+0x50>)
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	4a09      	ldr	r2, [pc, #36]	; (8003694 <HAL_RCC_GetHCLKFreq+0x54>)
 800366e:	5cd3      	ldrb	r3, [r2, r3]
 8003670:	f003 031f 	and.w	r3, r3, #31
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	fa22 f303 	lsr.w	r3, r2, r3
 800367a:	4a07      	ldr	r2, [pc, #28]	; (8003698 <HAL_RCC_GetHCLKFreq+0x58>)
 800367c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800367e:	4a07      	ldr	r2, [pc, #28]	; (800369c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003684:	4b04      	ldr	r3, [pc, #16]	; (8003698 <HAL_RCC_GetHCLKFreq+0x58>)
 8003686:	681b      	ldr	r3, [r3, #0]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	58024400 	.word	0x58024400
 8003694:	08007324 	.word	0x08007324
 8003698:	24000004 	.word	0x24000004
 800369c:	24000000 	.word	0x24000000

080036a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80036a4:	f7ff ffcc 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 80036a8:	4601      	mov	r1, r0
 80036aa:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	091b      	lsrs	r3, r3, #4
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	4a04      	ldr	r2, [pc, #16]	; (80036c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036b6:	5cd3      	ldrb	r3, [r2, r3]
 80036b8:	f003 031f 	and.w	r3, r3, #31
 80036bc:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	58024400 	.word	0x58024400
 80036c8:	08007324 	.word	0x08007324

080036cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80036d0:	f7ff ffb6 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 80036d4:	4601      	mov	r1, r0
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	0a1b      	lsrs	r3, r3, #8
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	4a04      	ldr	r2, [pc, #16]	; (80036f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036e2:	5cd3      	ldrb	r3, [r2, r3]
 80036e4:	f003 031f 	and.w	r3, r3, #31
 80036e8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	58024400 	.word	0x58024400
 80036f4:	08007324 	.word	0x08007324

080036f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003700:	2300      	movs	r3, #0
 8003702:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003704:	2300      	movs	r3, #0
 8003706:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d03d      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003718:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800371c:	d013      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800371e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003722:	d802      	bhi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003724:	2b00      	cmp	r3, #0
 8003726:	d007      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003728:	e01f      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800372a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800372e:	d013      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003730:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003734:	d01c      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003736:	e018      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003738:	4baf      	ldr	r3, [pc, #700]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	4aae      	ldr	r2, [pc, #696]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800373e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003742:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003744:	e015      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3304      	adds	r3, #4
 800374a:	2102      	movs	r1, #2
 800374c:	4618      	mov	r0, r3
 800374e:	f001 f96f 	bl	8004a30 <RCCEx_PLL2_Config>
 8003752:	4603      	mov	r3, r0
 8003754:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003756:	e00c      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3324      	adds	r3, #36	; 0x24
 800375c:	2102      	movs	r1, #2
 800375e:	4618      	mov	r0, r3
 8003760:	f001 fa18 	bl	8004b94 <RCCEx_PLL3_Config>
 8003764:	4603      	mov	r3, r0
 8003766:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003768:	e003      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	75fb      	strb	r3, [r7, #23]
      break;
 800376e:	e000      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003770:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003772:	7dfb      	ldrb	r3, [r7, #23]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d109      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003778:	4b9f      	ldr	r3, [pc, #636]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800377a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003784:	499c      	ldr	r1, [pc, #624]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003786:	4313      	orrs	r3, r2
 8003788:	650b      	str	r3, [r1, #80]	; 0x50
 800378a:	e001      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800378c:	7dfb      	ldrb	r3, [r7, #23]
 800378e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003798:	2b00      	cmp	r3, #0
 800379a:	d03d      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d826      	bhi.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80037a4:	a201      	add	r2, pc, #4	; (adr r2, 80037ac <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80037a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037aa:	bf00      	nop
 80037ac:	080037c1 	.word	0x080037c1
 80037b0:	080037cf 	.word	0x080037cf
 80037b4:	080037e1 	.word	0x080037e1
 80037b8:	080037f9 	.word	0x080037f9
 80037bc:	080037f9 	.word	0x080037f9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c0:	4b8d      	ldr	r3, [pc, #564]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	4a8c      	ldr	r2, [pc, #560]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80037c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037cc:	e015      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3304      	adds	r3, #4
 80037d2:	2100      	movs	r1, #0
 80037d4:	4618      	mov	r0, r3
 80037d6:	f001 f92b 	bl	8004a30 <RCCEx_PLL2_Config>
 80037da:	4603      	mov	r3, r0
 80037dc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037de:	e00c      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3324      	adds	r3, #36	; 0x24
 80037e4:	2100      	movs	r1, #0
 80037e6:	4618      	mov	r0, r3
 80037e8:	f001 f9d4 	bl	8004b94 <RCCEx_PLL3_Config>
 80037ec:	4603      	mov	r3, r0
 80037ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037f0:	e003      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	75fb      	strb	r3, [r7, #23]
      break;
 80037f6:	e000      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80037f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037fa:	7dfb      	ldrb	r3, [r7, #23]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d109      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003800:	4b7d      	ldr	r3, [pc, #500]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003804:	f023 0207 	bic.w	r2, r3, #7
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380c:	497a      	ldr	r1, [pc, #488]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800380e:	4313      	orrs	r3, r2
 8003810:	650b      	str	r3, [r1, #80]	; 0x50
 8003812:	e001      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003814:	7dfb      	ldrb	r3, [r7, #23]
 8003816:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003820:	2b00      	cmp	r3, #0
 8003822:	d03e      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003828:	2b80      	cmp	r3, #128	; 0x80
 800382a:	d01c      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800382c:	2b80      	cmp	r3, #128	; 0x80
 800382e:	d804      	bhi.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003834:	2b40      	cmp	r3, #64	; 0x40
 8003836:	d00d      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003838:	e01e      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800383a:	2bc0      	cmp	r3, #192	; 0xc0
 800383c:	d01f      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800383e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003842:	d01e      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003844:	e018      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003846:	4b6c      	ldr	r3, [pc, #432]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384a:	4a6b      	ldr	r2, [pc, #428]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800384c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003850:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003852:	e017      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3304      	adds	r3, #4
 8003858:	2100      	movs	r1, #0
 800385a:	4618      	mov	r0, r3
 800385c:	f001 f8e8 	bl	8004a30 <RCCEx_PLL2_Config>
 8003860:	4603      	mov	r3, r0
 8003862:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003864:	e00e      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3324      	adds	r3, #36	; 0x24
 800386a:	2100      	movs	r1, #0
 800386c:	4618      	mov	r0, r3
 800386e:	f001 f991 	bl	8004b94 <RCCEx_PLL3_Config>
 8003872:	4603      	mov	r3, r0
 8003874:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003876:	e005      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	75fb      	strb	r3, [r7, #23]
      break;
 800387c:	e002      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800387e:	bf00      	nop
 8003880:	e000      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003882:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003884:	7dfb      	ldrb	r3, [r7, #23]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d109      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800388a:	4b5b      	ldr	r3, [pc, #364]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800388c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003896:	4958      	ldr	r1, [pc, #352]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003898:	4313      	orrs	r3, r2
 800389a:	650b      	str	r3, [r1, #80]	; 0x50
 800389c:	e001      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389e:	7dfb      	ldrb	r3, [r7, #23]
 80038a0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d044      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038b8:	d01f      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x202>
 80038ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038be:	d805      	bhi.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00a      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038c8:	d00e      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80038ca:	e01f      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x214>
 80038cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80038d0:	d01f      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80038d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038d6:	d01e      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80038d8:	e018      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038da:	4b47      	ldr	r3, [pc, #284]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038de:	4a46      	ldr	r2, [pc, #280]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038e6:	e017      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3304      	adds	r3, #4
 80038ec:	2100      	movs	r1, #0
 80038ee:	4618      	mov	r0, r3
 80038f0:	f001 f89e 	bl	8004a30 <RCCEx_PLL2_Config>
 80038f4:	4603      	mov	r3, r0
 80038f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80038f8:	e00e      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3324      	adds	r3, #36	; 0x24
 80038fe:	2100      	movs	r1, #0
 8003900:	4618      	mov	r0, r3
 8003902:	f001 f947 	bl	8004b94 <RCCEx_PLL3_Config>
 8003906:	4603      	mov	r3, r0
 8003908:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800390a:	e005      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	75fb      	strb	r3, [r7, #23]
      break;
 8003910:	e002      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003912:	bf00      	nop
 8003914:	e000      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003916:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003918:	7dfb      	ldrb	r3, [r7, #23]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10a      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800391e:	4b36      	ldr	r3, [pc, #216]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003922:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800392c:	4932      	ldr	r1, [pc, #200]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800392e:	4313      	orrs	r3, r2
 8003930:	658b      	str	r3, [r1, #88]	; 0x58
 8003932:	e001      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003934:	7dfb      	ldrb	r3, [r7, #23]
 8003936:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003940:	2b00      	cmp	r3, #0
 8003942:	d044      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800394a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800394e:	d01f      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003950:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003954:	d805      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800395a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800395e:	d00e      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003960:	e01f      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003962:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003966:	d01f      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003968:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800396c:	d01e      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800396e:	e018      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003970:	4b21      	ldr	r3, [pc, #132]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	4a20      	ldr	r2, [pc, #128]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800397a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800397c:	e017      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3304      	adds	r3, #4
 8003982:	2100      	movs	r1, #0
 8003984:	4618      	mov	r0, r3
 8003986:	f001 f853 	bl	8004a30 <RCCEx_PLL2_Config>
 800398a:	4603      	mov	r3, r0
 800398c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800398e:	e00e      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3324      	adds	r3, #36	; 0x24
 8003994:	2100      	movs	r1, #0
 8003996:	4618      	mov	r0, r3
 8003998:	f001 f8fc 	bl	8004b94 <RCCEx_PLL3_Config>
 800399c:	4603      	mov	r3, r0
 800399e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039a0:	e005      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	75fb      	strb	r3, [r7, #23]
      break;
 80039a6:	e002      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80039a8:	bf00      	nop
 80039aa:	e000      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80039ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ae:	7dfb      	ldrb	r3, [r7, #23]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10a      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80039b4:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80039c2:	490d      	ldr	r1, [pc, #52]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	658b      	str	r3, [r1, #88]	; 0x58
 80039c8:	e001      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ca:	7dfb      	ldrb	r3, [r7, #23]
 80039cc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d035      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039de:	2b10      	cmp	r3, #16
 80039e0:	d00c      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x304>
 80039e2:	2b10      	cmp	r3, #16
 80039e4:	d802      	bhi.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d01b      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80039ea:	e017      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x324>
 80039ec:	2b20      	cmp	r3, #32
 80039ee:	d00c      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x312>
 80039f0:	2b30      	cmp	r3, #48	; 0x30
 80039f2:	d018      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80039f4:	e012      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x324>
 80039f6:	bf00      	nop
 80039f8:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039fc:	4baf      	ldr	r3, [pc, #700]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80039fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a00:	4aae      	ldr	r2, [pc, #696]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003a08:	e00e      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	2102      	movs	r1, #2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f001 f80d 	bl	8004a30 <RCCEx_PLL2_Config>
 8003a16:	4603      	mov	r3, r0
 8003a18:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003a1a:	e005      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a20:	e002      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003a22:	bf00      	nop
 8003a24:	e000      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003a26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a28:	7dfb      	ldrb	r3, [r7, #23]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d109      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a2e:	4ba3      	ldr	r3, [pc, #652]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a32:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a3a:	49a0      	ldr	r1, [pc, #640]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a40:	e001      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a42:	7dfb      	ldrb	r3, [r7, #23]
 8003a44:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d042      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a5a:	d01f      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a60:	d805      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6a:	d00e      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003a6c:	e01f      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8003a6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a72:	d01f      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003a74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a78:	d01e      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003a7a:	e018      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a7c:	4b8f      	ldr	r3, [pc, #572]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	4a8e      	ldr	r2, [pc, #568]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a88:	e017      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	2100      	movs	r1, #0
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 ffcd 	bl	8004a30 <RCCEx_PLL2_Config>
 8003a96:	4603      	mov	r3, r0
 8003a98:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a9a:	e00e      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3324      	adds	r3, #36	; 0x24
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f001 f876 	bl	8004b94 <RCCEx_PLL3_Config>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003aac:	e005      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ab2:	e002      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003ab4:	bf00      	nop
 8003ab6:	e000      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003ab8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aba:	7dfb      	ldrb	r3, [r7, #23]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d109      	bne.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ac0:	4b7e      	ldr	r3, [pc, #504]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003acc:	497b      	ldr	r1, [pc, #492]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	650b      	str	r3, [r1, #80]	; 0x50
 8003ad2:	e001      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad4:	7dfb      	ldrb	r3, [r7, #23]
 8003ad6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d042      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003aec:	d01b      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003aee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003af2:	d805      	bhi.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d022      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003afc:	d00a      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003afe:	e01b      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003b00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b04:	d01d      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003b06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b0a:	d01c      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003b0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b10:	d01b      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003b12:	e011      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3304      	adds	r3, #4
 8003b18:	2101      	movs	r1, #1
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 ff88 	bl	8004a30 <RCCEx_PLL2_Config>
 8003b20:	4603      	mov	r3, r0
 8003b22:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003b24:	e012      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	3324      	adds	r3, #36	; 0x24
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f001 f831 	bl	8004b94 <RCCEx_PLL3_Config>
 8003b32:	4603      	mov	r3, r0
 8003b34:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003b36:	e009      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b3c:	e006      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003b3e:	bf00      	nop
 8003b40:	e004      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003b42:	bf00      	nop
 8003b44:	e002      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003b46:	bf00      	nop
 8003b48:	e000      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003b4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b4c:	7dfb      	ldrb	r3, [r7, #23]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d109      	bne.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b52:	4b5a      	ldr	r3, [pc, #360]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b56:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b5e:	4957      	ldr	r1, [pc, #348]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	650b      	str	r3, [r1, #80]	; 0x50
 8003b64:	e001      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b66:	7dfb      	ldrb	r3, [r7, #23]
 8003b68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d044      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b80:	d01b      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003b82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b86:	d805      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d022      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003b8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b90:	d00a      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003b92:	e01b      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b98:	d01d      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003b9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b9e:	d01c      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8003ba0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ba4:	d01b      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003ba6:	e011      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3304      	adds	r3, #4
 8003bac:	2101      	movs	r1, #1
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 ff3e 	bl	8004a30 <RCCEx_PLL2_Config>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003bb8:	e012      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	3324      	adds	r3, #36	; 0x24
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 ffe7 	bl	8004b94 <RCCEx_PLL3_Config>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003bca:	e009      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	75fb      	strb	r3, [r7, #23]
      break;
 8003bd0:	e006      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003bd2:	bf00      	nop
 8003bd4:	e004      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003bd6:	bf00      	nop
 8003bd8:	e002      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003bda:	bf00      	nop
 8003bdc:	e000      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003bde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10a      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003be6:	4b35      	ldr	r3, [pc, #212]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bf4:	4931      	ldr	r1, [pc, #196]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	658b      	str	r3, [r1, #88]	; 0x58
 8003bfa:	e001      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
 8003bfe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d02d      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c14:	d005      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003c16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c1a:	d009      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d013      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003c20:	e00f      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c22:	4b26      	ldr	r3, [pc, #152]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c26:	4a25      	ldr	r2, [pc, #148]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003c2e:	e00c      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3304      	adds	r3, #4
 8003c34:	2101      	movs	r1, #1
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 fefa 	bl	8004a30 <RCCEx_PLL2_Config>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003c40:	e003      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	75fb      	strb	r3, [r7, #23]
      break;
 8003c46:	e000      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003c48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c4a:	7dfb      	ldrb	r3, [r7, #23]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d109      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c50:	4b1a      	ldr	r3, [pc, #104]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c54:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c5c:	4917      	ldr	r1, [pc, #92]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	650b      	str	r3, [r1, #80]	; 0x50
 8003c62:	e001      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c64:	7dfb      	ldrb	r3, [r7, #23]
 8003c66:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d035      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c78:	2b03      	cmp	r3, #3
 8003c7a:	d81b      	bhi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003c7c:	a201      	add	r2, pc, #4	; (adr r2, 8003c84 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c82:	bf00      	nop
 8003c84:	08003cc1 	.word	0x08003cc1
 8003c88:	08003c95 	.word	0x08003c95
 8003c8c:	08003ca3 	.word	0x08003ca3
 8003c90:	08003cc1 	.word	0x08003cc1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c94:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c98:	4a08      	ldr	r2, [pc, #32]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ca0:	e00f      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	2102      	movs	r1, #2
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fec1 	bl	8004a30 <RCCEx_PLL2_Config>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003cb2:	e006      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8003cb8:	e003      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8003cba:	bf00      	nop
 8003cbc:	58024400 	.word	0x58024400
      break;
 8003cc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc2:	7dfb      	ldrb	r3, [r7, #23]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d109      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003cc8:	4bba      	ldr	r3, [pc, #744]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ccc:	f023 0203 	bic.w	r2, r3, #3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd4:	49b7      	ldr	r1, [pc, #732]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003cda:	e001      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
 8003cde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 8086 	beq.w	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cee:	4bb2      	ldr	r3, [pc, #712]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4ab1      	ldr	r2, [pc, #708]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cfa:	f7fd fcc5 	bl	8001688 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d00:	e009      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d02:	f7fd fcc1 	bl	8001688 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b64      	cmp	r3, #100	; 0x64
 8003d0e:	d902      	bls.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	75fb      	strb	r3, [r7, #23]
        break;
 8003d14:	e005      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d16:	4ba8      	ldr	r3, [pc, #672]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0ef      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8003d22:	7dfb      	ldrb	r3, [r7, #23]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d166      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d28:	4ba2      	ldr	r3, [pc, #648]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d32:	4053      	eors	r3, r2
 8003d34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d013      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d3c:	4b9d      	ldr	r3, [pc, #628]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d44:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d46:	4b9b      	ldr	r3, [pc, #620]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4a:	4a9a      	ldr	r2, [pc, #616]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d50:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d52:	4b98      	ldr	r3, [pc, #608]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d56:	4a97      	ldr	r2, [pc, #604]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d5c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d5e:	4a95      	ldr	r2, [pc, #596]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d6e:	d115      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fd fc8a 	bl	8001688 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d76:	e00b      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d78:	f7fd fc86 	bl	8001688 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d902      	bls.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	75fb      	strb	r3, [r7, #23]
            break;
 8003d8e:	e005      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d90:	4b88      	ldr	r3, [pc, #544]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0ed      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8003d9c:	7dfb      	ldrb	r3, [r7, #23]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d126      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003db0:	d10d      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8003db2:	4b80      	ldr	r3, [pc, #512]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dc0:	0919      	lsrs	r1, r3, #4
 8003dc2:	4b7e      	ldr	r3, [pc, #504]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003dc4:	400b      	ands	r3, r1
 8003dc6:	497b      	ldr	r1, [pc, #492]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	610b      	str	r3, [r1, #16]
 8003dcc:	e005      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003dce:	4b79      	ldr	r3, [pc, #484]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	4a78      	ldr	r2, [pc, #480]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003dd4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003dd8:	6113      	str	r3, [r2, #16]
 8003dda:	4b76      	ldr	r3, [pc, #472]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ddc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de8:	4972      	ldr	r1, [pc, #456]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	670b      	str	r3, [r1, #112]	; 0x70
 8003dee:	e004      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003df0:	7dfb      	ldrb	r3, [r7, #23]
 8003df2:	75bb      	strb	r3, [r7, #22]
 8003df4:	e001      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df6:	7dfb      	ldrb	r3, [r7, #23]
 8003df8:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d07d      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e0a:	2b28      	cmp	r3, #40	; 0x28
 8003e0c:	d866      	bhi.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8003e0e:	a201      	add	r2, pc, #4	; (adr r2, 8003e14 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e14:	08003ee3 	.word	0x08003ee3
 8003e18:	08003edd 	.word	0x08003edd
 8003e1c:	08003edd 	.word	0x08003edd
 8003e20:	08003edd 	.word	0x08003edd
 8003e24:	08003edd 	.word	0x08003edd
 8003e28:	08003edd 	.word	0x08003edd
 8003e2c:	08003edd 	.word	0x08003edd
 8003e30:	08003edd 	.word	0x08003edd
 8003e34:	08003eb9 	.word	0x08003eb9
 8003e38:	08003edd 	.word	0x08003edd
 8003e3c:	08003edd 	.word	0x08003edd
 8003e40:	08003edd 	.word	0x08003edd
 8003e44:	08003edd 	.word	0x08003edd
 8003e48:	08003edd 	.word	0x08003edd
 8003e4c:	08003edd 	.word	0x08003edd
 8003e50:	08003edd 	.word	0x08003edd
 8003e54:	08003ecb 	.word	0x08003ecb
 8003e58:	08003edd 	.word	0x08003edd
 8003e5c:	08003edd 	.word	0x08003edd
 8003e60:	08003edd 	.word	0x08003edd
 8003e64:	08003edd 	.word	0x08003edd
 8003e68:	08003edd 	.word	0x08003edd
 8003e6c:	08003edd 	.word	0x08003edd
 8003e70:	08003edd 	.word	0x08003edd
 8003e74:	08003ee3 	.word	0x08003ee3
 8003e78:	08003edd 	.word	0x08003edd
 8003e7c:	08003edd 	.word	0x08003edd
 8003e80:	08003edd 	.word	0x08003edd
 8003e84:	08003edd 	.word	0x08003edd
 8003e88:	08003edd 	.word	0x08003edd
 8003e8c:	08003edd 	.word	0x08003edd
 8003e90:	08003edd 	.word	0x08003edd
 8003e94:	08003ee3 	.word	0x08003ee3
 8003e98:	08003edd 	.word	0x08003edd
 8003e9c:	08003edd 	.word	0x08003edd
 8003ea0:	08003edd 	.word	0x08003edd
 8003ea4:	08003edd 	.word	0x08003edd
 8003ea8:	08003edd 	.word	0x08003edd
 8003eac:	08003edd 	.word	0x08003edd
 8003eb0:	08003edd 	.word	0x08003edd
 8003eb4:	08003ee3 	.word	0x08003ee3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 fdb6 	bl	8004a30 <RCCEx_PLL2_Config>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003ec8:	e00c      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3324      	adds	r3, #36	; 0x24
 8003ece:	2101      	movs	r1, #1
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fe5f 	bl	8004b94 <RCCEx_PLL3_Config>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003eda:	e003      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	75fb      	strb	r3, [r7, #23]
      break;
 8003ee0:	e000      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8003ee2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ee4:	7dfb      	ldrb	r3, [r7, #23]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d109      	bne.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003eea:	4b32      	ldr	r3, [pc, #200]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eee:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ef6:	492f      	ldr	r1, [pc, #188]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	654b      	str	r3, [r1, #84]	; 0x54
 8003efc:	e001      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efe:	7dfb      	ldrb	r3, [r7, #23]
 8003f00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d037      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f12:	2b05      	cmp	r3, #5
 8003f14:	d820      	bhi.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8003f16:	a201      	add	r2, pc, #4	; (adr r2, 8003f1c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1c:	08003f5f 	.word	0x08003f5f
 8003f20:	08003f35 	.word	0x08003f35
 8003f24:	08003f47 	.word	0x08003f47
 8003f28:	08003f5f 	.word	0x08003f5f
 8003f2c:	08003f5f 	.word	0x08003f5f
 8003f30:	08003f5f 	.word	0x08003f5f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3304      	adds	r3, #4
 8003f38:	2101      	movs	r1, #1
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fd78 	bl	8004a30 <RCCEx_PLL2_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003f44:	e00c      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3324      	adds	r3, #36	; 0x24
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 fe21 	bl	8004b94 <RCCEx_PLL3_Config>
 8003f52:	4603      	mov	r3, r0
 8003f54:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003f56:	e003      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f5c:	e000      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8003f5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f60:	7dfb      	ldrb	r3, [r7, #23]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d109      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f66:	4b13      	ldr	r3, [pc, #76]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6a:	f023 0207 	bic.w	r2, r3, #7
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f72:	4910      	ldr	r1, [pc, #64]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	654b      	str	r3, [r1, #84]	; 0x54
 8003f78:	e001      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7a:	7dfb      	ldrb	r3, [r7, #23]
 8003f7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d040      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f90:	2b05      	cmp	r3, #5
 8003f92:	d827      	bhi.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8003f94:	a201      	add	r2, pc, #4	; (adr r2, 8003f9c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8003f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9a:	bf00      	nop
 8003f9c:	08003feb 	.word	0x08003feb
 8003fa0:	08003fc1 	.word	0x08003fc1
 8003fa4:	08003fd3 	.word	0x08003fd3
 8003fa8:	08003feb 	.word	0x08003feb
 8003fac:	08003feb 	.word	0x08003feb
 8003fb0:	08003feb 	.word	0x08003feb
 8003fb4:	58024400 	.word	0x58024400
 8003fb8:	58024800 	.word	0x58024800
 8003fbc:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fd32 	bl	8004a30 <RCCEx_PLL2_Config>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003fd0:	e00c      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3324      	adds	r3, #36	; 0x24
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 fddb 	bl	8004b94 <RCCEx_PLL3_Config>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003fe2:	e003      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8003fe8:	e000      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8003fea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10a      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ff2:	4bb2      	ldr	r3, [pc, #712]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff6:	f023 0207 	bic.w	r2, r3, #7
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004000:	49ae      	ldr	r1, [pc, #696]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004002:	4313      	orrs	r3, r2
 8004004:	658b      	str	r3, [r1, #88]	; 0x58
 8004006:	e001      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004008:	7dfb      	ldrb	r3, [r7, #23]
 800400a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0320 	and.w	r3, r3, #32
 8004014:	2b00      	cmp	r3, #0
 8004016:	d044      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800401e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004022:	d01b      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004028:	d805      	bhi.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800402a:	2b00      	cmp	r3, #0
 800402c:	d022      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800402e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004032:	d00a      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004034:	e01b      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403a:	d01d      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800403c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004040:	d01c      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004042:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004046:	d01b      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004048:	e011      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3304      	adds	r3, #4
 800404e:	2100      	movs	r1, #0
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fced 	bl	8004a30 <RCCEx_PLL2_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800405a:	e012      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3324      	adds	r3, #36	; 0x24
 8004060:	2102      	movs	r1, #2
 8004062:	4618      	mov	r0, r3
 8004064:	f000 fd96 	bl	8004b94 <RCCEx_PLL3_Config>
 8004068:	4603      	mov	r3, r0
 800406a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800406c:	e009      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	75fb      	strb	r3, [r7, #23]
      break;
 8004072:	e006      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004074:	bf00      	nop
 8004076:	e004      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004078:	bf00      	nop
 800407a:	e002      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800407c:	bf00      	nop
 800407e:	e000      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004080:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004082:	7dfb      	ldrb	r3, [r7, #23]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10a      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004088:	4b8c      	ldr	r3, [pc, #560]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800408a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004096:	4989      	ldr	r1, [pc, #548]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004098:	4313      	orrs	r3, r2
 800409a:	654b      	str	r3, [r1, #84]	; 0x54
 800409c:	e001      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409e:	7dfb      	ldrb	r3, [r7, #23]
 80040a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d044      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040b8:	d01b      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80040ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040be:	d805      	bhi.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d022      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80040c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c8:	d00a      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80040ca:	e01b      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80040cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d0:	d01d      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80040d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040d6:	d01c      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80040d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040dc:	d01b      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80040de:	e011      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	2100      	movs	r1, #0
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fca2 	bl	8004a30 <RCCEx_PLL2_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80040f0:	e012      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3324      	adds	r3, #36	; 0x24
 80040f6:	2102      	movs	r1, #2
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 fd4b 	bl	8004b94 <RCCEx_PLL3_Config>
 80040fe:	4603      	mov	r3, r0
 8004100:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004102:	e009      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	75fb      	strb	r3, [r7, #23]
      break;
 8004108:	e006      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800410a:	bf00      	nop
 800410c:	e004      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800410e:	bf00      	nop
 8004110:	e002      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004112:	bf00      	nop
 8004114:	e000      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004116:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004118:	7dfb      	ldrb	r3, [r7, #23]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10a      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800411e:	4b67      	ldr	r3, [pc, #412]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004122:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800412c:	4963      	ldr	r1, [pc, #396]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800412e:	4313      	orrs	r3, r2
 8004130:	658b      	str	r3, [r1, #88]	; 0x58
 8004132:	e001      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004134:	7dfb      	ldrb	r3, [r7, #23]
 8004136:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004140:	2b00      	cmp	r3, #0
 8004142:	d044      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800414a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800414e:	d01b      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8004150:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004154:	d805      	bhi.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8004156:	2b00      	cmp	r3, #0
 8004158:	d022      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800415a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800415e:	d00a      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004160:	e01b      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8004162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004166:	d01d      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004168:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800416c:	d01c      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800416e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004172:	d01b      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004174:	e011      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3304      	adds	r3, #4
 800417a:	2100      	movs	r1, #0
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fc57 	bl	8004a30 <RCCEx_PLL2_Config>
 8004182:	4603      	mov	r3, r0
 8004184:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004186:	e012      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3324      	adds	r3, #36	; 0x24
 800418c:	2102      	movs	r1, #2
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fd00 	bl	8004b94 <RCCEx_PLL3_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004198:	e009      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	75fb      	strb	r3, [r7, #23]
      break;
 800419e:	e006      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80041a0:	bf00      	nop
 80041a2:	e004      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80041a4:	bf00      	nop
 80041a6:	e002      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80041a8:	bf00      	nop
 80041aa:	e000      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80041ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ae:	7dfb      	ldrb	r3, [r7, #23]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10a      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80041b4:	4b41      	ldr	r3, [pc, #260]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80041b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041c2:	493e      	ldr	r1, [pc, #248]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	658b      	str	r3, [r1, #88]	; 0x58
 80041c8:	e001      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ca:	7dfb      	ldrb	r3, [r7, #23]
 80041cc:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d01a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e4:	d10a      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3324      	adds	r3, #36	; 0x24
 80041ea:	2102      	movs	r1, #2
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fcd1 	bl	8004b94 <RCCEx_PLL3_Config>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80041fc:	4b2f      	ldr	r3, [pc, #188]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80041fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004200:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800420a:	492c      	ldr	r1, [pc, #176]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800420c:	4313      	orrs	r3, r2
 800420e:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0310 	and.w	r3, r3, #16
 8004218:	2b00      	cmp	r3, #0
 800421a:	d01a      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004226:	d10a      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3324      	adds	r3, #36	; 0x24
 800422c:	2102      	movs	r1, #2
 800422e:	4618      	mov	r0, r3
 8004230:	f000 fcb0 	bl	8004b94 <RCCEx_PLL3_Config>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800423e:	4b1f      	ldr	r3, [pc, #124]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004242:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800424c:	491b      	ldr	r1, [pc, #108]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800424e:	4313      	orrs	r3, r2
 8004250:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d032      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004268:	d00d      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800426a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800426e:	d016      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8004270:	2b00      	cmp	r3, #0
 8004272:	d111      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3304      	adds	r3, #4
 8004278:	2100      	movs	r1, #0
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fbd8 	bl	8004a30 <RCCEx_PLL2_Config>
 8004280:	4603      	mov	r3, r0
 8004282:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004284:	e00c      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3324      	adds	r3, #36	; 0x24
 800428a:	2102      	movs	r1, #2
 800428c:	4618      	mov	r0, r3
 800428e:	f000 fc81 	bl	8004b94 <RCCEx_PLL3_Config>
 8004292:	4603      	mov	r3, r0
 8004294:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004296:	e003      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	75fb      	strb	r3, [r7, #23]
      break;
 800429c:	e000      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800429e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042a0:	7dfb      	ldrb	r3, [r7, #23]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10c      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042a6:	4b05      	ldr	r3, [pc, #20]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80042a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042b4:	4901      	ldr	r1, [pc, #4]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	658b      	str	r3, [r1, #88]	; 0x58
 80042ba:	e003      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80042bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c0:	7dfb      	ldrb	r3, [r7, #23]
 80042c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d02f      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042da:	d00c      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80042dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042e0:	d015      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80042e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042e6:	d10f      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042e8:	4b79      	ldr	r3, [pc, #484]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ec:	4a78      	ldr	r2, [pc, #480]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80042ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80042f4:	e00c      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3324      	adds	r3, #36	; 0x24
 80042fa:	2101      	movs	r1, #1
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 fc49 	bl	8004b94 <RCCEx_PLL3_Config>
 8004302:	4603      	mov	r3, r0
 8004304:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004306:	e003      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	75fb      	strb	r3, [r7, #23]
      break;
 800430c:	e000      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800430e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004310:	7dfb      	ldrb	r3, [r7, #23]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10a      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004316:	4b6e      	ldr	r3, [pc, #440]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004324:	496a      	ldr	r1, [pc, #424]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004326:	4313      	orrs	r3, r2
 8004328:	654b      	str	r3, [r1, #84]	; 0x54
 800432a:	e001      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432c:	7dfb      	ldrb	r3, [r7, #23]
 800432e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d029      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004348:	d007      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800434a:	e00f      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800434c:	4b60      	ldr	r3, [pc, #384]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	4a5f      	ldr	r2, [pc, #380]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004356:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004358:	e00b      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3304      	adds	r3, #4
 800435e:	2102      	movs	r1, #2
 8004360:	4618      	mov	r0, r3
 8004362:	f000 fb65 	bl	8004a30 <RCCEx_PLL2_Config>
 8004366:	4603      	mov	r3, r0
 8004368:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800436a:	e002      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	75fb      	strb	r3, [r7, #23]
      break;
 8004370:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004372:	7dfb      	ldrb	r3, [r7, #23]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d109      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004378:	4b55      	ldr	r3, [pc, #340]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800437a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004384:	4952      	ldr	r1, [pc, #328]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004386:	4313      	orrs	r3, r2
 8004388:	64cb      	str	r3, [r1, #76]	; 0x4c
 800438a:	e001      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438c:	7dfb      	ldrb	r3, [r7, #23]
 800438e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00a      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3324      	adds	r3, #36	; 0x24
 80043a0:	2102      	movs	r1, #2
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fbf6 	bl	8004b94 <RCCEx_PLL3_Config>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d02f      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043c6:	d00c      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80043c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043cc:	d802      	bhi.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d011      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80043d2:	e00d      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80043d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043d8:	d00f      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80043da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043de:	d00e      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80043e0:	e006      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043e2:	4b3b      	ldr	r3, [pc, #236]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e6:	4a3a      	ldr	r2, [pc, #232]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80043ee:	e007      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	75fb      	strb	r3, [r7, #23]
      break;
 80043f4:	e004      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80043f6:	bf00      	nop
 80043f8:	e002      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80043fa:	bf00      	nop
 80043fc:	e000      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80043fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004400:	7dfb      	ldrb	r3, [r7, #23]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d109      	bne.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004406:	4b32      	ldr	r3, [pc, #200]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004412:	492f      	ldr	r1, [pc, #188]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004414:	4313      	orrs	r3, r2
 8004416:	654b      	str	r3, [r1, #84]	; 0x54
 8004418:	e001      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441a:	7dfb      	ldrb	r3, [r7, #23]
 800441c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d008      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800442a:	4b29      	ldr	r3, [pc, #164]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800442c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800442e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004436:	4926      	ldr	r1, [pc, #152]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004438:	4313      	orrs	r3, r2
 800443a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d009      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004448:	4b21      	ldr	r3, [pc, #132]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004456:	491e      	ldr	r1, [pc, #120]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004458:	4313      	orrs	r3, r2
 800445a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004468:	4b19      	ldr	r3, [pc, #100]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800446a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004474:	4916      	ldr	r1, [pc, #88]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004476:	4313      	orrs	r3, r2
 8004478:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00d      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004486:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	4a11      	ldr	r2, [pc, #68]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800448c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004490:	6113      	str	r3, [r2, #16]
 8004492:	4b0f      	ldr	r3, [pc, #60]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004494:	691a      	ldr	r2, [r3, #16]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800449c:	490c      	ldr	r1, [pc, #48]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	da08      	bge.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80044aa:	4b09      	ldr	r3, [pc, #36]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b6:	4906      	ldr	r1, [pc, #24]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80044bc:	7dbb      	ldrb	r3, [r7, #22]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	e000      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	58024400 	.word	0x58024400

080044d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80044d8:	f7ff f8b2 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 80044dc:	4601      	mov	r1, r0
 80044de:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	091b      	lsrs	r3, r3, #4
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	4a04      	ldr	r2, [pc, #16]	; (80044fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80044ea:	5cd3      	ldrb	r3, [r2, r3]
 80044ec:	f003 031f 	and.w	r3, r3, #31
 80044f0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	58024400 	.word	0x58024400
 80044fc:	08007324 	.word	0x08007324

08004500 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004500:	b480      	push	{r7}
 8004502:	b089      	sub	sp, #36	; 0x24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004508:	4b9d      	ldr	r3, [pc, #628]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450c:	f003 0303 	and.w	r3, r3, #3
 8004510:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004512:	4b9b      	ldr	r3, [pc, #620]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004516:	0b1b      	lsrs	r3, r3, #12
 8004518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800451c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800451e:	4b98      	ldr	r3, [pc, #608]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004522:	091b      	lsrs	r3, r3, #4
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800452a:	4b95      	ldr	r3, [pc, #596]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800452c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452e:	08db      	lsrs	r3, r3, #3
 8004530:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	fb02 f303 	mul.w	r3, r2, r3
 800453a:	ee07 3a90 	vmov	s15, r3
 800453e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004542:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 810a 	beq.w	8004762 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d05a      	beq.n	800460a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8004554:	2b01      	cmp	r3, #1
 8004556:	d302      	bcc.n	800455e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8004558:	2b02      	cmp	r3, #2
 800455a:	d078      	beq.n	800464e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800455c:	e099      	b.n	8004692 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800455e:	4b88      	ldr	r3, [pc, #544]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0320 	and.w	r3, r3, #32
 8004566:	2b00      	cmp	r3, #0
 8004568:	d02d      	beq.n	80045c6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800456a:	4b85      	ldr	r3, [pc, #532]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	08db      	lsrs	r3, r3, #3
 8004570:	f003 0303 	and.w	r3, r3, #3
 8004574:	4a83      	ldr	r2, [pc, #524]	; (8004784 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8004576:	fa22 f303 	lsr.w	r3, r2, r3
 800457a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	ee07 3a90 	vmov	s15, r3
 800458c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004590:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004594:	4b7a      	ldr	r3, [pc, #488]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800459c:	ee07 3a90 	vmov	s15, r3
 80045a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80045a8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004788 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80045ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045c0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80045c4:	e087      	b.n	80046d6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	ee07 3a90 	vmov	s15, r3
 80045cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800478c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80045d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045d8:	4b69      	ldr	r3, [pc, #420]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80045da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e0:	ee07 3a90 	vmov	s15, r3
 80045e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80045ec:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004788 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80045f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004604:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004608:	e065      	b.n	80046d6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	ee07 3a90 	vmov	s15, r3
 8004610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004614:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004618:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461c:	4b58      	ldr	r3, [pc, #352]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004624:	ee07 3a90 	vmov	s15, r3
 8004628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004630:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004788 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004634:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004638:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004640:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004648:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800464c:	e043      	b.n	80046d6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	ee07 3a90 	vmov	s15, r3
 8004654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004658:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004794 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800465c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004660:	4b47      	ldr	r3, [pc, #284]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004668:	ee07 3a90 	vmov	s15, r3
 800466c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004670:	ed97 6a03 	vldr	s12, [r7, #12]
 8004674:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004788 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004678:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800467c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004680:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004684:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004690:	e021      	b.n	80046d6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	ee07 3a90 	vmov	s15, r3
 8004698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80046a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a4:	4b36      	ldr	r3, [pc, #216]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80046a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ac:	ee07 3a90 	vmov	s15, r3
 80046b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80046b8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004788 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80046bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046d4:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80046d6:	4b2a      	ldr	r3, [pc, #168]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	0a5b      	lsrs	r3, r3, #9
 80046dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046e0:	ee07 3a90 	vmov	s15, r3
 80046e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80046f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046fc:	ee17 2a90 	vmov	r2, s15
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004704:	4b1e      	ldr	r3, [pc, #120]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	0c1b      	lsrs	r3, r3, #16
 800470a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800470e:	ee07 3a90 	vmov	s15, r3
 8004712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004716:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800471a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800471e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800472a:	ee17 2a90 	vmov	r2, s15
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004732:	4b13      	ldr	r3, [pc, #76]	; (8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	0e1b      	lsrs	r3, r3, #24
 8004738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800473c:	ee07 3a90 	vmov	s15, r3
 8004740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004744:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004748:	ee37 7a87 	vadd.f32	s14, s15, s14
 800474c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004758:	ee17 2a90 	vmov	r2, s15
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004760:	e008      	b.n	8004774 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	609a      	str	r2, [r3, #8]
}
 8004774:	bf00      	nop
 8004776:	3724      	adds	r7, #36	; 0x24
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	58024400 	.word	0x58024400
 8004784:	03d09000 	.word	0x03d09000
 8004788:	46000000 	.word	0x46000000
 800478c:	4c742400 	.word	0x4c742400
 8004790:	4a742400 	.word	0x4a742400
 8004794:	4af42400 	.word	0x4af42400

08004798 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004798:	b480      	push	{r7}
 800479a:	b089      	sub	sp, #36	; 0x24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047a0:	4b9d      	ldr	r3, [pc, #628]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80047a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a4:	f003 0303 	and.w	r3, r3, #3
 80047a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80047aa:	4b9b      	ldr	r3, [pc, #620]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80047ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ae:	0d1b      	lsrs	r3, r3, #20
 80047b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80047b6:	4b98      	ldr	r3, [pc, #608]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	0a1b      	lsrs	r3, r3, #8
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80047c2:	4b95      	ldr	r3, [pc, #596]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80047c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c6:	08db      	lsrs	r3, r3, #3
 80047c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	fb02 f303 	mul.w	r3, r2, r3
 80047d2:	ee07 3a90 	vmov	s15, r3
 80047d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 810a 	beq.w	80049fa <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d05a      	beq.n	80048a2 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d302      	bcc.n	80047f6 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d078      	beq.n	80048e6 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80047f4:	e099      	b.n	800492a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047f6:	4b88      	ldr	r3, [pc, #544]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d02d      	beq.n	800485e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004802:	4b85      	ldr	r3, [pc, #532]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	08db      	lsrs	r3, r3, #3
 8004808:	f003 0303 	and.w	r3, r3, #3
 800480c:	4a83      	ldr	r2, [pc, #524]	; (8004a1c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800480e:	fa22 f303 	lsr.w	r3, r2, r3
 8004812:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	ee07 3a90 	vmov	s15, r3
 800481a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	ee07 3a90 	vmov	s15, r3
 8004824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004828:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482c:	4b7a      	ldr	r3, [pc, #488]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004834:	ee07 3a90 	vmov	s15, r3
 8004838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004840:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004844:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004848:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004850:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004858:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800485c:	e087      	b.n	800496e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	ee07 3a90 	vmov	s15, r3
 8004864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004868:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800486c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004870:	4b69      	ldr	r3, [pc, #420]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004878:	ee07 3a90 	vmov	s15, r3
 800487c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004880:	ed97 6a03 	vldr	s12, [r7, #12]
 8004884:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004888:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800488c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004890:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004894:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048a0:	e065      	b.n	800496e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	ee07 3a90 	vmov	s15, r3
 80048a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ac:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80048b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b4:	4b58      	ldr	r3, [pc, #352]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048bc:	ee07 3a90 	vmov	s15, r3
 80048c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80048c8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80048cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048e4:	e043      	b.n	800496e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	ee07 3a90 	vmov	s15, r3
 80048ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80048f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f8:	4b47      	ldr	r3, [pc, #284]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004900:	ee07 3a90 	vmov	s15, r3
 8004904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004908:	ed97 6a03 	vldr	s12, [r7, #12]
 800490c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004910:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004914:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004918:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800491c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004924:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004928:	e021      	b.n	800496e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	ee07 3a90 	vmov	s15, r3
 8004930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004934:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004938:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800493c:	4b36      	ldr	r3, [pc, #216]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004944:	ee07 3a90 	vmov	s15, r3
 8004948:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800494c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004950:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004954:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004958:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800495c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004960:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004968:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800496c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800496e:	4b2a      	ldr	r3, [pc, #168]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	0a5b      	lsrs	r3, r3, #9
 8004974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004978:	ee07 3a90 	vmov	s15, r3
 800497c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004980:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004984:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004988:	edd7 6a07 	vldr	s13, [r7, #28]
 800498c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004994:	ee17 2a90 	vmov	r2, s15
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800499c:	4b1e      	ldr	r3, [pc, #120]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	0c1b      	lsrs	r3, r3, #16
 80049a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049a6:	ee07 3a90 	vmov	s15, r3
 80049aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80049ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049c2:	ee17 2a90 	vmov	r2, s15
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80049ca:	4b13      	ldr	r3, [pc, #76]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	0e1b      	lsrs	r3, r3, #24
 80049d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049d4:	ee07 3a90 	vmov	s15, r3
 80049d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80049e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049f0:	ee17 2a90 	vmov	r2, s15
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80049f8:	e008      	b.n	8004a0c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	609a      	str	r2, [r3, #8]
}
 8004a0c:	bf00      	nop
 8004a0e:	3724      	adds	r7, #36	; 0x24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	58024400 	.word	0x58024400
 8004a1c:	03d09000 	.word	0x03d09000
 8004a20:	46000000 	.word	0x46000000
 8004a24:	4c742400 	.word	0x4c742400
 8004a28:	4a742400 	.word	0x4a742400
 8004a2c:	4af42400 	.word	0x4af42400

08004a30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a3e:	4b53      	ldr	r3, [pc, #332]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d101      	bne.n	8004a4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e099      	b.n	8004b82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004a4e:	4b4f      	ldr	r3, [pc, #316]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a4e      	ldr	r2, [pc, #312]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004a54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a5a:	f7fc fe15 	bl	8001688 <HAL_GetTick>
 8004a5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a60:	e008      	b.n	8004a74 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004a62:	f7fc fe11 	bl	8001688 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e086      	b.n	8004b82 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a74:	4b45      	ldr	r3, [pc, #276]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1f0      	bne.n	8004a62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a80:	4b42      	ldr	r3, [pc, #264]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a84:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	031b      	lsls	r3, r3, #12
 8004a8e:	493f      	ldr	r1, [pc, #252]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	628b      	str	r3, [r1, #40]	; 0x28
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	025b      	lsls	r3, r3, #9
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	041b      	lsls	r3, r3, #16
 8004ab2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	061b      	lsls	r3, r3, #24
 8004ac0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ac4:	4931      	ldr	r1, [pc, #196]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004aca:	4b30      	ldr	r3, [pc, #192]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ace:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	492d      	ldr	r1, [pc, #180]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004adc:	4b2b      	ldr	r3, [pc, #172]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae0:	f023 0220 	bic.w	r2, r3, #32
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	4928      	ldr	r1, [pc, #160]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004aee:	4b27      	ldr	r3, [pc, #156]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af2:	4a26      	ldr	r2, [pc, #152]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004af4:	f023 0310 	bic.w	r3, r3, #16
 8004af8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004afa:	4b24      	ldr	r3, [pc, #144]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004afc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004afe:	4b24      	ldr	r3, [pc, #144]	; (8004b90 <RCCEx_PLL2_Config+0x160>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	69d2      	ldr	r2, [r2, #28]
 8004b06:	00d2      	lsls	r2, r2, #3
 8004b08:	4920      	ldr	r1, [pc, #128]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b0e:	4b1f      	ldr	r3, [pc, #124]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b12:	4a1e      	ldr	r2, [pc, #120]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004b14:	f043 0310 	orr.w	r3, r3, #16
 8004b18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d106      	bne.n	8004b2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b20:	4b1a      	ldr	r3, [pc, #104]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	4a19      	ldr	r2, [pc, #100]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004b26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b2c:	e00f      	b.n	8004b4e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d106      	bne.n	8004b42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b34:	4b15      	ldr	r3, [pc, #84]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	4a14      	ldr	r2, [pc, #80]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004b3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b40:	e005      	b.n	8004b4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b42:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b46:	4a11      	ldr	r2, [pc, #68]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004b48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004b4e:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a0e      	ldr	r2, [pc, #56]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004b54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b5a:	f7fc fd95 	bl	8001688 <HAL_GetTick>
 8004b5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b60:	e008      	b.n	8004b74 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004b62:	f7fc fd91 	bl	8001688 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e006      	b.n	8004b82 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b74:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0f0      	beq.n	8004b62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	58024400 	.word	0x58024400
 8004b90:	ffff0007 	.word	0xffff0007

08004b94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ba2:	4b53      	ldr	r3, [pc, #332]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	2b03      	cmp	r3, #3
 8004bac:	d101      	bne.n	8004bb2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e099      	b.n	8004ce6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004bb2:	4b4f      	ldr	r3, [pc, #316]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a4e      	ldr	r2, [pc, #312]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bbe:	f7fc fd63 	bl	8001688 <HAL_GetTick>
 8004bc2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bc4:	e008      	b.n	8004bd8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004bc6:	f7fc fd5f 	bl	8001688 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e086      	b.n	8004ce6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bd8:	4b45      	ldr	r3, [pc, #276]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1f0      	bne.n	8004bc6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004be4:	4b42      	ldr	r3, [pc, #264]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	051b      	lsls	r3, r3, #20
 8004bf2:	493f      	ldr	r1, [pc, #252]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	628b      	str	r3, [r1, #40]	; 0x28
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	025b      	lsls	r3, r3, #9
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	041b      	lsls	r3, r3, #16
 8004c16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	061b      	lsls	r3, r3, #24
 8004c24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c28:	4931      	ldr	r1, [pc, #196]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c2e:	4b30      	ldr	r3, [pc, #192]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	492d      	ldr	r1, [pc, #180]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c40:	4b2b      	ldr	r3, [pc, #172]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	4928      	ldr	r1, [pc, #160]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004c52:	4b27      	ldr	r3, [pc, #156]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	4a26      	ldr	r2, [pc, #152]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004c5e:	4b24      	ldr	r3, [pc, #144]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c62:	4b24      	ldr	r3, [pc, #144]	; (8004cf4 <RCCEx_PLL3_Config+0x160>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	69d2      	ldr	r2, [r2, #28]
 8004c6a:	00d2      	lsls	r2, r2, #3
 8004c6c:	4920      	ldr	r1, [pc, #128]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c72:	4b1f      	ldr	r3, [pc, #124]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c76:	4a1e      	ldr	r2, [pc, #120]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d106      	bne.n	8004c92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c84:	4b1a      	ldr	r3, [pc, #104]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	4a19      	ldr	r2, [pc, #100]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c90:	e00f      	b.n	8004cb2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d106      	bne.n	8004ca6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c98:	4b15      	ldr	r3, [pc, #84]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	4a14      	ldr	r2, [pc, #80]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ca2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ca4:	e005      	b.n	8004cb2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004ca6:	4b12      	ldr	r3, [pc, #72]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	4a11      	ldr	r2, [pc, #68]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004cac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004cb2:	4b0f      	ldr	r3, [pc, #60]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a0e      	ldr	r2, [pc, #56]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cbe:	f7fc fce3 	bl	8001688 <HAL_GetTick>
 8004cc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cc4:	e008      	b.n	8004cd8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004cc6:	f7fc fcdf 	bl	8001688 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e006      	b.n	8004ce6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cd8:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0f0      	beq.n	8004cc6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	58024400 	.word	0x58024400
 8004cf4:	ffff0007 	.word	0xffff0007

08004cf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e049      	b.n	8004d9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d106      	bne.n	8004d24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7fc f9ac 	bl	800107c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3304      	adds	r3, #4
 8004d34:	4619      	mov	r1, r3
 8004d36:	4610      	mov	r0, r2
 8004d38:	f000 fa76 	bl	8005228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b082      	sub	sp, #8
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e049      	b.n	8004e4c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d106      	bne.n	8004dd2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f841 	bl	8004e54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	3304      	adds	r3, #4
 8004de2:	4619      	mov	r1, r3
 8004de4:	4610      	mov	r0, r2
 8004de6:	f000 fa1f 	bl	8005228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d101      	bne.n	8004e82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	e0fd      	b.n	800507e <HAL_TIM_PWM_ConfigChannel+0x216>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b14      	cmp	r3, #20
 8004e8e:	f200 80f0 	bhi.w	8005072 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004e92:	a201      	add	r2, pc, #4	; (adr r2, 8004e98 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e98:	08004eed 	.word	0x08004eed
 8004e9c:	08005073 	.word	0x08005073
 8004ea0:	08005073 	.word	0x08005073
 8004ea4:	08005073 	.word	0x08005073
 8004ea8:	08004f2d 	.word	0x08004f2d
 8004eac:	08005073 	.word	0x08005073
 8004eb0:	08005073 	.word	0x08005073
 8004eb4:	08005073 	.word	0x08005073
 8004eb8:	08004f6f 	.word	0x08004f6f
 8004ebc:	08005073 	.word	0x08005073
 8004ec0:	08005073 	.word	0x08005073
 8004ec4:	08005073 	.word	0x08005073
 8004ec8:	08004faf 	.word	0x08004faf
 8004ecc:	08005073 	.word	0x08005073
 8004ed0:	08005073 	.word	0x08005073
 8004ed4:	08005073 	.word	0x08005073
 8004ed8:	08004ff1 	.word	0x08004ff1
 8004edc:	08005073 	.word	0x08005073
 8004ee0:	08005073 	.word	0x08005073
 8004ee4:	08005073 	.word	0x08005073
 8004ee8:	08005031 	.word	0x08005031
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68b9      	ldr	r1, [r7, #8]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 fa32 	bl	800535c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	699a      	ldr	r2, [r3, #24]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0208 	orr.w	r2, r2, #8
 8004f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699a      	ldr	r2, [r3, #24]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0204 	bic.w	r2, r2, #4
 8004f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6999      	ldr	r1, [r3, #24]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	691a      	ldr	r2, [r3, #16]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	619a      	str	r2, [r3, #24]
      break;
 8004f2a:	e0a3      	b.n	8005074 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68b9      	ldr	r1, [r7, #8]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 faa2 	bl	800547c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699a      	ldr	r2, [r3, #24]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699a      	ldr	r2, [r3, #24]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6999      	ldr	r1, [r3, #24]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	021a      	lsls	r2, r3, #8
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	619a      	str	r2, [r3, #24]
      break;
 8004f6c:	e082      	b.n	8005074 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68b9      	ldr	r1, [r7, #8]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f000 fb0b 	bl	8005590 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69da      	ldr	r2, [r3, #28]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f042 0208 	orr.w	r2, r2, #8
 8004f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	69da      	ldr	r2, [r3, #28]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0204 	bic.w	r2, r2, #4
 8004f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	69d9      	ldr	r1, [r3, #28]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	691a      	ldr	r2, [r3, #16]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	61da      	str	r2, [r3, #28]
      break;
 8004fac:	e062      	b.n	8005074 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68b9      	ldr	r1, [r7, #8]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f000 fb71 	bl	800569c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69da      	ldr	r2, [r3, #28]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	69da      	ldr	r2, [r3, #28]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69d9      	ldr	r1, [r3, #28]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	021a      	lsls	r2, r3, #8
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	61da      	str	r2, [r3, #28]
      break;
 8004fee:	e041      	b.n	8005074 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68b9      	ldr	r1, [r7, #8]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 fbb8 	bl	800576c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0208 	orr.w	r2, r2, #8
 800500a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0204 	bic.w	r2, r2, #4
 800501a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	691a      	ldr	r2, [r3, #16]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800502e:	e021      	b.n	8005074 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68b9      	ldr	r1, [r7, #8]
 8005036:	4618      	mov	r0, r3
 8005038:	f000 fbfa 	bl	8005830 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800504a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800505a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	021a      	lsls	r2, r3, #8
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005070:	e000      	b.n	8005074 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005072:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop

08005088 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005098:	2b01      	cmp	r3, #1
 800509a:	d101      	bne.n	80050a0 <HAL_TIM_ConfigClockSource+0x18>
 800509c:	2302      	movs	r3, #2
 800509e:	e0b7      	b.n	8005210 <HAL_TIM_ConfigClockSource+0x188>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	4b57      	ldr	r3, [pc, #348]	; (8005218 <HAL_TIM_ConfigClockSource+0x190>)
 80050bc:	4013      	ands	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b70      	cmp	r3, #112	; 0x70
 80050d6:	d02e      	beq.n	8005136 <HAL_TIM_ConfigClockSource+0xae>
 80050d8:	2b70      	cmp	r3, #112	; 0x70
 80050da:	d812      	bhi.n	8005102 <HAL_TIM_ConfigClockSource+0x7a>
 80050dc:	2b30      	cmp	r3, #48	; 0x30
 80050de:	f000 8084 	beq.w	80051ea <HAL_TIM_ConfigClockSource+0x162>
 80050e2:	2b30      	cmp	r3, #48	; 0x30
 80050e4:	d806      	bhi.n	80050f4 <HAL_TIM_ConfigClockSource+0x6c>
 80050e6:	2b10      	cmp	r3, #16
 80050e8:	d07f      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x162>
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	d07d      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x162>
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d07b      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80050f2:	e084      	b.n	80051fe <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80050f4:	2b50      	cmp	r3, #80	; 0x50
 80050f6:	d048      	beq.n	800518a <HAL_TIM_ConfigClockSource+0x102>
 80050f8:	2b60      	cmp	r3, #96	; 0x60
 80050fa:	d056      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x122>
 80050fc:	2b40      	cmp	r3, #64	; 0x40
 80050fe:	d064      	beq.n	80051ca <HAL_TIM_ConfigClockSource+0x142>
      break;
 8005100:	e07d      	b.n	80051fe <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005102:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005106:	d070      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x162>
 8005108:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800510c:	d809      	bhi.n	8005122 <HAL_TIM_ConfigClockSource+0x9a>
 800510e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005112:	d027      	beq.n	8005164 <HAL_TIM_ConfigClockSource+0xdc>
 8005114:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005118:	d067      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x162>
 800511a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800511e:	d06d      	beq.n	80051fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005120:	e06d      	b.n	80051fe <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005122:	4a3e      	ldr	r2, [pc, #248]	; (800521c <HAL_TIM_ConfigClockSource+0x194>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d060      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x162>
 8005128:	4a3d      	ldr	r2, [pc, #244]	; (8005220 <HAL_TIM_ConfigClockSource+0x198>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d05d      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x162>
 800512e:	4a3d      	ldr	r2, [pc, #244]	; (8005224 <HAL_TIM_ConfigClockSource+0x19c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d05a      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x162>
      break;
 8005134:	e063      	b.n	80051fe <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6818      	ldr	r0, [r3, #0]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	6899      	ldr	r1, [r3, #8]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f000 fc55 	bl	80059f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005158:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	609a      	str	r2, [r3, #8]
      break;
 8005162:	e04c      	b.n	80051fe <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6818      	ldr	r0, [r3, #0]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	6899      	ldr	r1, [r3, #8]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f000 fc3e 	bl	80059f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005186:	609a      	str	r2, [r3, #8]
      break;
 8005188:	e039      	b.n	80051fe <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6859      	ldr	r1, [r3, #4]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	461a      	mov	r2, r3
 8005198:	f000 fbae 	bl	80058f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2150      	movs	r1, #80	; 0x50
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fc08 	bl	80059b8 <TIM_ITRx_SetConfig>
      break;
 80051a8:	e029      	b.n	80051fe <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6818      	ldr	r0, [r3, #0]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	6859      	ldr	r1, [r3, #4]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	461a      	mov	r2, r3
 80051b8:	f000 fbcd 	bl	8005956 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2160      	movs	r1, #96	; 0x60
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fbf8 	bl	80059b8 <TIM_ITRx_SetConfig>
      break;
 80051c8:	e019      	b.n	80051fe <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6818      	ldr	r0, [r3, #0]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	6859      	ldr	r1, [r3, #4]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	461a      	mov	r2, r3
 80051d8:	f000 fb8e 	bl	80058f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2140      	movs	r1, #64	; 0x40
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fbe8 	bl	80059b8 <TIM_ITRx_SetConfig>
      break;
 80051e8:	e009      	b.n	80051fe <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4619      	mov	r1, r3
 80051f4:	4610      	mov	r0, r2
 80051f6:	f000 fbdf 	bl	80059b8 <TIM_ITRx_SetConfig>
      break;
 80051fa:	e000      	b.n	80051fe <HAL_TIM_ConfigClockSource+0x176>
      break;
 80051fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	ffceff88 	.word	0xffceff88
 800521c:	00100030 	.word	0x00100030
 8005220:	00100040 	.word	0x00100040
 8005224:	00100020 	.word	0x00100020

08005228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a40      	ldr	r2, [pc, #256]	; (800533c <TIM_Base_SetConfig+0x114>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d013      	beq.n	8005268 <TIM_Base_SetConfig+0x40>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005246:	d00f      	beq.n	8005268 <TIM_Base_SetConfig+0x40>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a3d      	ldr	r2, [pc, #244]	; (8005340 <TIM_Base_SetConfig+0x118>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00b      	beq.n	8005268 <TIM_Base_SetConfig+0x40>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a3c      	ldr	r2, [pc, #240]	; (8005344 <TIM_Base_SetConfig+0x11c>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d007      	beq.n	8005268 <TIM_Base_SetConfig+0x40>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a3b      	ldr	r2, [pc, #236]	; (8005348 <TIM_Base_SetConfig+0x120>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d003      	beq.n	8005268 <TIM_Base_SetConfig+0x40>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a3a      	ldr	r2, [pc, #232]	; (800534c <TIM_Base_SetConfig+0x124>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d108      	bne.n	800527a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a2f      	ldr	r2, [pc, #188]	; (800533c <TIM_Base_SetConfig+0x114>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d01f      	beq.n	80052c2 <TIM_Base_SetConfig+0x9a>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005288:	d01b      	beq.n	80052c2 <TIM_Base_SetConfig+0x9a>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a2c      	ldr	r2, [pc, #176]	; (8005340 <TIM_Base_SetConfig+0x118>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d017      	beq.n	80052c2 <TIM_Base_SetConfig+0x9a>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a2b      	ldr	r2, [pc, #172]	; (8005344 <TIM_Base_SetConfig+0x11c>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d013      	beq.n	80052c2 <TIM_Base_SetConfig+0x9a>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a2a      	ldr	r2, [pc, #168]	; (8005348 <TIM_Base_SetConfig+0x120>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00f      	beq.n	80052c2 <TIM_Base_SetConfig+0x9a>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a29      	ldr	r2, [pc, #164]	; (800534c <TIM_Base_SetConfig+0x124>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d00b      	beq.n	80052c2 <TIM_Base_SetConfig+0x9a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a28      	ldr	r2, [pc, #160]	; (8005350 <TIM_Base_SetConfig+0x128>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d007      	beq.n	80052c2 <TIM_Base_SetConfig+0x9a>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a27      	ldr	r2, [pc, #156]	; (8005354 <TIM_Base_SetConfig+0x12c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d003      	beq.n	80052c2 <TIM_Base_SetConfig+0x9a>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a26      	ldr	r2, [pc, #152]	; (8005358 <TIM_Base_SetConfig+0x130>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d108      	bne.n	80052d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a10      	ldr	r2, [pc, #64]	; (800533c <TIM_Base_SetConfig+0x114>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d00f      	beq.n	8005320 <TIM_Base_SetConfig+0xf8>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a12      	ldr	r2, [pc, #72]	; (800534c <TIM_Base_SetConfig+0x124>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00b      	beq.n	8005320 <TIM_Base_SetConfig+0xf8>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a11      	ldr	r2, [pc, #68]	; (8005350 <TIM_Base_SetConfig+0x128>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d007      	beq.n	8005320 <TIM_Base_SetConfig+0xf8>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a10      	ldr	r2, [pc, #64]	; (8005354 <TIM_Base_SetConfig+0x12c>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d003      	beq.n	8005320 <TIM_Base_SetConfig+0xf8>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a0f      	ldr	r2, [pc, #60]	; (8005358 <TIM_Base_SetConfig+0x130>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d103      	bne.n	8005328 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	615a      	str	r2, [r3, #20]
}
 800532e:	bf00      	nop
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	40010000 	.word	0x40010000
 8005340:	40000400 	.word	0x40000400
 8005344:	40000800 	.word	0x40000800
 8005348:	40000c00 	.word	0x40000c00
 800534c:	40010400 	.word	0x40010400
 8005350:	40014000 	.word	0x40014000
 8005354:	40014400 	.word	0x40014400
 8005358:	40014800 	.word	0x40014800

0800535c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	f023 0201 	bic.w	r2, r3, #1
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4b37      	ldr	r3, [pc, #220]	; (8005464 <TIM_OC1_SetConfig+0x108>)
 8005388:	4013      	ands	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 0303 	bic.w	r3, r3, #3
 8005392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	4313      	orrs	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f023 0302 	bic.w	r3, r3, #2
 80053a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a2d      	ldr	r2, [pc, #180]	; (8005468 <TIM_OC1_SetConfig+0x10c>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d00f      	beq.n	80053d8 <TIM_OC1_SetConfig+0x7c>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a2c      	ldr	r2, [pc, #176]	; (800546c <TIM_OC1_SetConfig+0x110>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d00b      	beq.n	80053d8 <TIM_OC1_SetConfig+0x7c>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a2b      	ldr	r2, [pc, #172]	; (8005470 <TIM_OC1_SetConfig+0x114>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d007      	beq.n	80053d8 <TIM_OC1_SetConfig+0x7c>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a2a      	ldr	r2, [pc, #168]	; (8005474 <TIM_OC1_SetConfig+0x118>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d003      	beq.n	80053d8 <TIM_OC1_SetConfig+0x7c>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a29      	ldr	r2, [pc, #164]	; (8005478 <TIM_OC1_SetConfig+0x11c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d10c      	bne.n	80053f2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f023 0308 	bic.w	r3, r3, #8
 80053de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f023 0304 	bic.w	r3, r3, #4
 80053f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a1c      	ldr	r2, [pc, #112]	; (8005468 <TIM_OC1_SetConfig+0x10c>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d00f      	beq.n	800541a <TIM_OC1_SetConfig+0xbe>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a1b      	ldr	r2, [pc, #108]	; (800546c <TIM_OC1_SetConfig+0x110>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00b      	beq.n	800541a <TIM_OC1_SetConfig+0xbe>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a1a      	ldr	r2, [pc, #104]	; (8005470 <TIM_OC1_SetConfig+0x114>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d007      	beq.n	800541a <TIM_OC1_SetConfig+0xbe>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a19      	ldr	r2, [pc, #100]	; (8005474 <TIM_OC1_SetConfig+0x118>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d003      	beq.n	800541a <TIM_OC1_SetConfig+0xbe>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a18      	ldr	r2, [pc, #96]	; (8005478 <TIM_OC1_SetConfig+0x11c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d111      	bne.n	800543e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	4313      	orrs	r3, r2
 8005432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4313      	orrs	r3, r2
 800543c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	621a      	str	r2, [r3, #32]
}
 8005458:	bf00      	nop
 800545a:	371c      	adds	r7, #28
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	fffeff8f 	.word	0xfffeff8f
 8005468:	40010000 	.word	0x40010000
 800546c:	40010400 	.word	0x40010400
 8005470:	40014000 	.word	0x40014000
 8005474:	40014400 	.word	0x40014400
 8005478:	40014800 	.word	0x40014800

0800547c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	f023 0210 	bic.w	r2, r3, #16
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	4b34      	ldr	r3, [pc, #208]	; (8005578 <TIM_OC2_SetConfig+0xfc>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	021b      	lsls	r3, r3, #8
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f023 0320 	bic.w	r3, r3, #32
 80054c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a29      	ldr	r2, [pc, #164]	; (800557c <TIM_OC2_SetConfig+0x100>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <TIM_OC2_SetConfig+0x68>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a28      	ldr	r2, [pc, #160]	; (8005580 <TIM_OC2_SetConfig+0x104>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d10d      	bne.n	8005500 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a1e      	ldr	r2, [pc, #120]	; (800557c <TIM_OC2_SetConfig+0x100>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00f      	beq.n	8005528 <TIM_OC2_SetConfig+0xac>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a1d      	ldr	r2, [pc, #116]	; (8005580 <TIM_OC2_SetConfig+0x104>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00b      	beq.n	8005528 <TIM_OC2_SetConfig+0xac>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a1c      	ldr	r2, [pc, #112]	; (8005584 <TIM_OC2_SetConfig+0x108>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d007      	beq.n	8005528 <TIM_OC2_SetConfig+0xac>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a1b      	ldr	r2, [pc, #108]	; (8005588 <TIM_OC2_SetConfig+0x10c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d003      	beq.n	8005528 <TIM_OC2_SetConfig+0xac>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a1a      	ldr	r2, [pc, #104]	; (800558c <TIM_OC2_SetConfig+0x110>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d113      	bne.n	8005550 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800552e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005536:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	621a      	str	r2, [r3, #32]
}
 800556a:	bf00      	nop
 800556c:	371c      	adds	r7, #28
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	feff8fff 	.word	0xfeff8fff
 800557c:	40010000 	.word	0x40010000
 8005580:	40010400 	.word	0x40010400
 8005584:	40014000 	.word	0x40014000
 8005588:	40014400 	.word	0x40014400
 800558c:	40014800 	.word	0x40014800

08005590 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 0303 	bic.w	r3, r3, #3
 80055c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	021b      	lsls	r3, r3, #8
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a27      	ldr	r2, [pc, #156]	; (8005688 <TIM_OC3_SetConfig+0xf8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d003      	beq.n	80055f6 <TIM_OC3_SetConfig+0x66>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a26      	ldr	r2, [pc, #152]	; (800568c <TIM_OC3_SetConfig+0xfc>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d10d      	bne.n	8005612 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	021b      	lsls	r3, r3, #8
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	4313      	orrs	r3, r2
 8005608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005610:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a1c      	ldr	r2, [pc, #112]	; (8005688 <TIM_OC3_SetConfig+0xf8>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d00f      	beq.n	800563a <TIM_OC3_SetConfig+0xaa>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a1b      	ldr	r2, [pc, #108]	; (800568c <TIM_OC3_SetConfig+0xfc>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d00b      	beq.n	800563a <TIM_OC3_SetConfig+0xaa>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a1a      	ldr	r2, [pc, #104]	; (8005690 <TIM_OC3_SetConfig+0x100>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d007      	beq.n	800563a <TIM_OC3_SetConfig+0xaa>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a19      	ldr	r2, [pc, #100]	; (8005694 <TIM_OC3_SetConfig+0x104>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d003      	beq.n	800563a <TIM_OC3_SetConfig+0xaa>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a18      	ldr	r2, [pc, #96]	; (8005698 <TIM_OC3_SetConfig+0x108>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d113      	bne.n	8005662 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	4313      	orrs	r3, r2
 8005654:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	4313      	orrs	r3, r2
 8005660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	621a      	str	r2, [r3, #32]
}
 800567c:	bf00      	nop
 800567e:	371c      	adds	r7, #28
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	40010000 	.word	0x40010000
 800568c:	40010400 	.word	0x40010400
 8005690:	40014000 	.word	0x40014000
 8005694:	40014400 	.word	0x40014400
 8005698:	40014800 	.word	0x40014800

0800569c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	021b      	lsls	r3, r3, #8
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	4313      	orrs	r3, r2
 80056de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	031b      	lsls	r3, r3, #12
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a18      	ldr	r2, [pc, #96]	; (8005758 <TIM_OC4_SetConfig+0xbc>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00f      	beq.n	800571c <TIM_OC4_SetConfig+0x80>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a17      	ldr	r2, [pc, #92]	; (800575c <TIM_OC4_SetConfig+0xc0>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00b      	beq.n	800571c <TIM_OC4_SetConfig+0x80>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a16      	ldr	r2, [pc, #88]	; (8005760 <TIM_OC4_SetConfig+0xc4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d007      	beq.n	800571c <TIM_OC4_SetConfig+0x80>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a15      	ldr	r2, [pc, #84]	; (8005764 <TIM_OC4_SetConfig+0xc8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d003      	beq.n	800571c <TIM_OC4_SetConfig+0x80>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a14      	ldr	r2, [pc, #80]	; (8005768 <TIM_OC4_SetConfig+0xcc>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d109      	bne.n	8005730 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005722:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	019b      	lsls	r3, r3, #6
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	621a      	str	r2, [r3, #32]
}
 800574a:	bf00      	nop
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40010000 	.word	0x40010000
 800575c:	40010400 	.word	0x40010400
 8005760:	40014000 	.word	0x40014000
 8005764:	40014400 	.word	0x40014400
 8005768:	40014800 	.word	0x40014800

0800576c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80057ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	041b      	lsls	r3, r3, #16
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a17      	ldr	r2, [pc, #92]	; (800581c <TIM_OC5_SetConfig+0xb0>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d00f      	beq.n	80057e2 <TIM_OC5_SetConfig+0x76>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a16      	ldr	r2, [pc, #88]	; (8005820 <TIM_OC5_SetConfig+0xb4>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d00b      	beq.n	80057e2 <TIM_OC5_SetConfig+0x76>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a15      	ldr	r2, [pc, #84]	; (8005824 <TIM_OC5_SetConfig+0xb8>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d007      	beq.n	80057e2 <TIM_OC5_SetConfig+0x76>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a14      	ldr	r2, [pc, #80]	; (8005828 <TIM_OC5_SetConfig+0xbc>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d003      	beq.n	80057e2 <TIM_OC5_SetConfig+0x76>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a13      	ldr	r2, [pc, #76]	; (800582c <TIM_OC5_SetConfig+0xc0>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d109      	bne.n	80057f6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	021b      	lsls	r3, r3, #8
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	621a      	str	r2, [r3, #32]
}
 8005810:	bf00      	nop
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	40010000 	.word	0x40010000
 8005820:	40010400 	.word	0x40010400
 8005824:	40014000 	.word	0x40014000
 8005828:	40014400 	.word	0x40014400
 800582c:	40014800 	.word	0x40014800

08005830 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800585e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	021b      	lsls	r3, r3, #8
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	4313      	orrs	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005872:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	051b      	lsls	r3, r3, #20
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	4313      	orrs	r3, r2
 800587e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a18      	ldr	r2, [pc, #96]	; (80058e4 <TIM_OC6_SetConfig+0xb4>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00f      	beq.n	80058a8 <TIM_OC6_SetConfig+0x78>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a17      	ldr	r2, [pc, #92]	; (80058e8 <TIM_OC6_SetConfig+0xb8>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d00b      	beq.n	80058a8 <TIM_OC6_SetConfig+0x78>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a16      	ldr	r2, [pc, #88]	; (80058ec <TIM_OC6_SetConfig+0xbc>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d007      	beq.n	80058a8 <TIM_OC6_SetConfig+0x78>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a15      	ldr	r2, [pc, #84]	; (80058f0 <TIM_OC6_SetConfig+0xc0>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d003      	beq.n	80058a8 <TIM_OC6_SetConfig+0x78>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a14      	ldr	r2, [pc, #80]	; (80058f4 <TIM_OC6_SetConfig+0xc4>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d109      	bne.n	80058bc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80058ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	029b      	lsls	r3, r3, #10
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	621a      	str	r2, [r3, #32]
}
 80058d6:	bf00      	nop
 80058d8:	371c      	adds	r7, #28
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	40010000 	.word	0x40010000
 80058e8:	40010400 	.word	0x40010400
 80058ec:	40014000 	.word	0x40014000
 80058f0:	40014400 	.word	0x40014400
 80058f4:	40014800 	.word	0x40014800

080058f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	f023 0201 	bic.w	r2, r3, #1
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005922:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4313      	orrs	r3, r2
 800592c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f023 030a 	bic.w	r3, r3, #10
 8005934:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	4313      	orrs	r3, r2
 800593c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	621a      	str	r2, [r3, #32]
}
 800594a:	bf00      	nop
 800594c:	371c      	adds	r7, #28
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005956:	b480      	push	{r7}
 8005958:	b087      	sub	sp, #28
 800595a:	af00      	add	r7, sp, #0
 800595c:	60f8      	str	r0, [r7, #12]
 800595e:	60b9      	str	r1, [r7, #8]
 8005960:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	f023 0210 	bic.w	r2, r3, #16
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005980:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	031b      	lsls	r3, r3, #12
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005992:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	011b      	lsls	r3, r3, #4
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	4313      	orrs	r3, r2
 800599c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	621a      	str	r2, [r3, #32]
}
 80059aa:	bf00      	nop
 80059ac:	371c      	adds	r7, #28
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
	...

080059b8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4b09      	ldr	r3, [pc, #36]	; (80059f0 <TIM_ITRx_SetConfig+0x38>)
 80059cc:	4013      	ands	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f043 0307 	orr.w	r3, r3, #7
 80059da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	609a      	str	r2, [r3, #8]
}
 80059e2:	bf00      	nop
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	ffcfff8f 	.word	0xffcfff8f

080059f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
 8005a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	021a      	lsls	r2, r3, #8
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	431a      	orrs	r2, r3
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	609a      	str	r2, [r3, #8]
}
 8005a28:	bf00      	nop
 8005a2a:	371c      	adds	r7, #28
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e068      	b.n	8005b1e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a2e      	ldr	r2, [pc, #184]	; (8005b2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d004      	beq.n	8005a80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a2d      	ldr	r2, [pc, #180]	; (8005b30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d108      	bne.n	8005a92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a1e      	ldr	r2, [pc, #120]	; (8005b2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d01d      	beq.n	8005af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005abe:	d018      	beq.n	8005af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a1b      	ldr	r2, [pc, #108]	; (8005b34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d013      	beq.n	8005af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a1a      	ldr	r2, [pc, #104]	; (8005b38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d00e      	beq.n	8005af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a18      	ldr	r2, [pc, #96]	; (8005b3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d009      	beq.n	8005af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a13      	ldr	r2, [pc, #76]	; (8005b30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d004      	beq.n	8005af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a14      	ldr	r2, [pc, #80]	; (8005b40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d10c      	bne.n	8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005af8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	40010000 	.word	0x40010000
 8005b30:	40010400 	.word	0x40010400
 8005b34:	40000400 	.word	0x40000400
 8005b38:	40000800 	.word	0x40000800
 8005b3c:	40000c00 	.word	0x40000c00
 8005b40:	40001800 	.word	0x40001800

08005b44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d101      	bne.n	8005b60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	e065      	b.n	8005c2c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	041b      	lsls	r3, r3, #16
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a16      	ldr	r2, [pc, #88]	; (8005c38 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d004      	beq.n	8005bee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a14      	ldr	r2, [pc, #80]	; (8005c3c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d115      	bne.n	8005c1a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	051b      	lsls	r3, r3, #20
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	40010000 	.word	0x40010000
 8005c3c:	40010400 	.word	0x40010400

08005c40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e042      	b.n	8005cd8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d106      	bne.n	8005c6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7fb fb07 	bl	8001278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2224      	movs	r2, #36	; 0x24
 8005c6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0201 	bic.w	r2, r2, #1
 8005c80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f82c 	bl	8005ce0 <UART_SetConfig>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d101      	bne.n	8005c92 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e022      	b.n	8005cd8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d002      	beq.n	8005ca0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fdd0 	bl	8006840 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689a      	ldr	r2, [r3, #8]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f042 0201 	orr.w	r2, r2, #1
 8005cce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 fe57 	bl	8006984 <UART_CheckIdleState>
 8005cd6:	4603      	mov	r3, r0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3708      	adds	r7, #8
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ce0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005ce4:	b08e      	sub	sp, #56	; 0x38
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cea:	2300      	movs	r3, #0
 8005cec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	4bc1      	ldr	r3, [pc, #772]	; (8006020 <UART_SetConfig+0x340>)
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	6812      	ldr	r2, [r2, #0]
 8005d20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d22:	430b      	orrs	r3, r1
 8005d24:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4ab7      	ldr	r2, [pc, #732]	; (8006024 <UART_SetConfig+0x344>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d004      	beq.n	8005d56 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d52:	4313      	orrs	r3, r2
 8005d54:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	4bb2      	ldr	r3, [pc, #712]	; (8006028 <UART_SetConfig+0x348>)
 8005d5e:	4013      	ands	r3, r2
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6812      	ldr	r2, [r2, #0]
 8005d64:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d66:	430b      	orrs	r3, r1
 8005d68:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d70:	f023 010f 	bic.w	r1, r3, #15
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4aa9      	ldr	r2, [pc, #676]	; (800602c <UART_SetConfig+0x34c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d177      	bne.n	8005e7a <UART_SetConfig+0x19a>
 8005d8a:	4ba9      	ldr	r3, [pc, #676]	; (8006030 <UART_SetConfig+0x350>)
 8005d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d92:	2b28      	cmp	r3, #40	; 0x28
 8005d94:	d86c      	bhi.n	8005e70 <UART_SetConfig+0x190>
 8005d96:	a201      	add	r2, pc, #4	; (adr r2, 8005d9c <UART_SetConfig+0xbc>)
 8005d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9c:	08005e41 	.word	0x08005e41
 8005da0:	08005e71 	.word	0x08005e71
 8005da4:	08005e71 	.word	0x08005e71
 8005da8:	08005e71 	.word	0x08005e71
 8005dac:	08005e71 	.word	0x08005e71
 8005db0:	08005e71 	.word	0x08005e71
 8005db4:	08005e71 	.word	0x08005e71
 8005db8:	08005e71 	.word	0x08005e71
 8005dbc:	08005e49 	.word	0x08005e49
 8005dc0:	08005e71 	.word	0x08005e71
 8005dc4:	08005e71 	.word	0x08005e71
 8005dc8:	08005e71 	.word	0x08005e71
 8005dcc:	08005e71 	.word	0x08005e71
 8005dd0:	08005e71 	.word	0x08005e71
 8005dd4:	08005e71 	.word	0x08005e71
 8005dd8:	08005e71 	.word	0x08005e71
 8005ddc:	08005e51 	.word	0x08005e51
 8005de0:	08005e71 	.word	0x08005e71
 8005de4:	08005e71 	.word	0x08005e71
 8005de8:	08005e71 	.word	0x08005e71
 8005dec:	08005e71 	.word	0x08005e71
 8005df0:	08005e71 	.word	0x08005e71
 8005df4:	08005e71 	.word	0x08005e71
 8005df8:	08005e71 	.word	0x08005e71
 8005dfc:	08005e59 	.word	0x08005e59
 8005e00:	08005e71 	.word	0x08005e71
 8005e04:	08005e71 	.word	0x08005e71
 8005e08:	08005e71 	.word	0x08005e71
 8005e0c:	08005e71 	.word	0x08005e71
 8005e10:	08005e71 	.word	0x08005e71
 8005e14:	08005e71 	.word	0x08005e71
 8005e18:	08005e71 	.word	0x08005e71
 8005e1c:	08005e61 	.word	0x08005e61
 8005e20:	08005e71 	.word	0x08005e71
 8005e24:	08005e71 	.word	0x08005e71
 8005e28:	08005e71 	.word	0x08005e71
 8005e2c:	08005e71 	.word	0x08005e71
 8005e30:	08005e71 	.word	0x08005e71
 8005e34:	08005e71 	.word	0x08005e71
 8005e38:	08005e71 	.word	0x08005e71
 8005e3c:	08005e69 	.word	0x08005e69
 8005e40:	2301      	movs	r3, #1
 8005e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e46:	e233      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005e48:	2304      	movs	r3, #4
 8005e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e4e:	e22f      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005e50:	2308      	movs	r3, #8
 8005e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e56:	e22b      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005e58:	2310      	movs	r3, #16
 8005e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e5e:	e227      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005e60:	2320      	movs	r3, #32
 8005e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e66:	e223      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005e68:	2340      	movs	r3, #64	; 0x40
 8005e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e6e:	e21f      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005e70:	2380      	movs	r3, #128	; 0x80
 8005e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e76:	bf00      	nop
 8005e78:	e21a      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a6d      	ldr	r2, [pc, #436]	; (8006034 <UART_SetConfig+0x354>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d132      	bne.n	8005eea <UART_SetConfig+0x20a>
 8005e84:	4b6a      	ldr	r3, [pc, #424]	; (8006030 <UART_SetConfig+0x350>)
 8005e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e88:	f003 0307 	and.w	r3, r3, #7
 8005e8c:	2b05      	cmp	r3, #5
 8005e8e:	d827      	bhi.n	8005ee0 <UART_SetConfig+0x200>
 8005e90:	a201      	add	r2, pc, #4	; (adr r2, 8005e98 <UART_SetConfig+0x1b8>)
 8005e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e96:	bf00      	nop
 8005e98:	08005eb1 	.word	0x08005eb1
 8005e9c:	08005eb9 	.word	0x08005eb9
 8005ea0:	08005ec1 	.word	0x08005ec1
 8005ea4:	08005ec9 	.word	0x08005ec9
 8005ea8:	08005ed1 	.word	0x08005ed1
 8005eac:	08005ed9 	.word	0x08005ed9
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eb6:	e1fb      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005eb8:	2304      	movs	r3, #4
 8005eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ebe:	e1f7      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005ec0:	2308      	movs	r3, #8
 8005ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ec6:	e1f3      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005ec8:	2310      	movs	r3, #16
 8005eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ece:	e1ef      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005ed0:	2320      	movs	r3, #32
 8005ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ed6:	e1eb      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005ed8:	2340      	movs	r3, #64	; 0x40
 8005eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ede:	e1e7      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005ee0:	2380      	movs	r3, #128	; 0x80
 8005ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ee6:	bf00      	nop
 8005ee8:	e1e2      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a52      	ldr	r2, [pc, #328]	; (8006038 <UART_SetConfig+0x358>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d132      	bne.n	8005f5a <UART_SetConfig+0x27a>
 8005ef4:	4b4e      	ldr	r3, [pc, #312]	; (8006030 <UART_SetConfig+0x350>)
 8005ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef8:	f003 0307 	and.w	r3, r3, #7
 8005efc:	2b05      	cmp	r3, #5
 8005efe:	d827      	bhi.n	8005f50 <UART_SetConfig+0x270>
 8005f00:	a201      	add	r2, pc, #4	; (adr r2, 8005f08 <UART_SetConfig+0x228>)
 8005f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f06:	bf00      	nop
 8005f08:	08005f21 	.word	0x08005f21
 8005f0c:	08005f29 	.word	0x08005f29
 8005f10:	08005f31 	.word	0x08005f31
 8005f14:	08005f39 	.word	0x08005f39
 8005f18:	08005f41 	.word	0x08005f41
 8005f1c:	08005f49 	.word	0x08005f49
 8005f20:	2300      	movs	r3, #0
 8005f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f26:	e1c3      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005f28:	2304      	movs	r3, #4
 8005f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f2e:	e1bf      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005f30:	2308      	movs	r3, #8
 8005f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f36:	e1bb      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005f38:	2310      	movs	r3, #16
 8005f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f3e:	e1b7      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005f40:	2320      	movs	r3, #32
 8005f42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f46:	e1b3      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005f48:	2340      	movs	r3, #64	; 0x40
 8005f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f4e:	e1af      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005f50:	2380      	movs	r3, #128	; 0x80
 8005f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f56:	bf00      	nop
 8005f58:	e1aa      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a37      	ldr	r2, [pc, #220]	; (800603c <UART_SetConfig+0x35c>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d132      	bne.n	8005fca <UART_SetConfig+0x2ea>
 8005f64:	4b32      	ldr	r3, [pc, #200]	; (8006030 <UART_SetConfig+0x350>)
 8005f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f68:	f003 0307 	and.w	r3, r3, #7
 8005f6c:	2b05      	cmp	r3, #5
 8005f6e:	d827      	bhi.n	8005fc0 <UART_SetConfig+0x2e0>
 8005f70:	a201      	add	r2, pc, #4	; (adr r2, 8005f78 <UART_SetConfig+0x298>)
 8005f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f76:	bf00      	nop
 8005f78:	08005f91 	.word	0x08005f91
 8005f7c:	08005f99 	.word	0x08005f99
 8005f80:	08005fa1 	.word	0x08005fa1
 8005f84:	08005fa9 	.word	0x08005fa9
 8005f88:	08005fb1 	.word	0x08005fb1
 8005f8c:	08005fb9 	.word	0x08005fb9
 8005f90:	2300      	movs	r3, #0
 8005f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f96:	e18b      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005f98:	2304      	movs	r3, #4
 8005f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f9e:	e187      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005fa0:	2308      	movs	r3, #8
 8005fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fa6:	e183      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005fa8:	2310      	movs	r3, #16
 8005faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fae:	e17f      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005fb0:	2320      	movs	r3, #32
 8005fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fb6:	e17b      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005fb8:	2340      	movs	r3, #64	; 0x40
 8005fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fbe:	e177      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005fc0:	2380      	movs	r3, #128	; 0x80
 8005fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fc6:	bf00      	nop
 8005fc8:	e172      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a1c      	ldr	r2, [pc, #112]	; (8006040 <UART_SetConfig+0x360>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d144      	bne.n	800605e <UART_SetConfig+0x37e>
 8005fd4:	4b16      	ldr	r3, [pc, #88]	; (8006030 <UART_SetConfig+0x350>)
 8005fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd8:	f003 0307 	and.w	r3, r3, #7
 8005fdc:	2b05      	cmp	r3, #5
 8005fde:	d839      	bhi.n	8006054 <UART_SetConfig+0x374>
 8005fe0:	a201      	add	r2, pc, #4	; (adr r2, 8005fe8 <UART_SetConfig+0x308>)
 8005fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe6:	bf00      	nop
 8005fe8:	08006001 	.word	0x08006001
 8005fec:	08006009 	.word	0x08006009
 8005ff0:	08006011 	.word	0x08006011
 8005ff4:	08006019 	.word	0x08006019
 8005ff8:	08006045 	.word	0x08006045
 8005ffc:	0800604d 	.word	0x0800604d
 8006000:	2300      	movs	r3, #0
 8006002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006006:	e153      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8006008:	2304      	movs	r3, #4
 800600a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800600e:	e14f      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8006010:	2308      	movs	r3, #8
 8006012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006016:	e14b      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8006018:	2310      	movs	r3, #16
 800601a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800601e:	e147      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8006020:	cfff69f3 	.word	0xcfff69f3
 8006024:	58000c00 	.word	0x58000c00
 8006028:	11fff4ff 	.word	0x11fff4ff
 800602c:	40011000 	.word	0x40011000
 8006030:	58024400 	.word	0x58024400
 8006034:	40004400 	.word	0x40004400
 8006038:	40004800 	.word	0x40004800
 800603c:	40004c00 	.word	0x40004c00
 8006040:	40005000 	.word	0x40005000
 8006044:	2320      	movs	r3, #32
 8006046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800604a:	e131      	b.n	80062b0 <UART_SetConfig+0x5d0>
 800604c:	2340      	movs	r3, #64	; 0x40
 800604e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006052:	e12d      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8006054:	2380      	movs	r3, #128	; 0x80
 8006056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800605a:	bf00      	nop
 800605c:	e128      	b.n	80062b0 <UART_SetConfig+0x5d0>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4ab6      	ldr	r2, [pc, #728]	; (800633c <UART_SetConfig+0x65c>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d178      	bne.n	800615a <UART_SetConfig+0x47a>
 8006068:	4bb5      	ldr	r3, [pc, #724]	; (8006340 <UART_SetConfig+0x660>)
 800606a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800606c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006070:	2b28      	cmp	r3, #40	; 0x28
 8006072:	d86d      	bhi.n	8006150 <UART_SetConfig+0x470>
 8006074:	a201      	add	r2, pc, #4	; (adr r2, 800607c <UART_SetConfig+0x39c>)
 8006076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607a:	bf00      	nop
 800607c:	08006121 	.word	0x08006121
 8006080:	08006151 	.word	0x08006151
 8006084:	08006151 	.word	0x08006151
 8006088:	08006151 	.word	0x08006151
 800608c:	08006151 	.word	0x08006151
 8006090:	08006151 	.word	0x08006151
 8006094:	08006151 	.word	0x08006151
 8006098:	08006151 	.word	0x08006151
 800609c:	08006129 	.word	0x08006129
 80060a0:	08006151 	.word	0x08006151
 80060a4:	08006151 	.word	0x08006151
 80060a8:	08006151 	.word	0x08006151
 80060ac:	08006151 	.word	0x08006151
 80060b0:	08006151 	.word	0x08006151
 80060b4:	08006151 	.word	0x08006151
 80060b8:	08006151 	.word	0x08006151
 80060bc:	08006131 	.word	0x08006131
 80060c0:	08006151 	.word	0x08006151
 80060c4:	08006151 	.word	0x08006151
 80060c8:	08006151 	.word	0x08006151
 80060cc:	08006151 	.word	0x08006151
 80060d0:	08006151 	.word	0x08006151
 80060d4:	08006151 	.word	0x08006151
 80060d8:	08006151 	.word	0x08006151
 80060dc:	08006139 	.word	0x08006139
 80060e0:	08006151 	.word	0x08006151
 80060e4:	08006151 	.word	0x08006151
 80060e8:	08006151 	.word	0x08006151
 80060ec:	08006151 	.word	0x08006151
 80060f0:	08006151 	.word	0x08006151
 80060f4:	08006151 	.word	0x08006151
 80060f8:	08006151 	.word	0x08006151
 80060fc:	08006141 	.word	0x08006141
 8006100:	08006151 	.word	0x08006151
 8006104:	08006151 	.word	0x08006151
 8006108:	08006151 	.word	0x08006151
 800610c:	08006151 	.word	0x08006151
 8006110:	08006151 	.word	0x08006151
 8006114:	08006151 	.word	0x08006151
 8006118:	08006151 	.word	0x08006151
 800611c:	08006149 	.word	0x08006149
 8006120:	2301      	movs	r3, #1
 8006122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006126:	e0c3      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8006128:	2304      	movs	r3, #4
 800612a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800612e:	e0bf      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8006130:	2308      	movs	r3, #8
 8006132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006136:	e0bb      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8006138:	2310      	movs	r3, #16
 800613a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800613e:	e0b7      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8006140:	2320      	movs	r3, #32
 8006142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006146:	e0b3      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8006148:	2340      	movs	r3, #64	; 0x40
 800614a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800614e:	e0af      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8006150:	2380      	movs	r3, #128	; 0x80
 8006152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006156:	bf00      	nop
 8006158:	e0aa      	b.n	80062b0 <UART_SetConfig+0x5d0>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a79      	ldr	r2, [pc, #484]	; (8006344 <UART_SetConfig+0x664>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d132      	bne.n	80061ca <UART_SetConfig+0x4ea>
 8006164:	4b76      	ldr	r3, [pc, #472]	; (8006340 <UART_SetConfig+0x660>)
 8006166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	2b05      	cmp	r3, #5
 800616e:	d827      	bhi.n	80061c0 <UART_SetConfig+0x4e0>
 8006170:	a201      	add	r2, pc, #4	; (adr r2, 8006178 <UART_SetConfig+0x498>)
 8006172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006176:	bf00      	nop
 8006178:	08006191 	.word	0x08006191
 800617c:	08006199 	.word	0x08006199
 8006180:	080061a1 	.word	0x080061a1
 8006184:	080061a9 	.word	0x080061a9
 8006188:	080061b1 	.word	0x080061b1
 800618c:	080061b9 	.word	0x080061b9
 8006190:	2300      	movs	r3, #0
 8006192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006196:	e08b      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8006198:	2304      	movs	r3, #4
 800619a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800619e:	e087      	b.n	80062b0 <UART_SetConfig+0x5d0>
 80061a0:	2308      	movs	r3, #8
 80061a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061a6:	e083      	b.n	80062b0 <UART_SetConfig+0x5d0>
 80061a8:	2310      	movs	r3, #16
 80061aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061ae:	e07f      	b.n	80062b0 <UART_SetConfig+0x5d0>
 80061b0:	2320      	movs	r3, #32
 80061b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061b6:	e07b      	b.n	80062b0 <UART_SetConfig+0x5d0>
 80061b8:	2340      	movs	r3, #64	; 0x40
 80061ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061be:	e077      	b.n	80062b0 <UART_SetConfig+0x5d0>
 80061c0:	2380      	movs	r3, #128	; 0x80
 80061c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061c6:	bf00      	nop
 80061c8:	e072      	b.n	80062b0 <UART_SetConfig+0x5d0>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a5e      	ldr	r2, [pc, #376]	; (8006348 <UART_SetConfig+0x668>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d132      	bne.n	800623a <UART_SetConfig+0x55a>
 80061d4:	4b5a      	ldr	r3, [pc, #360]	; (8006340 <UART_SetConfig+0x660>)
 80061d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d8:	f003 0307 	and.w	r3, r3, #7
 80061dc:	2b05      	cmp	r3, #5
 80061de:	d827      	bhi.n	8006230 <UART_SetConfig+0x550>
 80061e0:	a201      	add	r2, pc, #4	; (adr r2, 80061e8 <UART_SetConfig+0x508>)
 80061e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e6:	bf00      	nop
 80061e8:	08006201 	.word	0x08006201
 80061ec:	08006209 	.word	0x08006209
 80061f0:	08006211 	.word	0x08006211
 80061f4:	08006219 	.word	0x08006219
 80061f8:	08006221 	.word	0x08006221
 80061fc:	08006229 	.word	0x08006229
 8006200:	2300      	movs	r3, #0
 8006202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006206:	e053      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8006208:	2304      	movs	r3, #4
 800620a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800620e:	e04f      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8006210:	2308      	movs	r3, #8
 8006212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006216:	e04b      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8006218:	2310      	movs	r3, #16
 800621a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800621e:	e047      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8006220:	2320      	movs	r3, #32
 8006222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006226:	e043      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8006228:	2340      	movs	r3, #64	; 0x40
 800622a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800622e:	e03f      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8006230:	2380      	movs	r3, #128	; 0x80
 8006232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006236:	bf00      	nop
 8006238:	e03a      	b.n	80062b0 <UART_SetConfig+0x5d0>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a43      	ldr	r2, [pc, #268]	; (800634c <UART_SetConfig+0x66c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d132      	bne.n	80062aa <UART_SetConfig+0x5ca>
 8006244:	4b3e      	ldr	r3, [pc, #248]	; (8006340 <UART_SetConfig+0x660>)
 8006246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	2b05      	cmp	r3, #5
 800624e:	d827      	bhi.n	80062a0 <UART_SetConfig+0x5c0>
 8006250:	a201      	add	r2, pc, #4	; (adr r2, 8006258 <UART_SetConfig+0x578>)
 8006252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006256:	bf00      	nop
 8006258:	08006271 	.word	0x08006271
 800625c:	08006279 	.word	0x08006279
 8006260:	08006281 	.word	0x08006281
 8006264:	08006289 	.word	0x08006289
 8006268:	08006291 	.word	0x08006291
 800626c:	08006299 	.word	0x08006299
 8006270:	2302      	movs	r3, #2
 8006272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006276:	e01b      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8006278:	2304      	movs	r3, #4
 800627a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800627e:	e017      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8006280:	2308      	movs	r3, #8
 8006282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006286:	e013      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8006288:	2310      	movs	r3, #16
 800628a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800628e:	e00f      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8006290:	2320      	movs	r3, #32
 8006292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006296:	e00b      	b.n	80062b0 <UART_SetConfig+0x5d0>
 8006298:	2340      	movs	r3, #64	; 0x40
 800629a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800629e:	e007      	b.n	80062b0 <UART_SetConfig+0x5d0>
 80062a0:	2380      	movs	r3, #128	; 0x80
 80062a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062a6:	bf00      	nop
 80062a8:	e002      	b.n	80062b0 <UART_SetConfig+0x5d0>
 80062aa:	2380      	movs	r3, #128	; 0x80
 80062ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a25      	ldr	r2, [pc, #148]	; (800634c <UART_SetConfig+0x66c>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	f040 80b8 	bne.w	800642c <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80062c0:	2b08      	cmp	r3, #8
 80062c2:	d019      	beq.n	80062f8 <UART_SetConfig+0x618>
 80062c4:	2b08      	cmp	r3, #8
 80062c6:	dc04      	bgt.n	80062d2 <UART_SetConfig+0x5f2>
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d009      	beq.n	80062e0 <UART_SetConfig+0x600>
 80062cc:	2b04      	cmp	r3, #4
 80062ce:	d00b      	beq.n	80062e8 <UART_SetConfig+0x608>
 80062d0:	e042      	b.n	8006358 <UART_SetConfig+0x678>
 80062d2:	2b20      	cmp	r3, #32
 80062d4:	d02b      	beq.n	800632e <UART_SetConfig+0x64e>
 80062d6:	2b40      	cmp	r3, #64	; 0x40
 80062d8:	d02c      	beq.n	8006334 <UART_SetConfig+0x654>
 80062da:	2b10      	cmp	r3, #16
 80062dc:	d014      	beq.n	8006308 <UART_SetConfig+0x628>
 80062de:	e03b      	b.n	8006358 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80062e0:	f7fe f8f8 	bl	80044d4 <HAL_RCCEx_GetD3PCLK1Freq>
 80062e4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80062e6:	e03d      	b.n	8006364 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062e8:	f107 0314 	add.w	r3, r7, #20
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fe f907 	bl	8004500 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062f6:	e035      	b.n	8006364 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062f8:	f107 0308 	add.w	r3, r7, #8
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fe fa4b 	bl	8004798 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006306:	e02d      	b.n	8006364 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006308:	4b0d      	ldr	r3, [pc, #52]	; (8006340 <UART_SetConfig+0x660>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0320 	and.w	r3, r3, #32
 8006310:	2b00      	cmp	r3, #0
 8006312:	d009      	beq.n	8006328 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006314:	4b0a      	ldr	r3, [pc, #40]	; (8006340 <UART_SetConfig+0x660>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	08db      	lsrs	r3, r3, #3
 800631a:	f003 0303 	and.w	r3, r3, #3
 800631e:	4a0c      	ldr	r2, [pc, #48]	; (8006350 <UART_SetConfig+0x670>)
 8006320:	fa22 f303 	lsr.w	r3, r2, r3
 8006324:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006326:	e01d      	b.n	8006364 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8006328:	4b09      	ldr	r3, [pc, #36]	; (8006350 <UART_SetConfig+0x670>)
 800632a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800632c:	e01a      	b.n	8006364 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800632e:	4b09      	ldr	r3, [pc, #36]	; (8006354 <UART_SetConfig+0x674>)
 8006330:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006332:	e017      	b.n	8006364 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006334:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006338:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800633a:	e013      	b.n	8006364 <UART_SetConfig+0x684>
 800633c:	40011400 	.word	0x40011400
 8006340:	58024400 	.word	0x58024400
 8006344:	40007800 	.word	0x40007800
 8006348:	40007c00 	.word	0x40007c00
 800634c:	58000c00 	.word	0x58000c00
 8006350:	03d09000 	.word	0x03d09000
 8006354:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006362:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006366:	2b00      	cmp	r3, #0
 8006368:	f000 824d 	beq.w	8006806 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	4aad      	ldr	r2, [pc, #692]	; (8006628 <UART_SetConfig+0x948>)
 8006372:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006376:	461a      	mov	r2, r3
 8006378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637a:	fbb3 f3f2 	udiv	r3, r3, r2
 800637e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	4613      	mov	r3, r2
 8006386:	005b      	lsls	r3, r3, #1
 8006388:	4413      	add	r3, r2
 800638a:	6a3a      	ldr	r2, [r7, #32]
 800638c:	429a      	cmp	r2, r3
 800638e:	d305      	bcc.n	800639c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006396:	6a3a      	ldr	r2, [r7, #32]
 8006398:	429a      	cmp	r2, r3
 800639a:	d903      	bls.n	80063a4 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80063a2:	e230      	b.n	8006806 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a6:	4618      	mov	r0, r3
 80063a8:	f04f 0100 	mov.w	r1, #0
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	4a9d      	ldr	r2, [pc, #628]	; (8006628 <UART_SetConfig+0x948>)
 80063b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	f04f 0400 	mov.w	r4, #0
 80063bc:	461a      	mov	r2, r3
 80063be:	4623      	mov	r3, r4
 80063c0:	f7f9 ff8a 	bl	80002d8 <__aeabi_uldivmod>
 80063c4:	4603      	mov	r3, r0
 80063c6:	460c      	mov	r4, r1
 80063c8:	4619      	mov	r1, r3
 80063ca:	4622      	mov	r2, r4
 80063cc:	f04f 0300 	mov.w	r3, #0
 80063d0:	f04f 0400 	mov.w	r4, #0
 80063d4:	0214      	lsls	r4, r2, #8
 80063d6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80063da:	020b      	lsls	r3, r1, #8
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	6852      	ldr	r2, [r2, #4]
 80063e0:	0852      	lsrs	r2, r2, #1
 80063e2:	4611      	mov	r1, r2
 80063e4:	f04f 0200 	mov.w	r2, #0
 80063e8:	eb13 0b01 	adds.w	fp, r3, r1
 80063ec:	eb44 0c02 	adc.w	ip, r4, r2
 80063f0:	4658      	mov	r0, fp
 80063f2:	4661      	mov	r1, ip
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f04f 0400 	mov.w	r4, #0
 80063fc:	461a      	mov	r2, r3
 80063fe:	4623      	mov	r3, r4
 8006400:	f7f9 ff6a 	bl	80002d8 <__aeabi_uldivmod>
 8006404:	4603      	mov	r3, r0
 8006406:	460c      	mov	r4, r1
 8006408:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800640a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006410:	d308      	bcc.n	8006424 <UART_SetConfig+0x744>
 8006412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006418:	d204      	bcs.n	8006424 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006420:	60da      	str	r2, [r3, #12]
 8006422:	e1f0      	b.n	8006806 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800642a:	e1ec      	b.n	8006806 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006434:	f040 8100 	bne.w	8006638 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8006438:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800643c:	2b40      	cmp	r3, #64	; 0x40
 800643e:	f200 80b7 	bhi.w	80065b0 <UART_SetConfig+0x8d0>
 8006442:	a201      	add	r2, pc, #4	; (adr r2, 8006448 <UART_SetConfig+0x768>)
 8006444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006448:	0800654d 	.word	0x0800654d
 800644c:	08006555 	.word	0x08006555
 8006450:	080065b1 	.word	0x080065b1
 8006454:	080065b1 	.word	0x080065b1
 8006458:	0800655d 	.word	0x0800655d
 800645c:	080065b1 	.word	0x080065b1
 8006460:	080065b1 	.word	0x080065b1
 8006464:	080065b1 	.word	0x080065b1
 8006468:	0800656d 	.word	0x0800656d
 800646c:	080065b1 	.word	0x080065b1
 8006470:	080065b1 	.word	0x080065b1
 8006474:	080065b1 	.word	0x080065b1
 8006478:	080065b1 	.word	0x080065b1
 800647c:	080065b1 	.word	0x080065b1
 8006480:	080065b1 	.word	0x080065b1
 8006484:	080065b1 	.word	0x080065b1
 8006488:	0800657d 	.word	0x0800657d
 800648c:	080065b1 	.word	0x080065b1
 8006490:	080065b1 	.word	0x080065b1
 8006494:	080065b1 	.word	0x080065b1
 8006498:	080065b1 	.word	0x080065b1
 800649c:	080065b1 	.word	0x080065b1
 80064a0:	080065b1 	.word	0x080065b1
 80064a4:	080065b1 	.word	0x080065b1
 80064a8:	080065b1 	.word	0x080065b1
 80064ac:	080065b1 	.word	0x080065b1
 80064b0:	080065b1 	.word	0x080065b1
 80064b4:	080065b1 	.word	0x080065b1
 80064b8:	080065b1 	.word	0x080065b1
 80064bc:	080065b1 	.word	0x080065b1
 80064c0:	080065b1 	.word	0x080065b1
 80064c4:	080065b1 	.word	0x080065b1
 80064c8:	080065a3 	.word	0x080065a3
 80064cc:	080065b1 	.word	0x080065b1
 80064d0:	080065b1 	.word	0x080065b1
 80064d4:	080065b1 	.word	0x080065b1
 80064d8:	080065b1 	.word	0x080065b1
 80064dc:	080065b1 	.word	0x080065b1
 80064e0:	080065b1 	.word	0x080065b1
 80064e4:	080065b1 	.word	0x080065b1
 80064e8:	080065b1 	.word	0x080065b1
 80064ec:	080065b1 	.word	0x080065b1
 80064f0:	080065b1 	.word	0x080065b1
 80064f4:	080065b1 	.word	0x080065b1
 80064f8:	080065b1 	.word	0x080065b1
 80064fc:	080065b1 	.word	0x080065b1
 8006500:	080065b1 	.word	0x080065b1
 8006504:	080065b1 	.word	0x080065b1
 8006508:	080065b1 	.word	0x080065b1
 800650c:	080065b1 	.word	0x080065b1
 8006510:	080065b1 	.word	0x080065b1
 8006514:	080065b1 	.word	0x080065b1
 8006518:	080065b1 	.word	0x080065b1
 800651c:	080065b1 	.word	0x080065b1
 8006520:	080065b1 	.word	0x080065b1
 8006524:	080065b1 	.word	0x080065b1
 8006528:	080065b1 	.word	0x080065b1
 800652c:	080065b1 	.word	0x080065b1
 8006530:	080065b1 	.word	0x080065b1
 8006534:	080065b1 	.word	0x080065b1
 8006538:	080065b1 	.word	0x080065b1
 800653c:	080065b1 	.word	0x080065b1
 8006540:	080065b1 	.word	0x080065b1
 8006544:	080065b1 	.word	0x080065b1
 8006548:	080065a9 	.word	0x080065a9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800654c:	f7fd f8a8 	bl	80036a0 <HAL_RCC_GetPCLK1Freq>
 8006550:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006552:	e033      	b.n	80065bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006554:	f7fd f8ba 	bl	80036cc <HAL_RCC_GetPCLK2Freq>
 8006558:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800655a:	e02f      	b.n	80065bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800655c:	f107 0314 	add.w	r3, r7, #20
 8006560:	4618      	mov	r0, r3
 8006562:	f7fd ffcd 	bl	8004500 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800656a:	e027      	b.n	80065bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800656c:	f107 0308 	add.w	r3, r7, #8
 8006570:	4618      	mov	r0, r3
 8006572:	f7fe f911 	bl	8004798 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800657a:	e01f      	b.n	80065bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800657c:	4b2b      	ldr	r3, [pc, #172]	; (800662c <UART_SetConfig+0x94c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0320 	and.w	r3, r3, #32
 8006584:	2b00      	cmp	r3, #0
 8006586:	d009      	beq.n	800659c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006588:	4b28      	ldr	r3, [pc, #160]	; (800662c <UART_SetConfig+0x94c>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	08db      	lsrs	r3, r3, #3
 800658e:	f003 0303 	and.w	r3, r3, #3
 8006592:	4a27      	ldr	r2, [pc, #156]	; (8006630 <UART_SetConfig+0x950>)
 8006594:	fa22 f303 	lsr.w	r3, r2, r3
 8006598:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800659a:	e00f      	b.n	80065bc <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800659c:	4b24      	ldr	r3, [pc, #144]	; (8006630 <UART_SetConfig+0x950>)
 800659e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065a0:	e00c      	b.n	80065bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80065a2:	4b24      	ldr	r3, [pc, #144]	; (8006634 <UART_SetConfig+0x954>)
 80065a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065a6:	e009      	b.n	80065bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065ae:	e005      	b.n	80065bc <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80065b0:	2300      	movs	r3, #0
 80065b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80065ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 8121 	beq.w	8006806 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	4a17      	ldr	r2, [pc, #92]	; (8006628 <UART_SetConfig+0x948>)
 80065ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065ce:	461a      	mov	r2, r3
 80065d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80065d6:	005a      	lsls	r2, r3, #1
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	085b      	lsrs	r3, r3, #1
 80065de:	441a      	add	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ee:	2b0f      	cmp	r3, #15
 80065f0:	d916      	bls.n	8006620 <UART_SetConfig+0x940>
 80065f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f8:	d212      	bcs.n	8006620 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	f023 030f 	bic.w	r3, r3, #15
 8006602:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006606:	085b      	lsrs	r3, r3, #1
 8006608:	b29b      	uxth	r3, r3
 800660a:	f003 0307 	and.w	r3, r3, #7
 800660e:	b29a      	uxth	r2, r3
 8006610:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006612:	4313      	orrs	r3, r2
 8006614:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800661c:	60da      	str	r2, [r3, #12]
 800661e:	e0f2      	b.n	8006806 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006626:	e0ee      	b.n	8006806 <UART_SetConfig+0xb26>
 8006628:	08007334 	.word	0x08007334
 800662c:	58024400 	.word	0x58024400
 8006630:	03d09000 	.word	0x03d09000
 8006634:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8006638:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800663c:	2b40      	cmp	r3, #64	; 0x40
 800663e:	f200 80b7 	bhi.w	80067b0 <UART_SetConfig+0xad0>
 8006642:	a201      	add	r2, pc, #4	; (adr r2, 8006648 <UART_SetConfig+0x968>)
 8006644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006648:	0800674d 	.word	0x0800674d
 800664c:	08006755 	.word	0x08006755
 8006650:	080067b1 	.word	0x080067b1
 8006654:	080067b1 	.word	0x080067b1
 8006658:	0800675d 	.word	0x0800675d
 800665c:	080067b1 	.word	0x080067b1
 8006660:	080067b1 	.word	0x080067b1
 8006664:	080067b1 	.word	0x080067b1
 8006668:	0800676d 	.word	0x0800676d
 800666c:	080067b1 	.word	0x080067b1
 8006670:	080067b1 	.word	0x080067b1
 8006674:	080067b1 	.word	0x080067b1
 8006678:	080067b1 	.word	0x080067b1
 800667c:	080067b1 	.word	0x080067b1
 8006680:	080067b1 	.word	0x080067b1
 8006684:	080067b1 	.word	0x080067b1
 8006688:	0800677d 	.word	0x0800677d
 800668c:	080067b1 	.word	0x080067b1
 8006690:	080067b1 	.word	0x080067b1
 8006694:	080067b1 	.word	0x080067b1
 8006698:	080067b1 	.word	0x080067b1
 800669c:	080067b1 	.word	0x080067b1
 80066a0:	080067b1 	.word	0x080067b1
 80066a4:	080067b1 	.word	0x080067b1
 80066a8:	080067b1 	.word	0x080067b1
 80066ac:	080067b1 	.word	0x080067b1
 80066b0:	080067b1 	.word	0x080067b1
 80066b4:	080067b1 	.word	0x080067b1
 80066b8:	080067b1 	.word	0x080067b1
 80066bc:	080067b1 	.word	0x080067b1
 80066c0:	080067b1 	.word	0x080067b1
 80066c4:	080067b1 	.word	0x080067b1
 80066c8:	080067a3 	.word	0x080067a3
 80066cc:	080067b1 	.word	0x080067b1
 80066d0:	080067b1 	.word	0x080067b1
 80066d4:	080067b1 	.word	0x080067b1
 80066d8:	080067b1 	.word	0x080067b1
 80066dc:	080067b1 	.word	0x080067b1
 80066e0:	080067b1 	.word	0x080067b1
 80066e4:	080067b1 	.word	0x080067b1
 80066e8:	080067b1 	.word	0x080067b1
 80066ec:	080067b1 	.word	0x080067b1
 80066f0:	080067b1 	.word	0x080067b1
 80066f4:	080067b1 	.word	0x080067b1
 80066f8:	080067b1 	.word	0x080067b1
 80066fc:	080067b1 	.word	0x080067b1
 8006700:	080067b1 	.word	0x080067b1
 8006704:	080067b1 	.word	0x080067b1
 8006708:	080067b1 	.word	0x080067b1
 800670c:	080067b1 	.word	0x080067b1
 8006710:	080067b1 	.word	0x080067b1
 8006714:	080067b1 	.word	0x080067b1
 8006718:	080067b1 	.word	0x080067b1
 800671c:	080067b1 	.word	0x080067b1
 8006720:	080067b1 	.word	0x080067b1
 8006724:	080067b1 	.word	0x080067b1
 8006728:	080067b1 	.word	0x080067b1
 800672c:	080067b1 	.word	0x080067b1
 8006730:	080067b1 	.word	0x080067b1
 8006734:	080067b1 	.word	0x080067b1
 8006738:	080067b1 	.word	0x080067b1
 800673c:	080067b1 	.word	0x080067b1
 8006740:	080067b1 	.word	0x080067b1
 8006744:	080067b1 	.word	0x080067b1
 8006748:	080067a9 	.word	0x080067a9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800674c:	f7fc ffa8 	bl	80036a0 <HAL_RCC_GetPCLK1Freq>
 8006750:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006752:	e033      	b.n	80067bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006754:	f7fc ffba 	bl	80036cc <HAL_RCC_GetPCLK2Freq>
 8006758:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800675a:	e02f      	b.n	80067bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800675c:	f107 0314 	add.w	r3, r7, #20
 8006760:	4618      	mov	r0, r3
 8006762:	f7fd fecd 	bl	8004500 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800676a:	e027      	b.n	80067bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800676c:	f107 0308 	add.w	r3, r7, #8
 8006770:	4618      	mov	r0, r3
 8006772:	f7fe f811 	bl	8004798 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800677a:	e01f      	b.n	80067bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800677c:	4b2c      	ldr	r3, [pc, #176]	; (8006830 <UART_SetConfig+0xb50>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0320 	and.w	r3, r3, #32
 8006784:	2b00      	cmp	r3, #0
 8006786:	d009      	beq.n	800679c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006788:	4b29      	ldr	r3, [pc, #164]	; (8006830 <UART_SetConfig+0xb50>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	08db      	lsrs	r3, r3, #3
 800678e:	f003 0303 	and.w	r3, r3, #3
 8006792:	4a28      	ldr	r2, [pc, #160]	; (8006834 <UART_SetConfig+0xb54>)
 8006794:	fa22 f303 	lsr.w	r3, r2, r3
 8006798:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800679a:	e00f      	b.n	80067bc <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800679c:	4b25      	ldr	r3, [pc, #148]	; (8006834 <UART_SetConfig+0xb54>)
 800679e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067a0:	e00c      	b.n	80067bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067a2:	4b25      	ldr	r3, [pc, #148]	; (8006838 <UART_SetConfig+0xb58>)
 80067a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067a6:	e009      	b.n	80067bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067ae:	e005      	b.n	80067bc <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80067ba:	bf00      	nop
    }

    if (pclk != 0U)
 80067bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d021      	beq.n	8006806 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c6:	4a1d      	ldr	r2, [pc, #116]	; (800683c <UART_SetConfig+0xb5c>)
 80067c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067cc:	461a      	mov	r2, r3
 80067ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	085b      	lsrs	r3, r3, #1
 80067da:	441a      	add	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ea:	2b0f      	cmp	r3, #15
 80067ec:	d908      	bls.n	8006800 <UART_SetConfig+0xb20>
 80067ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067f4:	d204      	bcs.n	8006800 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067fc:	60da      	str	r2, [r3, #12]
 80067fe:	e002      	b.n	8006806 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006822:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006826:	4618      	mov	r0, r3
 8006828:	3738      	adds	r7, #56	; 0x38
 800682a:	46bd      	mov	sp, r7
 800682c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006830:	58024400 	.word	0x58024400
 8006834:	03d09000 	.word	0x03d09000
 8006838:	003d0900 	.word	0x003d0900
 800683c:	08007334 	.word	0x08007334

08006840 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00a      	beq.n	800686a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00a      	beq.n	800688c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	430a      	orrs	r2, r1
 800688a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00a      	beq.n	80068ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b2:	f003 0308 	and.w	r3, r3, #8
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00a      	beq.n	80068d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d4:	f003 0310 	and.w	r3, r3, #16
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00a      	beq.n	80068f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f6:	f003 0320 	and.w	r3, r3, #32
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00a      	beq.n	8006914 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691c:	2b00      	cmp	r3, #0
 800691e:	d01a      	beq.n	8006956 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800693a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800693e:	d10a      	bne.n	8006956 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00a      	beq.n	8006978 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	605a      	str	r2, [r3, #4]
  }
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af02      	add	r7, sp, #8
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006994:	f7fa fe78 	bl	8001688 <HAL_GetTick>
 8006998:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0308 	and.w	r3, r3, #8
 80069a4:	2b08      	cmp	r3, #8
 80069a6:	d10e      	bne.n	80069c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f82c 	bl	8006a14 <UART_WaitOnFlagUntilTimeout>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e022      	b.n	8006a0c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0304 	and.w	r3, r3, #4
 80069d0:	2b04      	cmp	r3, #4
 80069d2:	d10e      	bne.n	80069f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f816 	bl	8006a14 <UART_WaitOnFlagUntilTimeout>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e00c      	b.n	8006a0c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2220      	movs	r2, #32
 80069f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2220      	movs	r2, #32
 80069fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	603b      	str	r3, [r7, #0]
 8006a20:	4613      	mov	r3, r2
 8006a22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a24:	e062      	b.n	8006aec <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2c:	d05e      	beq.n	8006aec <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a2e:	f7fa fe2b 	bl	8001688 <HAL_GetTick>
 8006a32:	4602      	mov	r2, r0
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d302      	bcc.n	8006a44 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d11d      	bne.n	8006a80 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a52:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f022 0201 	bic.w	r2, r2, #1
 8006a62:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2220      	movs	r2, #32
 8006a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e045      	b.n	8006b0c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0304 	and.w	r3, r3, #4
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d02e      	beq.n	8006aec <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a9c:	d126      	bne.n	8006aec <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006aa6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ab6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689a      	ldr	r2, [r3, #8]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f022 0201 	bic.w	r2, r2, #1
 8006ac6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2220      	movs	r2, #32
 8006adc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e00f      	b.n	8006b0c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	69da      	ldr	r2, [r3, #28]
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	4013      	ands	r3, r2
 8006af6:	68ba      	ldr	r2, [r7, #8]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	bf0c      	ite	eq
 8006afc:	2301      	moveq	r3, #1
 8006afe:	2300      	movne	r3, #0
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	461a      	mov	r2, r3
 8006b04:	79fb      	ldrb	r3, [r7, #7]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d08d      	beq.n	8006a26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d101      	bne.n	8006b2a <HAL_UARTEx_DisableFifoMode+0x16>
 8006b26:	2302      	movs	r3, #2
 8006b28:	e027      	b.n	8006b7a <HAL_UARTEx_DisableFifoMode+0x66>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2224      	movs	r2, #36	; 0x24
 8006b36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f022 0201 	bic.w	r2, r2, #1
 8006b50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006b58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b084      	sub	sp, #16
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d101      	bne.n	8006b9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	e02d      	b.n	8006bfa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2224      	movs	r2, #36	; 0x24
 8006baa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 0201 	bic.w	r2, r2, #1
 8006bc4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f850 	bl	8006c80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2220      	movs	r2, #32
 8006bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b084      	sub	sp, #16
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
 8006c0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d101      	bne.n	8006c1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c16:	2302      	movs	r3, #2
 8006c18:	e02d      	b.n	8006c76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2224      	movs	r2, #36	; 0x24
 8006c26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f022 0201 	bic.w	r2, r2, #1
 8006c40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	683a      	ldr	r2, [r7, #0]
 8006c52:	430a      	orrs	r2, r1
 8006c54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f812 	bl	8006c80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2220      	movs	r2, #32
 8006c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
	...

08006c80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b089      	sub	sp, #36	; 0x24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006c88:	4a2f      	ldr	r2, [pc, #188]	; (8006d48 <UARTEx_SetNbDataToProcess+0xc8>)
 8006c8a:	f107 0314 	add.w	r3, r7, #20
 8006c8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c92:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006c96:	4a2d      	ldr	r2, [pc, #180]	; (8006d4c <UARTEx_SetNbDataToProcess+0xcc>)
 8006c98:	f107 030c 	add.w	r3, r7, #12
 8006c9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ca0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d108      	bne.n	8006cbe <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006cbc:	e03d      	b.n	8006d3a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006cbe:	2310      	movs	r3, #16
 8006cc0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006cc2:	2310      	movs	r3, #16
 8006cc4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	0e5b      	lsrs	r3, r3, #25
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	f003 0307 	and.w	r3, r3, #7
 8006cd4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	0f5b      	lsrs	r3, r3, #29
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	f003 0307 	and.w	r3, r3, #7
 8006ce4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006ce6:	7fbb      	ldrb	r3, [r7, #30]
 8006ce8:	7f3a      	ldrb	r2, [r7, #28]
 8006cea:	f107 0120 	add.w	r1, r7, #32
 8006cee:	440a      	add	r2, r1
 8006cf0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006cf4:	fb02 f303 	mul.w	r3, r2, r3
 8006cf8:	7f3a      	ldrb	r2, [r7, #28]
 8006cfa:	f107 0120 	add.w	r1, r7, #32
 8006cfe:	440a      	add	r2, r1
 8006d00:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006d04:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006d10:	7ffb      	ldrb	r3, [r7, #31]
 8006d12:	7f7a      	ldrb	r2, [r7, #29]
 8006d14:	f107 0120 	add.w	r1, r7, #32
 8006d18:	440a      	add	r2, r1
 8006d1a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006d1e:	fb02 f303 	mul.w	r3, r2, r3
 8006d22:	7f7a      	ldrb	r2, [r7, #29]
 8006d24:	f107 0120 	add.w	r1, r7, #32
 8006d28:	440a      	add	r2, r1
 8006d2a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006d2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006d3a:	bf00      	nop
 8006d3c:	3724      	adds	r7, #36	; 0x24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	08007314 	.word	0x08007314
 8006d4c:	0800731c 	.word	0x0800731c

08006d50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d50:	b084      	sub	sp, #16
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b084      	sub	sp, #16
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	f107 001c 	add.w	r0, r7, #28
 8006d5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d120      	bne.n	8006daa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68da      	ldr	r2, [r3, #12]
 8006d78:	4b25      	ldr	r3, [pc, #148]	; (8006e10 <USB_CoreInit+0xc0>)
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d105      	bne.n	8006d9e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fa4c 	bl	800723c <USB_CoreReset>
 8006da4:	4603      	mov	r3, r0
 8006da6:	73fb      	strb	r3, [r7, #15]
 8006da8:	e01a      	b.n	8006de0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fa40 	bl	800723c <USB_CoreReset>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d106      	bne.n	8006dd4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	639a      	str	r2, [r3, #56]	; 0x38
 8006dd2:	e005      	b.n	8006de0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d10b      	bne.n	8006dfe <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f043 0206 	orr.w	r2, r3, #6
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f043 0220 	orr.w	r2, r3, #32
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e0a:	b004      	add	sp, #16
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	ffbdffbf 	.word	0xffbdffbf

08006e14 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f023 0201 	bic.w	r2, r3, #1
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b082      	sub	sp, #8
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	460b      	mov	r3, r1
 8006e40:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e4e:	78fb      	ldrb	r3, [r7, #3]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d106      	bne.n	8006e62 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	60da      	str	r2, [r3, #12]
 8006e60:	e00b      	b.n	8006e7a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e62:	78fb      	ldrb	r3, [r7, #3]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d106      	bne.n	8006e76 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	60da      	str	r2, [r3, #12]
 8006e74:	e001      	b.n	8006e7a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e003      	b.n	8006e82 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006e7a:	2032      	movs	r0, #50	; 0x32
 8006e7c:	f7fa fc10 	bl	80016a0 <HAL_Delay>

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
	...

08006e8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e8c:	b084      	sub	sp, #16
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b086      	sub	sp, #24
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006e9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	613b      	str	r3, [r7, #16]
 8006eaa:	e009      	b.n	8006ec0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	3340      	adds	r3, #64	; 0x40
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	613b      	str	r3, [r7, #16]
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	2b0e      	cmp	r3, #14
 8006ec4:	d9f2      	bls.n	8006eac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d11c      	bne.n	8006f06 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006eda:	f043 0302 	orr.w	r3, r3, #2
 8006ede:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	e005      	b.n	8006f12 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f18:	461a      	mov	r2, r3
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f24:	4619      	mov	r1, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	680b      	ldr	r3, [r1, #0]
 8006f30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d10c      	bne.n	8006f52 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d104      	bne.n	8006f48 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006f3e:	2100      	movs	r1, #0
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f949 	bl	80071d8 <USB_SetDevSpeed>
 8006f46:	e008      	b.n	8006f5a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f48:	2101      	movs	r1, #1
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f944 	bl	80071d8 <USB_SetDevSpeed>
 8006f50:	e003      	b.n	8006f5a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f52:	2103      	movs	r1, #3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f93f 	bl	80071d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f5a:	2110      	movs	r1, #16
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f8f3 	bl	8007148 <USB_FlushTxFifo>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f911 	bl	8007194 <USB_FlushRxFifo>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f82:	461a      	mov	r2, r3
 8006f84:	2300      	movs	r3, #0
 8006f86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f8e:	461a      	mov	r2, r3
 8006f90:	2300      	movs	r3, #0
 8006f92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	613b      	str	r3, [r7, #16]
 8006fa4:	e043      	b.n	800702e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	015a      	lsls	r2, r3, #5
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	4413      	add	r3, r2
 8006fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fbc:	d118      	bne.n	8006ff0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10a      	bne.n	8006fda <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006fd6:	6013      	str	r3, [r2, #0]
 8006fd8:	e013      	b.n	8007002 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006fec:	6013      	str	r3, [r2, #0]
 8006fee:	e008      	b.n	8007002 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	2300      	movs	r3, #0
 8007000:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	4413      	add	r3, r2
 800700a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800700e:	461a      	mov	r2, r3
 8007010:	2300      	movs	r3, #0
 8007012:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	4413      	add	r3, r2
 800701c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007020:	461a      	mov	r2, r3
 8007022:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007026:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	3301      	adds	r3, #1
 800702c:	613b      	str	r3, [r7, #16]
 800702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	429a      	cmp	r2, r3
 8007034:	d3b7      	bcc.n	8006fa6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007036:	2300      	movs	r3, #0
 8007038:	613b      	str	r3, [r7, #16]
 800703a:	e043      	b.n	80070c4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800704e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007052:	d118      	bne.n	8007086 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10a      	bne.n	8007070 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	4413      	add	r3, r2
 8007062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007066:	461a      	mov	r2, r3
 8007068:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800706c:	6013      	str	r3, [r2, #0]
 800706e:	e013      	b.n	8007098 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4413      	add	r3, r2
 8007078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800707c:	461a      	mov	r2, r3
 800707e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	e008      	b.n	8007098 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007092:	461a      	mov	r2, r3
 8007094:	2300      	movs	r3, #0
 8007096:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a4:	461a      	mov	r2, r3
 80070a6:	2300      	movs	r3, #0
 80070a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	015a      	lsls	r2, r3, #5
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b6:	461a      	mov	r2, r3
 80070b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	3301      	adds	r3, #1
 80070c2:	613b      	str	r3, [r7, #16]
 80070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d3b7      	bcc.n	800703c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80070ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80070ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d105      	bne.n	8007100 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	f043 0210 	orr.w	r2, r3, #16
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	699a      	ldr	r2, [r3, #24]
 8007104:	4b0e      	ldr	r3, [pc, #56]	; (8007140 <USB_DevInit+0x2b4>)
 8007106:	4313      	orrs	r3, r2
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800710c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800710e:	2b00      	cmp	r3, #0
 8007110:	d005      	beq.n	800711e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	f043 0208 	orr.w	r2, r3, #8
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800711e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007120:	2b01      	cmp	r3, #1
 8007122:	d105      	bne.n	8007130 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	699a      	ldr	r2, [r3, #24]
 8007128:	4b06      	ldr	r3, [pc, #24]	; (8007144 <USB_DevInit+0x2b8>)
 800712a:	4313      	orrs	r3, r2
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007130:	7dfb      	ldrb	r3, [r7, #23]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3718      	adds	r7, #24
 8007136:	46bd      	mov	sp, r7
 8007138:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800713c:	b004      	add	sp, #16
 800713e:	4770      	bx	lr
 8007140:	803c3800 	.word	0x803c3800
 8007144:	40000004 	.word	0x40000004

08007148 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007152:	2300      	movs	r3, #0
 8007154:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	019b      	lsls	r3, r3, #6
 800715a:	f043 0220 	orr.w	r2, r3, #32
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	3301      	adds	r3, #1
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4a09      	ldr	r2, [pc, #36]	; (8007190 <USB_FlushTxFifo+0x48>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d901      	bls.n	8007174 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e006      	b.n	8007182 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	f003 0320 	and.w	r3, r3, #32
 800717c:	2b20      	cmp	r3, #32
 800717e:	d0f0      	beq.n	8007162 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	00030d40 	.word	0x00030d40

08007194 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800719c:	2300      	movs	r3, #0
 800719e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2210      	movs	r2, #16
 80071a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3301      	adds	r3, #1
 80071aa:	60fb      	str	r3, [r7, #12]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	4a09      	ldr	r2, [pc, #36]	; (80071d4 <USB_FlushRxFifo+0x40>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d901      	bls.n	80071b8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e006      	b.n	80071c6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	f003 0310 	and.w	r3, r3, #16
 80071c0:	2b10      	cmp	r3, #16
 80071c2:	d0f0      	beq.n	80071a6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	00030d40 	.word	0x00030d40

080071d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	460b      	mov	r3, r1
 80071e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	78fb      	ldrb	r3, [r7, #3]
 80071f2:	68f9      	ldr	r1, [r7, #12]
 80071f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071f8:	4313      	orrs	r3, r2
 80071fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b084      	sub	sp, #16
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007224:	f043 0302 	orr.w	r3, r3, #2
 8007228:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800722a:	2003      	movs	r0, #3
 800722c:	f7fa fa38 	bl	80016a0 <HAL_Delay>

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
	...

0800723c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007244:	2300      	movs	r3, #0
 8007246:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	3301      	adds	r3, #1
 800724c:	60fb      	str	r3, [r7, #12]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	4a13      	ldr	r2, [pc, #76]	; (80072a0 <USB_CoreReset+0x64>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d901      	bls.n	800725a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e01b      	b.n	8007292 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	daf2      	bge.n	8007248 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	f043 0201 	orr.w	r2, r3, #1
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	3301      	adds	r3, #1
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	4a09      	ldr	r2, [pc, #36]	; (80072a0 <USB_CoreReset+0x64>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d901      	bls.n	8007284 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e006      	b.n	8007292 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	f003 0301 	and.w	r3, r3, #1
 800728c:	2b01      	cmp	r3, #1
 800728e:	d0f0      	beq.n	8007272 <USB_CoreReset+0x36>

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	00030d40 	.word	0x00030d40

080072a4 <__libc_init_array>:
 80072a4:	b570      	push	{r4, r5, r6, lr}
 80072a6:	4e0d      	ldr	r6, [pc, #52]	; (80072dc <__libc_init_array+0x38>)
 80072a8:	4c0d      	ldr	r4, [pc, #52]	; (80072e0 <__libc_init_array+0x3c>)
 80072aa:	1ba4      	subs	r4, r4, r6
 80072ac:	10a4      	asrs	r4, r4, #2
 80072ae:	2500      	movs	r5, #0
 80072b0:	42a5      	cmp	r5, r4
 80072b2:	d109      	bne.n	80072c8 <__libc_init_array+0x24>
 80072b4:	4e0b      	ldr	r6, [pc, #44]	; (80072e4 <__libc_init_array+0x40>)
 80072b6:	4c0c      	ldr	r4, [pc, #48]	; (80072e8 <__libc_init_array+0x44>)
 80072b8:	f000 f820 	bl	80072fc <_init>
 80072bc:	1ba4      	subs	r4, r4, r6
 80072be:	10a4      	asrs	r4, r4, #2
 80072c0:	2500      	movs	r5, #0
 80072c2:	42a5      	cmp	r5, r4
 80072c4:	d105      	bne.n	80072d2 <__libc_init_array+0x2e>
 80072c6:	bd70      	pop	{r4, r5, r6, pc}
 80072c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072cc:	4798      	blx	r3
 80072ce:	3501      	adds	r5, #1
 80072d0:	e7ee      	b.n	80072b0 <__libc_init_array+0xc>
 80072d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072d6:	4798      	blx	r3
 80072d8:	3501      	adds	r5, #1
 80072da:	e7f2      	b.n	80072c2 <__libc_init_array+0x1e>
 80072dc:	08007354 	.word	0x08007354
 80072e0:	08007354 	.word	0x08007354
 80072e4:	08007354 	.word	0x08007354
 80072e8:	08007358 	.word	0x08007358

080072ec <memset>:
 80072ec:	4402      	add	r2, r0
 80072ee:	4603      	mov	r3, r0
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d100      	bne.n	80072f6 <memset+0xa>
 80072f4:	4770      	bx	lr
 80072f6:	f803 1b01 	strb.w	r1, [r3], #1
 80072fa:	e7f9      	b.n	80072f0 <memset+0x4>

080072fc <_init>:
 80072fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fe:	bf00      	nop
 8007300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007302:	bc08      	pop	{r3}
 8007304:	469e      	mov	lr, r3
 8007306:	4770      	bx	lr

08007308 <_fini>:
 8007308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730a:	bf00      	nop
 800730c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800730e:	bc08      	pop	{r3}
 8007310:	469e      	mov	lr, r3
 8007312:	4770      	bx	lr
