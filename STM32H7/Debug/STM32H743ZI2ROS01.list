
STM32H743ZI2ROS01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007194  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800742c  0800742c  0001742c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007464  08007464  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08007464  08007464  00017464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800746c  0800746c  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800746c  0800746c  0001746c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007470  08007470  00017470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08007474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08007484  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  080074e4  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000063c  240000d0  08007544  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2400070c  08007544  0002070c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00023482  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00003287  00000000  00000000  00043580  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001480  00000000  00000000  00046808  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001358  00000000  00000000  00047c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003ad0c  00000000  00000000  00048fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00010fb9  00000000  00000000  00083cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0016a297  00000000  00000000  00094ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001fef3c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000058a4  00000000  00000000  001fefb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007414 	.word	0x08007414

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08007414 	.word	0x08007414

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f001 f85a 	bl	8001694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f810 	bl	8000604 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 fbdc 	bl	8000da0 <_ZL12MX_GPIO_Initv>
  MX_ETH_Init();
 80005e8:	f000 f8e0 	bl	80007ac <_ZL11MX_ETH_Initv>
  MX_USB_OTG_FS_PCD_Init();
 80005ec:	f000 fba2 	bl	8000d34 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_TIM1_Init();
 80005f0:	f000 f934 	bl	800085c <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 80005f4:	f000 fa0e 	bl	8000a14 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 80005f8:	f000 fa9c 	bl	8000b34 <_ZL12MX_TIM4_Initv>
  MX_UART4_Init();
 80005fc:	f000 fb3a 	bl	8000c74 <_ZL13MX_UART4_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000600:	e7fe      	b.n	8000600 <main+0x28>
	...

08000604 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b0cc      	sub	sp, #304	; 0x130
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800060e:	224c      	movs	r2, #76	; 0x4c
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f006 fef6 	bl	8007404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800061c:	2220      	movs	r2, #32
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f006 feef 	bl	8007404 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	4618      	mov	r0, r3
 800062c:	23bc      	movs	r3, #188	; 0xbc
 800062e:	461a      	mov	r2, r3
 8000630:	2100      	movs	r1, #0
 8000632:	f006 fee7 	bl	8007404 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000636:	2002      	movs	r0, #2
 8000638:	f002 f90c 	bl	8002854 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	4b57      	ldr	r3, [pc, #348]	; (80007a0 <_Z18SystemClock_Configv+0x19c>)
 8000644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000646:	4a56      	ldr	r2, [pc, #344]	; (80007a0 <_Z18SystemClock_Configv+0x19c>)
 8000648:	f023 0301 	bic.w	r3, r3, #1
 800064c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800064e:	4b54      	ldr	r3, [pc, #336]	; (80007a0 <_Z18SystemClock_Configv+0x19c>)
 8000650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000652:	f003 0201 	and.w	r2, r3, #1
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	4b52      	ldr	r3, [pc, #328]	; (80007a4 <_Z18SystemClock_Configv+0x1a0>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000662:	4a50      	ldr	r2, [pc, #320]	; (80007a4 <_Z18SystemClock_Configv+0x1a0>)
 8000664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000668:	6193      	str	r3, [r2, #24]
 800066a:	4b4e      	ldr	r3, [pc, #312]	; (80007a4 <_Z18SystemClock_Configv+0x1a0>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800067a:	4b4a      	ldr	r3, [pc, #296]	; (80007a4 <_Z18SystemClock_Configv+0x1a0>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000686:	bf14      	ite	ne
 8000688:	2301      	movne	r3, #1
 800068a:	2300      	moveq	r3, #0
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b00      	cmp	r3, #0
 8000690:	d000      	beq.n	8000694 <_Z18SystemClock_Configv+0x90>
 8000692:	e7f2      	b.n	800067a <_Z18SystemClock_Configv+0x76>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000694:	2303      	movs	r3, #3
 8000696:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800069a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800069e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006a2:	2301      	movs	r3, #1
 80006a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2340      	movs	r3, #64	; 0x40
 80006aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b4:	2302      	movs	r3, #2
 80006b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ba:	2301      	movs	r3, #1
 80006bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006c0:	2318      	movs	r3, #24
 80006c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006cc:	2304      	movs	r3, #4
 80006ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006d8:	230c      	movs	r3, #12
 80006da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006de:	2300      	movs	r3, #0
 80006e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 f8fa 	bl	80028e8 <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	bf14      	ite	ne
 80006fa:	2301      	movne	r3, #1
 80006fc:	2300      	moveq	r3, #0
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8000704:	f000 fc5a 	bl	8000fbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	233f      	movs	r3, #63	; 0x3f
 800070a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800070e:	2300      	movs	r3, #0
 8000710:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000738:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f002 fce2 	bl	8003108 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	bf14      	ite	ne
 800074a:	2301      	movne	r3, #1
 800074c:	2300      	moveq	r3, #0
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <_Z18SystemClock_Configv+0x154>
  {
    Error_Handler();
 8000754:	f000 fc32 	bl	8000fbc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_USB;
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <_Z18SystemClock_Configv+0x1a4>)
 800075e:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	2200      	movs	r2, #0
 8000766:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	4618      	mov	r0, r3
 800077a:	f003 f849 	bl	8003810 <HAL_RCCEx_PeriphCLKConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	bf14      	ite	ne
 8000784:	2301      	movne	r3, #1
 8000786:	2300      	moveq	r3, #0
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <_Z18SystemClock_Configv+0x18e>
  {
    Error_Handler();
 800078e:	f000 fc15 	bl	8000fbc <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000792:	f002 f899 	bl	80028c8 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000796:	bf00      	nop
 8000798:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	58000400 	.word	0x58000400
 80007a4:	58024800 	.word	0x58024800
 80007a8:	00040002 	.word	0x00040002

080007ac <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007b0:	4b25      	ldr	r3, [pc, #148]	; (8000848 <_ZL11MX_ETH_Initv+0x9c>)
 80007b2:	4a26      	ldr	r2, [pc, #152]	; (800084c <_ZL11MX_ETH_Initv+0xa0>)
 80007b4:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 80007b6:	4b24      	ldr	r3, [pc, #144]	; (8000848 <_ZL11MX_ETH_Initv+0x9c>)
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80007be:	4b22      	ldr	r3, [pc, #136]	; (8000848 <_ZL11MX_ETH_Initv+0x9c>)
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	3301      	adds	r3, #1
 80007c4:	2280      	movs	r2, #128	; 0x80
 80007c6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <_ZL11MX_ETH_Initv+0x9c>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	3302      	adds	r3, #2
 80007ce:	22e1      	movs	r2, #225	; 0xe1
 80007d0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80007d2:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <_ZL11MX_ETH_Initv+0x9c>)
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	3303      	adds	r3, #3
 80007d8:	2200      	movs	r2, #0
 80007da:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80007dc:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <_ZL11MX_ETH_Initv+0x9c>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	3304      	adds	r3, #4
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <_ZL11MX_ETH_Initv+0x9c>)
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	3305      	adds	r3, #5
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007f0:	4b15      	ldr	r3, [pc, #84]	; (8000848 <_ZL11MX_ETH_Initv+0x9c>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <_ZL11MX_ETH_Initv+0x9c>)
 80007f8:	4a15      	ldr	r2, [pc, #84]	; (8000850 <_ZL11MX_ETH_Initv+0xa4>)
 80007fa:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <_ZL11MX_ETH_Initv+0x9c>)
 80007fe:	4a15      	ldr	r2, [pc, #84]	; (8000854 <_ZL11MX_ETH_Initv+0xa8>)
 8000800:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <_ZL11MX_ETH_Initv+0x9c>)
 8000804:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000808:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800080a:	480f      	ldr	r0, [pc, #60]	; (8000848 <_ZL11MX_ETH_Initv+0x9c>)
 800080c:	f001 f8fa 	bl	8001a04 <HAL_ETH_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	bf14      	ite	ne
 8000816:	2301      	movne	r3, #1
 8000818:	2300      	moveq	r3, #0
 800081a:	b2db      	uxtb	r3, r3
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <_ZL11MX_ETH_Initv+0x78>
  {
    Error_Handler();
 8000820:	f000 fbcc 	bl	8000fbc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000824:	2234      	movs	r2, #52	; 0x34
 8000826:	2100      	movs	r1, #0
 8000828:	480b      	ldr	r0, [pc, #44]	; (8000858 <_ZL11MX_ETH_Initv+0xac>)
 800082a:	f006 fdeb 	bl	8007404 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <_ZL11MX_ETH_Initv+0xac>)
 8000830:	2221      	movs	r2, #33	; 0x21
 8000832:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <_ZL11MX_ETH_Initv+0xac>)
 8000836:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800083a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <_ZL11MX_ETH_Initv+0xac>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	24000120 	.word	0x24000120
 800084c:	40028000 	.word	0x40028000
 8000850:	24000070 	.word	0x24000070
 8000854:	24000010 	.word	0x24000010
 8000858:	240000ec 	.word	0x240000ec

0800085c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b09a      	sub	sp, #104	; 0x68
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000862:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000870:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800087c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
 800088c:	615a      	str	r2, [r3, #20]
 800088e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	222c      	movs	r2, #44	; 0x2c
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f006 fdb4 	bl	8007404 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800089c:	4b5b      	ldr	r3, [pc, #364]	; (8000a0c <_ZL12MX_TIM1_Initv+0x1b0>)
 800089e:	4a5c      	ldr	r2, [pc, #368]	; (8000a10 <_ZL12MX_TIM1_Initv+0x1b4>)
 80008a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008a2:	4b5a      	ldr	r3, [pc, #360]	; (8000a0c <_ZL12MX_TIM1_Initv+0x1b0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a8:	4b58      	ldr	r3, [pc, #352]	; (8000a0c <_ZL12MX_TIM1_Initv+0x1b0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008ae:	4b57      	ldr	r3, [pc, #348]	; (8000a0c <_ZL12MX_TIM1_Initv+0x1b0>)
 80008b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b6:	4b55      	ldr	r3, [pc, #340]	; (8000a0c <_ZL12MX_TIM1_Initv+0x1b0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008bc:	4b53      	ldr	r3, [pc, #332]	; (8000a0c <_ZL12MX_TIM1_Initv+0x1b0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c2:	4b52      	ldr	r3, [pc, #328]	; (8000a0c <_ZL12MX_TIM1_Initv+0x1b0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008c8:	4850      	ldr	r0, [pc, #320]	; (8000a0c <_ZL12MX_TIM1_Initv+0x1b0>)
 80008ca:	f004 faa1 	bl	8004e10 <HAL_TIM_Base_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	bf14      	ite	ne
 80008d4:	2301      	movne	r3, #1
 80008d6:	2300      	moveq	r3, #0
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <_ZL12MX_TIM1_Initv+0x86>
  {
    Error_Handler();
 80008de:	f000 fb6d 	bl	8000fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008ec:	4619      	mov	r1, r3
 80008ee:	4847      	ldr	r0, [pc, #284]	; (8000a0c <_ZL12MX_TIM1_Initv+0x1b0>)
 80008f0:	f004 fc56 	bl	80051a0 <HAL_TIM_ConfigClockSource>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	bf14      	ite	ne
 80008fa:	2301      	movne	r3, #1
 80008fc:	2300      	moveq	r3, #0
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 8000904:	f000 fb5a 	bl	8000fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000908:	4840      	ldr	r0, [pc, #256]	; (8000a0c <_ZL12MX_TIM1_Initv+0x1b0>)
 800090a:	f004 fad8 	bl	8004ebe <HAL_TIM_PWM_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	bf14      	ite	ne
 8000914:	2301      	movne	r3, #1
 8000916:	2300      	moveq	r3, #0
 8000918:	b2db      	uxtb	r3, r3
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 800091e:	f000 fb4d 	bl	8000fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000922:	2300      	movs	r3, #0
 8000924:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000926:	2300      	movs	r3, #0
 8000928:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092a:	2300      	movs	r3, #0
 800092c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800092e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000932:	4619      	mov	r1, r3
 8000934:	4835      	ldr	r0, [pc, #212]	; (8000a0c <_ZL12MX_TIM1_Initv+0x1b0>)
 8000936:	f005 f909 	bl	8005b4c <HAL_TIMEx_MasterConfigSynchronization>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	bf14      	ite	ne
 8000940:	2301      	movne	r3, #1
 8000942:	2300      	moveq	r3, #0
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <_ZL12MX_TIM1_Initv+0xf2>
  {
    Error_Handler();
 800094a:	f000 fb37 	bl	8000fbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800094e:	2360      	movs	r3, #96	; 0x60
 8000950:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000956:	2300      	movs	r3, #0
 8000958:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800095a:	2300      	movs	r3, #0
 800095c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800095e:	2300      	movs	r3, #0
 8000960:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000962:	2300      	movs	r3, #0
 8000964:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000966:	2300      	movs	r3, #0
 8000968:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800096a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800096e:	2204      	movs	r2, #4
 8000970:	4619      	mov	r1, r3
 8000972:	4826      	ldr	r0, [pc, #152]	; (8000a0c <_ZL12MX_TIM1_Initv+0x1b0>)
 8000974:	f004 fb04 	bl	8004f80 <HAL_TIM_PWM_ConfigChannel>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	bf14      	ite	ne
 800097e:	2301      	movne	r3, #1
 8000980:	2300      	moveq	r3, #0
 8000982:	b2db      	uxtb	r3, r3
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <_ZL12MX_TIM1_Initv+0x130>
  {
    Error_Handler();
 8000988:	f000 fb18 	bl	8000fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800098c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000990:	2208      	movs	r2, #8
 8000992:	4619      	mov	r1, r3
 8000994:	481d      	ldr	r0, [pc, #116]	; (8000a0c <_ZL12MX_TIM1_Initv+0x1b0>)
 8000996:	f004 faf3 	bl	8004f80 <HAL_TIM_PWM_ConfigChannel>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	bf14      	ite	ne
 80009a0:	2301      	movne	r3, #1
 80009a2:	2300      	moveq	r3, #0
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <_ZL12MX_TIM1_Initv+0x152>
  {
    Error_Handler();
 80009aa:	f000 fb07 	bl	8000fbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	4619      	mov	r1, r3
 80009e2:	480a      	ldr	r0, [pc, #40]	; (8000a0c <_ZL12MX_TIM1_Initv+0x1b0>)
 80009e4:	f005 f93a 	bl	8005c5c <HAL_TIMEx_ConfigBreakDeadTime>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	bf14      	ite	ne
 80009ee:	2301      	movne	r3, #1
 80009f0:	2300      	moveq	r3, #0
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <_ZL12MX_TIM1_Initv+0x1a0>
  {
    Error_Handler();
 80009f8:	f000 fae0 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009fc:	4803      	ldr	r0, [pc, #12]	; (8000a0c <_ZL12MX_TIM1_Initv+0x1b0>)
 80009fe:	f000 fc19 	bl	8001234 <HAL_TIM_MspPostInit>

}
 8000a02:	bf00      	nop
 8000a04:	3768      	adds	r7, #104	; 0x68
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	24000190 	.word	0x24000190
 8000a10:	40010000 	.word	0x40010000

08000a14 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08e      	sub	sp, #56	; 0x38
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a34:	463b      	mov	r3, r7
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]
 8000a42:	615a      	str	r2, [r3, #20]
 8000a44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a46:	4b39      	ldr	r3, [pc, #228]	; (8000b2c <_ZL12MX_TIM3_Initv+0x118>)
 8000a48:	4a39      	ldr	r2, [pc, #228]	; (8000b30 <_ZL12MX_TIM3_Initv+0x11c>)
 8000a4a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a4c:	4b37      	ldr	r3, [pc, #220]	; (8000b2c <_ZL12MX_TIM3_Initv+0x118>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a52:	4b36      	ldr	r3, [pc, #216]	; (8000b2c <_ZL12MX_TIM3_Initv+0x118>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a58:	4b34      	ldr	r3, [pc, #208]	; (8000b2c <_ZL12MX_TIM3_Initv+0x118>)
 8000a5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a60:	4b32      	ldr	r3, [pc, #200]	; (8000b2c <_ZL12MX_TIM3_Initv+0x118>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a66:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <_ZL12MX_TIM3_Initv+0x118>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a6c:	482f      	ldr	r0, [pc, #188]	; (8000b2c <_ZL12MX_TIM3_Initv+0x118>)
 8000a6e:	f004 f9cf 	bl	8004e10 <HAL_TIM_Base_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	bf14      	ite	ne
 8000a78:	2301      	movne	r3, #1
 8000a7a:	2300      	moveq	r3, #0
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 8000a82:	f000 fa9b 	bl	8000fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a90:	4619      	mov	r1, r3
 8000a92:	4826      	ldr	r0, [pc, #152]	; (8000b2c <_ZL12MX_TIM3_Initv+0x118>)
 8000a94:	f004 fb84 	bl	80051a0 <HAL_TIM_ConfigClockSource>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	bf14      	ite	ne
 8000a9e:	2301      	movne	r3, #1
 8000aa0:	2300      	moveq	r3, #0
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 8000aa8:	f000 fa88 	bl	8000fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000aac:	481f      	ldr	r0, [pc, #124]	; (8000b2c <_ZL12MX_TIM3_Initv+0x118>)
 8000aae:	f004 fa06 	bl	8004ebe <HAL_TIM_PWM_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	bf14      	ite	ne
 8000ab8:	2301      	movne	r3, #1
 8000aba:	2300      	moveq	r3, #0
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 8000ac2:	f000 fa7b 	bl	8000fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4815      	ldr	r0, [pc, #84]	; (8000b2c <_ZL12MX_TIM3_Initv+0x118>)
 8000ad6:	f005 f839 	bl	8005b4c <HAL_TIMEx_MasterConfigSynchronization>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	bf14      	ite	ne
 8000ae0:	2301      	movne	r3, #1
 8000ae2:	2300      	moveq	r3, #0
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8000aea:	f000 fa67 	bl	8000fbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aee:	2360      	movs	r3, #96	; 0x60
 8000af0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000afe:	463b      	mov	r3, r7
 8000b00:	2204      	movs	r2, #4
 8000b02:	4619      	mov	r1, r3
 8000b04:	4809      	ldr	r0, [pc, #36]	; (8000b2c <_ZL12MX_TIM3_Initv+0x118>)
 8000b06:	f004 fa3b 	bl	8004f80 <HAL_TIM_PWM_ConfigChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	bf14      	ite	ne
 8000b10:	2301      	movne	r3, #1
 8000b12:	2300      	moveq	r3, #0
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <_ZL12MX_TIM3_Initv+0x10a>
  {
    Error_Handler();
 8000b1a:	f000 fa4f 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b1e:	4803      	ldr	r0, [pc, #12]	; (8000b2c <_ZL12MX_TIM3_Initv+0x118>)
 8000b20:	f000 fb88 	bl	8001234 <HAL_TIM_MspPostInit>

}
 8000b24:	bf00      	nop
 8000b26:	3738      	adds	r7, #56	; 0x38
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	240001dc 	.word	0x240001dc
 8000b30:	40000400 	.word	0x40000400

08000b34 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08e      	sub	sp, #56	; 0x38
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b54:	463b      	mov	r3, r7
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]
 8000b62:	615a      	str	r2, [r3, #20]
 8000b64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b66:	4b41      	ldr	r3, [pc, #260]	; (8000c6c <_ZL12MX_TIM4_Initv+0x138>)
 8000b68:	4a41      	ldr	r2, [pc, #260]	; (8000c70 <_ZL12MX_TIM4_Initv+0x13c>)
 8000b6a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b6c:	4b3f      	ldr	r3, [pc, #252]	; (8000c6c <_ZL12MX_TIM4_Initv+0x138>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b72:	4b3e      	ldr	r3, [pc, #248]	; (8000c6c <_ZL12MX_TIM4_Initv+0x138>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b78:	4b3c      	ldr	r3, [pc, #240]	; (8000c6c <_ZL12MX_TIM4_Initv+0x138>)
 8000b7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b7e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b80:	4b3a      	ldr	r3, [pc, #232]	; (8000c6c <_ZL12MX_TIM4_Initv+0x138>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b86:	4b39      	ldr	r3, [pc, #228]	; (8000c6c <_ZL12MX_TIM4_Initv+0x138>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b8c:	4837      	ldr	r0, [pc, #220]	; (8000c6c <_ZL12MX_TIM4_Initv+0x138>)
 8000b8e:	f004 f93f 	bl	8004e10 <HAL_TIM_Base_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	bf14      	ite	ne
 8000b98:	2301      	movne	r3, #1
 8000b9a:	2300      	moveq	r3, #0
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <_ZL12MX_TIM4_Initv+0x72>
  {
    Error_Handler();
 8000ba2:	f000 fa0b 	bl	8000fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	482e      	ldr	r0, [pc, #184]	; (8000c6c <_ZL12MX_TIM4_Initv+0x138>)
 8000bb4:	f004 faf4 	bl	80051a0 <HAL_TIM_ConfigClockSource>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	bf14      	ite	ne
 8000bbe:	2301      	movne	r3, #1
 8000bc0:	2300      	moveq	r3, #0
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <_ZL12MX_TIM4_Initv+0x98>
  {
    Error_Handler();
 8000bc8:	f000 f9f8 	bl	8000fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000bcc:	4827      	ldr	r0, [pc, #156]	; (8000c6c <_ZL12MX_TIM4_Initv+0x138>)
 8000bce:	f004 f976 	bl	8004ebe <HAL_TIM_PWM_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	bf14      	ite	ne
 8000bd8:	2301      	movne	r3, #1
 8000bda:	2300      	moveq	r3, #0
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <_ZL12MX_TIM4_Initv+0xb2>
  {
    Error_Handler();
 8000be2:	f000 f9eb 	bl	8000fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	481d      	ldr	r0, [pc, #116]	; (8000c6c <_ZL12MX_TIM4_Initv+0x138>)
 8000bf6:	f004 ffa9 	bl	8005b4c <HAL_TIMEx_MasterConfigSynchronization>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	bf14      	ite	ne
 8000c00:	2301      	movne	r3, #1
 8000c02:	2300      	moveq	r3, #0
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 8000c0a:	f000 f9d7 	bl	8000fbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c0e:	2360      	movs	r3, #96	; 0x60
 8000c10:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c1e:	463b      	mov	r3, r7
 8000c20:	2204      	movs	r2, #4
 8000c22:	4619      	mov	r1, r3
 8000c24:	4811      	ldr	r0, [pc, #68]	; (8000c6c <_ZL12MX_TIM4_Initv+0x138>)
 8000c26:	f004 f9ab 	bl	8004f80 <HAL_TIM_PWM_ConfigChannel>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	bf14      	ite	ne
 8000c30:	2301      	movne	r3, #1
 8000c32:	2300      	moveq	r3, #0
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <_ZL12MX_TIM4_Initv+0x10a>
  {
    Error_Handler();
 8000c3a:	f000 f9bf 	bl	8000fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c3e:	463b      	mov	r3, r7
 8000c40:	220c      	movs	r2, #12
 8000c42:	4619      	mov	r1, r3
 8000c44:	4809      	ldr	r0, [pc, #36]	; (8000c6c <_ZL12MX_TIM4_Initv+0x138>)
 8000c46:	f004 f99b 	bl	8004f80 <HAL_TIM_PWM_ConfigChannel>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	bf14      	ite	ne
 8000c50:	2301      	movne	r3, #1
 8000c52:	2300      	moveq	r3, #0
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <_ZL12MX_TIM4_Initv+0x12a>
  {
    Error_Handler();
 8000c5a:	f000 f9af 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c5e:	4803      	ldr	r0, [pc, #12]	; (8000c6c <_ZL12MX_TIM4_Initv+0x138>)
 8000c60:	f000 fae8 	bl	8001234 <HAL_TIM_MspPostInit>

}
 8000c64:	bf00      	nop
 8000c66:	3738      	adds	r7, #56	; 0x38
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	24000228 	.word	0x24000228
 8000c70:	40000800 	.word	0x40000800

08000c74 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c78:	4b2c      	ldr	r3, [pc, #176]	; (8000d2c <_ZL13MX_UART4_Initv+0xb8>)
 8000c7a:	4a2d      	ldr	r2, [pc, #180]	; (8000d30 <_ZL13MX_UART4_Initv+0xbc>)
 8000c7c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c7e:	4b2b      	ldr	r3, [pc, #172]	; (8000d2c <_ZL13MX_UART4_Initv+0xb8>)
 8000c80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c84:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c86:	4b29      	ldr	r3, [pc, #164]	; (8000d2c <_ZL13MX_UART4_Initv+0xb8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c8c:	4b27      	ldr	r3, [pc, #156]	; (8000d2c <_ZL13MX_UART4_Initv+0xb8>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c92:	4b26      	ldr	r3, [pc, #152]	; (8000d2c <_ZL13MX_UART4_Initv+0xb8>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c98:	4b24      	ldr	r3, [pc, #144]	; (8000d2c <_ZL13MX_UART4_Initv+0xb8>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9e:	4b23      	ldr	r3, [pc, #140]	; (8000d2c <_ZL13MX_UART4_Initv+0xb8>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca4:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <_ZL13MX_UART4_Initv+0xb8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000caa:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <_ZL13MX_UART4_Initv+0xb8>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <_ZL13MX_UART4_Initv+0xb8>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <_ZL13MX_UART4_Initv+0xb8>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000cbc:	481b      	ldr	r0, [pc, #108]	; (8000d2c <_ZL13MX_UART4_Initv+0xb8>)
 8000cbe:	f005 f84b 	bl	8005d58 <HAL_UART_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	bf14      	ite	ne
 8000cc8:	2301      	movne	r3, #1
 8000cca:	2300      	moveq	r3, #0
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <_ZL13MX_UART4_Initv+0x62>
  {
    Error_Handler();
 8000cd2:	f000 f973 	bl	8000fbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4814      	ldr	r0, [pc, #80]	; (8000d2c <_ZL13MX_UART4_Initv+0xb8>)
 8000cda:	f005 ffe0 	bl	8006c9e <HAL_UARTEx_SetTxFifoThreshold>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	bf14      	ite	ne
 8000ce4:	2301      	movne	r3, #1
 8000ce6:	2300      	moveq	r3, #0
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <_ZL13MX_UART4_Initv+0x7e>
  {
    Error_Handler();
 8000cee:	f000 f965 	bl	8000fbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <_ZL13MX_UART4_Initv+0xb8>)
 8000cf6:	f006 f810 	bl	8006d1a <HAL_UARTEx_SetRxFifoThreshold>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	bf14      	ite	ne
 8000d00:	2301      	movne	r3, #1
 8000d02:	2300      	moveq	r3, #0
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <_ZL13MX_UART4_Initv+0x9a>
  {
    Error_Handler();
 8000d0a:	f000 f957 	bl	8000fbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000d0e:	4807      	ldr	r0, [pc, #28]	; (8000d2c <_ZL13MX_UART4_Initv+0xb8>)
 8000d10:	f005 ff8c 	bl	8006c2c <HAL_UARTEx_DisableFifoMode>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	bf14      	ite	ne
 8000d1a:	2301      	movne	r3, #1
 8000d1c:	2300      	moveq	r3, #0
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <_ZL13MX_UART4_Initv+0xb4>
  {
    Error_Handler();
 8000d24:	f000 f94a 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	24000274 	.word	0x24000274
 8000d30:	40004c00 	.word	0x40004c00

08000d34 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000d3a:	4a18      	ldr	r2, [pc, #96]	; (8000d9c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000d40:	2209      	movs	r2, #9
 8000d42:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000d46:	2202      	movs	r2, #2
 8000d48:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000d52:	2202      	movs	r2, #2
 8000d54:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d62:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000d68:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d7a:	4807      	ldr	r0, [pc, #28]	; (8000d98 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000d7c:	f001 fc21 	bl	80025c2 <HAL_PCD_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	bf14      	ite	ne
 8000d86:	2301      	movne	r3, #1
 8000d88:	2300      	moveq	r3, #0
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
  {
    Error_Handler();
 8000d90:	f000 f914 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	24000300 	.word	0x24000300
 8000d9c:	40080000 	.word	0x40080000

08000da0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08c      	sub	sp, #48	; 0x30
 8000da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000db6:	4b79      	ldr	r3, [pc, #484]	; (8000f9c <_ZL12MX_GPIO_Initv+0x1fc>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbc:	4a77      	ldr	r2, [pc, #476]	; (8000f9c <_ZL12MX_GPIO_Initv+0x1fc>)
 8000dbe:	f043 0310 	orr.w	r3, r3, #16
 8000dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc6:	4b75      	ldr	r3, [pc, #468]	; (8000f9c <_ZL12MX_GPIO_Initv+0x1fc>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dcc:	f003 0310 	and.w	r3, r3, #16
 8000dd0:	61bb      	str	r3, [r7, #24]
 8000dd2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd4:	4b71      	ldr	r3, [pc, #452]	; (8000f9c <_ZL12MX_GPIO_Initv+0x1fc>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dda:	4a70      	ldr	r2, [pc, #448]	; (8000f9c <_ZL12MX_GPIO_Initv+0x1fc>)
 8000ddc:	f043 0304 	orr.w	r3, r3, #4
 8000de0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de4:	4b6d      	ldr	r3, [pc, #436]	; (8000f9c <_ZL12MX_GPIO_Initv+0x1fc>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df2:	4b6a      	ldr	r3, [pc, #424]	; (8000f9c <_ZL12MX_GPIO_Initv+0x1fc>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df8:	4a68      	ldr	r2, [pc, #416]	; (8000f9c <_ZL12MX_GPIO_Initv+0x1fc>)
 8000dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e02:	4b66      	ldr	r3, [pc, #408]	; (8000f9c <_ZL12MX_GPIO_Initv+0x1fc>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	4b62      	ldr	r3, [pc, #392]	; (8000f9c <_ZL12MX_GPIO_Initv+0x1fc>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e16:	4a61      	ldr	r2, [pc, #388]	; (8000f9c <_ZL12MX_GPIO_Initv+0x1fc>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e20:	4b5e      	ldr	r3, [pc, #376]	; (8000f9c <_ZL12MX_GPIO_Initv+0x1fc>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	4b5b      	ldr	r3, [pc, #364]	; (8000f9c <_ZL12MX_GPIO_Initv+0x1fc>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e34:	4a59      	ldr	r2, [pc, #356]	; (8000f9c <_ZL12MX_GPIO_Initv+0x1fc>)
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3e:	4b57      	ldr	r3, [pc, #348]	; (8000f9c <_ZL12MX_GPIO_Initv+0x1fc>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4c:	4b53      	ldr	r3, [pc, #332]	; (8000f9c <_ZL12MX_GPIO_Initv+0x1fc>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e52:	4a52      	ldr	r2, [pc, #328]	; (8000f9c <_ZL12MX_GPIO_Initv+0x1fc>)
 8000e54:	f043 0308 	orr.w	r3, r3, #8
 8000e58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5c:	4b4f      	ldr	r3, [pc, #316]	; (8000f9c <_ZL12MX_GPIO_Initv+0x1fc>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e62:	f003 0308 	and.w	r3, r3, #8
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e6a:	4b4c      	ldr	r3, [pc, #304]	; (8000f9c <_ZL12MX_GPIO_Initv+0x1fc>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e70:	4a4a      	ldr	r2, [pc, #296]	; (8000f9c <_ZL12MX_GPIO_Initv+0x1fc>)
 8000e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7a:	4b48      	ldr	r3, [pc, #288]	; (8000f9c <_ZL12MX_GPIO_Initv+0x1fc>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e84:	603b      	str	r3, [r7, #0]
 8000e86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_5_GPIO_Port, DIR_5_Pin, GPIO_PIN_RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2140      	movs	r1, #64	; 0x40
 8000e8c:	4844      	ldr	r0, [pc, #272]	; (8000fa0 <_ZL12MX_GPIO_Initv+0x200>)
 8000e8e:	f001 fb7f 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|DIR_1_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f244 0141 	movw	r1, #16449	; 0x4041
 8000e98:	4842      	ldr	r0, [pc, #264]	; (8000fa4 <_ZL12MX_GPIO_Initv+0x204>)
 8000e9a:	f001 fb79 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_3_Pin|DIR_2_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f244 2102 	movw	r1, #16898	; 0x4202
 8000ea4:	4840      	ldr	r0, [pc, #256]	; (8000fa8 <_ZL12MX_GPIO_Initv+0x208>)
 8000ea6:	f001 fb73 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|DIR_4_Pin, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 8000eb0:	483e      	ldr	r0, [pc, #248]	; (8000fac <_ZL12MX_GPIO_Initv+0x20c>)
 8000eb2:	f001 fb6d 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LM4_Pin LM3_Pin LM5_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin|LM5_Pin;
 8000eb6:	f249 0340 	movw	r3, #36928	; 0x9040
 8000eba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4837      	ldr	r0, [pc, #220]	; (8000fa8 <_ZL12MX_GPIO_Initv+0x208>)
 8000ecc:	f001 f9b0 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ed0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4832      	ldr	r0, [pc, #200]	; (8000fb0 <_ZL12MX_GPIO_Initv+0x210>)
 8000ee6:	f001 f9a3 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_5_Pin */
  GPIO_InitStruct.Pin = DIR_5_Pin;
 8000eea:	2340      	movs	r3, #64	; 0x40
 8000eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DIR_5_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	4619      	mov	r1, r3
 8000f00:	4827      	ldr	r0, [pc, #156]	; (8000fa0 <_ZL12MX_GPIO_Initv+0x200>)
 8000f02:	f001 f995 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin DIR_1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|DIR_1_Pin;
 8000f06:	f244 0341 	movw	r3, #16449	; 0x4041
 8000f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4821      	ldr	r0, [pc, #132]	; (8000fa4 <_ZL12MX_GPIO_Initv+0x204>)
 8000f20:	f001 f986 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_3_Pin DIR_2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_3_Pin|DIR_2_Pin|LD2_Pin;
 8000f24:	f244 2302 	movw	r3, #16898	; 0x4202
 8000f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	481a      	ldr	r0, [pc, #104]	; (8000fa8 <_ZL12MX_GPIO_Initv+0x208>)
 8000f3e:	f001 f977 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM1_Pin LM2_Pin */
  GPIO_InitStruct.Pin = LM1_Pin|LM2_Pin;
 8000f42:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	4619      	mov	r1, r3
 8000f56:	4813      	ldr	r0, [pc, #76]	; (8000fa4 <_ZL12MX_GPIO_Initv+0x204>)
 8000f58:	f001 f96a 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin DIR_4_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|DIR_4_Pin;
 8000f5c:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4619      	mov	r1, r3
 8000f74:	480d      	ldr	r0, [pc, #52]	; (8000fac <_ZL12MX_GPIO_Initv+0x20c>)
 8000f76:	f001 f95b 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000f7a:	2380      	movs	r3, #128	; 0x80
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <_ZL12MX_GPIO_Initv+0x214>)
 8000f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 031c 	add.w	r3, r7, #28
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <_ZL12MX_GPIO_Initv+0x218>)
 8000f8e:	f001 f94f 	bl	8002230 <HAL_GPIO_Init>

}
 8000f92:	bf00      	nop
 8000f94:	3730      	adds	r7, #48	; 0x30
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	58024400 	.word	0x58024400
 8000fa0:	58020000 	.word	0x58020000
 8000fa4:	58020400 	.word	0x58020400
 8000fa8:	58021000 	.word	0x58021000
 8000fac:	58020c00 	.word	0x58020c00
 8000fb0:	58020800 	.word	0x58020800
 8000fb4:	11110000 	.word	0x11110000
 8000fb8:	58021800 	.word	0x58021800

08000fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <Error_Handler+0x6>

08000fc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_MspInit+0x30>)
 8000fcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fd0:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <HAL_MspInit+0x30>)
 8000fd2:	f043 0302 	orr.w	r3, r3, #2
 8000fd6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_MspInit+0x30>)
 8000fdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	58024400 	.word	0x58024400

08000ff8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08e      	sub	sp, #56	; 0x38
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a59      	ldr	r2, [pc, #356]	; (800117c <HAL_ETH_MspInit+0x184>)
 8001016:	4293      	cmp	r3, r2
 8001018:	f040 80ab 	bne.w	8001172 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800101c:	4b58      	ldr	r3, [pc, #352]	; (8001180 <HAL_ETH_MspInit+0x188>)
 800101e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001022:	4a57      	ldr	r2, [pc, #348]	; (8001180 <HAL_ETH_MspInit+0x188>)
 8001024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001028:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800102c:	4b54      	ldr	r3, [pc, #336]	; (8001180 <HAL_ETH_MspInit+0x188>)
 800102e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001032:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001036:	623b      	str	r3, [r7, #32]
 8001038:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800103a:	4b51      	ldr	r3, [pc, #324]	; (8001180 <HAL_ETH_MspInit+0x188>)
 800103c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001040:	4a4f      	ldr	r2, [pc, #316]	; (8001180 <HAL_ETH_MspInit+0x188>)
 8001042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001046:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800104a:	4b4d      	ldr	r3, [pc, #308]	; (8001180 <HAL_ETH_MspInit+0x188>)
 800104c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001054:	61fb      	str	r3, [r7, #28]
 8001056:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001058:	4b49      	ldr	r3, [pc, #292]	; (8001180 <HAL_ETH_MspInit+0x188>)
 800105a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800105e:	4a48      	ldr	r2, [pc, #288]	; (8001180 <HAL_ETH_MspInit+0x188>)
 8001060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001064:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001068:	4b45      	ldr	r3, [pc, #276]	; (8001180 <HAL_ETH_MspInit+0x188>)
 800106a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	61bb      	str	r3, [r7, #24]
 8001074:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001076:	4b42      	ldr	r3, [pc, #264]	; (8001180 <HAL_ETH_MspInit+0x188>)
 8001078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107c:	4a40      	ldr	r2, [pc, #256]	; (8001180 <HAL_ETH_MspInit+0x188>)
 800107e:	f043 0304 	orr.w	r3, r3, #4
 8001082:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001086:	4b3e      	ldr	r3, [pc, #248]	; (8001180 <HAL_ETH_MspInit+0x188>)
 8001088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001094:	4b3a      	ldr	r3, [pc, #232]	; (8001180 <HAL_ETH_MspInit+0x188>)
 8001096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109a:	4a39      	ldr	r2, [pc, #228]	; (8001180 <HAL_ETH_MspInit+0x188>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a4:	4b36      	ldr	r3, [pc, #216]	; (8001180 <HAL_ETH_MspInit+0x188>)
 80010a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	4b33      	ldr	r3, [pc, #204]	; (8001180 <HAL_ETH_MspInit+0x188>)
 80010b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b8:	4a31      	ldr	r2, [pc, #196]	; (8001180 <HAL_ETH_MspInit+0x188>)
 80010ba:	f043 0302 	orr.w	r3, r3, #2
 80010be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c2:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <HAL_ETH_MspInit+0x188>)
 80010c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010d0:	4b2b      	ldr	r3, [pc, #172]	; (8001180 <HAL_ETH_MspInit+0x188>)
 80010d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d6:	4a2a      	ldr	r2, [pc, #168]	; (8001180 <HAL_ETH_MspInit+0x188>)
 80010d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e0:	4b27      	ldr	r3, [pc, #156]	; (8001180 <HAL_ETH_MspInit+0x188>)
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80010ee:	2332      	movs	r3, #50	; 0x32
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2300      	movs	r3, #0
 80010fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010fe:	230b      	movs	r3, #11
 8001100:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001106:	4619      	mov	r1, r3
 8001108:	481e      	ldr	r0, [pc, #120]	; (8001184 <HAL_ETH_MspInit+0x18c>)
 800110a:	f001 f891 	bl	8002230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800110e:	2386      	movs	r3, #134	; 0x86
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800111e:	230b      	movs	r3, #11
 8001120:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001126:	4619      	mov	r1, r3
 8001128:	4817      	ldr	r0, [pc, #92]	; (8001188 <HAL_ETH_MspInit+0x190>)
 800112a:	f001 f881 	bl	8002230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800112e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001140:	230b      	movs	r3, #11
 8001142:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001148:	4619      	mov	r1, r3
 800114a:	4810      	ldr	r0, [pc, #64]	; (800118c <HAL_ETH_MspInit+0x194>)
 800114c:	f001 f870 	bl	8002230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001150:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001162:	230b      	movs	r3, #11
 8001164:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116a:	4619      	mov	r1, r3
 800116c:	4808      	ldr	r0, [pc, #32]	; (8001190 <HAL_ETH_MspInit+0x198>)
 800116e:	f001 f85f 	bl	8002230 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001172:	bf00      	nop
 8001174:	3738      	adds	r7, #56	; 0x38
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40028000 	.word	0x40028000
 8001180:	58024400 	.word	0x58024400
 8001184:	58020800 	.word	0x58020800
 8001188:	58020000 	.word	0x58020000
 800118c:	58020400 	.word	0x58020400
 8001190:	58021800 	.word	0x58021800

08001194 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001194:	b480      	push	{r7}
 8001196:	b087      	sub	sp, #28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a20      	ldr	r2, [pc, #128]	; (8001224 <HAL_TIM_Base_MspInit+0x90>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d10f      	bne.n	80011c6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011a6:	4b20      	ldr	r3, [pc, #128]	; (8001228 <HAL_TIM_Base_MspInit+0x94>)
 80011a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011ac:	4a1e      	ldr	r2, [pc, #120]	; (8001228 <HAL_TIM_Base_MspInit+0x94>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80011b6:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <HAL_TIM_Base_MspInit+0x94>)
 80011b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80011c4:	e028      	b.n	8001218 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM3)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a18      	ldr	r2, [pc, #96]	; (800122c <HAL_TIM_Base_MspInit+0x98>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d10f      	bne.n	80011f0 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <HAL_TIM_Base_MspInit+0x94>)
 80011d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011d6:	4a14      	ldr	r2, [pc, #80]	; (8001228 <HAL_TIM_Base_MspInit+0x94>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <HAL_TIM_Base_MspInit+0x94>)
 80011e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
}
 80011ee:	e013      	b.n	8001218 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM4)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0e      	ldr	r2, [pc, #56]	; (8001230 <HAL_TIM_Base_MspInit+0x9c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d10e      	bne.n	8001218 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_TIM_Base_MspInit+0x94>)
 80011fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001200:	4a09      	ldr	r2, [pc, #36]	; (8001228 <HAL_TIM_Base_MspInit+0x94>)
 8001202:	f043 0304 	orr.w	r3, r3, #4
 8001206:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <HAL_TIM_Base_MspInit+0x94>)
 800120c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	bf00      	nop
 800121a:	371c      	adds	r7, #28
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	40010000 	.word	0x40010000
 8001228:	58024400 	.word	0x58024400
 800122c:	40000400 	.word	0x40000400
 8001230:	40000800 	.word	0x40000800

08001234 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08c      	sub	sp, #48	; 0x30
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a48      	ldr	r2, [pc, #288]	; (8001374 <HAL_TIM_MspPostInit+0x140>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d120      	bne.n	8001298 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001256:	4b48      	ldr	r3, [pc, #288]	; (8001378 <HAL_TIM_MspPostInit+0x144>)
 8001258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125c:	4a46      	ldr	r2, [pc, #280]	; (8001378 <HAL_TIM_MspPostInit+0x144>)
 800125e:	f043 0310 	orr.w	r3, r3, #16
 8001262:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001266:	4b44      	ldr	r3, [pc, #272]	; (8001378 <HAL_TIM_MspPostInit+0x144>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	61bb      	str	r3, [r7, #24]
 8001272:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PUL_3_Pin|PUL_2_Pin;
 8001274:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001286:	2301      	movs	r3, #1
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	483a      	ldr	r0, [pc, #232]	; (800137c <HAL_TIM_MspPostInit+0x148>)
 8001292:	f000 ffcd 	bl	8002230 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001296:	e068      	b.n	800136a <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM3)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a38      	ldr	r2, [pc, #224]	; (8001380 <HAL_TIM_MspPostInit+0x14c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d11f      	bne.n	80012e2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	4b35      	ldr	r3, [pc, #212]	; (8001378 <HAL_TIM_MspPostInit+0x144>)
 80012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a8:	4a33      	ldr	r2, [pc, #204]	; (8001378 <HAL_TIM_MspPostInit+0x144>)
 80012aa:	f043 0302 	orr.w	r3, r3, #2
 80012ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b2:	4b31      	ldr	r3, [pc, #196]	; (8001378 <HAL_TIM_MspPostInit+0x144>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PUL_5_Pin;
 80012c0:	2320      	movs	r3, #32
 80012c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012d0:	2302      	movs	r3, #2
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PUL_5_GPIO_Port, &GPIO_InitStruct);
 80012d4:	f107 031c 	add.w	r3, r7, #28
 80012d8:	4619      	mov	r1, r3
 80012da:	482a      	ldr	r0, [pc, #168]	; (8001384 <HAL_TIM_MspPostInit+0x150>)
 80012dc:	f000 ffa8 	bl	8002230 <HAL_GPIO_Init>
}
 80012e0:	e043      	b.n	800136a <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a28      	ldr	r2, [pc, #160]	; (8001388 <HAL_TIM_MspPostInit+0x154>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d13e      	bne.n	800136a <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ec:	4b22      	ldr	r3, [pc, #136]	; (8001378 <HAL_TIM_MspPostInit+0x144>)
 80012ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f2:	4a21      	ldr	r2, [pc, #132]	; (8001378 <HAL_TIM_MspPostInit+0x144>)
 80012f4:	f043 0308 	orr.w	r3, r3, #8
 80012f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012fc:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <HAL_TIM_MspPostInit+0x144>)
 80012fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <HAL_TIM_MspPostInit+0x144>)
 800130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001310:	4a19      	ldr	r2, [pc, #100]	; (8001378 <HAL_TIM_MspPostInit+0x144>)
 8001312:	f043 0302 	orr.w	r3, r3, #2
 8001316:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800131a:	4b17      	ldr	r3, [pc, #92]	; (8001378 <HAL_TIM_MspPostInit+0x144>)
 800131c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PUL_4_Pin;
 8001328:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800132c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800133a:	2302      	movs	r3, #2
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PUL_4_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	4619      	mov	r1, r3
 8001344:	4811      	ldr	r0, [pc, #68]	; (800138c <HAL_TIM_MspPostInit+0x158>)
 8001346:	f000 ff73 	bl	8002230 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PUL_1_Pin;
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800135a:	2302      	movs	r3, #2
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PUL_1_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	4619      	mov	r1, r3
 8001364:	4807      	ldr	r0, [pc, #28]	; (8001384 <HAL_TIM_MspPostInit+0x150>)
 8001366:	f000 ff63 	bl	8002230 <HAL_GPIO_Init>
}
 800136a:	bf00      	nop
 800136c:	3730      	adds	r7, #48	; 0x30
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40010000 	.word	0x40010000
 8001378:	58024400 	.word	0x58024400
 800137c:	58021000 	.word	0x58021000
 8001380:	40000400 	.word	0x40000400
 8001384:	58020400 	.word	0x58020400
 8001388:	40000800 	.word	0x40000800
 800138c:	58020c00 	.word	0x58020c00

08001390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a1a      	ldr	r2, [pc, #104]	; (8001418 <HAL_UART_MspInit+0x88>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d12d      	bne.n	800140e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <HAL_UART_MspInit+0x8c>)
 80013b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013b8:	4a18      	ldr	r2, [pc, #96]	; (800141c <HAL_UART_MspInit+0x8c>)
 80013ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013c2:	4b16      	ldr	r3, [pc, #88]	; (800141c <HAL_UART_MspInit+0x8c>)
 80013c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_UART_MspInit+0x8c>)
 80013d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d6:	4a11      	ldr	r2, [pc, #68]	; (800141c <HAL_UART_MspInit+0x8c>)
 80013d8:	f043 0308 	orr.w	r3, r3, #8
 80013dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <HAL_UART_MspInit+0x8c>)
 80013e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = STLINK_RX1_Pin|STLINK_TX1_Pin;
 80013ee:	2303      	movs	r3, #3
 80013f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80013fe:	2308      	movs	r3, #8
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	4805      	ldr	r0, [pc, #20]	; (8001420 <HAL_UART_MspInit+0x90>)
 800140a:	f000 ff11 	bl	8002230 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800140e:	bf00      	nop
 8001410:	3728      	adds	r7, #40	; 0x28
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40004c00 	.word	0x40004c00
 800141c:	58024400 	.word	0x58024400
 8001420:	58020c00 	.word	0x58020c00

08001424 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a21      	ldr	r2, [pc, #132]	; (80014c8 <HAL_PCD_MspInit+0xa4>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d13b      	bne.n	80014be <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	4b21      	ldr	r3, [pc, #132]	; (80014cc <HAL_PCD_MspInit+0xa8>)
 8001448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144c:	4a1f      	ldr	r2, [pc, #124]	; (80014cc <HAL_PCD_MspInit+0xa8>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001456:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <HAL_PCD_MspInit+0xa8>)
 8001458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001464:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001476:	230a      	movs	r3, #10
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	4813      	ldr	r0, [pc, #76]	; (80014d0 <HAL_PCD_MspInit+0xac>)
 8001482:	f000 fed5 	bl	8002230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001486:	f44f 7300 	mov.w	r3, #512	; 0x200
 800148a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148c:	2300      	movs	r3, #0
 800148e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	480d      	ldr	r0, [pc, #52]	; (80014d0 <HAL_PCD_MspInit+0xac>)
 800149c:	f000 fec8 	bl	8002230 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_PCD_MspInit+0xa8>)
 80014a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014a6:	4a09      	ldr	r2, [pc, #36]	; (80014cc <HAL_PCD_MspInit+0xa8>)
 80014a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80014ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_PCD_MspInit+0xa8>)
 80014b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80014be:	bf00      	nop
 80014c0:	3728      	adds	r7, #40	; 0x28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40080000 	.word	0x40080000
 80014cc:	58024400 	.word	0x58024400
 80014d0:	58020000 	.word	0x58020000

080014d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <NMI_Handler+0x4>

080014da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014de:	e7fe      	b.n	80014de <HardFault_Handler+0x4>

080014e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <MemManage_Handler+0x4>

080014e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ea:	e7fe      	b.n	80014ea <BusFault_Handler+0x4>

080014ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <UsageFault_Handler+0x4>

080014f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001520:	f000 f92a 	bl	8001778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}

08001528 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800152c:	4b39      	ldr	r3, [pc, #228]	; (8001614 <SystemInit+0xec>)
 800152e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001532:	4a38      	ldr	r2, [pc, #224]	; (8001614 <SystemInit+0xec>)
 8001534:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001538:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800153c:	4b36      	ldr	r3, [pc, #216]	; (8001618 <SystemInit+0xf0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 030f 	and.w	r3, r3, #15
 8001544:	2b06      	cmp	r3, #6
 8001546:	d807      	bhi.n	8001558 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001548:	4b33      	ldr	r3, [pc, #204]	; (8001618 <SystemInit+0xf0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f023 030f 	bic.w	r3, r3, #15
 8001550:	4a31      	ldr	r2, [pc, #196]	; (8001618 <SystemInit+0xf0>)
 8001552:	f043 0307 	orr.w	r3, r3, #7
 8001556:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001558:	4b30      	ldr	r3, [pc, #192]	; (800161c <SystemInit+0xf4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a2f      	ldr	r2, [pc, #188]	; (800161c <SystemInit+0xf4>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001564:	4b2d      	ldr	r3, [pc, #180]	; (800161c <SystemInit+0xf4>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800156a:	4b2c      	ldr	r3, [pc, #176]	; (800161c <SystemInit+0xf4>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	492b      	ldr	r1, [pc, #172]	; (800161c <SystemInit+0xf4>)
 8001570:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <SystemInit+0xf8>)
 8001572:	4013      	ands	r3, r2
 8001574:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001576:	4b28      	ldr	r3, [pc, #160]	; (8001618 <SystemInit+0xf0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	2b07      	cmp	r3, #7
 8001580:	d907      	bls.n	8001592 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001582:	4b25      	ldr	r3, [pc, #148]	; (8001618 <SystemInit+0xf0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f023 030f 	bic.w	r3, r3, #15
 800158a:	4a23      	ldr	r2, [pc, #140]	; (8001618 <SystemInit+0xf0>)
 800158c:	f043 0307 	orr.w	r3, r3, #7
 8001590:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001592:	4b22      	ldr	r3, [pc, #136]	; (800161c <SystemInit+0xf4>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001598:	4b20      	ldr	r3, [pc, #128]	; (800161c <SystemInit+0xf4>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800159e:	4b1f      	ldr	r3, [pc, #124]	; (800161c <SystemInit+0xf4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015a4:	4b1d      	ldr	r3, [pc, #116]	; (800161c <SystemInit+0xf4>)
 80015a6:	4a1f      	ldr	r2, [pc, #124]	; (8001624 <SystemInit+0xfc>)
 80015a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015aa:	4b1c      	ldr	r3, [pc, #112]	; (800161c <SystemInit+0xf4>)
 80015ac:	4a1e      	ldr	r2, [pc, #120]	; (8001628 <SystemInit+0x100>)
 80015ae:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015b0:	4b1a      	ldr	r3, [pc, #104]	; (800161c <SystemInit+0xf4>)
 80015b2:	4a1e      	ldr	r2, [pc, #120]	; (800162c <SystemInit+0x104>)
 80015b4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <SystemInit+0xf4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015bc:	4b17      	ldr	r3, [pc, #92]	; (800161c <SystemInit+0xf4>)
 80015be:	4a1b      	ldr	r2, [pc, #108]	; (800162c <SystemInit+0x104>)
 80015c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <SystemInit+0xf4>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015c8:	4b14      	ldr	r3, [pc, #80]	; (800161c <SystemInit+0xf4>)
 80015ca:	4a18      	ldr	r2, [pc, #96]	; (800162c <SystemInit+0x104>)
 80015cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <SystemInit+0xf4>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <SystemInit+0xf4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a10      	ldr	r2, [pc, #64]	; (800161c <SystemInit+0xf4>)
 80015da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015e0:	4b0e      	ldr	r3, [pc, #56]	; (800161c <SystemInit+0xf4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <SystemInit+0x108>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <SystemInit+0x10c>)
 80015ec:	4013      	ands	r3, r2
 80015ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015f2:	d202      	bcs.n	80015fa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80015f4:	4b10      	ldr	r3, [pc, #64]	; (8001638 <SystemInit+0x110>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <SystemInit+0x114>)
 80015fc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001600:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <SystemInit+0xec>)
 8001604:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001608:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000ed00 	.word	0xe000ed00
 8001618:	52002000 	.word	0x52002000
 800161c:	58024400 	.word	0x58024400
 8001620:	eaf6ed7f 	.word	0xeaf6ed7f
 8001624:	02020200 	.word	0x02020200
 8001628:	01ff0000 	.word	0x01ff0000
 800162c:	01010280 	.word	0x01010280
 8001630:	5c001000 	.word	0x5c001000
 8001634:	ffff0000 	.word	0xffff0000
 8001638:	51008108 	.word	0x51008108
 800163c:	52004000 	.word	0x52004000

08001640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001640:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001678 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001644:	f7ff ff70 	bl	8001528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001648:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800164a:	e003      	b.n	8001654 <LoopCopyDataInit>

0800164c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800164e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001650:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001652:	3104      	adds	r1, #4

08001654 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001654:	480a      	ldr	r0, [pc, #40]	; (8001680 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001658:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800165a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800165c:	d3f6      	bcc.n	800164c <CopyDataInit>
  ldr  r2, =_sbss
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001660:	e002      	b.n	8001668 <LoopFillZerobss>

08001662 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001662:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001664:	f842 3b04 	str.w	r3, [r2], #4

08001668 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800166a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800166c:	d3f9      	bcc.n	8001662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800166e:	f005 fea5 	bl	80073bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001672:	f7fe ffb1 	bl	80005d8 <main>
  bx  lr    
 8001676:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001678:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800167c:	08007474 	.word	0x08007474
  ldr  r0, =_sdata
 8001680:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001684:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8001688:	240000d0 	.word	0x240000d0
  ldr  r3, = _ebss
 800168c:	2400070c 	.word	0x2400070c

08001690 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001690:	e7fe      	b.n	8001690 <ADC3_IRQHandler>
	...

08001694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169a:	2003      	movs	r0, #3
 800169c:	f000 f980 	bl	80019a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016a0:	f001 fee8 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 80016a4:	4601      	mov	r1, r0
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_Init+0x68>)
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	0a1b      	lsrs	r3, r3, #8
 80016ac:	f003 030f 	and.w	r3, r3, #15
 80016b0:	4a13      	ldr	r2, [pc, #76]	; (8001700 <HAL_Init+0x6c>)
 80016b2:	5cd3      	ldrb	r3, [r2, r3]
 80016b4:	f003 031f 	and.w	r3, r3, #31
 80016b8:	fa21 f303 	lsr.w	r3, r1, r3
 80016bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <HAL_Init+0x68>)
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <HAL_Init+0x6c>)
 80016c8:	5cd3      	ldrb	r3, [r2, r3]
 80016ca:	f003 031f 	and.w	r3, r3, #31
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	fa22 f303 	lsr.w	r3, r2, r3
 80016d4:	4a0b      	ldr	r2, [pc, #44]	; (8001704 <HAL_Init+0x70>)
 80016d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016d8:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <HAL_Init+0x74>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 f814 	bl	800170c <HAL_InitTick>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e002      	b.n	80016f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016ee:	f7ff fc69 	bl	8000fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	58024400 	.word	0x58024400
 8001700:	0800743c 	.word	0x0800743c
 8001704:	24000004 	.word	0x24000004
 8001708:	24000000 	.word	0x24000000

0800170c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001714:	4b15      	ldr	r3, [pc, #84]	; (800176c <HAL_InitTick+0x60>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e021      	b.n	8001764 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001720:	4b13      	ldr	r3, [pc, #76]	; (8001770 <HAL_InitTick+0x64>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b11      	ldr	r3, [pc, #68]	; (800176c <HAL_InitTick+0x60>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4619      	mov	r1, r3
 800172a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001732:	fbb2 f3f3 	udiv	r3, r2, r3
 8001736:	4618      	mov	r0, r3
 8001738:	f000 f957 	bl	80019ea <HAL_SYSTICK_Config>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e00e      	b.n	8001764 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d80a      	bhi.n	8001762 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800174c:	2200      	movs	r2, #0
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f000 f92f 	bl	80019b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001758:	4a06      	ldr	r2, [pc, #24]	; (8001774 <HAL_InitTick+0x68>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	e000      	b.n	8001764 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2400000c 	.word	0x2400000c
 8001770:	24000000 	.word	0x24000000
 8001774:	24000008 	.word	0x24000008

08001778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_IncTick+0x20>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_IncTick+0x24>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4413      	add	r3, r2
 8001788:	4a04      	ldr	r2, [pc, #16]	; (800179c <HAL_IncTick+0x24>)
 800178a:	6013      	str	r3, [r2, #0]
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	2400000c 	.word	0x2400000c
 800179c:	24000708 	.word	0x24000708

080017a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return uwTick;
 80017a4:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <HAL_GetTick+0x14>)
 80017a6:	681b      	ldr	r3, [r3, #0]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	24000708 	.word	0x24000708

080017b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c0:	f7ff ffee 	bl	80017a0 <HAL_GetTick>
 80017c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d0:	d005      	beq.n	80017de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_Delay+0x40>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4413      	add	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017de:	bf00      	nop
 80017e0:	f7ff ffde 	bl	80017a0 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d8f7      	bhi.n	80017e0 <HAL_Delay+0x28>
  {
  }
}
 80017f0:	bf00      	nop
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	2400000c 	.word	0x2400000c

080017fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <HAL_GetREVID+0x14>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	0c1b      	lsrs	r3, r3, #16
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	5c001000 	.word	0x5c001000

08001814 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001824:	4904      	ldr	r1, [pc, #16]	; (8001838 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4313      	orrs	r3, r2
 800182a:	604b      	str	r3, [r1, #4]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	58000400 	.word	0x58000400

0800183c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <__NVIC_SetPriorityGrouping+0x40>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001858:	4013      	ands	r3, r2
 800185a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <__NVIC_SetPriorityGrouping+0x44>)
 8001866:	4313      	orrs	r3, r2
 8001868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186a:	4a04      	ldr	r2, [pc, #16]	; (800187c <__NVIC_SetPriorityGrouping+0x40>)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	60d3      	str	r3, [r2, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00
 8001880:	05fa0000 	.word	0x05fa0000

08001884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <__NVIC_GetPriorityGrouping+0x18>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	0a1b      	lsrs	r3, r3, #8
 800188e:	f003 0307 	and.w	r3, r3, #7
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	db0a      	blt.n	80018ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	490c      	ldr	r1, [pc, #48]	; (80018ec <__NVIC_SetPriority+0x4c>)
 80018ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018be:	0112      	lsls	r2, r2, #4
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	440b      	add	r3, r1
 80018c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c8:	e00a      	b.n	80018e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4908      	ldr	r1, [pc, #32]	; (80018f0 <__NVIC_SetPriority+0x50>)
 80018d0:	88fb      	ldrh	r3, [r7, #6]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	3b04      	subs	r3, #4
 80018d8:	0112      	lsls	r2, r2, #4
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	440b      	add	r3, r1
 80018de:	761a      	strb	r2, [r3, #24]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000e100 	.word	0xe000e100
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	; 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f1c3 0307 	rsb	r3, r3, #7
 800190e:	2b04      	cmp	r3, #4
 8001910:	bf28      	it	cs
 8001912:	2304      	movcs	r3, #4
 8001914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3304      	adds	r3, #4
 800191a:	2b06      	cmp	r3, #6
 800191c:	d902      	bls.n	8001924 <NVIC_EncodePriority+0x30>
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3b03      	subs	r3, #3
 8001922:	e000      	b.n	8001926 <NVIC_EncodePriority+0x32>
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	f04f 32ff 	mov.w	r2, #4294967295
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43da      	mvns	r2, r3
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	401a      	ands	r2, r3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800193c:	f04f 31ff 	mov.w	r1, #4294967295
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa01 f303 	lsl.w	r3, r1, r3
 8001946:	43d9      	mvns	r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	4313      	orrs	r3, r2
         );
}
 800194e:	4618      	mov	r0, r3
 8001950:	3724      	adds	r7, #36	; 0x24
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3b01      	subs	r3, #1
 8001968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800196c:	d301      	bcc.n	8001972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196e:	2301      	movs	r3, #1
 8001970:	e00f      	b.n	8001992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001972:	4a0a      	ldr	r2, [pc, #40]	; (800199c <SysTick_Config+0x40>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3b01      	subs	r3, #1
 8001978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800197a:	210f      	movs	r1, #15
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
 8001980:	f7ff ff8e 	bl	80018a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <SysTick_Config+0x40>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198a:	4b04      	ldr	r3, [pc, #16]	; (800199c <SysTick_Config+0x40>)
 800198c:	2207      	movs	r2, #7
 800198e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	e000e010 	.word	0xe000e010

080019a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff ff47 	bl	800183c <__NVIC_SetPriorityGrouping>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b086      	sub	sp, #24
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019c4:	f7ff ff5e 	bl	8001884 <__NVIC_GetPriorityGrouping>
 80019c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	6978      	ldr	r0, [r7, #20]
 80019d0:	f7ff ff90 	bl	80018f4 <NVIC_EncodePriority>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff5f 	bl	80018a0 <__NVIC_SetPriority>
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ffb2 	bl	800195c <SysTick_Config>
 80019f8:	4603      	mov	r3, r0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e0c6      	b.n	8001ba4 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d102      	bne.n	8001a24 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff faea 	bl	8000ff8 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2223      	movs	r2, #35	; 0x23
 8001a28:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2a:	4b60      	ldr	r3, [pc, #384]	; (8001bac <HAL_ETH_Init+0x1a8>)
 8001a2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a30:	4a5e      	ldr	r2, [pc, #376]	; (8001bac <HAL_ETH_Init+0x1a8>)
 8001a32:	f043 0302 	orr.w	r3, r3, #2
 8001a36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a3a:	4b5c      	ldr	r3, [pc, #368]	; (8001bac <HAL_ETH_Init+0x1a8>)
 8001a3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	7a1b      	ldrb	r3, [r3, #8]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d103      	bne.n	8001a58 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001a50:	2000      	movs	r0, #0
 8001a52:	f7ff fedf 	bl	8001814 <HAL_SYSCFG_ETHInterfaceSelect>
 8001a56:	e003      	b.n	8001a60 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001a58:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001a5c:	f7ff feda 	bl	8001814 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0201 	orr.w	r2, r2, #1
 8001a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a78:	f7ff fe92 	bl	80017a0 <HAL_GetTick>
 8001a7c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a7e:	e00f      	b.n	8001aa0 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001a80:	f7ff fe8e 	bl	80017a0 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a8e:	d907      	bls.n	8001aa0 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2204      	movs	r2, #4
 8001a94:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	22e0      	movs	r2, #224	; 0xe0
 8001a9a:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e081      	b.n	8001ba4 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1e6      	bne.n	8001a80 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 fac0 	bl	8002038 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001ab8:	f001 fe4e 	bl	8003758 <HAL_RCC_GetHCLKFreq>
 8001abc:	4602      	mov	r2, r0
 8001abe:	4b3c      	ldr	r3, [pc, #240]	; (8001bb0 <HAL_ETH_Init+0x1ac>)
 8001ac0:	fba3 2302 	umull	r2, r3, r3, r2
 8001ac4:	0c9a      	lsrs	r2, r3, #18
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	3a01      	subs	r2, #1
 8001acc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 fa13 	bl	8001efc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001aec:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001af0:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d007      	beq.n	8001b0e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	22e0      	movs	r2, #224	; 0xe0
 8001b08:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e04a      	b.n	8001ba4 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b16:	4413      	add	r3, r2
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	4b26      	ldr	r3, [pc, #152]	; (8001bb4 <HAL_ETH_Init+0x1b0>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6952      	ldr	r2, [r2, #20]
 8001b22:	0052      	lsls	r2, r2, #1
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	6809      	ldr	r1, [r1, #0]
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b2e:	440b      	add	r3, r1
 8001b30:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 fad8 	bl	80020e8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 fb1c 	bl	8002176 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	3305      	adds	r3, #5
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	021a      	lsls	r2, r3, #8
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	4619      	mov	r1, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	3303      	adds	r3, #3
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	061a      	lsls	r2, r3, #24
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	041b      	lsls	r3, r3, #16
 8001b70:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	3301      	adds	r3, #1
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b7c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b8a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b8c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2210      	movs	r2, #16
 8001b9a:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2210      	movs	r2, #16
 8001ba0:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	58024400 	.word	0x58024400
 8001bb0:	431bde83 	.word	0x431bde83
 8001bb4:	ffff8001 	.word	0xffff8001

08001bb8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001bca:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	791b      	ldrb	r3, [r3, #4]
 8001bd0:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001bd2:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	7b1b      	ldrb	r3, [r3, #12]
 8001bd8:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001bda:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	7b5b      	ldrb	r3, [r3, #13]
 8001be0:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001be2:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	7b9b      	ldrb	r3, [r3, #14]
 8001be8:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001bea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	7bdb      	ldrb	r3, [r3, #15]
 8001bf0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001bf2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	7c12      	ldrb	r2, [r2, #16]
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d102      	bne.n	8001c02 <ETH_SetMACConfig+0x4a>
 8001bfc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c00:	e000      	b.n	8001c04 <ETH_SetMACConfig+0x4c>
 8001c02:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001c04:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	7c52      	ldrb	r2, [r2, #17]
 8001c0a:	2a00      	cmp	r2, #0
 8001c0c:	d102      	bne.n	8001c14 <ETH_SetMACConfig+0x5c>
 8001c0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c12:	e000      	b.n	8001c16 <ETH_SetMACConfig+0x5e>
 8001c14:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001c16:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	7c9b      	ldrb	r3, [r3, #18]
 8001c1c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001c1e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001c24:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001c2a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	7f1b      	ldrb	r3, [r3, #28]
 8001c30:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001c32:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	7f5b      	ldrb	r3, [r3, #29]
 8001c38:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001c3a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	7f92      	ldrb	r2, [r2, #30]
 8001c40:	2a00      	cmp	r2, #0
 8001c42:	d102      	bne.n	8001c4a <ETH_SetMACConfig+0x92>
 8001c44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c48:	e000      	b.n	8001c4c <ETH_SetMACConfig+0x94>
 8001c4a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001c4c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	7fdb      	ldrb	r3, [r3, #31]
 8001c52:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001c54:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001c5c:	2a00      	cmp	r2, #0
 8001c5e:	d102      	bne.n	8001c66 <ETH_SetMACConfig+0xae>
 8001c60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c64:	e000      	b.n	8001c68 <ETH_SetMACConfig+0xb0>
 8001c66:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001c68:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001c6e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c76:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001c78:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b56      	ldr	r3, [pc, #344]	; (8001de4 <ETH_SetMACConfig+0x22c>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	68f9      	ldr	r1, [r7, #12]
 8001c92:	430b      	orrs	r3, r1
 8001c94:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ca2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001ca4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cac:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001cae:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001cb6:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001cb8:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001cc0:	2a00      	cmp	r2, #0
 8001cc2:	d102      	bne.n	8001cca <ETH_SetMACConfig+0x112>
 8001cc4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cc8:	e000      	b.n	8001ccc <ETH_SetMACConfig+0x114>
 8001cca:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001ccc:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	4b42      	ldr	r3, [pc, #264]	; (8001de8 <ETH_SetMACConfig+0x230>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	68f9      	ldr	r1, [r7, #12]
 8001ce6:	430b      	orrs	r3, r1
 8001ce8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cf0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <ETH_SetMACConfig+0x234>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	68f9      	ldr	r1, [r7, #12]
 8001d0a:	430b      	orrs	r3, r1
 8001d0c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d14:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d1a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001d22:	2a00      	cmp	r2, #0
 8001d24:	d101      	bne.n	8001d2a <ETH_SetMACConfig+0x172>
 8001d26:	2280      	movs	r2, #128	; 0x80
 8001d28:	e000      	b.n	8001d2c <ETH_SetMACConfig+0x174>
 8001d2a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001d2c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d32:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d34:	4313      	orrs	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d3e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001d42:	4013      	ands	r3, r2
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	68f9      	ldr	r1, [r7, #12]
 8001d4a:	430b      	orrs	r3, r1
 8001d4c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001d54:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001d5c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6a:	f023 0103 	bic.w	r1, r3, #3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001d82:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001d9e:	2a00      	cmp	r2, #0
 8001da0:	d101      	bne.n	8001da6 <ETH_SetMACConfig+0x1ee>
 8001da2:	2240      	movs	r2, #64	; 0x40
 8001da4:	e000      	b.n	8001da8 <ETH_SetMACConfig+0x1f0>
 8001da6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001da8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001db0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001db2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001dba:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001dc8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001dd8:	bf00      	nop
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	00048083 	.word	0x00048083
 8001de8:	c0f88000 	.word	0xc0f88000
 8001dec:	fffffef0 	.word	0xfffffef0

08001df0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b38      	ldr	r3, [pc, #224]	; (8001ee8 <ETH_SetDMAConfig+0xf8>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	6809      	ldr	r1, [r1, #0]
 8001e10:	431a      	orrs	r2, r3
 8001e12:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001e16:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	791b      	ldrb	r3, [r3, #4]
 8001e1c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e22:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	7b1b      	ldrb	r3, [r3, #12]
 8001e28:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	f241 0304 	movw	r3, #4100	; 0x1004
 8001e36:	4413      	add	r3, r2
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	4b2c      	ldr	r3, [pc, #176]	; (8001eec <ETH_SetDMAConfig+0xfc>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6811      	ldr	r1, [r2, #0]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	431a      	orrs	r2, r3
 8001e46:	f241 0304 	movw	r3, #4100	; 0x1004
 8001e4a:	440b      	add	r3, r1
 8001e4c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	7b5b      	ldrb	r3, [r3, #13]
 8001e52:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <ETH_SetDMAConfig+0x100>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6811      	ldr	r1, [r2, #0]
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	431a      	orrs	r2, r3
 8001e72:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001e76:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	7d1b      	ldrb	r3, [r3, #20]
 8001e80:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e82:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	7f5b      	ldrb	r3, [r3, #29]
 8001e88:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e96:	4413      	add	r3, r2
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4b16      	ldr	r3, [pc, #88]	; (8001ef4 <ETH_SetDMAConfig+0x104>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6811      	ldr	r1, [r2, #0]
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	f241 1304 	movw	r3, #4356	; 0x1104
 8001eaa:	440b      	add	r3, r1
 8001eac:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	7f1b      	ldrb	r3, [r3, #28]
 8001eb2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	f241 1308 	movw	r3, #4360	; 0x1108
 8001ec4:	4413      	add	r3, r2
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <ETH_SetDMAConfig+0x108>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6811      	ldr	r1, [r2, #0]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	f241 1308 	movw	r3, #4360	; 0x1108
 8001ed8:	440b      	add	r3, r1
 8001eda:	601a      	str	r2, [r3, #0]
}
 8001edc:	bf00      	nop
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	ffff87fd 	.word	0xffff87fd
 8001eec:	ffff2ffe 	.word	0xffff2ffe
 8001ef0:	fffec000 	.word	0xfffec000
 8001ef4:	ffc0efef 	.word	0xffc0efef
 8001ef8:	7fc0ffff 	.word	0x7fc0ffff

08001efc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b0a4      	sub	sp, #144	; 0x90
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001f04:	2301      	movs	r3, #1
 8001f06:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001f20:	2301      	movs	r3, #1
 8001f22:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001f26:	2301      	movs	r3, #1
 8001f28:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001f32:	2301      	movs	r3, #1
 8001f34:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f3c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001f54:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001f58:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001f60:	2300      	movs	r3, #0
 8001f62:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001f64:	2301      	movs	r3, #1
 8001f66:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001f76:	2300      	movs	r3, #0
 8001f78:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001f94:	2320      	movs	r3, #32
 8001f96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001fa6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001fac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fb0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001fe0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff fde6 	bl	8001bb8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001fec:	2301      	movs	r3, #1
 8001fee:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002006:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800200a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800200c:	2300      	movs	r3, #0
 800200e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002010:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002014:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002016:	2300      	movs	r3, #0
 8002018:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800201c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002020:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002022:	f107 0308 	add.w	r3, r7, #8
 8002026:	4619      	mov	r1, r3
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff fee1 	bl	8001df0 <ETH_SetDMAConfig>
}
 800202e:	bf00      	nop
 8002030:	3790      	adds	r7, #144	; 0x90
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002048:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002050:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002052:	f001 fb81 	bl	8003758 <HAL_RCC_GetHCLKFreq>
 8002056:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	4a1e      	ldr	r2, [pc, #120]	; (80020d4 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d908      	bls.n	8002072 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4a1d      	ldr	r2, [pc, #116]	; (80020d8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d804      	bhi.n	8002072 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	e027      	b.n	80020c2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	4a18      	ldr	r2, [pc, #96]	; (80020d8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d908      	bls.n	800208c <ETH_MAC_MDIO_ClkConfig+0x54>
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	4a17      	ldr	r2, [pc, #92]	; (80020dc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d804      	bhi.n	800208c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	e01a      	b.n	80020c2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	4a13      	ldr	r2, [pc, #76]	; (80020dc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d903      	bls.n	800209c <ETH_MAC_MDIO_ClkConfig+0x64>
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	4a12      	ldr	r2, [pc, #72]	; (80020e0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d911      	bls.n	80020c0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	4a10      	ldr	r2, [pc, #64]	; (80020e0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d908      	bls.n	80020b6 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	4a0f      	ldr	r2, [pc, #60]	; (80020e4 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d804      	bhi.n	80020b6 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	e005      	b.n	80020c2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	e000      	b.n	80020c2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80020c0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80020cc:	bf00      	nop
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	01312cff 	.word	0x01312cff
 80020d8:	02160ebf 	.word	0x02160ebf
 80020dc:	039386ff 	.word	0x039386ff
 80020e0:	05f5e0ff 	.word	0x05f5e0ff
 80020e4:	08f0d17f 	.word	0x08f0d17f

080020e8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	e01d      	b.n	8002132 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68d9      	ldr	r1, [r3, #12]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4613      	mov	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4413      	add	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	440b      	add	r3, r1
 8002106:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2200      	movs	r2, #0
 8002112:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2200      	movs	r2, #0
 800211e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002120:	68b9      	ldr	r1, [r7, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	3206      	adds	r2, #6
 8002128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	3301      	adds	r3, #1
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b03      	cmp	r3, #3
 8002136:	d9de      	bls.n	80020f6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	f241 132c 	movw	r3, #4396	; 0x112c
 8002146:	4413      	add	r3, r2
 8002148:	2203      	movs	r2, #3
 800214a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68d9      	ldr	r1, [r3, #12]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	f241 1314 	movw	r3, #4372	; 0x1114
 8002158:	4413      	add	r3, r2
 800215a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002168:	601a      	str	r2, [r3, #0]
}
 800216a:	bf00      	nop
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002176:	b480      	push	{r7}
 8002178:	b085      	sub	sp, #20
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	e024      	b.n	80021ce <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6919      	ldr	r1, [r3, #16]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	4613      	mov	r3, r2
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	4413      	add	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	440b      	add	r3, r1
 8002194:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2200      	movs	r2, #0
 80021a0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2200      	movs	r2, #0
 80021a6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2200      	movs	r2, #0
 80021ac:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	2200      	movs	r2, #0
 80021b2:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2200      	movs	r2, #0
 80021b8:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	330a      	adds	r3, #10
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	3301      	adds	r3, #1
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d9d7      	bls.n	8002184 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	f241 1330 	movw	r3, #4400	; 0x1130
 80021fa:	4413      	add	r3, r2
 80021fc:	2203      	movs	r2, #3
 80021fe:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6919      	ldr	r1, [r3, #16]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	f241 131c 	movw	r3, #4380	; 0x111c
 800220c:	4413      	add	r3, r2
 800220e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	f241 1328 	movw	r3, #4392	; 0x1128
 8002220:	4413      	add	r3, r2
 8002222:	6019      	str	r1, [r3, #0]
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002230:	b480      	push	{r7}
 8002232:	b089      	sub	sp, #36	; 0x24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800223e:	4b89      	ldr	r3, [pc, #548]	; (8002464 <HAL_GPIO_Init+0x234>)
 8002240:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002242:	e194      	b.n	800256e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	2101      	movs	r1, #1
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	fa01 f303 	lsl.w	r3, r1, r3
 8002250:	4013      	ands	r3, r2
 8002252:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 8186 	beq.w	8002568 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d00b      	beq.n	800227c <HAL_GPIO_Init+0x4c>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d007      	beq.n	800227c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002270:	2b11      	cmp	r3, #17
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b12      	cmp	r3, #18
 800227a:	d130      	bne.n	80022de <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	2203      	movs	r2, #3
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022b2:	2201      	movs	r2, #1
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	091b      	lsrs	r3, r3, #4
 80022c8:	f003 0201 	and.w	r2, r3, #1
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	2203      	movs	r2, #3
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0xee>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b12      	cmp	r3, #18
 800231c:	d123      	bne.n	8002366 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	08da      	lsrs	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3208      	adds	r2, #8
 8002326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	220f      	movs	r2, #15
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	691a      	ldr	r2, [r3, #16]
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	08da      	lsrs	r2, r3, #3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3208      	adds	r2, #8
 8002360:	69b9      	ldr	r1, [r7, #24]
 8002362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	2203      	movs	r2, #3
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 0203 	and.w	r2, r3, #3
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 80e0 	beq.w	8002568 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a8:	4b2f      	ldr	r3, [pc, #188]	; (8002468 <HAL_GPIO_Init+0x238>)
 80023aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023ae:	4a2e      	ldr	r2, [pc, #184]	; (8002468 <HAL_GPIO_Init+0x238>)
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80023b8:	4b2b      	ldr	r3, [pc, #172]	; (8002468 <HAL_GPIO_Init+0x238>)
 80023ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023c6:	4a29      	ldr	r2, [pc, #164]	; (800246c <HAL_GPIO_Init+0x23c>)
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	089b      	lsrs	r3, r3, #2
 80023cc:	3302      	adds	r3, #2
 80023ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	220f      	movs	r2, #15
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a20      	ldr	r2, [pc, #128]	; (8002470 <HAL_GPIO_Init+0x240>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d052      	beq.n	8002498 <HAL_GPIO_Init+0x268>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a1f      	ldr	r2, [pc, #124]	; (8002474 <HAL_GPIO_Init+0x244>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d031      	beq.n	800245e <HAL_GPIO_Init+0x22e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a1e      	ldr	r2, [pc, #120]	; (8002478 <HAL_GPIO_Init+0x248>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d02b      	beq.n	800245a <HAL_GPIO_Init+0x22a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a1d      	ldr	r2, [pc, #116]	; (800247c <HAL_GPIO_Init+0x24c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d025      	beq.n	8002456 <HAL_GPIO_Init+0x226>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a1c      	ldr	r2, [pc, #112]	; (8002480 <HAL_GPIO_Init+0x250>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d01f      	beq.n	8002452 <HAL_GPIO_Init+0x222>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a1b      	ldr	r2, [pc, #108]	; (8002484 <HAL_GPIO_Init+0x254>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d019      	beq.n	800244e <HAL_GPIO_Init+0x21e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a1a      	ldr	r2, [pc, #104]	; (8002488 <HAL_GPIO_Init+0x258>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d013      	beq.n	800244a <HAL_GPIO_Init+0x21a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a19      	ldr	r2, [pc, #100]	; (800248c <HAL_GPIO_Init+0x25c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d00d      	beq.n	8002446 <HAL_GPIO_Init+0x216>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a18      	ldr	r2, [pc, #96]	; (8002490 <HAL_GPIO_Init+0x260>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d007      	beq.n	8002442 <HAL_GPIO_Init+0x212>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a17      	ldr	r2, [pc, #92]	; (8002494 <HAL_GPIO_Init+0x264>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d101      	bne.n	800243e <HAL_GPIO_Init+0x20e>
 800243a:	2309      	movs	r3, #9
 800243c:	e02d      	b.n	800249a <HAL_GPIO_Init+0x26a>
 800243e:	230a      	movs	r3, #10
 8002440:	e02b      	b.n	800249a <HAL_GPIO_Init+0x26a>
 8002442:	2308      	movs	r3, #8
 8002444:	e029      	b.n	800249a <HAL_GPIO_Init+0x26a>
 8002446:	2307      	movs	r3, #7
 8002448:	e027      	b.n	800249a <HAL_GPIO_Init+0x26a>
 800244a:	2306      	movs	r3, #6
 800244c:	e025      	b.n	800249a <HAL_GPIO_Init+0x26a>
 800244e:	2305      	movs	r3, #5
 8002450:	e023      	b.n	800249a <HAL_GPIO_Init+0x26a>
 8002452:	2304      	movs	r3, #4
 8002454:	e021      	b.n	800249a <HAL_GPIO_Init+0x26a>
 8002456:	2303      	movs	r3, #3
 8002458:	e01f      	b.n	800249a <HAL_GPIO_Init+0x26a>
 800245a:	2302      	movs	r3, #2
 800245c:	e01d      	b.n	800249a <HAL_GPIO_Init+0x26a>
 800245e:	2301      	movs	r3, #1
 8002460:	e01b      	b.n	800249a <HAL_GPIO_Init+0x26a>
 8002462:	bf00      	nop
 8002464:	58000080 	.word	0x58000080
 8002468:	58024400 	.word	0x58024400
 800246c:	58000400 	.word	0x58000400
 8002470:	58020000 	.word	0x58020000
 8002474:	58020400 	.word	0x58020400
 8002478:	58020800 	.word	0x58020800
 800247c:	58020c00 	.word	0x58020c00
 8002480:	58021000 	.word	0x58021000
 8002484:	58021400 	.word	0x58021400
 8002488:	58021800 	.word	0x58021800
 800248c:	58021c00 	.word	0x58021c00
 8002490:	58022000 	.word	0x58022000
 8002494:	58022400 	.word	0x58022400
 8002498:	2300      	movs	r3, #0
 800249a:	69fa      	ldr	r2, [r7, #28]
 800249c:	f002 0203 	and.w	r2, r2, #3
 80024a0:	0092      	lsls	r2, r2, #2
 80024a2:	4093      	lsls	r3, r2
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024aa:	4938      	ldr	r1, [pc, #224]	; (800258c <HAL_GPIO_Init+0x35c>)
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	089b      	lsrs	r3, r3, #2
 80024b0:	3302      	adds	r3, #2
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4013      	ands	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800250c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002532:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800253a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002560:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	3301      	adds	r3, #1
 800256c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa22 f303 	lsr.w	r3, r2, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	f47f ae63 	bne.w	8002244 <HAL_GPIO_Init+0x14>
  }
}
 800257e:	bf00      	nop
 8002580:	3724      	adds	r7, #36	; 0x24
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	58000400 	.word	0x58000400

08002590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
 800259c:	4613      	mov	r3, r2
 800259e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025a0:	787b      	ldrb	r3, [r7, #1]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025a6:	887a      	ldrh	r2, [r7, #2]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80025ac:	e003      	b.n	80025b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80025ae:	887b      	ldrh	r3, [r7, #2]
 80025b0:	041a      	lsls	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	619a      	str	r2, [r3, #24]
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025c4:	b08f      	sub	sp, #60	; 0x3c
 80025c6:	af0a      	add	r7, sp, #40	; 0x28
 80025c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e116      	b.n	8002802 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7fe ff18 	bl	8001424 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2203      	movs	r2, #3
 80025f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002604:	2b00      	cmp	r3, #0
 8002606:	d102      	bne.n	800260e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f004 fc8a 	bl	8006f2c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	603b      	str	r3, [r7, #0]
 800261e:	687e      	ldr	r6, [r7, #4]
 8002620:	466d      	mov	r5, sp
 8002622:	f106 0410 	add.w	r4, r6, #16
 8002626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800262a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800262c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800262e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002632:	e885 0003 	stmia.w	r5, {r0, r1}
 8002636:	1d33      	adds	r3, r6, #4
 8002638:	cb0e      	ldmia	r3, {r1, r2, r3}
 800263a:	6838      	ldr	r0, [r7, #0]
 800263c:	f004 fc14 	bl	8006e68 <USB_CoreInit>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2202      	movs	r2, #2
 800264a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e0d7      	b.n	8002802 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2100      	movs	r1, #0
 8002658:	4618      	mov	r0, r3
 800265a:	f004 fc78 	bl	8006f4e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800265e:	2300      	movs	r3, #0
 8002660:	73fb      	strb	r3, [r7, #15]
 8002662:	e04a      	b.n	80026fa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002664:	7bfa      	ldrb	r2, [r7, #15]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	1a9b      	subs	r3, r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	333d      	adds	r3, #61	; 0x3d
 8002674:	2201      	movs	r2, #1
 8002676:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002678:	7bfa      	ldrb	r2, [r7, #15]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	1a9b      	subs	r3, r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	333c      	adds	r3, #60	; 0x3c
 8002688:	7bfa      	ldrb	r2, [r7, #15]
 800268a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800268c:	7bfa      	ldrb	r2, [r7, #15]
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	b298      	uxth	r0, r3
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	1a9b      	subs	r3, r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	3342      	adds	r3, #66	; 0x42
 80026a0:	4602      	mov	r2, r0
 80026a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026a4:	7bfa      	ldrb	r2, [r7, #15]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	333f      	adds	r3, #63	; 0x3f
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026b8:	7bfa      	ldrb	r2, [r7, #15]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	1a9b      	subs	r3, r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	3344      	adds	r3, #68	; 0x44
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026cc:	7bfa      	ldrb	r2, [r7, #15]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	3348      	adds	r3, #72	; 0x48
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026e0:	7bfa      	ldrb	r2, [r7, #15]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	3350      	adds	r3, #80	; 0x50
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	3301      	adds	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]
 80026fa:	7bfa      	ldrb	r2, [r7, #15]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	429a      	cmp	r2, r3
 8002702:	d3af      	bcc.n	8002664 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002704:	2300      	movs	r3, #0
 8002706:	73fb      	strb	r3, [r7, #15]
 8002708:	e044      	b.n	8002794 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800270a:	7bfa      	ldrb	r2, [r7, #15]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	1a9b      	subs	r3, r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	1a9b      	subs	r3, r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002732:	7bfa      	ldrb	r2, [r7, #15]
 8002734:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002736:	7bfa      	ldrb	r2, [r7, #15]
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	1a9b      	subs	r3, r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800274c:	7bfa      	ldrb	r2, [r7, #15]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	1a9b      	subs	r3, r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002762:	7bfa      	ldrb	r2, [r7, #15]
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	1a9b      	subs	r3, r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002778:	7bfa      	ldrb	r2, [r7, #15]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800278e:	7bfb      	ldrb	r3, [r7, #15]
 8002790:	3301      	adds	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
 8002794:	7bfa      	ldrb	r2, [r7, #15]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	429a      	cmp	r2, r3
 800279c:	d3b5      	bcc.n	800270a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	687e      	ldr	r6, [r7, #4]
 80027a6:	466d      	mov	r5, sp
 80027a8:	f106 0410 	add.w	r4, r6, #16
 80027ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80027bc:	1d33      	adds	r3, r6, #4
 80027be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027c0:	6838      	ldr	r0, [r7, #0]
 80027c2:	f004 fbef 	bl	8006fa4 <USB_DevInit>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e014      	b.n	8002802 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d102      	bne.n	80027f6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f80b 	bl	800280c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f004 fd91 	bl	8007322 <USB_DevDisconnect>

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800280c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800283a:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_PCDEx_ActivateLPM+0x44>)
 800283c:	4313      	orrs	r3, r2
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	10000003 	.word	0x10000003

08002854 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800285c:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <HAL_PWREx_ConfigSupply+0x70>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b04      	cmp	r3, #4
 8002866:	d00a      	beq.n	800287e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002868:	4b16      	ldr	r3, [pc, #88]	; (80028c4 <HAL_PWREx_ConfigSupply+0x70>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	429a      	cmp	r2, r3
 8002874:	d001      	beq.n	800287a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e01f      	b.n	80028ba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	e01d      	b.n	80028ba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800287e:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <HAL_PWREx_ConfigSupply+0x70>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f023 0207 	bic.w	r2, r3, #7
 8002886:	490f      	ldr	r1, [pc, #60]	; (80028c4 <HAL_PWREx_ConfigSupply+0x70>)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4313      	orrs	r3, r2
 800288c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800288e:	f7fe ff87 	bl	80017a0 <HAL_GetTick>
 8002892:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002894:	e009      	b.n	80028aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002896:	f7fe ff83 	bl	80017a0 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028a4:	d901      	bls.n	80028aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e007      	b.n	80028ba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_PWREx_ConfigSupply+0x70>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028b6:	d1ee      	bne.n	8002896 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	58024800 	.word	0x58024800

080028c8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80028cc:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4a04      	ldr	r2, [pc, #16]	; (80028e4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80028d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028d6:	60d3      	str	r3, [r2, #12]
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	58024800 	.word	0x58024800

080028e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08c      	sub	sp, #48	; 0x30
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e3ff      	b.n	80030fa <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 8087 	beq.w	8002a16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002908:	4b99      	ldr	r3, [pc, #612]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002912:	4b97      	ldr	r3, [pc, #604]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002916:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291a:	2b10      	cmp	r3, #16
 800291c:	d007      	beq.n	800292e <HAL_RCC_OscConfig+0x46>
 800291e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002920:	2b18      	cmp	r3, #24
 8002922:	d110      	bne.n	8002946 <HAL_RCC_OscConfig+0x5e>
 8002924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d10b      	bne.n	8002946 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800292e:	4b90      	ldr	r3, [pc, #576]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d06c      	beq.n	8002a14 <HAL_RCC_OscConfig+0x12c>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d168      	bne.n	8002a14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e3d9      	b.n	80030fa <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800294e:	d106      	bne.n	800295e <HAL_RCC_OscConfig+0x76>
 8002950:	4b87      	ldr	r3, [pc, #540]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a86      	ldr	r2, [pc, #536]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	e02e      	b.n	80029bc <HAL_RCC_OscConfig+0xd4>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10c      	bne.n	8002980 <HAL_RCC_OscConfig+0x98>
 8002966:	4b82      	ldr	r3, [pc, #520]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a81      	ldr	r2, [pc, #516]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 800296c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	4b7f      	ldr	r3, [pc, #508]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a7e      	ldr	r2, [pc, #504]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002978:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	e01d      	b.n	80029bc <HAL_RCC_OscConfig+0xd4>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002988:	d10c      	bne.n	80029a4 <HAL_RCC_OscConfig+0xbc>
 800298a:	4b79      	ldr	r3, [pc, #484]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a78      	ldr	r2, [pc, #480]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	4b76      	ldr	r3, [pc, #472]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a75      	ldr	r2, [pc, #468]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 800299c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	e00b      	b.n	80029bc <HAL_RCC_OscConfig+0xd4>
 80029a4:	4b72      	ldr	r3, [pc, #456]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a71      	ldr	r2, [pc, #452]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 80029aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ae:	6013      	str	r3, [r2, #0]
 80029b0:	4b6f      	ldr	r3, [pc, #444]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a6e      	ldr	r2, [pc, #440]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 80029b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d013      	beq.n	80029ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7fe feec 	bl	80017a0 <HAL_GetTick>
 80029c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029cc:	f7fe fee8 	bl	80017a0 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b64      	cmp	r3, #100	; 0x64
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e38d      	b.n	80030fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029de:	4b64      	ldr	r3, [pc, #400]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0f0      	beq.n	80029cc <HAL_RCC_OscConfig+0xe4>
 80029ea:	e014      	b.n	8002a16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ec:	f7fe fed8 	bl	80017a0 <HAL_GetTick>
 80029f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f4:	f7fe fed4 	bl	80017a0 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	; 0x64
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e379      	b.n	80030fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a06:	4b5a      	ldr	r3, [pc, #360]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x10c>
 8002a12:	e000      	b.n	8002a16 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 80ae 	beq.w	8002b80 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a24:	4b52      	ldr	r3, [pc, #328]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a2c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a2e:	4b50      	ldr	r3, [pc, #320]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d007      	beq.n	8002a4a <HAL_RCC_OscConfig+0x162>
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	2b18      	cmp	r3, #24
 8002a3e:	d13a      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x1ce>
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d135      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a4a:	4b49      	ldr	r3, [pc, #292]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d005      	beq.n	8002a62 <HAL_RCC_OscConfig+0x17a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e34b      	b.n	80030fa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a62:	f7fe fecb 	bl	80017fc <HAL_GetREVID>
 8002a66:	4602      	mov	r2, r0
 8002a68:	f241 0303 	movw	r3, #4099	; 0x1003
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d817      	bhi.n	8002aa0 <HAL_RCC_OscConfig+0x1b8>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	2b40      	cmp	r3, #64	; 0x40
 8002a76:	d108      	bne.n	8002a8a <HAL_RCC_OscConfig+0x1a2>
 8002a78:	4b3d      	ldr	r3, [pc, #244]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a80:	4a3b      	ldr	r2, [pc, #236]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a86:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a88:	e07a      	b.n	8002b80 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8a:	4b39      	ldr	r3, [pc, #228]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	031b      	lsls	r3, r3, #12
 8002a98:	4935      	ldr	r1, [pc, #212]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a9e:	e06f      	b.n	8002b80 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa0:	4b33      	ldr	r3, [pc, #204]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	061b      	lsls	r3, r3, #24
 8002aae:	4930      	ldr	r1, [pc, #192]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ab4:	e064      	b.n	8002b80 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d045      	beq.n	8002b4a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002abe:	4b2c      	ldr	r3, [pc, #176]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 0219 	bic.w	r2, r3, #25
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	4929      	ldr	r1, [pc, #164]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad0:	f7fe fe66 	bl	80017a0 <HAL_GetTick>
 8002ad4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ad8:	f7fe fe62 	bl	80017a0 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e307      	b.n	80030fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002aea:	4b21      	ldr	r3, [pc, #132]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f0      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af6:	f7fe fe81 	bl	80017fc <HAL_GetREVID>
 8002afa:	4602      	mov	r2, r0
 8002afc:	f241 0303 	movw	r3, #4099	; 0x1003
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d817      	bhi.n	8002b34 <HAL_RCC_OscConfig+0x24c>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	2b40      	cmp	r3, #64	; 0x40
 8002b0a:	d108      	bne.n	8002b1e <HAL_RCC_OscConfig+0x236>
 8002b0c:	4b18      	ldr	r3, [pc, #96]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002b14:	4a16      	ldr	r2, [pc, #88]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1a:	6053      	str	r3, [r2, #4]
 8002b1c:	e030      	b.n	8002b80 <HAL_RCC_OscConfig+0x298>
 8002b1e:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	031b      	lsls	r3, r3, #12
 8002b2c:	4910      	ldr	r1, [pc, #64]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	604b      	str	r3, [r1, #4]
 8002b32:	e025      	b.n	8002b80 <HAL_RCC_OscConfig+0x298>
 8002b34:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	061b      	lsls	r3, r3, #24
 8002b42:	490b      	ldr	r1, [pc, #44]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]
 8002b48:	e01a      	b.n	8002b80 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b4a:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a08      	ldr	r2, [pc, #32]	; (8002b70 <HAL_RCC_OscConfig+0x288>)
 8002b50:	f023 0301 	bic.w	r3, r3, #1
 8002b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b56:	f7fe fe23 	bl	80017a0 <HAL_GetTick>
 8002b5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b5c:	e00a      	b.n	8002b74 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b5e:	f7fe fe1f 	bl	80017a0 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d903      	bls.n	8002b74 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e2c4      	b.n	80030fa <HAL_RCC_OscConfig+0x812>
 8002b70:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b74:	4ba4      	ldr	r3, [pc, #656]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1ee      	bne.n	8002b5e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 80a9 	beq.w	8002ce0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b8e:	4b9e      	ldr	r3, [pc, #632]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b96:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b98:	4b9b      	ldr	r3, [pc, #620]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d007      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x2cc>
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	2b18      	cmp	r3, #24
 8002ba8:	d13a      	bne.n	8002c20 <HAL_RCC_OscConfig+0x338>
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d135      	bne.n	8002c20 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bb4:	4b94      	ldr	r3, [pc, #592]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_RCC_OscConfig+0x2e4>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	2b80      	cmp	r3, #128	; 0x80
 8002bc6:	d001      	beq.n	8002bcc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e296      	b.n	80030fa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bcc:	f7fe fe16 	bl	80017fc <HAL_GetREVID>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	f241 0303 	movw	r3, #4099	; 0x1003
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d817      	bhi.n	8002c0a <HAL_RCC_OscConfig+0x322>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	2b20      	cmp	r3, #32
 8002be0:	d108      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x30c>
 8002be2:	4b89      	ldr	r3, [pc, #548]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002bea:	4a87      	ldr	r2, [pc, #540]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002bec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002bf0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bf2:	e075      	b.n	8002ce0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bf4:	4b84      	ldr	r3, [pc, #528]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	069b      	lsls	r3, r3, #26
 8002c02:	4981      	ldr	r1, [pc, #516]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c08:	e06a      	b.n	8002ce0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c0a:	4b7f      	ldr	r3, [pc, #508]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	061b      	lsls	r3, r3, #24
 8002c18:	497b      	ldr	r1, [pc, #492]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c1e:	e05f      	b.n	8002ce0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d042      	beq.n	8002cae <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c28:	4b77      	ldr	r3, [pc, #476]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a76      	ldr	r2, [pc, #472]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7fe fdb4 	bl	80017a0 <HAL_GetTick>
 8002c38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c3c:	f7fe fdb0 	bl	80017a0 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e255      	b.n	80030fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c4e:	4b6e      	ldr	r3, [pc, #440]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c5a:	f7fe fdcf 	bl	80017fc <HAL_GetREVID>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	f241 0303 	movw	r3, #4099	; 0x1003
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d817      	bhi.n	8002c98 <HAL_RCC_OscConfig+0x3b0>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	2b20      	cmp	r3, #32
 8002c6e:	d108      	bne.n	8002c82 <HAL_RCC_OscConfig+0x39a>
 8002c70:	4b65      	ldr	r3, [pc, #404]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c78:	4a63      	ldr	r2, [pc, #396]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002c7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c7e:	6053      	str	r3, [r2, #4]
 8002c80:	e02e      	b.n	8002ce0 <HAL_RCC_OscConfig+0x3f8>
 8002c82:	4b61      	ldr	r3, [pc, #388]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	069b      	lsls	r3, r3, #26
 8002c90:	495d      	ldr	r1, [pc, #372]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	604b      	str	r3, [r1, #4]
 8002c96:	e023      	b.n	8002ce0 <HAL_RCC_OscConfig+0x3f8>
 8002c98:	4b5b      	ldr	r3, [pc, #364]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	061b      	lsls	r3, r3, #24
 8002ca6:	4958      	ldr	r1, [pc, #352]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	60cb      	str	r3, [r1, #12]
 8002cac:	e018      	b.n	8002ce0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002cae:	4b56      	ldr	r3, [pc, #344]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a55      	ldr	r2, [pc, #340]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cba:	f7fe fd71 	bl	80017a0 <HAL_GetTick>
 8002cbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002cc2:	f7fe fd6d 	bl	80017a0 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e212      	b.n	80030fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002cd4:	4b4c      	ldr	r3, [pc, #304]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f0      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0308 	and.w	r3, r3, #8
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d036      	beq.n	8002d5a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d019      	beq.n	8002d28 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cf4:	4b44      	ldr	r3, [pc, #272]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf8:	4a43      	ldr	r2, [pc, #268]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d00:	f7fe fd4e 	bl	80017a0 <HAL_GetTick>
 8002d04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d08:	f7fe fd4a 	bl	80017a0 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e1ef      	b.n	80030fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d1a:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x420>
 8002d26:	e018      	b.n	8002d5a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d28:	4b37      	ldr	r3, [pc, #220]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d2c:	4a36      	ldr	r2, [pc, #216]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002d2e:	f023 0301 	bic.w	r3, r3, #1
 8002d32:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d34:	f7fe fd34 	bl	80017a0 <HAL_GetTick>
 8002d38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d3c:	f7fe fd30 	bl	80017a0 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e1d5      	b.n	80030fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d4e:	4b2e      	ldr	r3, [pc, #184]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d036      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d019      	beq.n	8002da2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d6e:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a25      	ldr	r2, [pc, #148]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002d74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d78:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d7a:	f7fe fd11 	bl	80017a0 <HAL_GetTick>
 8002d7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d82:	f7fe fd0d 	bl	80017a0 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e1b2      	b.n	80030fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d94:	4b1c      	ldr	r3, [pc, #112]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0f0      	beq.n	8002d82 <HAL_RCC_OscConfig+0x49a>
 8002da0:	e018      	b.n	8002dd4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002da2:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a18      	ldr	r2, [pc, #96]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002da8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dae:	f7fe fcf7 	bl	80017a0 <HAL_GetTick>
 8002db2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002db6:	f7fe fcf3 	bl	80017a0 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e198      	b.n	80030fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <HAL_RCC_OscConfig+0x520>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1f0      	bne.n	8002db6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 8085 	beq.w	8002eec <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002de2:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <HAL_RCC_OscConfig+0x524>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a09      	ldr	r2, [pc, #36]	; (8002e0c <HAL_RCC_OscConfig+0x524>)
 8002de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dee:	f7fe fcd7 	bl	80017a0 <HAL_GetTick>
 8002df2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002df4:	e00c      	b.n	8002e10 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002df6:	f7fe fcd3 	bl	80017a0 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b64      	cmp	r3, #100	; 0x64
 8002e02:	d905      	bls.n	8002e10 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e178      	b.n	80030fa <HAL_RCC_OscConfig+0x812>
 8002e08:	58024400 	.word	0x58024400
 8002e0c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e10:	4b96      	ldr	r3, [pc, #600]	; (800306c <HAL_RCC_OscConfig+0x784>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0ec      	beq.n	8002df6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d106      	bne.n	8002e32 <HAL_RCC_OscConfig+0x54a>
 8002e24:	4b92      	ldr	r3, [pc, #584]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e28:	4a91      	ldr	r2, [pc, #580]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e30:	e02d      	b.n	8002e8e <HAL_RCC_OscConfig+0x5a6>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10c      	bne.n	8002e54 <HAL_RCC_OscConfig+0x56c>
 8002e3a:	4b8d      	ldr	r3, [pc, #564]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3e:	4a8c      	ldr	r2, [pc, #560]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002e40:	f023 0301 	bic.w	r3, r3, #1
 8002e44:	6713      	str	r3, [r2, #112]	; 0x70
 8002e46:	4b8a      	ldr	r3, [pc, #552]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4a:	4a89      	ldr	r2, [pc, #548]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002e4c:	f023 0304 	bic.w	r3, r3, #4
 8002e50:	6713      	str	r3, [r2, #112]	; 0x70
 8002e52:	e01c      	b.n	8002e8e <HAL_RCC_OscConfig+0x5a6>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b05      	cmp	r3, #5
 8002e5a:	d10c      	bne.n	8002e76 <HAL_RCC_OscConfig+0x58e>
 8002e5c:	4b84      	ldr	r3, [pc, #528]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e60:	4a83      	ldr	r2, [pc, #524]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002e62:	f043 0304 	orr.w	r3, r3, #4
 8002e66:	6713      	str	r3, [r2, #112]	; 0x70
 8002e68:	4b81      	ldr	r3, [pc, #516]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6c:	4a80      	ldr	r2, [pc, #512]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	6713      	str	r3, [r2, #112]	; 0x70
 8002e74:	e00b      	b.n	8002e8e <HAL_RCC_OscConfig+0x5a6>
 8002e76:	4b7e      	ldr	r3, [pc, #504]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7a:	4a7d      	ldr	r2, [pc, #500]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002e7c:	f023 0301 	bic.w	r3, r3, #1
 8002e80:	6713      	str	r3, [r2, #112]	; 0x70
 8002e82:	4b7b      	ldr	r3, [pc, #492]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e86:	4a7a      	ldr	r2, [pc, #488]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002e88:	f023 0304 	bic.w	r3, r3, #4
 8002e8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d015      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e96:	f7fe fc83 	bl	80017a0 <HAL_GetTick>
 8002e9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e9c:	e00a      	b.n	8002eb4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e9e:	f7fe fc7f 	bl	80017a0 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e122      	b.n	80030fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002eb4:	4b6e      	ldr	r3, [pc, #440]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0ee      	beq.n	8002e9e <HAL_RCC_OscConfig+0x5b6>
 8002ec0:	e014      	b.n	8002eec <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec2:	f7fe fc6d 	bl	80017a0 <HAL_GetTick>
 8002ec6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ec8:	e00a      	b.n	8002ee0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eca:	f7fe fc69 	bl	80017a0 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e10c      	b.n	80030fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ee0:	4b63      	ldr	r3, [pc, #396]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1ee      	bne.n	8002eca <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 8101 	beq.w	80030f8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ef6:	4b5e      	ldr	r3, [pc, #376]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002efe:	2b18      	cmp	r3, #24
 8002f00:	f000 80bc 	beq.w	800307c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	f040 8095 	bne.w	8003038 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0e:	4b58      	ldr	r3, [pc, #352]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a57      	ldr	r2, [pc, #348]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002f14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1a:	f7fe fc41 	bl	80017a0 <HAL_GetTick>
 8002f1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f22:	f7fe fc3d 	bl	80017a0 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e0e2      	b.n	80030fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f34:	4b4e      	ldr	r3, [pc, #312]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1f0      	bne.n	8002f22 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f40:	4b4b      	ldr	r3, [pc, #300]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002f42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f44:	4b4b      	ldr	r3, [pc, #300]	; (8003074 <HAL_RCC_OscConfig+0x78c>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f50:	0112      	lsls	r2, r2, #4
 8002f52:	430a      	orrs	r2, r1
 8002f54:	4946      	ldr	r1, [pc, #280]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	628b      	str	r3, [r1, #40]	; 0x28
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	025b      	lsls	r3, r3, #9
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f74:	3b01      	subs	r3, #1
 8002f76:	041b      	lsls	r3, r3, #16
 8002f78:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f82:	3b01      	subs	r3, #1
 8002f84:	061b      	lsls	r3, r3, #24
 8002f86:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002f8a:	4939      	ldr	r1, [pc, #228]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002f90:	4b37      	ldr	r3, [pc, #220]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	4a36      	ldr	r2, [pc, #216]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002f96:	f023 0301 	bic.w	r3, r3, #1
 8002f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f9c:	4b34      	ldr	r3, [pc, #208]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002f9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fa0:	4b35      	ldr	r3, [pc, #212]	; (8003078 <HAL_RCC_OscConfig+0x790>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fa8:	00d2      	lsls	r2, r2, #3
 8002faa:	4931      	ldr	r1, [pc, #196]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002fb0:	4b2f      	ldr	r3, [pc, #188]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb4:	f023 020c 	bic.w	r2, r3, #12
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	492c      	ldr	r1, [pc, #176]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002fc2:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc6:	f023 0202 	bic.w	r2, r3, #2
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	4928      	ldr	r1, [pc, #160]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002fd4:	4b26      	ldr	r3, [pc, #152]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	4a25      	ldr	r2, [pc, #148]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fe0:	4b23      	ldr	r3, [pc, #140]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe4:	4a22      	ldr	r2, [pc, #136]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002fec:	4b20      	ldr	r3, [pc, #128]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	4a1f      	ldr	r2, [pc, #124]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002ff2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ff6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002ff8:	4b1d      	ldr	r3, [pc, #116]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffc:	4a1c      	ldr	r2, [pc, #112]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003004:	4b1a      	ldr	r3, [pc, #104]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a19      	ldr	r2, [pc, #100]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 800300a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800300e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003010:	f7fe fbc6 	bl	80017a0 <HAL_GetTick>
 8003014:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003018:	f7fe fbc2 	bl	80017a0 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e067      	b.n	80030fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800302a:	4b11      	ldr	r3, [pc, #68]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f0      	beq.n	8003018 <HAL_RCC_OscConfig+0x730>
 8003036:	e05f      	b.n	80030f8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003038:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a0c      	ldr	r2, [pc, #48]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 800303e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7fe fbac 	bl	80017a0 <HAL_GetTick>
 8003048:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800304c:	f7fe fba8 	bl	80017a0 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e04d      	b.n	80030fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800305e:	4b04      	ldr	r3, [pc, #16]	; (8003070 <HAL_RCC_OscConfig+0x788>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0x764>
 800306a:	e045      	b.n	80030f8 <HAL_RCC_OscConfig+0x810>
 800306c:	58024800 	.word	0x58024800
 8003070:	58024400 	.word	0x58024400
 8003074:	fffffc0c 	.word	0xfffffc0c
 8003078:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800307c:	4b21      	ldr	r3, [pc, #132]	; (8003104 <HAL_RCC_OscConfig+0x81c>)
 800307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003080:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003082:	4b20      	ldr	r3, [pc, #128]	; (8003104 <HAL_RCC_OscConfig+0x81c>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	2b01      	cmp	r3, #1
 800308e:	d031      	beq.n	80030f4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f003 0203 	and.w	r2, r3, #3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800309a:	429a      	cmp	r2, r3
 800309c:	d12a      	bne.n	80030f4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d122      	bne.n	80030f4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d11a      	bne.n	80030f4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	0a5b      	lsrs	r3, r3, #9
 80030c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ca:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d111      	bne.n	80030f4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	0c1b      	lsrs	r3, r3, #16
 80030d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030dc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030de:	429a      	cmp	r2, r3
 80030e0:	d108      	bne.n	80030f4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	0e1b      	lsrs	r3, r3, #24
 80030e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ee:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e000      	b.n	80030fa <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3730      	adds	r7, #48	; 0x30
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	58024400 	.word	0x58024400

08003108 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e19c      	b.n	8003456 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800311c:	4b8a      	ldr	r3, [pc, #552]	; (8003348 <HAL_RCC_ClockConfig+0x240>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 030f 	and.w	r3, r3, #15
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d910      	bls.n	800314c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312a:	4b87      	ldr	r3, [pc, #540]	; (8003348 <HAL_RCC_ClockConfig+0x240>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f023 020f 	bic.w	r2, r3, #15
 8003132:	4985      	ldr	r1, [pc, #532]	; (8003348 <HAL_RCC_ClockConfig+0x240>)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	4313      	orrs	r3, r2
 8003138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313a:	4b83      	ldr	r3, [pc, #524]	; (8003348 <HAL_RCC_ClockConfig+0x240>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d001      	beq.n	800314c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e184      	b.n	8003456 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d010      	beq.n	800317a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	4b7b      	ldr	r3, [pc, #492]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003164:	429a      	cmp	r2, r3
 8003166:	d908      	bls.n	800317a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003168:	4b78      	ldr	r3, [pc, #480]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	4975      	ldr	r1, [pc, #468]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 8003176:	4313      	orrs	r3, r2
 8003178:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d010      	beq.n	80031a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695a      	ldr	r2, [r3, #20]
 800318a:	4b70      	ldr	r3, [pc, #448]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003192:	429a      	cmp	r2, r3
 8003194:	d908      	bls.n	80031a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003196:	4b6d      	ldr	r3, [pc, #436]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	496a      	ldr	r1, [pc, #424]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0310 	and.w	r3, r3, #16
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d010      	beq.n	80031d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699a      	ldr	r2, [r3, #24]
 80031b8:	4b64      	ldr	r3, [pc, #400]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d908      	bls.n	80031d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031c4:	4b61      	ldr	r3, [pc, #388]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	495e      	ldr	r1, [pc, #376]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d010      	beq.n	8003204 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69da      	ldr	r2, [r3, #28]
 80031e6:	4b59      	ldr	r3, [pc, #356]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d908      	bls.n	8003204 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80031f2:	4b56      	ldr	r3, [pc, #344]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	4953      	ldr	r1, [pc, #332]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 8003200:	4313      	orrs	r3, r2
 8003202:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d010      	beq.n	8003232 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	4b4d      	ldr	r3, [pc, #308]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	429a      	cmp	r2, r3
 800321e:	d908      	bls.n	8003232 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003220:	4b4a      	ldr	r3, [pc, #296]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	f023 020f 	bic.w	r2, r3, #15
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	4947      	ldr	r1, [pc, #284]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 800322e:	4313      	orrs	r3, r2
 8003230:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d055      	beq.n	80032ea <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800323e:	4b43      	ldr	r3, [pc, #268]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	4940      	ldr	r1, [pc, #256]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 800324c:	4313      	orrs	r3, r2
 800324e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b02      	cmp	r3, #2
 8003256:	d107      	bne.n	8003268 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003258:	4b3c      	ldr	r3, [pc, #240]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d121      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0f6      	b.n	8003456 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b03      	cmp	r3, #3
 800326e:	d107      	bne.n	8003280 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003270:	4b36      	ldr	r3, [pc, #216]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d115      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0ea      	b.n	8003456 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d107      	bne.n	8003298 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003288:	4b30      	ldr	r3, [pc, #192]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d109      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0de      	b.n	8003456 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003298:	4b2c      	ldr	r3, [pc, #176]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0d6      	b.n	8003456 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032a8:	4b28      	ldr	r3, [pc, #160]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	f023 0207 	bic.w	r2, r3, #7
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	4925      	ldr	r1, [pc, #148]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ba:	f7fe fa71 	bl	80017a0 <HAL_GetTick>
 80032be:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c0:	e00a      	b.n	80032d8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c2:	f7fe fa6d 	bl	80017a0 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e0be      	b.n	8003456 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d8:	4b1c      	ldr	r3, [pc, #112]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d1eb      	bne.n	80032c2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d010      	beq.n	8003318 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	4b14      	ldr	r3, [pc, #80]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	429a      	cmp	r2, r3
 8003304:	d208      	bcs.n	8003318 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003306:	4b11      	ldr	r3, [pc, #68]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	f023 020f 	bic.w	r2, r3, #15
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	490e      	ldr	r1, [pc, #56]	; (800334c <HAL_RCC_ClockConfig+0x244>)
 8003314:	4313      	orrs	r3, r2
 8003316:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <HAL_RCC_ClockConfig+0x240>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d214      	bcs.n	8003350 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003326:	4b08      	ldr	r3, [pc, #32]	; (8003348 <HAL_RCC_ClockConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f023 020f 	bic.w	r2, r3, #15
 800332e:	4906      	ldr	r1, [pc, #24]	; (8003348 <HAL_RCC_ClockConfig+0x240>)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003336:	4b04      	ldr	r3, [pc, #16]	; (8003348 <HAL_RCC_ClockConfig+0x240>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d005      	beq.n	8003350 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e086      	b.n	8003456 <HAL_RCC_ClockConfig+0x34e>
 8003348:	52002000 	.word	0x52002000
 800334c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	d010      	beq.n	800337e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	4b3f      	ldr	r3, [pc, #252]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003368:	429a      	cmp	r2, r3
 800336a:	d208      	bcs.n	800337e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800336c:	4b3c      	ldr	r3, [pc, #240]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	4939      	ldr	r1, [pc, #228]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 800337a:	4313      	orrs	r3, r2
 800337c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d010      	beq.n	80033ac <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	4b34      	ldr	r3, [pc, #208]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003396:	429a      	cmp	r2, r3
 8003398:	d208      	bcs.n	80033ac <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800339a:	4b31      	ldr	r3, [pc, #196]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	492e      	ldr	r1, [pc, #184]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d010      	beq.n	80033da <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699a      	ldr	r2, [r3, #24]
 80033bc:	4b28      	ldr	r3, [pc, #160]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d208      	bcs.n	80033da <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033c8:	4b25      	ldr	r3, [pc, #148]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	4922      	ldr	r1, [pc, #136]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d010      	beq.n	8003408 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69da      	ldr	r2, [r3, #28]
 80033ea:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d208      	bcs.n	8003408 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80033f6:	4b1a      	ldr	r3, [pc, #104]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	4917      	ldr	r1, [pc, #92]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 8003404:	4313      	orrs	r3, r2
 8003406:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003408:	f000 f834 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 800340c:	4601      	mov	r1, r0
 800340e:	4b14      	ldr	r3, [pc, #80]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	0a1b      	lsrs	r3, r3, #8
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	4a12      	ldr	r2, [pc, #72]	; (8003464 <HAL_RCC_ClockConfig+0x35c>)
 800341a:	5cd3      	ldrb	r3, [r2, r3]
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	fa21 f303 	lsr.w	r3, r1, r3
 8003424:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003426:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <HAL_RCC_ClockConfig+0x358>)
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	4a0d      	ldr	r2, [pc, #52]	; (8003464 <HAL_RCC_ClockConfig+0x35c>)
 8003430:	5cd3      	ldrb	r3, [r2, r3]
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
 800343c:	4a0a      	ldr	r2, [pc, #40]	; (8003468 <HAL_RCC_ClockConfig+0x360>)
 800343e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003440:	4a0a      	ldr	r2, [pc, #40]	; (800346c <HAL_RCC_ClockConfig+0x364>)
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003446:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <HAL_RCC_ClockConfig+0x368>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f7fe f95e 	bl	800170c <HAL_InitTick>
 8003450:	4603      	mov	r3, r0
 8003452:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003454:	7bfb      	ldrb	r3, [r7, #15]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	58024400 	.word	0x58024400
 8003464:	0800743c 	.word	0x0800743c
 8003468:	24000004 	.word	0x24000004
 800346c:	24000000 	.word	0x24000000
 8003470:	24000008 	.word	0x24000008

08003474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003474:	b480      	push	{r7}
 8003476:	b089      	sub	sp, #36	; 0x24
 8003478:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800347a:	4baf      	ldr	r3, [pc, #700]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003482:	2b18      	cmp	r3, #24
 8003484:	f200 814e 	bhi.w	8003724 <HAL_RCC_GetSysClockFreq+0x2b0>
 8003488:	a201      	add	r2, pc, #4	; (adr r2, 8003490 <HAL_RCC_GetSysClockFreq+0x1c>)
 800348a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348e:	bf00      	nop
 8003490:	080034f5 	.word	0x080034f5
 8003494:	08003725 	.word	0x08003725
 8003498:	08003725 	.word	0x08003725
 800349c:	08003725 	.word	0x08003725
 80034a0:	08003725 	.word	0x08003725
 80034a4:	08003725 	.word	0x08003725
 80034a8:	08003725 	.word	0x08003725
 80034ac:	08003725 	.word	0x08003725
 80034b0:	0800351b 	.word	0x0800351b
 80034b4:	08003725 	.word	0x08003725
 80034b8:	08003725 	.word	0x08003725
 80034bc:	08003725 	.word	0x08003725
 80034c0:	08003725 	.word	0x08003725
 80034c4:	08003725 	.word	0x08003725
 80034c8:	08003725 	.word	0x08003725
 80034cc:	08003725 	.word	0x08003725
 80034d0:	08003521 	.word	0x08003521
 80034d4:	08003725 	.word	0x08003725
 80034d8:	08003725 	.word	0x08003725
 80034dc:	08003725 	.word	0x08003725
 80034e0:	08003725 	.word	0x08003725
 80034e4:	08003725 	.word	0x08003725
 80034e8:	08003725 	.word	0x08003725
 80034ec:	08003725 	.word	0x08003725
 80034f0:	08003527 	.word	0x08003527
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034f4:	4b90      	ldr	r3, [pc, #576]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d009      	beq.n	8003514 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003500:	4b8d      	ldr	r3, [pc, #564]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	08db      	lsrs	r3, r3, #3
 8003506:	f003 0303 	and.w	r3, r3, #3
 800350a:	4a8c      	ldr	r2, [pc, #560]	; (800373c <HAL_RCC_GetSysClockFreq+0x2c8>)
 800350c:	fa22 f303 	lsr.w	r3, r2, r3
 8003510:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003512:	e10a      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003514:	4b89      	ldr	r3, [pc, #548]	; (800373c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003516:	61bb      	str	r3, [r7, #24]
    break;
 8003518:	e107      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800351a:	4b89      	ldr	r3, [pc, #548]	; (8003740 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800351c:	61bb      	str	r3, [r7, #24]
    break;
 800351e:	e104      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003520:	4b88      	ldr	r3, [pc, #544]	; (8003744 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003522:	61bb      	str	r3, [r7, #24]
    break;
 8003524:	e101      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003526:	4b84      	ldr	r3, [pc, #528]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003530:	4b81      	ldr	r3, [pc, #516]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003534:	091b      	lsrs	r3, r3, #4
 8003536:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800353a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800353c:	4b7e      	ldr	r3, [pc, #504]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003546:	4b7c      	ldr	r3, [pc, #496]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354a:	08db      	lsrs	r3, r3, #3
 800354c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	fb02 f303 	mul.w	r3, r2, r3
 8003556:	ee07 3a90 	vmov	s15, r3
 800355a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800355e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 80da 	beq.w	800371e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d05a      	beq.n	8003626 <HAL_RCC_GetSysClockFreq+0x1b2>
 8003570:	2b01      	cmp	r3, #1
 8003572:	d302      	bcc.n	800357a <HAL_RCC_GetSysClockFreq+0x106>
 8003574:	2b02      	cmp	r3, #2
 8003576:	d078      	beq.n	800366a <HAL_RCC_GetSysClockFreq+0x1f6>
 8003578:	e099      	b.n	80036ae <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800357a:	4b6f      	ldr	r3, [pc, #444]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	d02d      	beq.n	80035e2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003586:	4b6c      	ldr	r3, [pc, #432]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	08db      	lsrs	r3, r3, #3
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	4a6a      	ldr	r2, [pc, #424]	; (800373c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003592:	fa22 f303 	lsr.w	r3, r2, r3
 8003596:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	ee07 3a90 	vmov	s15, r3
 800359e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	ee07 3a90 	vmov	s15, r3
 80035a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035b0:	4b61      	ldr	r3, [pc, #388]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80035b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b8:	ee07 3a90 	vmov	s15, r3
 80035bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80035c4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003748 <HAL_RCC_GetSysClockFreq+0x2d4>
 80035c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035dc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80035e0:	e087      	b.n	80036f2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	ee07 3a90 	vmov	s15, r3
 80035e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ec:	eddf 6a57 	vldr	s13, [pc, #348]	; 800374c <HAL_RCC_GetSysClockFreq+0x2d8>
 80035f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035f4:	4b50      	ldr	r3, [pc, #320]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80035f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035fc:	ee07 3a90 	vmov	s15, r3
 8003600:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003604:	ed97 6a02 	vldr	s12, [r7, #8]
 8003608:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003748 <HAL_RCC_GetSysClockFreq+0x2d4>
 800360c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003610:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003614:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003618:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800361c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003620:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003624:	e065      	b.n	80036f2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	ee07 3a90 	vmov	s15, r3
 800362c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003630:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003750 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003634:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003638:	4b3f      	ldr	r3, [pc, #252]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003640:	ee07 3a90 	vmov	s15, r3
 8003644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003648:	ed97 6a02 	vldr	s12, [r7, #8]
 800364c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003748 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003650:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003654:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003658:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800365c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003664:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003668:	e043      	b.n	80036f2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	ee07 3a90 	vmov	s15, r3
 8003670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003674:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003754 <HAL_RCC_GetSysClockFreq+0x2e0>
 8003678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800367c:	4b2e      	ldr	r3, [pc, #184]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003684:	ee07 3a90 	vmov	s15, r3
 8003688:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800368c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003690:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003748 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003694:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003698:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800369c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036ac:	e021      	b.n	80036f2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	ee07 3a90 	vmov	s15, r3
 80036b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003750 <HAL_RCC_GetSysClockFreq+0x2dc>
 80036bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036c0:	4b1d      	ldr	r3, [pc, #116]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80036c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036c8:	ee07 3a90 	vmov	s15, r3
 80036cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80036d4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003748 <HAL_RCC_GetSysClockFreq+0x2d4>
 80036d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036f0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80036f2:	4b11      	ldr	r3, [pc, #68]	; (8003738 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	0a5b      	lsrs	r3, r3, #9
 80036f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036fc:	3301      	adds	r3, #1
 80036fe:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	ee07 3a90 	vmov	s15, r3
 8003706:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800370a:	edd7 6a07 	vldr	s13, [r7, #28]
 800370e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003716:	ee17 3a90 	vmov	r3, s15
 800371a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800371c:	e005      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	61bb      	str	r3, [r7, #24]
    break;
 8003722:	e002      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003724:	4b06      	ldr	r3, [pc, #24]	; (8003740 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003726:	61bb      	str	r3, [r7, #24]
    break;
 8003728:	bf00      	nop
  }

  return sysclockfreq;
 800372a:	69bb      	ldr	r3, [r7, #24]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3724      	adds	r7, #36	; 0x24
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	58024400 	.word	0x58024400
 800373c:	03d09000 	.word	0x03d09000
 8003740:	003d0900 	.word	0x003d0900
 8003744:	007a1200 	.word	0x007a1200
 8003748:	46000000 	.word	0x46000000
 800374c:	4c742400 	.word	0x4c742400
 8003750:	4a742400 	.word	0x4a742400
 8003754:	4af42400 	.word	0x4af42400

08003758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800375e:	f7ff fe89 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 8003762:	4601      	mov	r1, r0
 8003764:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	0a1b      	lsrs	r3, r3, #8
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	4a0f      	ldr	r2, [pc, #60]	; (80037ac <HAL_RCC_GetHCLKFreq+0x54>)
 8003770:	5cd3      	ldrb	r3, [r2, r3]
 8003772:	f003 031f 	and.w	r3, r3, #31
 8003776:	fa21 f303 	lsr.w	r3, r1, r3
 800377a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	f003 030f 	and.w	r3, r3, #15
 8003784:	4a09      	ldr	r2, [pc, #36]	; (80037ac <HAL_RCC_GetHCLKFreq+0x54>)
 8003786:	5cd3      	ldrb	r3, [r2, r3]
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	fa22 f303 	lsr.w	r3, r2, r3
 8003792:	4a07      	ldr	r2, [pc, #28]	; (80037b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003794:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003796:	4a07      	ldr	r2, [pc, #28]	; (80037b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800379c:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800379e:	681b      	ldr	r3, [r3, #0]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	58024400 	.word	0x58024400
 80037ac:	0800743c 	.word	0x0800743c
 80037b0:	24000004 	.word	0x24000004
 80037b4:	24000000 	.word	0x24000000

080037b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80037bc:	f7ff ffcc 	bl	8003758 <HAL_RCC_GetHCLKFreq>
 80037c0:	4601      	mov	r1, r0
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	091b      	lsrs	r3, r3, #4
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037ce:	5cd3      	ldrb	r3, [r2, r3]
 80037d0:	f003 031f 	and.w	r3, r3, #31
 80037d4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80037d8:	4618      	mov	r0, r3
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	58024400 	.word	0x58024400
 80037e0:	0800743c 	.word	0x0800743c

080037e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80037e8:	f7ff ffb6 	bl	8003758 <HAL_RCC_GetHCLKFreq>
 80037ec:	4601      	mov	r1, r0
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	0a1b      	lsrs	r3, r3, #8
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	4a04      	ldr	r2, [pc, #16]	; (800380c <HAL_RCC_GetPCLK2Freq+0x28>)
 80037fa:	5cd3      	ldrb	r3, [r2, r3]
 80037fc:	f003 031f 	and.w	r3, r3, #31
 8003800:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003804:	4618      	mov	r0, r3
 8003806:	bd80      	pop	{r7, pc}
 8003808:	58024400 	.word	0x58024400
 800380c:	0800743c 	.word	0x0800743c

08003810 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003818:	2300      	movs	r3, #0
 800381a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800381c:	2300      	movs	r3, #0
 800381e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d03d      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003834:	d013      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800383a:	d802      	bhi.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800383c:	2b00      	cmp	r3, #0
 800383e:	d007      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003840:	e01f      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003842:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003846:	d013      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003848:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800384c:	d01c      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800384e:	e018      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003850:	4baf      	ldr	r3, [pc, #700]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	4aae      	ldr	r2, [pc, #696]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800385a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800385c:	e015      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3304      	adds	r3, #4
 8003862:	2102      	movs	r1, #2
 8003864:	4618      	mov	r0, r3
 8003866:	f001 f96f 	bl	8004b48 <RCCEx_PLL2_Config>
 800386a:	4603      	mov	r3, r0
 800386c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800386e:	e00c      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3324      	adds	r3, #36	; 0x24
 8003874:	2102      	movs	r1, #2
 8003876:	4618      	mov	r0, r3
 8003878:	f001 fa18 	bl	8004cac <RCCEx_PLL3_Config>
 800387c:	4603      	mov	r3, r0
 800387e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003880:	e003      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	75fb      	strb	r3, [r7, #23]
      break;
 8003886:	e000      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003888:	bf00      	nop
    }

    if(ret == HAL_OK)
 800388a:	7dfb      	ldrb	r3, [r7, #23]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d109      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003890:	4b9f      	ldr	r3, [pc, #636]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003894:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800389c:	499c      	ldr	r1, [pc, #624]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	650b      	str	r3, [r1, #80]	; 0x50
 80038a2:	e001      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a4:	7dfb      	ldrb	r3, [r7, #23]
 80038a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d03d      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d826      	bhi.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80038bc:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80038be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c2:	bf00      	nop
 80038c4:	080038d9 	.word	0x080038d9
 80038c8:	080038e7 	.word	0x080038e7
 80038cc:	080038f9 	.word	0x080038f9
 80038d0:	08003911 	.word	0x08003911
 80038d4:	08003911 	.word	0x08003911
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038d8:	4b8d      	ldr	r3, [pc, #564]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	4a8c      	ldr	r2, [pc, #560]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038e4:	e015      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3304      	adds	r3, #4
 80038ea:	2100      	movs	r1, #0
 80038ec:	4618      	mov	r0, r3
 80038ee:	f001 f92b 	bl	8004b48 <RCCEx_PLL2_Config>
 80038f2:	4603      	mov	r3, r0
 80038f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038f6:	e00c      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3324      	adds	r3, #36	; 0x24
 80038fc:	2100      	movs	r1, #0
 80038fe:	4618      	mov	r0, r3
 8003900:	f001 f9d4 	bl	8004cac <RCCEx_PLL3_Config>
 8003904:	4603      	mov	r3, r0
 8003906:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003908:	e003      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	75fb      	strb	r3, [r7, #23]
      break;
 800390e:	e000      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003910:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003912:	7dfb      	ldrb	r3, [r7, #23]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d109      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003918:	4b7d      	ldr	r3, [pc, #500]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800391a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391c:	f023 0207 	bic.w	r2, r3, #7
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003924:	497a      	ldr	r1, [pc, #488]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003926:	4313      	orrs	r3, r2
 8003928:	650b      	str	r3, [r1, #80]	; 0x50
 800392a:	e001      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003938:	2b00      	cmp	r3, #0
 800393a:	d03e      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003940:	2b80      	cmp	r3, #128	; 0x80
 8003942:	d01c      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003944:	2b80      	cmp	r3, #128	; 0x80
 8003946:	d804      	bhi.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800394c:	2b40      	cmp	r3, #64	; 0x40
 800394e:	d00d      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003950:	e01e      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003952:	2bc0      	cmp	r3, #192	; 0xc0
 8003954:	d01f      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800395a:	d01e      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800395c:	e018      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800395e:	4b6c      	ldr	r3, [pc, #432]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003962:	4a6b      	ldr	r2, [pc, #428]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003968:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800396a:	e017      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3304      	adds	r3, #4
 8003970:	2100      	movs	r1, #0
 8003972:	4618      	mov	r0, r3
 8003974:	f001 f8e8 	bl	8004b48 <RCCEx_PLL2_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800397c:	e00e      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3324      	adds	r3, #36	; 0x24
 8003982:	2100      	movs	r1, #0
 8003984:	4618      	mov	r0, r3
 8003986:	f001 f991 	bl	8004cac <RCCEx_PLL3_Config>
 800398a:	4603      	mov	r3, r0
 800398c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800398e:	e005      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	75fb      	strb	r3, [r7, #23]
      break;
 8003994:	e002      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003996:	bf00      	nop
 8003998:	e000      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800399a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800399c:	7dfb      	ldrb	r3, [r7, #23]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80039a2:	4b5b      	ldr	r3, [pc, #364]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ae:	4958      	ldr	r1, [pc, #352]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	650b      	str	r3, [r1, #80]	; 0x50
 80039b4:	e001      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b6:	7dfb      	ldrb	r3, [r7, #23]
 80039b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d044      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039d0:	d01f      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80039d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039d6:	d805      	bhi.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80039dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039e0:	d00e      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80039e2:	e01f      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80039e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80039e8:	d01f      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80039ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039ee:	d01e      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80039f0:	e018      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039f2:	4b47      	ldr	r3, [pc, #284]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f6:	4a46      	ldr	r2, [pc, #280]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039fe:	e017      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3304      	adds	r3, #4
 8003a04:	2100      	movs	r1, #0
 8003a06:	4618      	mov	r0, r3
 8003a08:	f001 f89e 	bl	8004b48 <RCCEx_PLL2_Config>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003a10:	e00e      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3324      	adds	r3, #36	; 0x24
 8003a16:	2100      	movs	r1, #0
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f001 f947 	bl	8004cac <RCCEx_PLL3_Config>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a22:	e005      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	75fb      	strb	r3, [r7, #23]
      break;
 8003a28:	e002      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003a2a:	bf00      	nop
 8003a2c:	e000      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003a2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a30:	7dfb      	ldrb	r3, [r7, #23]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10a      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a36:	4b36      	ldr	r3, [pc, #216]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a44:	4932      	ldr	r1, [pc, #200]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	658b      	str	r3, [r1, #88]	; 0x58
 8003a4a:	e001      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a4c:	7dfb      	ldrb	r3, [r7, #23]
 8003a4e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d044      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a66:	d01f      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003a68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a6c:	d805      	bhi.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00a      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003a72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a76:	d00e      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003a78:	e01f      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003a7a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a7e:	d01f      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003a80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a84:	d01e      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003a86:	e018      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a88:	4b21      	ldr	r3, [pc, #132]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	4a20      	ldr	r2, [pc, #128]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a94:	e017      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f001 f853 	bl	8004b48 <RCCEx_PLL2_Config>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003aa6:	e00e      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3324      	adds	r3, #36	; 0x24
 8003aac:	2100      	movs	r1, #0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f001 f8fc 	bl	8004cac <RCCEx_PLL3_Config>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ab8:	e005      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	75fb      	strb	r3, [r7, #23]
      break;
 8003abe:	e002      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003ac0:	bf00      	nop
 8003ac2:	e000      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ac6:	7dfb      	ldrb	r3, [r7, #23]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003acc:	4b10      	ldr	r3, [pc, #64]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ada:	490d      	ldr	r1, [pc, #52]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	658b      	str	r3, [r1, #88]	; 0x58
 8003ae0:	e001      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae2:	7dfb      	ldrb	r3, [r7, #23]
 8003ae4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d035      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af6:	2b10      	cmp	r3, #16
 8003af8:	d00c      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003afa:	2b10      	cmp	r3, #16
 8003afc:	d802      	bhi.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d01b      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003b02:	e017      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003b04:	2b20      	cmp	r3, #32
 8003b06:	d00c      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003b08:	2b30      	cmp	r3, #48	; 0x30
 8003b0a:	d018      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003b0c:	e012      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003b0e:	bf00      	nop
 8003b10:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b14:	4baf      	ldr	r3, [pc, #700]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b18:	4aae      	ldr	r2, [pc, #696]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003b20:	e00e      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3304      	adds	r3, #4
 8003b26:	2102      	movs	r1, #2
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f001 f80d 	bl	8004b48 <RCCEx_PLL2_Config>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003b32:	e005      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	75fb      	strb	r3, [r7, #23]
      break;
 8003b38:	e002      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003b3a:	bf00      	nop
 8003b3c:	e000      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003b3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b40:	7dfb      	ldrb	r3, [r7, #23]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d109      	bne.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b46:	4ba3      	ldr	r3, [pc, #652]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b52:	49a0      	ldr	r1, [pc, #640]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b58:	e001      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5a:	7dfb      	ldrb	r3, [r7, #23]
 8003b5c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d042      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b72:	d01f      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b78:	d805      	bhi.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b82:	d00e      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003b84:	e01f      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8003b86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b8a:	d01f      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003b8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b90:	d01e      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003b92:	e018      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b94:	4b8f      	ldr	r3, [pc, #572]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	4a8e      	ldr	r2, [pc, #568]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ba0:	e017      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 ffcd 	bl	8004b48 <RCCEx_PLL2_Config>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003bb2:	e00e      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3324      	adds	r3, #36	; 0x24
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f001 f876 	bl	8004cac <RCCEx_PLL3_Config>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003bc4:	e005      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	75fb      	strb	r3, [r7, #23]
      break;
 8003bca:	e002      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003bcc:	bf00      	nop
 8003bce:	e000      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003bd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bd2:	7dfb      	ldrb	r3, [r7, #23]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d109      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003bd8:	4b7e      	ldr	r3, [pc, #504]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bdc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be4:	497b      	ldr	r1, [pc, #492]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	650b      	str	r3, [r1, #80]	; 0x50
 8003bea:	e001      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bec:	7dfb      	ldrb	r3, [r7, #23]
 8003bee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d042      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c04:	d01b      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003c06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c0a:	d805      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d022      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c14:	d00a      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003c16:	e01b      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003c18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c1c:	d01d      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003c1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c22:	d01c      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003c24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c28:	d01b      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003c2a:	e011      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	2101      	movs	r1, #1
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 ff88 	bl	8004b48 <RCCEx_PLL2_Config>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c3c:	e012      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3324      	adds	r3, #36	; 0x24
 8003c42:	2101      	movs	r1, #1
 8003c44:	4618      	mov	r0, r3
 8003c46:	f001 f831 	bl	8004cac <RCCEx_PLL3_Config>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c4e:	e009      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	75fb      	strb	r3, [r7, #23]
      break;
 8003c54:	e006      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003c56:	bf00      	nop
 8003c58:	e004      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003c5a:	bf00      	nop
 8003c5c:	e002      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003c5e:	bf00      	nop
 8003c60:	e000      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003c62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c64:	7dfb      	ldrb	r3, [r7, #23]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d109      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c6a:	4b5a      	ldr	r3, [pc, #360]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c76:	4957      	ldr	r1, [pc, #348]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	650b      	str	r3, [r1, #80]	; 0x50
 8003c7c:	e001      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c7e:	7dfb      	ldrb	r3, [r7, #23]
 8003c80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d044      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c98:	d01b      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003c9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c9e:	d805      	bhi.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d022      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003ca4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ca8:	d00a      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003caa:	e01b      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb0:	d01d      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cb6:	d01c      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8003cb8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cbc:	d01b      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003cbe:	e011      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 ff3e 	bl	8004b48 <RCCEx_PLL2_Config>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003cd0:	e012      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3324      	adds	r3, #36	; 0x24
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 ffe7 	bl	8004cac <RCCEx_PLL3_Config>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003ce2:	e009      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce8:	e006      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003cea:	bf00      	nop
 8003cec:	e004      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003cee:	bf00      	nop
 8003cf0:	e002      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003cf2:	bf00      	nop
 8003cf4:	e000      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003cf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cf8:	7dfb      	ldrb	r3, [r7, #23]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10a      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003cfe:	4b35      	ldr	r3, [pc, #212]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d02:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d0c:	4931      	ldr	r1, [pc, #196]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	658b      	str	r3, [r1, #88]	; 0x58
 8003d12:	e001      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d14:	7dfb      	ldrb	r3, [r7, #23]
 8003d16:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d02d      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d2c:	d005      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d32:	d009      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d013      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003d38:	e00f      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d3a:	4b26      	ldr	r3, [pc, #152]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	4a25      	ldr	r2, [pc, #148]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d46:	e00c      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fefa 	bl	8004b48 <RCCEx_PLL2_Config>
 8003d54:	4603      	mov	r3, r0
 8003d56:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d58:	e003      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d5e:	e000      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d62:	7dfb      	ldrb	r3, [r7, #23]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d109      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d68:	4b1a      	ldr	r3, [pc, #104]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d6c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d74:	4917      	ldr	r1, [pc, #92]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	650b      	str	r3, [r1, #80]	; 0x50
 8003d7a:	e001      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7c:	7dfb      	ldrb	r3, [r7, #23]
 8003d7e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d035      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d81b      	bhi.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003d94:	a201      	add	r2, pc, #4	; (adr r2, 8003d9c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9a:	bf00      	nop
 8003d9c:	08003dd9 	.word	0x08003dd9
 8003da0:	08003dad 	.word	0x08003dad
 8003da4:	08003dbb 	.word	0x08003dbb
 8003da8:	08003dd9 	.word	0x08003dd9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dac:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	4a08      	ldr	r2, [pc, #32]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003db2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003db8:	e00f      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	2102      	movs	r1, #2
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 fec1 	bl	8004b48 <RCCEx_PLL2_Config>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003dca:	e006      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	75fb      	strb	r3, [r7, #23]
      break;
 8003dd0:	e003      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8003dd2:	bf00      	nop
 8003dd4:	58024400 	.word	0x58024400
      break;
 8003dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dda:	7dfb      	ldrb	r3, [r7, #23]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d109      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003de0:	4bba      	ldr	r3, [pc, #744]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de4:	f023 0203 	bic.w	r2, r3, #3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dec:	49b7      	ldr	r1, [pc, #732]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003df2:	e001      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df4:	7dfb      	ldrb	r3, [r7, #23]
 8003df6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 8086 	beq.w	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e06:	4bb2      	ldr	r3, [pc, #712]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4ab1      	ldr	r2, [pc, #708]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e12:	f7fd fcc5 	bl	80017a0 <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e18:	e009      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e1a:	f7fd fcc1 	bl	80017a0 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b64      	cmp	r3, #100	; 0x64
 8003e26:	d902      	bls.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	75fb      	strb	r3, [r7, #23]
        break;
 8003e2c:	e005      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e2e:	4ba8      	ldr	r3, [pc, #672]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0ef      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8003e3a:	7dfb      	ldrb	r3, [r7, #23]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d166      	bne.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e40:	4ba2      	ldr	r3, [pc, #648]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e4a:	4053      	eors	r3, r2
 8003e4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d013      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e54:	4b9d      	ldr	r3, [pc, #628]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e5c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e5e:	4b9b      	ldr	r3, [pc, #620]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e62:	4a9a      	ldr	r2, [pc, #616]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e68:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e6a:	4b98      	ldr	r3, [pc, #608]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	4a97      	ldr	r2, [pc, #604]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e74:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e76:	4a95      	ldr	r2, [pc, #596]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e86:	d115      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e88:	f7fd fc8a 	bl	80017a0 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e8e:	e00b      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e90:	f7fd fc86 	bl	80017a0 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d902      	bls.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	75fb      	strb	r3, [r7, #23]
            break;
 8003ea6:	e005      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ea8:	4b88      	ldr	r3, [pc, #544]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0ed      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8003eb4:	7dfb      	ldrb	r3, [r7, #23]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d126      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ec8:	d10d      	bne.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8003eca:	4b80      	ldr	r3, [pc, #512]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ed8:	0919      	lsrs	r1, r3, #4
 8003eda:	4b7e      	ldr	r3, [pc, #504]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003edc:	400b      	ands	r3, r1
 8003ede:	497b      	ldr	r1, [pc, #492]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	610b      	str	r3, [r1, #16]
 8003ee4:	e005      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003ee6:	4b79      	ldr	r3, [pc, #484]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	4a78      	ldr	r2, [pc, #480]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003eec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ef0:	6113      	str	r3, [r2, #16]
 8003ef2:	4b76      	ldr	r3, [pc, #472]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ef4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f00:	4972      	ldr	r1, [pc, #456]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	670b      	str	r3, [r1, #112]	; 0x70
 8003f06:	e004      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f08:	7dfb      	ldrb	r3, [r7, #23]
 8003f0a:	75bb      	strb	r3, [r7, #22]
 8003f0c:	e001      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0e:	7dfb      	ldrb	r3, [r7, #23]
 8003f10:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d07d      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f22:	2b28      	cmp	r3, #40	; 0x28
 8003f24:	d866      	bhi.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8003f26:	a201      	add	r2, pc, #4	; (adr r2, 8003f2c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2c:	08003ffb 	.word	0x08003ffb
 8003f30:	08003ff5 	.word	0x08003ff5
 8003f34:	08003ff5 	.word	0x08003ff5
 8003f38:	08003ff5 	.word	0x08003ff5
 8003f3c:	08003ff5 	.word	0x08003ff5
 8003f40:	08003ff5 	.word	0x08003ff5
 8003f44:	08003ff5 	.word	0x08003ff5
 8003f48:	08003ff5 	.word	0x08003ff5
 8003f4c:	08003fd1 	.word	0x08003fd1
 8003f50:	08003ff5 	.word	0x08003ff5
 8003f54:	08003ff5 	.word	0x08003ff5
 8003f58:	08003ff5 	.word	0x08003ff5
 8003f5c:	08003ff5 	.word	0x08003ff5
 8003f60:	08003ff5 	.word	0x08003ff5
 8003f64:	08003ff5 	.word	0x08003ff5
 8003f68:	08003ff5 	.word	0x08003ff5
 8003f6c:	08003fe3 	.word	0x08003fe3
 8003f70:	08003ff5 	.word	0x08003ff5
 8003f74:	08003ff5 	.word	0x08003ff5
 8003f78:	08003ff5 	.word	0x08003ff5
 8003f7c:	08003ff5 	.word	0x08003ff5
 8003f80:	08003ff5 	.word	0x08003ff5
 8003f84:	08003ff5 	.word	0x08003ff5
 8003f88:	08003ff5 	.word	0x08003ff5
 8003f8c:	08003ffb 	.word	0x08003ffb
 8003f90:	08003ff5 	.word	0x08003ff5
 8003f94:	08003ff5 	.word	0x08003ff5
 8003f98:	08003ff5 	.word	0x08003ff5
 8003f9c:	08003ff5 	.word	0x08003ff5
 8003fa0:	08003ff5 	.word	0x08003ff5
 8003fa4:	08003ff5 	.word	0x08003ff5
 8003fa8:	08003ff5 	.word	0x08003ff5
 8003fac:	08003ffb 	.word	0x08003ffb
 8003fb0:	08003ff5 	.word	0x08003ff5
 8003fb4:	08003ff5 	.word	0x08003ff5
 8003fb8:	08003ff5 	.word	0x08003ff5
 8003fbc:	08003ff5 	.word	0x08003ff5
 8003fc0:	08003ff5 	.word	0x08003ff5
 8003fc4:	08003ff5 	.word	0x08003ff5
 8003fc8:	08003ff5 	.word	0x08003ff5
 8003fcc:	08003ffb 	.word	0x08003ffb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 fdb6 	bl	8004b48 <RCCEx_PLL2_Config>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003fe0:	e00c      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3324      	adds	r3, #36	; 0x24
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 fe5f 	bl	8004cac <RCCEx_PLL3_Config>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003ff2:	e003      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ff8:	e000      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8003ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d109      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004002:	4b32      	ldr	r3, [pc, #200]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004006:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800400e:	492f      	ldr	r1, [pc, #188]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004010:	4313      	orrs	r3, r2
 8004012:	654b      	str	r3, [r1, #84]	; 0x54
 8004014:	e001      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004016:	7dfb      	ldrb	r3, [r7, #23]
 8004018:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d037      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800402a:	2b05      	cmp	r3, #5
 800402c:	d820      	bhi.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800402e:	a201      	add	r2, pc, #4	; (adr r2, 8004034 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004034:	08004077 	.word	0x08004077
 8004038:	0800404d 	.word	0x0800404d
 800403c:	0800405f 	.word	0x0800405f
 8004040:	08004077 	.word	0x08004077
 8004044:	08004077 	.word	0x08004077
 8004048:	08004077 	.word	0x08004077
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3304      	adds	r3, #4
 8004050:	2101      	movs	r1, #1
 8004052:	4618      	mov	r0, r3
 8004054:	f000 fd78 	bl	8004b48 <RCCEx_PLL2_Config>
 8004058:	4603      	mov	r3, r0
 800405a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800405c:	e00c      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3324      	adds	r3, #36	; 0x24
 8004062:	2101      	movs	r1, #1
 8004064:	4618      	mov	r0, r3
 8004066:	f000 fe21 	bl	8004cac <RCCEx_PLL3_Config>
 800406a:	4603      	mov	r3, r0
 800406c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800406e:	e003      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	75fb      	strb	r3, [r7, #23]
      break;
 8004074:	e000      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8004076:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004078:	7dfb      	ldrb	r3, [r7, #23]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800407e:	4b13      	ldr	r3, [pc, #76]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004082:	f023 0207 	bic.w	r2, r3, #7
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800408a:	4910      	ldr	r1, [pc, #64]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800408c:	4313      	orrs	r3, r2
 800408e:	654b      	str	r3, [r1, #84]	; 0x54
 8004090:	e001      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004092:	7dfb      	ldrb	r3, [r7, #23]
 8004094:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0304 	and.w	r3, r3, #4
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d040      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a8:	2b05      	cmp	r3, #5
 80040aa:	d827      	bhi.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80040ac:	a201      	add	r2, pc, #4	; (adr r2, 80040b4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80040ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b2:	bf00      	nop
 80040b4:	08004103 	.word	0x08004103
 80040b8:	080040d9 	.word	0x080040d9
 80040bc:	080040eb 	.word	0x080040eb
 80040c0:	08004103 	.word	0x08004103
 80040c4:	08004103 	.word	0x08004103
 80040c8:	08004103 	.word	0x08004103
 80040cc:	58024400 	.word	0x58024400
 80040d0:	58024800 	.word	0x58024800
 80040d4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3304      	adds	r3, #4
 80040dc:	2101      	movs	r1, #1
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 fd32 	bl	8004b48 <RCCEx_PLL2_Config>
 80040e4:	4603      	mov	r3, r0
 80040e6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80040e8:	e00c      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3324      	adds	r3, #36	; 0x24
 80040ee:	2101      	movs	r1, #1
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fddb 	bl	8004cac <RCCEx_PLL3_Config>
 80040f6:	4603      	mov	r3, r0
 80040f8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80040fa:	e003      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004100:	e000      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004102:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004104:	7dfb      	ldrb	r3, [r7, #23]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10a      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800410a:	4bb2      	ldr	r3, [pc, #712]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800410c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410e:	f023 0207 	bic.w	r2, r3, #7
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004118:	49ae      	ldr	r1, [pc, #696]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800411a:	4313      	orrs	r3, r2
 800411c:	658b      	str	r3, [r1, #88]	; 0x58
 800411e:	e001      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004120:	7dfb      	ldrb	r3, [r7, #23]
 8004122:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0320 	and.w	r3, r3, #32
 800412c:	2b00      	cmp	r3, #0
 800412e:	d044      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800413a:	d01b      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800413c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004140:	d805      	bhi.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004142:	2b00      	cmp	r3, #0
 8004144:	d022      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8004146:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800414a:	d00a      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800414c:	e01b      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800414e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004152:	d01d      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004154:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004158:	d01c      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800415a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800415e:	d01b      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004160:	e011      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	3304      	adds	r3, #4
 8004166:	2100      	movs	r1, #0
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fced 	bl	8004b48 <RCCEx_PLL2_Config>
 800416e:	4603      	mov	r3, r0
 8004170:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004172:	e012      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3324      	adds	r3, #36	; 0x24
 8004178:	2102      	movs	r1, #2
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fd96 	bl	8004cac <RCCEx_PLL3_Config>
 8004180:	4603      	mov	r3, r0
 8004182:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004184:	e009      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	75fb      	strb	r3, [r7, #23]
      break;
 800418a:	e006      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800418c:	bf00      	nop
 800418e:	e004      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004190:	bf00      	nop
 8004192:	e002      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004194:	bf00      	nop
 8004196:	e000      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004198:	bf00      	nop
    }

    if(ret == HAL_OK)
 800419a:	7dfb      	ldrb	r3, [r7, #23]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10a      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041a0:	4b8c      	ldr	r3, [pc, #560]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80041a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041ae:	4989      	ldr	r1, [pc, #548]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	654b      	str	r3, [r1, #84]	; 0x54
 80041b4:	e001      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b6:	7dfb      	ldrb	r3, [r7, #23]
 80041b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d044      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041d0:	d01b      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80041d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041d6:	d805      	bhi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d022      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80041dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80041e2:	e01b      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80041e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e8:	d01d      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80041ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041ee:	d01c      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80041f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041f4:	d01b      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80041f6:	e011      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3304      	adds	r3, #4
 80041fc:	2100      	movs	r1, #0
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fca2 	bl	8004b48 <RCCEx_PLL2_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004208:	e012      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3324      	adds	r3, #36	; 0x24
 800420e:	2102      	movs	r1, #2
 8004210:	4618      	mov	r0, r3
 8004212:	f000 fd4b 	bl	8004cac <RCCEx_PLL3_Config>
 8004216:	4603      	mov	r3, r0
 8004218:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800421a:	e009      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	75fb      	strb	r3, [r7, #23]
      break;
 8004220:	e006      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004222:	bf00      	nop
 8004224:	e004      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004226:	bf00      	nop
 8004228:	e002      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800422a:	bf00      	nop
 800422c:	e000      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800422e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004230:	7dfb      	ldrb	r3, [r7, #23]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10a      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004236:	4b67      	ldr	r3, [pc, #412]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004244:	4963      	ldr	r1, [pc, #396]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004246:	4313      	orrs	r3, r2
 8004248:	658b      	str	r3, [r1, #88]	; 0x58
 800424a:	e001      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424c:	7dfb      	ldrb	r3, [r7, #23]
 800424e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004258:	2b00      	cmp	r3, #0
 800425a:	d044      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004262:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004266:	d01b      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8004268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800426c:	d805      	bhi.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800426e:	2b00      	cmp	r3, #0
 8004270:	d022      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004276:	d00a      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004278:	e01b      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800427a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800427e:	d01d      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004280:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004284:	d01c      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8004286:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800428a:	d01b      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800428c:	e011      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3304      	adds	r3, #4
 8004292:	2100      	movs	r1, #0
 8004294:	4618      	mov	r0, r3
 8004296:	f000 fc57 	bl	8004b48 <RCCEx_PLL2_Config>
 800429a:	4603      	mov	r3, r0
 800429c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800429e:	e012      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3324      	adds	r3, #36	; 0x24
 80042a4:	2102      	movs	r1, #2
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fd00 	bl	8004cac <RCCEx_PLL3_Config>
 80042ac:	4603      	mov	r3, r0
 80042ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80042b0:	e009      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	75fb      	strb	r3, [r7, #23]
      break;
 80042b6:	e006      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80042b8:	bf00      	nop
 80042ba:	e004      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80042bc:	bf00      	nop
 80042be:	e002      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80042c0:	bf00      	nop
 80042c2:	e000      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80042c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042c6:	7dfb      	ldrb	r3, [r7, #23]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10a      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80042cc:	4b41      	ldr	r3, [pc, #260]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80042ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042da:	493e      	ldr	r1, [pc, #248]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	658b      	str	r3, [r1, #88]	; 0x58
 80042e0:	e001      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e2:	7dfb      	ldrb	r3, [r7, #23]
 80042e4:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d01a      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fc:	d10a      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3324      	adds	r3, #36	; 0x24
 8004302:	2102      	movs	r1, #2
 8004304:	4618      	mov	r0, r3
 8004306:	f000 fcd1 	bl	8004cac <RCCEx_PLL3_Config>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004314:	4b2f      	ldr	r3, [pc, #188]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004318:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004322:	492c      	ldr	r1, [pc, #176]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004324:	4313      	orrs	r3, r2
 8004326:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0310 	and.w	r3, r3, #16
 8004330:	2b00      	cmp	r3, #0
 8004332:	d01a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800433a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800433e:	d10a      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3324      	adds	r3, #36	; 0x24
 8004344:	2102      	movs	r1, #2
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fcb0 	bl	8004cac <RCCEx_PLL3_Config>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004356:	4b1f      	ldr	r3, [pc, #124]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004364:	491b      	ldr	r1, [pc, #108]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004366:	4313      	orrs	r3, r2
 8004368:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d032      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800437c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004380:	d00d      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8004382:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004386:	d016      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8004388:	2b00      	cmp	r3, #0
 800438a:	d111      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3304      	adds	r3, #4
 8004390:	2100      	movs	r1, #0
 8004392:	4618      	mov	r0, r3
 8004394:	f000 fbd8 	bl	8004b48 <RCCEx_PLL2_Config>
 8004398:	4603      	mov	r3, r0
 800439a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800439c:	e00c      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	3324      	adds	r3, #36	; 0x24
 80043a2:	2102      	movs	r1, #2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fc81 	bl	8004cac <RCCEx_PLL3_Config>
 80043aa:	4603      	mov	r3, r0
 80043ac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80043ae:	e003      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	75fb      	strb	r3, [r7, #23]
      break;
 80043b4:	e000      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80043b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043b8:	7dfb      	ldrb	r3, [r7, #23]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10c      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043be:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80043c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80043cc:	4901      	ldr	r1, [pc, #4]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	658b      	str	r3, [r1, #88]	; 0x58
 80043d2:	e003      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80043d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d8:	7dfb      	ldrb	r3, [r7, #23]
 80043da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d02f      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043f2:	d00c      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80043f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043f8:	d015      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80043fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043fe:	d10f      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004400:	4b79      	ldr	r3, [pc, #484]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	4a78      	ldr	r2, [pc, #480]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800440a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800440c:	e00c      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	3324      	adds	r3, #36	; 0x24
 8004412:	2101      	movs	r1, #1
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fc49 	bl	8004cac <RCCEx_PLL3_Config>
 800441a:	4603      	mov	r3, r0
 800441c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800441e:	e003      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	75fb      	strb	r3, [r7, #23]
      break;
 8004424:	e000      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8004426:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004428:	7dfb      	ldrb	r3, [r7, #23]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10a      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800442e:	4b6e      	ldr	r3, [pc, #440]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004432:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800443c:	496a      	ldr	r1, [pc, #424]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800443e:	4313      	orrs	r3, r2
 8004440:	654b      	str	r3, [r1, #84]	; 0x54
 8004442:	e001      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004444:	7dfb      	ldrb	r3, [r7, #23]
 8004446:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d029      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800445c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004460:	d007      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8004462:	e00f      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004464:	4b60      	ldr	r3, [pc, #384]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004468:	4a5f      	ldr	r2, [pc, #380]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800446a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800446e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004470:	e00b      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3304      	adds	r3, #4
 8004476:	2102      	movs	r1, #2
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fb65 	bl	8004b48 <RCCEx_PLL2_Config>
 800447e:	4603      	mov	r3, r0
 8004480:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004482:	e002      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	75fb      	strb	r3, [r7, #23]
      break;
 8004488:	bf00      	nop
    }

    if(ret == HAL_OK)
 800448a:	7dfb      	ldrb	r3, [r7, #23]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d109      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004490:	4b55      	ldr	r3, [pc, #340]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004494:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449c:	4952      	ldr	r1, [pc, #328]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80044a2:	e001      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a4:	7dfb      	ldrb	r3, [r7, #23]
 80044a6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3324      	adds	r3, #36	; 0x24
 80044b8:	2102      	movs	r1, #2
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fbf6 	bl	8004cac <RCCEx_PLL3_Config>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d02f      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044de:	d00c      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80044e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044e4:	d802      	bhi.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d011      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80044ea:	e00d      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80044ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044f0:	d00f      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80044f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044f6:	d00e      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80044f8:	e006      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044fa:	4b3b      	ldr	r3, [pc, #236]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	4a3a      	ldr	r2, [pc, #232]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004504:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004506:	e007      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	75fb      	strb	r3, [r7, #23]
      break;
 800450c:	e004      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800450e:	bf00      	nop
 8004510:	e002      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004512:	bf00      	nop
 8004514:	e000      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004516:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004518:	7dfb      	ldrb	r3, [r7, #23]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d109      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800451e:	4b32      	ldr	r3, [pc, #200]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004522:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800452a:	492f      	ldr	r1, [pc, #188]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800452c:	4313      	orrs	r3, r2
 800452e:	654b      	str	r3, [r1, #84]	; 0x54
 8004530:	e001      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004532:	7dfb      	ldrb	r3, [r7, #23]
 8004534:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d008      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004542:	4b29      	ldr	r3, [pc, #164]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004546:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454e:	4926      	ldr	r1, [pc, #152]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004550:	4313      	orrs	r3, r2
 8004552:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d009      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004560:	4b21      	ldr	r3, [pc, #132]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800456e:	491e      	ldr	r1, [pc, #120]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004570:	4313      	orrs	r3, r2
 8004572:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d008      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004580:	4b19      	ldr	r3, [pc, #100]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004584:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800458c:	4916      	ldr	r1, [pc, #88]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800458e:	4313      	orrs	r3, r2
 8004590:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00d      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800459e:	4b12      	ldr	r3, [pc, #72]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	4a11      	ldr	r2, [pc, #68]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80045a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045a8:	6113      	str	r3, [r2, #16]
 80045aa:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80045ac:	691a      	ldr	r2, [r3, #16]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80045b4:	490c      	ldr	r1, [pc, #48]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	da08      	bge.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80045c2:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80045c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ce:	4906      	ldr	r1, [pc, #24]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80045d4:	7dbb      	ldrb	r3, [r7, #22]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	e000      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	58024400 	.word	0x58024400

080045ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80045f0:	f7ff f8b2 	bl	8003758 <HAL_RCC_GetHCLKFreq>
 80045f4:	4601      	mov	r1, r0
 80045f6:	4b06      	ldr	r3, [pc, #24]	; (8004610 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	091b      	lsrs	r3, r3, #4
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	4a04      	ldr	r2, [pc, #16]	; (8004614 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004602:	5cd3      	ldrb	r3, [r2, r3]
 8004604:	f003 031f 	and.w	r3, r3, #31
 8004608:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800460c:	4618      	mov	r0, r3
 800460e:	bd80      	pop	{r7, pc}
 8004610:	58024400 	.word	0x58024400
 8004614:	0800743c 	.word	0x0800743c

08004618 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004618:	b480      	push	{r7}
 800461a:	b089      	sub	sp, #36	; 0x24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004620:	4b9d      	ldr	r3, [pc, #628]	; (8004898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800462a:	4b9b      	ldr	r3, [pc, #620]	; (8004898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800462c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462e:	0b1b      	lsrs	r3, r3, #12
 8004630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004634:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004636:	4b98      	ldr	r3, [pc, #608]	; (8004898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463a:	091b      	lsrs	r3, r3, #4
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004642:	4b95      	ldr	r3, [pc, #596]	; (8004898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004646:	08db      	lsrs	r3, r3, #3
 8004648:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	fb02 f303 	mul.w	r3, r2, r3
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800465a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 810a 	beq.w	800487a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d05a      	beq.n	8004722 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800466c:	2b01      	cmp	r3, #1
 800466e:	d302      	bcc.n	8004676 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8004670:	2b02      	cmp	r3, #2
 8004672:	d078      	beq.n	8004766 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8004674:	e099      	b.n	80047aa <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004676:	4b88      	ldr	r3, [pc, #544]	; (8004898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0320 	and.w	r3, r3, #32
 800467e:	2b00      	cmp	r3, #0
 8004680:	d02d      	beq.n	80046de <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004682:	4b85      	ldr	r3, [pc, #532]	; (8004898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	08db      	lsrs	r3, r3, #3
 8004688:	f003 0303 	and.w	r3, r3, #3
 800468c:	4a83      	ldr	r2, [pc, #524]	; (800489c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800468e:	fa22 f303 	lsr.w	r3, r2, r3
 8004692:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	ee07 3a90 	vmov	s15, r3
 800469a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	ee07 3a90 	vmov	s15, r3
 80046a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ac:	4b7a      	ldr	r3, [pc, #488]	; (8004898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b4:	ee07 3a90 	vmov	s15, r3
 80046b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80046c0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80046c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80046dc:	e087      	b.n	80047ee <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	ee07 3a90 	vmov	s15, r3
 80046e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80048a4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80046ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046f0:	4b69      	ldr	r3, [pc, #420]	; (8004898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80046f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f8:	ee07 3a90 	vmov	s15, r3
 80046fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004700:	ed97 6a03 	vldr	s12, [r7, #12]
 8004704:	eddf 5a66 	vldr	s11, [pc, #408]	; 80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004708:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800470c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004710:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004714:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800471c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004720:	e065      	b.n	80047ee <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	ee07 3a90 	vmov	s15, r3
 8004728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80048a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004730:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004734:	4b58      	ldr	r3, [pc, #352]	; (8004898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800473c:	ee07 3a90 	vmov	s15, r3
 8004740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004744:	ed97 6a03 	vldr	s12, [r7, #12]
 8004748:	eddf 5a55 	vldr	s11, [pc, #340]	; 80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800474c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004750:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004754:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004758:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800475c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004760:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004764:	e043      	b.n	80047ee <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	ee07 3a90 	vmov	s15, r3
 800476c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004770:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80048ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004774:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004778:	4b47      	ldr	r3, [pc, #284]	; (8004898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800477a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004780:	ee07 3a90 	vmov	s15, r3
 8004784:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004788:	ed97 6a03 	vldr	s12, [r7, #12]
 800478c:	eddf 5a44 	vldr	s11, [pc, #272]	; 80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004790:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004794:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004798:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800479c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047a8:	e021      	b.n	80047ee <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	ee07 3a90 	vmov	s15, r3
 80047b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80048a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80047b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047bc:	4b36      	ldr	r3, [pc, #216]	; (8004898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80047be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c4:	ee07 3a90 	vmov	s15, r3
 80047c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80047d0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80047d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047ec:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80047ee:	4b2a      	ldr	r3, [pc, #168]	; (8004898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80047f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f2:	0a5b      	lsrs	r3, r3, #9
 80047f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047f8:	ee07 3a90 	vmov	s15, r3
 80047fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004800:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004804:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004808:	edd7 6a07 	vldr	s13, [r7, #28]
 800480c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004814:	ee17 2a90 	vmov	r2, s15
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800481c:	4b1e      	ldr	r3, [pc, #120]	; (8004898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800481e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004820:	0c1b      	lsrs	r3, r3, #16
 8004822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004826:	ee07 3a90 	vmov	s15, r3
 800482a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800482e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004832:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004836:	edd7 6a07 	vldr	s13, [r7, #28]
 800483a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800483e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004842:	ee17 2a90 	vmov	r2, s15
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800484a:	4b13      	ldr	r3, [pc, #76]	; (8004898 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800484c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484e:	0e1b      	lsrs	r3, r3, #24
 8004850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004854:	ee07 3a90 	vmov	s15, r3
 8004858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800485c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004860:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004864:	edd7 6a07 	vldr	s13, [r7, #28]
 8004868:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800486c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004870:	ee17 2a90 	vmov	r2, s15
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004878:	e008      	b.n	800488c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	609a      	str	r2, [r3, #8]
}
 800488c:	bf00      	nop
 800488e:	3724      	adds	r7, #36	; 0x24
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	58024400 	.word	0x58024400
 800489c:	03d09000 	.word	0x03d09000
 80048a0:	46000000 	.word	0x46000000
 80048a4:	4c742400 	.word	0x4c742400
 80048a8:	4a742400 	.word	0x4a742400
 80048ac:	4af42400 	.word	0x4af42400

080048b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b089      	sub	sp, #36	; 0x24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048b8:	4b9d      	ldr	r3, [pc, #628]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048bc:	f003 0303 	and.w	r3, r3, #3
 80048c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80048c2:	4b9b      	ldr	r3, [pc, #620]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c6:	0d1b      	lsrs	r3, r3, #20
 80048c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80048ce:	4b98      	ldr	r3, [pc, #608]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	0a1b      	lsrs	r3, r3, #8
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80048da:	4b95      	ldr	r3, [pc, #596]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048de:	08db      	lsrs	r3, r3, #3
 80048e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	fb02 f303 	mul.w	r3, r2, r3
 80048ea:	ee07 3a90 	vmov	s15, r3
 80048ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 810a 	beq.w	8004b12 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d05a      	beq.n	80049ba <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8004904:	2b01      	cmp	r3, #1
 8004906:	d302      	bcc.n	800490e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8004908:	2b02      	cmp	r3, #2
 800490a:	d078      	beq.n	80049fe <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800490c:	e099      	b.n	8004a42 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800490e:	4b88      	ldr	r3, [pc, #544]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0320 	and.w	r3, r3, #32
 8004916:	2b00      	cmp	r3, #0
 8004918:	d02d      	beq.n	8004976 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800491a:	4b85      	ldr	r3, [pc, #532]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	08db      	lsrs	r3, r3, #3
 8004920:	f003 0303 	and.w	r3, r3, #3
 8004924:	4a83      	ldr	r2, [pc, #524]	; (8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004926:	fa22 f303 	lsr.w	r3, r2, r3
 800492a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	ee07 3a90 	vmov	s15, r3
 8004932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	ee07 3a90 	vmov	s15, r3
 800493c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004940:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004944:	4b7a      	ldr	r3, [pc, #488]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800494c:	ee07 3a90 	vmov	s15, r3
 8004950:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004954:	ed97 6a03 	vldr	s12, [r7, #12]
 8004958:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800495c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004960:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004964:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004968:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800496c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004970:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004974:	e087      	b.n	8004a86 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	ee07 3a90 	vmov	s15, r3
 800497c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004980:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004b3c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004984:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004988:	4b69      	ldr	r3, [pc, #420]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004990:	ee07 3a90 	vmov	s15, r3
 8004994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004998:	ed97 6a03 	vldr	s12, [r7, #12]
 800499c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80049a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049b8:	e065      	b.n	8004a86 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	ee07 3a90 	vmov	s15, r3
 80049c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80049c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049cc:	4b58      	ldr	r3, [pc, #352]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d4:	ee07 3a90 	vmov	s15, r3
 80049d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80049e0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80049e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049fc:	e043      	b.n	8004a86 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	ee07 3a90 	vmov	s15, r3
 8004a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a08:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004b44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004a0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a10:	4b47      	ldr	r3, [pc, #284]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a18:	ee07 3a90 	vmov	s15, r3
 8004a1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a20:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a24:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004a28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a40:	e021      	b.n	8004a86 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	ee07 3a90 	vmov	s15, r3
 8004a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004b40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004a50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a54:	4b36      	ldr	r3, [pc, #216]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5c:	ee07 3a90 	vmov	s15, r3
 8004a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a64:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a68:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004a6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a84:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004a86:	4b2a      	ldr	r3, [pc, #168]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	0a5b      	lsrs	r3, r3, #9
 8004a8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a90:	ee07 3a90 	vmov	s15, r3
 8004a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004aa0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004aa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aac:	ee17 2a90 	vmov	r2, s15
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004ab4:	4b1e      	ldr	r3, [pc, #120]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	0c1b      	lsrs	r3, r3, #16
 8004aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004abe:	ee07 3a90 	vmov	s15, r3
 8004ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004aca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ace:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ada:	ee17 2a90 	vmov	r2, s15
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004ae2:	4b13      	ldr	r3, [pc, #76]	; (8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	0e1b      	lsrs	r3, r3, #24
 8004ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aec:	ee07 3a90 	vmov	s15, r3
 8004af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004af8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004afc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b08:	ee17 2a90 	vmov	r2, s15
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004b10:	e008      	b.n	8004b24 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	609a      	str	r2, [r3, #8]
}
 8004b24:	bf00      	nop
 8004b26:	3724      	adds	r7, #36	; 0x24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	58024400 	.word	0x58024400
 8004b34:	03d09000 	.word	0x03d09000
 8004b38:	46000000 	.word	0x46000000
 8004b3c:	4c742400 	.word	0x4c742400
 8004b40:	4a742400 	.word	0x4a742400
 8004b44:	4af42400 	.word	0x4af42400

08004b48 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b56:	4b53      	ldr	r3, [pc, #332]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	2b03      	cmp	r3, #3
 8004b60:	d101      	bne.n	8004b66 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e099      	b.n	8004c9a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004b66:	4b4f      	ldr	r3, [pc, #316]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a4e      	ldr	r2, [pc, #312]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004b6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b72:	f7fc fe15 	bl	80017a0 <HAL_GetTick>
 8004b76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b78:	e008      	b.n	8004b8c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004b7a:	f7fc fe11 	bl	80017a0 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d901      	bls.n	8004b8c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e086      	b.n	8004c9a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b8c:	4b45      	ldr	r3, [pc, #276]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1f0      	bne.n	8004b7a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b98:	4b42      	ldr	r3, [pc, #264]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	031b      	lsls	r3, r3, #12
 8004ba6:	493f      	ldr	r1, [pc, #252]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	628b      	str	r3, [r1, #40]	; 0x28
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	025b      	lsls	r3, r3, #9
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	041b      	lsls	r3, r3, #16
 8004bca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	061b      	lsls	r3, r3, #24
 8004bd8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004bdc:	4931      	ldr	r1, [pc, #196]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004be2:	4b30      	ldr	r3, [pc, #192]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	492d      	ldr	r1, [pc, #180]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004bf4:	4b2b      	ldr	r3, [pc, #172]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	f023 0220 	bic.w	r2, r3, #32
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	4928      	ldr	r1, [pc, #160]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c06:	4b27      	ldr	r3, [pc, #156]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	4a26      	ldr	r2, [pc, #152]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c0c:	f023 0310 	bic.w	r3, r3, #16
 8004c10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c12:	4b24      	ldr	r3, [pc, #144]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c16:	4b24      	ldr	r3, [pc, #144]	; (8004ca8 <RCCEx_PLL2_Config+0x160>)
 8004c18:	4013      	ands	r3, r2
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	69d2      	ldr	r2, [r2, #28]
 8004c1e:	00d2      	lsls	r2, r2, #3
 8004c20:	4920      	ldr	r1, [pc, #128]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c26:	4b1f      	ldr	r3, [pc, #124]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	4a1e      	ldr	r2, [pc, #120]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c2c:	f043 0310 	orr.w	r3, r3, #16
 8004c30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d106      	bne.n	8004c46 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c38:	4b1a      	ldr	r3, [pc, #104]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	4a19      	ldr	r2, [pc, #100]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c44:	e00f      	b.n	8004c66 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d106      	bne.n	8004c5a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004c4c:	4b15      	ldr	r3, [pc, #84]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	4a14      	ldr	r2, [pc, #80]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c58:	e005      	b.n	8004c66 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004c5a:	4b12      	ldr	r3, [pc, #72]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5e:	4a11      	ldr	r2, [pc, #68]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004c66:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a0e      	ldr	r2, [pc, #56]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c72:	f7fc fd95 	bl	80017a0 <HAL_GetTick>
 8004c76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c78:	e008      	b.n	8004c8c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004c7a:	f7fc fd91 	bl	80017a0 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e006      	b.n	8004c9a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c8c:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <RCCEx_PLL2_Config+0x15c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0f0      	beq.n	8004c7a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	58024400 	.word	0x58024400
 8004ca8:	ffff0007 	.word	0xffff0007

08004cac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cba:	4b53      	ldr	r3, [pc, #332]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d101      	bne.n	8004cca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e099      	b.n	8004dfe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004cca:	4b4f      	ldr	r3, [pc, #316]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a4e      	ldr	r2, [pc, #312]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cd6:	f7fc fd63 	bl	80017a0 <HAL_GetTick>
 8004cda:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004cdc:	e008      	b.n	8004cf0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004cde:	f7fc fd5f 	bl	80017a0 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e086      	b.n	8004dfe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004cf0:	4b45      	ldr	r3, [pc, #276]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1f0      	bne.n	8004cde <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004cfc:	4b42      	ldr	r3, [pc, #264]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d00:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	051b      	lsls	r3, r3, #20
 8004d0a:	493f      	ldr	r1, [pc, #252]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	628b      	str	r3, [r1, #40]	; 0x28
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	3b01      	subs	r3, #1
 8004d16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	025b      	lsls	r3, r3, #9
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	431a      	orrs	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	041b      	lsls	r3, r3, #16
 8004d2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	061b      	lsls	r3, r3, #24
 8004d3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d40:	4931      	ldr	r1, [pc, #196]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004d46:	4b30      	ldr	r3, [pc, #192]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	492d      	ldr	r1, [pc, #180]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004d58:	4b2b      	ldr	r3, [pc, #172]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	4928      	ldr	r1, [pc, #160]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004d6a:	4b27      	ldr	r3, [pc, #156]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6e:	4a26      	ldr	r2, [pc, #152]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004d76:	4b24      	ldr	r3, [pc, #144]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004d78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d7a:	4b24      	ldr	r3, [pc, #144]	; (8004e0c <RCCEx_PLL3_Config+0x160>)
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	69d2      	ldr	r2, [r2, #28]
 8004d82:	00d2      	lsls	r2, r2, #3
 8004d84:	4920      	ldr	r1, [pc, #128]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004d8a:	4b1f      	ldr	r3, [pc, #124]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8e:	4a1e      	ldr	r2, [pc, #120]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d106      	bne.n	8004daa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d9c:	4b1a      	ldr	r3, [pc, #104]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	4a19      	ldr	r2, [pc, #100]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004da2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004da6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004da8:	e00f      	b.n	8004dca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d106      	bne.n	8004dbe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004db0:	4b15      	ldr	r3, [pc, #84]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	4a14      	ldr	r2, [pc, #80]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004db6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004dba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004dbc:	e005      	b.n	8004dca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004dbe:	4b12      	ldr	r3, [pc, #72]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc2:	4a11      	ldr	r2, [pc, #68]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004dc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dc8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004dca:	4b0f      	ldr	r3, [pc, #60]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a0e      	ldr	r2, [pc, #56]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dd6:	f7fc fce3 	bl	80017a0 <HAL_GetTick>
 8004dda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ddc:	e008      	b.n	8004df0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004dde:	f7fc fcdf 	bl	80017a0 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e006      	b.n	8004dfe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004df0:	4b05      	ldr	r3, [pc, #20]	; (8004e08 <RCCEx_PLL3_Config+0x15c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0f0      	beq.n	8004dde <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	58024400 	.word	0x58024400
 8004e0c:	ffff0007 	.word	0xffff0007

08004e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e049      	b.n	8004eb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7fc f9ac 	bl	8001194 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4610      	mov	r0, r2
 8004e50:	f000 fa76 	bl	8005340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b082      	sub	sp, #8
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e049      	b.n	8004f64 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d106      	bne.n	8004eea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f841 	bl	8004f6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2202      	movs	r2, #2
 8004eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	3304      	adds	r3, #4
 8004efa:	4619      	mov	r1, r3
 8004efc:	4610      	mov	r0, r2
 8004efe:	f000 fa1f 	bl	8005340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d101      	bne.n	8004f9a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004f96:	2302      	movs	r3, #2
 8004f98:	e0fd      	b.n	8005196 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b14      	cmp	r3, #20
 8004fa6:	f200 80f0 	bhi.w	800518a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004faa:	a201      	add	r2, pc, #4	; (adr r2, 8004fb0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb0:	08005005 	.word	0x08005005
 8004fb4:	0800518b 	.word	0x0800518b
 8004fb8:	0800518b 	.word	0x0800518b
 8004fbc:	0800518b 	.word	0x0800518b
 8004fc0:	08005045 	.word	0x08005045
 8004fc4:	0800518b 	.word	0x0800518b
 8004fc8:	0800518b 	.word	0x0800518b
 8004fcc:	0800518b 	.word	0x0800518b
 8004fd0:	08005087 	.word	0x08005087
 8004fd4:	0800518b 	.word	0x0800518b
 8004fd8:	0800518b 	.word	0x0800518b
 8004fdc:	0800518b 	.word	0x0800518b
 8004fe0:	080050c7 	.word	0x080050c7
 8004fe4:	0800518b 	.word	0x0800518b
 8004fe8:	0800518b 	.word	0x0800518b
 8004fec:	0800518b 	.word	0x0800518b
 8004ff0:	08005109 	.word	0x08005109
 8004ff4:	0800518b 	.word	0x0800518b
 8004ff8:	0800518b 	.word	0x0800518b
 8004ffc:	0800518b 	.word	0x0800518b
 8005000:	08005149 	.word	0x08005149
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68b9      	ldr	r1, [r7, #8]
 800500a:	4618      	mov	r0, r3
 800500c:	f000 fa32 	bl	8005474 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699a      	ldr	r2, [r3, #24]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0208 	orr.w	r2, r2, #8
 800501e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699a      	ldr	r2, [r3, #24]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0204 	bic.w	r2, r2, #4
 800502e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6999      	ldr	r1, [r3, #24]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	691a      	ldr	r2, [r3, #16]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	619a      	str	r2, [r3, #24]
      break;
 8005042:	e0a3      	b.n	800518c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68b9      	ldr	r1, [r7, #8]
 800504a:	4618      	mov	r0, r3
 800504c:	f000 faa2 	bl	8005594 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800505e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699a      	ldr	r2, [r3, #24]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6999      	ldr	r1, [r3, #24]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	021a      	lsls	r2, r3, #8
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	619a      	str	r2, [r3, #24]
      break;
 8005084:	e082      	b.n	800518c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68b9      	ldr	r1, [r7, #8]
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fb0b 	bl	80056a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69da      	ldr	r2, [r3, #28]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0208 	orr.w	r2, r2, #8
 80050a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	69da      	ldr	r2, [r3, #28]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 0204 	bic.w	r2, r2, #4
 80050b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	69d9      	ldr	r1, [r3, #28]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	691a      	ldr	r2, [r3, #16]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	61da      	str	r2, [r3, #28]
      break;
 80050c4:	e062      	b.n	800518c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68b9      	ldr	r1, [r7, #8]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 fb71 	bl	80057b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69da      	ldr	r2, [r3, #28]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69da      	ldr	r2, [r3, #28]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69d9      	ldr	r1, [r3, #28]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	021a      	lsls	r2, r3, #8
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	61da      	str	r2, [r3, #28]
      break;
 8005106:	e041      	b.n	800518c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68b9      	ldr	r1, [r7, #8]
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fbb8 	bl	8005884 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0208 	orr.w	r2, r2, #8
 8005122:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0204 	bic.w	r2, r2, #4
 8005132:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	691a      	ldr	r2, [r3, #16]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005146:	e021      	b.n	800518c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68b9      	ldr	r1, [r7, #8]
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fbfa 	bl	8005948 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005162:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005172:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	021a      	lsls	r2, r3, #8
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005188:	e000      	b.n	800518c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800518a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop

080051a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_TIM_ConfigClockSource+0x18>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e0b7      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x188>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	4b57      	ldr	r3, [pc, #348]	; (8005330 <HAL_TIM_ConfigClockSource+0x190>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b70      	cmp	r3, #112	; 0x70
 80051ee:	d02e      	beq.n	800524e <HAL_TIM_ConfigClockSource+0xae>
 80051f0:	2b70      	cmp	r3, #112	; 0x70
 80051f2:	d812      	bhi.n	800521a <HAL_TIM_ConfigClockSource+0x7a>
 80051f4:	2b30      	cmp	r3, #48	; 0x30
 80051f6:	f000 8084 	beq.w	8005302 <HAL_TIM_ConfigClockSource+0x162>
 80051fa:	2b30      	cmp	r3, #48	; 0x30
 80051fc:	d806      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x6c>
 80051fe:	2b10      	cmp	r3, #16
 8005200:	d07f      	beq.n	8005302 <HAL_TIM_ConfigClockSource+0x162>
 8005202:	2b20      	cmp	r3, #32
 8005204:	d07d      	beq.n	8005302 <HAL_TIM_ConfigClockSource+0x162>
 8005206:	2b00      	cmp	r3, #0
 8005208:	d07b      	beq.n	8005302 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800520a:	e084      	b.n	8005316 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800520c:	2b50      	cmp	r3, #80	; 0x50
 800520e:	d048      	beq.n	80052a2 <HAL_TIM_ConfigClockSource+0x102>
 8005210:	2b60      	cmp	r3, #96	; 0x60
 8005212:	d056      	beq.n	80052c2 <HAL_TIM_ConfigClockSource+0x122>
 8005214:	2b40      	cmp	r3, #64	; 0x40
 8005216:	d064      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x142>
      break;
 8005218:	e07d      	b.n	8005316 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800521a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800521e:	d070      	beq.n	8005302 <HAL_TIM_ConfigClockSource+0x162>
 8005220:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005224:	d809      	bhi.n	800523a <HAL_TIM_ConfigClockSource+0x9a>
 8005226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800522a:	d027      	beq.n	800527c <HAL_TIM_ConfigClockSource+0xdc>
 800522c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005230:	d067      	beq.n	8005302 <HAL_TIM_ConfigClockSource+0x162>
 8005232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005236:	d06d      	beq.n	8005314 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005238:	e06d      	b.n	8005316 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800523a:	4a3e      	ldr	r2, [pc, #248]	; (8005334 <HAL_TIM_ConfigClockSource+0x194>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d060      	beq.n	8005302 <HAL_TIM_ConfigClockSource+0x162>
 8005240:	4a3d      	ldr	r2, [pc, #244]	; (8005338 <HAL_TIM_ConfigClockSource+0x198>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d05d      	beq.n	8005302 <HAL_TIM_ConfigClockSource+0x162>
 8005246:	4a3d      	ldr	r2, [pc, #244]	; (800533c <HAL_TIM_ConfigClockSource+0x19c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d05a      	beq.n	8005302 <HAL_TIM_ConfigClockSource+0x162>
      break;
 800524c:	e063      	b.n	8005316 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6818      	ldr	r0, [r3, #0]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	6899      	ldr	r1, [r3, #8]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f000 fc55 	bl	8005b0c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005270:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	609a      	str	r2, [r3, #8]
      break;
 800527a:	e04c      	b.n	8005316 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6818      	ldr	r0, [r3, #0]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	6899      	ldr	r1, [r3, #8]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f000 fc3e 	bl	8005b0c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800529e:	609a      	str	r2, [r3, #8]
      break;
 80052a0:	e039      	b.n	8005316 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6818      	ldr	r0, [r3, #0]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	6859      	ldr	r1, [r3, #4]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	461a      	mov	r2, r3
 80052b0:	f000 fbae 	bl	8005a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2150      	movs	r1, #80	; 0x50
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fc08 	bl	8005ad0 <TIM_ITRx_SetConfig>
      break;
 80052c0:	e029      	b.n	8005316 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6818      	ldr	r0, [r3, #0]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	6859      	ldr	r1, [r3, #4]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	461a      	mov	r2, r3
 80052d0:	f000 fbcd 	bl	8005a6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2160      	movs	r1, #96	; 0x60
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fbf8 	bl	8005ad0 <TIM_ITRx_SetConfig>
      break;
 80052e0:	e019      	b.n	8005316 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	6859      	ldr	r1, [r3, #4]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	461a      	mov	r2, r3
 80052f0:	f000 fb8e 	bl	8005a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2140      	movs	r1, #64	; 0x40
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 fbe8 	bl	8005ad0 <TIM_ITRx_SetConfig>
      break;
 8005300:	e009      	b.n	8005316 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4619      	mov	r1, r3
 800530c:	4610      	mov	r0, r2
 800530e:	f000 fbdf 	bl	8005ad0 <TIM_ITRx_SetConfig>
      break;
 8005312:	e000      	b.n	8005316 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8005314:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	ffceff88 	.word	0xffceff88
 8005334:	00100030 	.word	0x00100030
 8005338:	00100040 	.word	0x00100040
 800533c:	00100020 	.word	0x00100020

08005340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a40      	ldr	r2, [pc, #256]	; (8005454 <TIM_Base_SetConfig+0x114>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d013      	beq.n	8005380 <TIM_Base_SetConfig+0x40>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800535e:	d00f      	beq.n	8005380 <TIM_Base_SetConfig+0x40>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a3d      	ldr	r2, [pc, #244]	; (8005458 <TIM_Base_SetConfig+0x118>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d00b      	beq.n	8005380 <TIM_Base_SetConfig+0x40>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a3c      	ldr	r2, [pc, #240]	; (800545c <TIM_Base_SetConfig+0x11c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d007      	beq.n	8005380 <TIM_Base_SetConfig+0x40>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a3b      	ldr	r2, [pc, #236]	; (8005460 <TIM_Base_SetConfig+0x120>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d003      	beq.n	8005380 <TIM_Base_SetConfig+0x40>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a3a      	ldr	r2, [pc, #232]	; (8005464 <TIM_Base_SetConfig+0x124>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d108      	bne.n	8005392 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a2f      	ldr	r2, [pc, #188]	; (8005454 <TIM_Base_SetConfig+0x114>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d01f      	beq.n	80053da <TIM_Base_SetConfig+0x9a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a0:	d01b      	beq.n	80053da <TIM_Base_SetConfig+0x9a>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a2c      	ldr	r2, [pc, #176]	; (8005458 <TIM_Base_SetConfig+0x118>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d017      	beq.n	80053da <TIM_Base_SetConfig+0x9a>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a2b      	ldr	r2, [pc, #172]	; (800545c <TIM_Base_SetConfig+0x11c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d013      	beq.n	80053da <TIM_Base_SetConfig+0x9a>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a2a      	ldr	r2, [pc, #168]	; (8005460 <TIM_Base_SetConfig+0x120>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00f      	beq.n	80053da <TIM_Base_SetConfig+0x9a>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a29      	ldr	r2, [pc, #164]	; (8005464 <TIM_Base_SetConfig+0x124>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00b      	beq.n	80053da <TIM_Base_SetConfig+0x9a>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a28      	ldr	r2, [pc, #160]	; (8005468 <TIM_Base_SetConfig+0x128>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d007      	beq.n	80053da <TIM_Base_SetConfig+0x9a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a27      	ldr	r2, [pc, #156]	; (800546c <TIM_Base_SetConfig+0x12c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d003      	beq.n	80053da <TIM_Base_SetConfig+0x9a>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a26      	ldr	r2, [pc, #152]	; (8005470 <TIM_Base_SetConfig+0x130>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d108      	bne.n	80053ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a10      	ldr	r2, [pc, #64]	; (8005454 <TIM_Base_SetConfig+0x114>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d00f      	beq.n	8005438 <TIM_Base_SetConfig+0xf8>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a12      	ldr	r2, [pc, #72]	; (8005464 <TIM_Base_SetConfig+0x124>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d00b      	beq.n	8005438 <TIM_Base_SetConfig+0xf8>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a11      	ldr	r2, [pc, #68]	; (8005468 <TIM_Base_SetConfig+0x128>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d007      	beq.n	8005438 <TIM_Base_SetConfig+0xf8>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a10      	ldr	r2, [pc, #64]	; (800546c <TIM_Base_SetConfig+0x12c>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d003      	beq.n	8005438 <TIM_Base_SetConfig+0xf8>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a0f      	ldr	r2, [pc, #60]	; (8005470 <TIM_Base_SetConfig+0x130>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d103      	bne.n	8005440 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	691a      	ldr	r2, [r3, #16]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	615a      	str	r2, [r3, #20]
}
 8005446:	bf00      	nop
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40010000 	.word	0x40010000
 8005458:	40000400 	.word	0x40000400
 800545c:	40000800 	.word	0x40000800
 8005460:	40000c00 	.word	0x40000c00
 8005464:	40010400 	.word	0x40010400
 8005468:	40014000 	.word	0x40014000
 800546c:	40014400 	.word	0x40014400
 8005470:	40014800 	.word	0x40014800

08005474 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	f023 0201 	bic.w	r2, r3, #1
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4b37      	ldr	r3, [pc, #220]	; (800557c <TIM_OC1_SetConfig+0x108>)
 80054a0:	4013      	ands	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 0303 	bic.w	r3, r3, #3
 80054aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f023 0302 	bic.w	r3, r3, #2
 80054bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a2d      	ldr	r2, [pc, #180]	; (8005580 <TIM_OC1_SetConfig+0x10c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00f      	beq.n	80054f0 <TIM_OC1_SetConfig+0x7c>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a2c      	ldr	r2, [pc, #176]	; (8005584 <TIM_OC1_SetConfig+0x110>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d00b      	beq.n	80054f0 <TIM_OC1_SetConfig+0x7c>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a2b      	ldr	r2, [pc, #172]	; (8005588 <TIM_OC1_SetConfig+0x114>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d007      	beq.n	80054f0 <TIM_OC1_SetConfig+0x7c>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a2a      	ldr	r2, [pc, #168]	; (800558c <TIM_OC1_SetConfig+0x118>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d003      	beq.n	80054f0 <TIM_OC1_SetConfig+0x7c>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a29      	ldr	r2, [pc, #164]	; (8005590 <TIM_OC1_SetConfig+0x11c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d10c      	bne.n	800550a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f023 0308 	bic.w	r3, r3, #8
 80054f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	4313      	orrs	r3, r2
 8005500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f023 0304 	bic.w	r3, r3, #4
 8005508:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a1c      	ldr	r2, [pc, #112]	; (8005580 <TIM_OC1_SetConfig+0x10c>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00f      	beq.n	8005532 <TIM_OC1_SetConfig+0xbe>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a1b      	ldr	r2, [pc, #108]	; (8005584 <TIM_OC1_SetConfig+0x110>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d00b      	beq.n	8005532 <TIM_OC1_SetConfig+0xbe>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a1a      	ldr	r2, [pc, #104]	; (8005588 <TIM_OC1_SetConfig+0x114>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d007      	beq.n	8005532 <TIM_OC1_SetConfig+0xbe>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a19      	ldr	r2, [pc, #100]	; (800558c <TIM_OC1_SetConfig+0x118>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d003      	beq.n	8005532 <TIM_OC1_SetConfig+0xbe>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a18      	ldr	r2, [pc, #96]	; (8005590 <TIM_OC1_SetConfig+0x11c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d111      	bne.n	8005556 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	4313      	orrs	r3, r2
 8005554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	621a      	str	r2, [r3, #32]
}
 8005570:	bf00      	nop
 8005572:	371c      	adds	r7, #28
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	fffeff8f 	.word	0xfffeff8f
 8005580:	40010000 	.word	0x40010000
 8005584:	40010400 	.word	0x40010400
 8005588:	40014000 	.word	0x40014000
 800558c:	40014400 	.word	0x40014400
 8005590:	40014800 	.word	0x40014800

08005594 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005594:	b480      	push	{r7}
 8005596:	b087      	sub	sp, #28
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	f023 0210 	bic.w	r2, r3, #16
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4b34      	ldr	r3, [pc, #208]	; (8005690 <TIM_OC2_SetConfig+0xfc>)
 80055c0:	4013      	ands	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	021b      	lsls	r3, r3, #8
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f023 0320 	bic.w	r3, r3, #32
 80055de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	011b      	lsls	r3, r3, #4
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a29      	ldr	r2, [pc, #164]	; (8005694 <TIM_OC2_SetConfig+0x100>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d003      	beq.n	80055fc <TIM_OC2_SetConfig+0x68>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a28      	ldr	r2, [pc, #160]	; (8005698 <TIM_OC2_SetConfig+0x104>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d10d      	bne.n	8005618 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	4313      	orrs	r3, r2
 800560e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005616:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a1e      	ldr	r2, [pc, #120]	; (8005694 <TIM_OC2_SetConfig+0x100>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d00f      	beq.n	8005640 <TIM_OC2_SetConfig+0xac>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a1d      	ldr	r2, [pc, #116]	; (8005698 <TIM_OC2_SetConfig+0x104>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d00b      	beq.n	8005640 <TIM_OC2_SetConfig+0xac>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a1c      	ldr	r2, [pc, #112]	; (800569c <TIM_OC2_SetConfig+0x108>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d007      	beq.n	8005640 <TIM_OC2_SetConfig+0xac>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a1b      	ldr	r2, [pc, #108]	; (80056a0 <TIM_OC2_SetConfig+0x10c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d003      	beq.n	8005640 <TIM_OC2_SetConfig+0xac>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a1a      	ldr	r2, [pc, #104]	; (80056a4 <TIM_OC2_SetConfig+0x110>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d113      	bne.n	8005668 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005646:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800564e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	4313      	orrs	r3, r2
 800565a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	4313      	orrs	r3, r2
 8005666:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	621a      	str	r2, [r3, #32]
}
 8005682:	bf00      	nop
 8005684:	371c      	adds	r7, #28
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	feff8fff 	.word	0xfeff8fff
 8005694:	40010000 	.word	0x40010000
 8005698:	40010400 	.word	0x40010400
 800569c:	40014000 	.word	0x40014000
 80056a0:	40014400 	.word	0x40014400
 80056a4:	40014800 	.word	0x40014800

080056a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0303 	bic.w	r3, r3, #3
 80056de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	021b      	lsls	r3, r3, #8
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a27      	ldr	r2, [pc, #156]	; (80057a0 <TIM_OC3_SetConfig+0xf8>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d003      	beq.n	800570e <TIM_OC3_SetConfig+0x66>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a26      	ldr	r2, [pc, #152]	; (80057a4 <TIM_OC3_SetConfig+0xfc>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d10d      	bne.n	800572a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005714:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	021b      	lsls	r3, r3, #8
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	4313      	orrs	r3, r2
 8005720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a1c      	ldr	r2, [pc, #112]	; (80057a0 <TIM_OC3_SetConfig+0xf8>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d00f      	beq.n	8005752 <TIM_OC3_SetConfig+0xaa>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a1b      	ldr	r2, [pc, #108]	; (80057a4 <TIM_OC3_SetConfig+0xfc>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d00b      	beq.n	8005752 <TIM_OC3_SetConfig+0xaa>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a1a      	ldr	r2, [pc, #104]	; (80057a8 <TIM_OC3_SetConfig+0x100>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d007      	beq.n	8005752 <TIM_OC3_SetConfig+0xaa>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a19      	ldr	r2, [pc, #100]	; (80057ac <TIM_OC3_SetConfig+0x104>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d003      	beq.n	8005752 <TIM_OC3_SetConfig+0xaa>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a18      	ldr	r2, [pc, #96]	; (80057b0 <TIM_OC3_SetConfig+0x108>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d113      	bne.n	800577a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	011b      	lsls	r3, r3, #4
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	4313      	orrs	r3, r2
 800576c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	011b      	lsls	r3, r3, #4
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4313      	orrs	r3, r2
 8005778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	621a      	str	r2, [r3, #32]
}
 8005794:	bf00      	nop
 8005796:	371c      	adds	r7, #28
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	40010000 	.word	0x40010000
 80057a4:	40010400 	.word	0x40010400
 80057a8:	40014000 	.word	0x40014000
 80057ac:	40014400 	.word	0x40014400
 80057b0:	40014800 	.word	0x40014800

080057b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	021b      	lsls	r3, r3, #8
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	031b      	lsls	r3, r3, #12
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	4313      	orrs	r3, r2
 800580a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a18      	ldr	r2, [pc, #96]	; (8005870 <TIM_OC4_SetConfig+0xbc>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d00f      	beq.n	8005834 <TIM_OC4_SetConfig+0x80>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a17      	ldr	r2, [pc, #92]	; (8005874 <TIM_OC4_SetConfig+0xc0>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00b      	beq.n	8005834 <TIM_OC4_SetConfig+0x80>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a16      	ldr	r2, [pc, #88]	; (8005878 <TIM_OC4_SetConfig+0xc4>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d007      	beq.n	8005834 <TIM_OC4_SetConfig+0x80>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a15      	ldr	r2, [pc, #84]	; (800587c <TIM_OC4_SetConfig+0xc8>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d003      	beq.n	8005834 <TIM_OC4_SetConfig+0x80>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a14      	ldr	r2, [pc, #80]	; (8005880 <TIM_OC4_SetConfig+0xcc>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d109      	bne.n	8005848 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800583a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	019b      	lsls	r3, r3, #6
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	4313      	orrs	r3, r2
 8005846:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	621a      	str	r2, [r3, #32]
}
 8005862:	bf00      	nop
 8005864:	371c      	adds	r7, #28
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	40010000 	.word	0x40010000
 8005874:	40010400 	.word	0x40010400
 8005878:	40014000 	.word	0x40014000
 800587c:	40014400 	.word	0x40014400
 8005880:	40014800 	.word	0x40014800

08005884 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80058c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	041b      	lsls	r3, r3, #16
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a17      	ldr	r2, [pc, #92]	; (8005934 <TIM_OC5_SetConfig+0xb0>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00f      	beq.n	80058fa <TIM_OC5_SetConfig+0x76>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a16      	ldr	r2, [pc, #88]	; (8005938 <TIM_OC5_SetConfig+0xb4>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00b      	beq.n	80058fa <TIM_OC5_SetConfig+0x76>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a15      	ldr	r2, [pc, #84]	; (800593c <TIM_OC5_SetConfig+0xb8>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d007      	beq.n	80058fa <TIM_OC5_SetConfig+0x76>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a14      	ldr	r2, [pc, #80]	; (8005940 <TIM_OC5_SetConfig+0xbc>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d003      	beq.n	80058fa <TIM_OC5_SetConfig+0x76>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a13      	ldr	r2, [pc, #76]	; (8005944 <TIM_OC5_SetConfig+0xc0>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d109      	bne.n	800590e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005900:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	021b      	lsls	r3, r3, #8
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	4313      	orrs	r3, r2
 800590c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	621a      	str	r2, [r3, #32]
}
 8005928:	bf00      	nop
 800592a:	371c      	adds	r7, #28
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	40010000 	.word	0x40010000
 8005938:	40010400 	.word	0x40010400
 800593c:	40014000 	.word	0x40014000
 8005940:	40014400 	.word	0x40014400
 8005944:	40014800 	.word	0x40014800

08005948 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	021b      	lsls	r3, r3, #8
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	4313      	orrs	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800598a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	051b      	lsls	r3, r3, #20
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	4313      	orrs	r3, r2
 8005996:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a18      	ldr	r2, [pc, #96]	; (80059fc <TIM_OC6_SetConfig+0xb4>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00f      	beq.n	80059c0 <TIM_OC6_SetConfig+0x78>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a17      	ldr	r2, [pc, #92]	; (8005a00 <TIM_OC6_SetConfig+0xb8>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d00b      	beq.n	80059c0 <TIM_OC6_SetConfig+0x78>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a16      	ldr	r2, [pc, #88]	; (8005a04 <TIM_OC6_SetConfig+0xbc>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d007      	beq.n	80059c0 <TIM_OC6_SetConfig+0x78>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a15      	ldr	r2, [pc, #84]	; (8005a08 <TIM_OC6_SetConfig+0xc0>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d003      	beq.n	80059c0 <TIM_OC6_SetConfig+0x78>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a14      	ldr	r2, [pc, #80]	; (8005a0c <TIM_OC6_SetConfig+0xc4>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d109      	bne.n	80059d4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80059c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	029b      	lsls	r3, r3, #10
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	621a      	str	r2, [r3, #32]
}
 80059ee:	bf00      	nop
 80059f0:	371c      	adds	r7, #28
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	40010000 	.word	0x40010000
 8005a00:	40010400 	.word	0x40010400
 8005a04:	40014000 	.word	0x40014000
 8005a08:	40014400 	.word	0x40014400
 8005a0c:	40014800 	.word	0x40014800

08005a10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	f023 0201 	bic.w	r2, r3, #1
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f023 030a 	bic.w	r3, r3, #10
 8005a4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	621a      	str	r2, [r3, #32]
}
 8005a62:	bf00      	nop
 8005a64:	371c      	adds	r7, #28
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b087      	sub	sp, #28
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	f023 0210 	bic.w	r2, r3, #16
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	031b      	lsls	r3, r3, #12
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005aaa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	011b      	lsls	r3, r3, #4
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	621a      	str	r2, [r3, #32]
}
 8005ac2:	bf00      	nop
 8005ac4:	371c      	adds	r7, #28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
	...

08005ad0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4b09      	ldr	r3, [pc, #36]	; (8005b08 <TIM_ITRx_SetConfig+0x38>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	f043 0307 	orr.w	r3, r3, #7
 8005af2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	609a      	str	r2, [r3, #8]
}
 8005afa:	bf00      	nop
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	ffcfff8f 	.word	0xffcfff8f

08005b0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b087      	sub	sp, #28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	021a      	lsls	r2, r3, #8
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	609a      	str	r2, [r3, #8]
}
 8005b40:	bf00      	nop
 8005b42:	371c      	adds	r7, #28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d101      	bne.n	8005b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b60:	2302      	movs	r3, #2
 8005b62:	e068      	b.n	8005c36 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a2e      	ldr	r2, [pc, #184]	; (8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d004      	beq.n	8005b98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a2d      	ldr	r2, [pc, #180]	; (8005c48 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d108      	bne.n	8005baa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a1e      	ldr	r2, [pc, #120]	; (8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d01d      	beq.n	8005c0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd6:	d018      	beq.n	8005c0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a1b      	ldr	r2, [pc, #108]	; (8005c4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d013      	beq.n	8005c0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a1a      	ldr	r2, [pc, #104]	; (8005c50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d00e      	beq.n	8005c0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a18      	ldr	r2, [pc, #96]	; (8005c54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d009      	beq.n	8005c0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a13      	ldr	r2, [pc, #76]	; (8005c48 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d004      	beq.n	8005c0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a14      	ldr	r2, [pc, #80]	; (8005c58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d10c      	bne.n	8005c24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	40010000 	.word	0x40010000
 8005c48:	40010400 	.word	0x40010400
 8005c4c:	40000400 	.word	0x40000400
 8005c50:	40000800 	.word	0x40000800
 8005c54:	40000c00 	.word	0x40000c00
 8005c58:	40001800 	.word	0x40001800

08005c5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d101      	bne.n	8005c78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e065      	b.n	8005d44 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	041b      	lsls	r3, r3, #16
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a16      	ldr	r2, [pc, #88]	; (8005d50 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d004      	beq.n	8005d06 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a14      	ldr	r2, [pc, #80]	; (8005d54 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d115      	bne.n	8005d32 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	051b      	lsls	r3, r3, #20
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	69db      	ldr	r3, [r3, #28]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	40010000 	.word	0x40010000
 8005d54:	40010400 	.word	0x40010400

08005d58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e042      	b.n	8005df0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d106      	bne.n	8005d82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7fb fb07 	bl	8001390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2224      	movs	r2, #36	; 0x24
 8005d86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0201 	bic.w	r2, r2, #1
 8005d98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f82c 	bl	8005df8 <UART_SetConfig>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d101      	bne.n	8005daa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e022      	b.n	8005df0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fdd0 	bl	8006958 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689a      	ldr	r2, [r3, #8]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 0201 	orr.w	r2, r2, #1
 8005de6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fe57 	bl	8006a9c <UART_CheckIdleState>
 8005dee:	4603      	mov	r3, r0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005df8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005dfc:	b08e      	sub	sp, #56	; 0x38
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	431a      	orrs	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e26:	4313      	orrs	r3, r2
 8005e28:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	4bc1      	ldr	r3, [pc, #772]	; (8006138 <UART_SetConfig+0x340>)
 8005e32:	4013      	ands	r3, r2
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	6812      	ldr	r2, [r2, #0]
 8005e38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005e3a:	430b      	orrs	r3, r1
 8005e3c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68da      	ldr	r2, [r3, #12]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4ab7      	ldr	r2, [pc, #732]	; (800613c <UART_SetConfig+0x344>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d004      	beq.n	8005e6e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	4bb2      	ldr	r3, [pc, #712]	; (8006140 <UART_SetConfig+0x348>)
 8005e76:	4013      	ands	r3, r2
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6812      	ldr	r2, [r2, #0]
 8005e7c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005e7e:	430b      	orrs	r3, r1
 8005e80:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e88:	f023 010f 	bic.w	r1, r3, #15
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4aa9      	ldr	r2, [pc, #676]	; (8006144 <UART_SetConfig+0x34c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d177      	bne.n	8005f92 <UART_SetConfig+0x19a>
 8005ea2:	4ba9      	ldr	r3, [pc, #676]	; (8006148 <UART_SetConfig+0x350>)
 8005ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eaa:	2b28      	cmp	r3, #40	; 0x28
 8005eac:	d86c      	bhi.n	8005f88 <UART_SetConfig+0x190>
 8005eae:	a201      	add	r2, pc, #4	; (adr r2, 8005eb4 <UART_SetConfig+0xbc>)
 8005eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb4:	08005f59 	.word	0x08005f59
 8005eb8:	08005f89 	.word	0x08005f89
 8005ebc:	08005f89 	.word	0x08005f89
 8005ec0:	08005f89 	.word	0x08005f89
 8005ec4:	08005f89 	.word	0x08005f89
 8005ec8:	08005f89 	.word	0x08005f89
 8005ecc:	08005f89 	.word	0x08005f89
 8005ed0:	08005f89 	.word	0x08005f89
 8005ed4:	08005f61 	.word	0x08005f61
 8005ed8:	08005f89 	.word	0x08005f89
 8005edc:	08005f89 	.word	0x08005f89
 8005ee0:	08005f89 	.word	0x08005f89
 8005ee4:	08005f89 	.word	0x08005f89
 8005ee8:	08005f89 	.word	0x08005f89
 8005eec:	08005f89 	.word	0x08005f89
 8005ef0:	08005f89 	.word	0x08005f89
 8005ef4:	08005f69 	.word	0x08005f69
 8005ef8:	08005f89 	.word	0x08005f89
 8005efc:	08005f89 	.word	0x08005f89
 8005f00:	08005f89 	.word	0x08005f89
 8005f04:	08005f89 	.word	0x08005f89
 8005f08:	08005f89 	.word	0x08005f89
 8005f0c:	08005f89 	.word	0x08005f89
 8005f10:	08005f89 	.word	0x08005f89
 8005f14:	08005f71 	.word	0x08005f71
 8005f18:	08005f89 	.word	0x08005f89
 8005f1c:	08005f89 	.word	0x08005f89
 8005f20:	08005f89 	.word	0x08005f89
 8005f24:	08005f89 	.word	0x08005f89
 8005f28:	08005f89 	.word	0x08005f89
 8005f2c:	08005f89 	.word	0x08005f89
 8005f30:	08005f89 	.word	0x08005f89
 8005f34:	08005f79 	.word	0x08005f79
 8005f38:	08005f89 	.word	0x08005f89
 8005f3c:	08005f89 	.word	0x08005f89
 8005f40:	08005f89 	.word	0x08005f89
 8005f44:	08005f89 	.word	0x08005f89
 8005f48:	08005f89 	.word	0x08005f89
 8005f4c:	08005f89 	.word	0x08005f89
 8005f50:	08005f89 	.word	0x08005f89
 8005f54:	08005f81 	.word	0x08005f81
 8005f58:	2301      	movs	r3, #1
 8005f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f5e:	e233      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8005f60:	2304      	movs	r3, #4
 8005f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f66:	e22f      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8005f68:	2308      	movs	r3, #8
 8005f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f6e:	e22b      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8005f70:	2310      	movs	r3, #16
 8005f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f76:	e227      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8005f78:	2320      	movs	r3, #32
 8005f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f7e:	e223      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8005f80:	2340      	movs	r3, #64	; 0x40
 8005f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f86:	e21f      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8005f88:	2380      	movs	r3, #128	; 0x80
 8005f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f8e:	bf00      	nop
 8005f90:	e21a      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a6d      	ldr	r2, [pc, #436]	; (800614c <UART_SetConfig+0x354>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d132      	bne.n	8006002 <UART_SetConfig+0x20a>
 8005f9c:	4b6a      	ldr	r3, [pc, #424]	; (8006148 <UART_SetConfig+0x350>)
 8005f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa0:	f003 0307 	and.w	r3, r3, #7
 8005fa4:	2b05      	cmp	r3, #5
 8005fa6:	d827      	bhi.n	8005ff8 <UART_SetConfig+0x200>
 8005fa8:	a201      	add	r2, pc, #4	; (adr r2, 8005fb0 <UART_SetConfig+0x1b8>)
 8005faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fae:	bf00      	nop
 8005fb0:	08005fc9 	.word	0x08005fc9
 8005fb4:	08005fd1 	.word	0x08005fd1
 8005fb8:	08005fd9 	.word	0x08005fd9
 8005fbc:	08005fe1 	.word	0x08005fe1
 8005fc0:	08005fe9 	.word	0x08005fe9
 8005fc4:	08005ff1 	.word	0x08005ff1
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fce:	e1fb      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8005fd0:	2304      	movs	r3, #4
 8005fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fd6:	e1f7      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8005fd8:	2308      	movs	r3, #8
 8005fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fde:	e1f3      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8005fe0:	2310      	movs	r3, #16
 8005fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fe6:	e1ef      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8005fe8:	2320      	movs	r3, #32
 8005fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fee:	e1eb      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8005ff0:	2340      	movs	r3, #64	; 0x40
 8005ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ff6:	e1e7      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8005ff8:	2380      	movs	r3, #128	; 0x80
 8005ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ffe:	bf00      	nop
 8006000:	e1e2      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a52      	ldr	r2, [pc, #328]	; (8006150 <UART_SetConfig+0x358>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d132      	bne.n	8006072 <UART_SetConfig+0x27a>
 800600c:	4b4e      	ldr	r3, [pc, #312]	; (8006148 <UART_SetConfig+0x350>)
 800600e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	2b05      	cmp	r3, #5
 8006016:	d827      	bhi.n	8006068 <UART_SetConfig+0x270>
 8006018:	a201      	add	r2, pc, #4	; (adr r2, 8006020 <UART_SetConfig+0x228>)
 800601a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601e:	bf00      	nop
 8006020:	08006039 	.word	0x08006039
 8006024:	08006041 	.word	0x08006041
 8006028:	08006049 	.word	0x08006049
 800602c:	08006051 	.word	0x08006051
 8006030:	08006059 	.word	0x08006059
 8006034:	08006061 	.word	0x08006061
 8006038:	2300      	movs	r3, #0
 800603a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800603e:	e1c3      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006040:	2304      	movs	r3, #4
 8006042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006046:	e1bf      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006048:	2308      	movs	r3, #8
 800604a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800604e:	e1bb      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006050:	2310      	movs	r3, #16
 8006052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006056:	e1b7      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006058:	2320      	movs	r3, #32
 800605a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800605e:	e1b3      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006060:	2340      	movs	r3, #64	; 0x40
 8006062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006066:	e1af      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006068:	2380      	movs	r3, #128	; 0x80
 800606a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800606e:	bf00      	nop
 8006070:	e1aa      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a37      	ldr	r2, [pc, #220]	; (8006154 <UART_SetConfig+0x35c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d132      	bne.n	80060e2 <UART_SetConfig+0x2ea>
 800607c:	4b32      	ldr	r3, [pc, #200]	; (8006148 <UART_SetConfig+0x350>)
 800607e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006080:	f003 0307 	and.w	r3, r3, #7
 8006084:	2b05      	cmp	r3, #5
 8006086:	d827      	bhi.n	80060d8 <UART_SetConfig+0x2e0>
 8006088:	a201      	add	r2, pc, #4	; (adr r2, 8006090 <UART_SetConfig+0x298>)
 800608a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608e:	bf00      	nop
 8006090:	080060a9 	.word	0x080060a9
 8006094:	080060b1 	.word	0x080060b1
 8006098:	080060b9 	.word	0x080060b9
 800609c:	080060c1 	.word	0x080060c1
 80060a0:	080060c9 	.word	0x080060c9
 80060a4:	080060d1 	.word	0x080060d1
 80060a8:	2300      	movs	r3, #0
 80060aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060ae:	e18b      	b.n	80063c8 <UART_SetConfig+0x5d0>
 80060b0:	2304      	movs	r3, #4
 80060b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060b6:	e187      	b.n	80063c8 <UART_SetConfig+0x5d0>
 80060b8:	2308      	movs	r3, #8
 80060ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060be:	e183      	b.n	80063c8 <UART_SetConfig+0x5d0>
 80060c0:	2310      	movs	r3, #16
 80060c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060c6:	e17f      	b.n	80063c8 <UART_SetConfig+0x5d0>
 80060c8:	2320      	movs	r3, #32
 80060ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060ce:	e17b      	b.n	80063c8 <UART_SetConfig+0x5d0>
 80060d0:	2340      	movs	r3, #64	; 0x40
 80060d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060d6:	e177      	b.n	80063c8 <UART_SetConfig+0x5d0>
 80060d8:	2380      	movs	r3, #128	; 0x80
 80060da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060de:	bf00      	nop
 80060e0:	e172      	b.n	80063c8 <UART_SetConfig+0x5d0>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a1c      	ldr	r2, [pc, #112]	; (8006158 <UART_SetConfig+0x360>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d144      	bne.n	8006176 <UART_SetConfig+0x37e>
 80060ec:	4b16      	ldr	r3, [pc, #88]	; (8006148 <UART_SetConfig+0x350>)
 80060ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f0:	f003 0307 	and.w	r3, r3, #7
 80060f4:	2b05      	cmp	r3, #5
 80060f6:	d839      	bhi.n	800616c <UART_SetConfig+0x374>
 80060f8:	a201      	add	r2, pc, #4	; (adr r2, 8006100 <UART_SetConfig+0x308>)
 80060fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fe:	bf00      	nop
 8006100:	08006119 	.word	0x08006119
 8006104:	08006121 	.word	0x08006121
 8006108:	08006129 	.word	0x08006129
 800610c:	08006131 	.word	0x08006131
 8006110:	0800615d 	.word	0x0800615d
 8006114:	08006165 	.word	0x08006165
 8006118:	2300      	movs	r3, #0
 800611a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800611e:	e153      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006120:	2304      	movs	r3, #4
 8006122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006126:	e14f      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006128:	2308      	movs	r3, #8
 800612a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800612e:	e14b      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006130:	2310      	movs	r3, #16
 8006132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006136:	e147      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006138:	cfff69f3 	.word	0xcfff69f3
 800613c:	58000c00 	.word	0x58000c00
 8006140:	11fff4ff 	.word	0x11fff4ff
 8006144:	40011000 	.word	0x40011000
 8006148:	58024400 	.word	0x58024400
 800614c:	40004400 	.word	0x40004400
 8006150:	40004800 	.word	0x40004800
 8006154:	40004c00 	.word	0x40004c00
 8006158:	40005000 	.word	0x40005000
 800615c:	2320      	movs	r3, #32
 800615e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006162:	e131      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006164:	2340      	movs	r3, #64	; 0x40
 8006166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800616a:	e12d      	b.n	80063c8 <UART_SetConfig+0x5d0>
 800616c:	2380      	movs	r3, #128	; 0x80
 800616e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006172:	bf00      	nop
 8006174:	e128      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4ab6      	ldr	r2, [pc, #728]	; (8006454 <UART_SetConfig+0x65c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d178      	bne.n	8006272 <UART_SetConfig+0x47a>
 8006180:	4bb5      	ldr	r3, [pc, #724]	; (8006458 <UART_SetConfig+0x660>)
 8006182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006184:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006188:	2b28      	cmp	r3, #40	; 0x28
 800618a:	d86d      	bhi.n	8006268 <UART_SetConfig+0x470>
 800618c:	a201      	add	r2, pc, #4	; (adr r2, 8006194 <UART_SetConfig+0x39c>)
 800618e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006192:	bf00      	nop
 8006194:	08006239 	.word	0x08006239
 8006198:	08006269 	.word	0x08006269
 800619c:	08006269 	.word	0x08006269
 80061a0:	08006269 	.word	0x08006269
 80061a4:	08006269 	.word	0x08006269
 80061a8:	08006269 	.word	0x08006269
 80061ac:	08006269 	.word	0x08006269
 80061b0:	08006269 	.word	0x08006269
 80061b4:	08006241 	.word	0x08006241
 80061b8:	08006269 	.word	0x08006269
 80061bc:	08006269 	.word	0x08006269
 80061c0:	08006269 	.word	0x08006269
 80061c4:	08006269 	.word	0x08006269
 80061c8:	08006269 	.word	0x08006269
 80061cc:	08006269 	.word	0x08006269
 80061d0:	08006269 	.word	0x08006269
 80061d4:	08006249 	.word	0x08006249
 80061d8:	08006269 	.word	0x08006269
 80061dc:	08006269 	.word	0x08006269
 80061e0:	08006269 	.word	0x08006269
 80061e4:	08006269 	.word	0x08006269
 80061e8:	08006269 	.word	0x08006269
 80061ec:	08006269 	.word	0x08006269
 80061f0:	08006269 	.word	0x08006269
 80061f4:	08006251 	.word	0x08006251
 80061f8:	08006269 	.word	0x08006269
 80061fc:	08006269 	.word	0x08006269
 8006200:	08006269 	.word	0x08006269
 8006204:	08006269 	.word	0x08006269
 8006208:	08006269 	.word	0x08006269
 800620c:	08006269 	.word	0x08006269
 8006210:	08006269 	.word	0x08006269
 8006214:	08006259 	.word	0x08006259
 8006218:	08006269 	.word	0x08006269
 800621c:	08006269 	.word	0x08006269
 8006220:	08006269 	.word	0x08006269
 8006224:	08006269 	.word	0x08006269
 8006228:	08006269 	.word	0x08006269
 800622c:	08006269 	.word	0x08006269
 8006230:	08006269 	.word	0x08006269
 8006234:	08006261 	.word	0x08006261
 8006238:	2301      	movs	r3, #1
 800623a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800623e:	e0c3      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006240:	2304      	movs	r3, #4
 8006242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006246:	e0bf      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006248:	2308      	movs	r3, #8
 800624a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800624e:	e0bb      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006250:	2310      	movs	r3, #16
 8006252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006256:	e0b7      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006258:	2320      	movs	r3, #32
 800625a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800625e:	e0b3      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006260:	2340      	movs	r3, #64	; 0x40
 8006262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006266:	e0af      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006268:	2380      	movs	r3, #128	; 0x80
 800626a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800626e:	bf00      	nop
 8006270:	e0aa      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a79      	ldr	r2, [pc, #484]	; (800645c <UART_SetConfig+0x664>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d132      	bne.n	80062e2 <UART_SetConfig+0x4ea>
 800627c:	4b76      	ldr	r3, [pc, #472]	; (8006458 <UART_SetConfig+0x660>)
 800627e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006280:	f003 0307 	and.w	r3, r3, #7
 8006284:	2b05      	cmp	r3, #5
 8006286:	d827      	bhi.n	80062d8 <UART_SetConfig+0x4e0>
 8006288:	a201      	add	r2, pc, #4	; (adr r2, 8006290 <UART_SetConfig+0x498>)
 800628a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628e:	bf00      	nop
 8006290:	080062a9 	.word	0x080062a9
 8006294:	080062b1 	.word	0x080062b1
 8006298:	080062b9 	.word	0x080062b9
 800629c:	080062c1 	.word	0x080062c1
 80062a0:	080062c9 	.word	0x080062c9
 80062a4:	080062d1 	.word	0x080062d1
 80062a8:	2300      	movs	r3, #0
 80062aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ae:	e08b      	b.n	80063c8 <UART_SetConfig+0x5d0>
 80062b0:	2304      	movs	r3, #4
 80062b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062b6:	e087      	b.n	80063c8 <UART_SetConfig+0x5d0>
 80062b8:	2308      	movs	r3, #8
 80062ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062be:	e083      	b.n	80063c8 <UART_SetConfig+0x5d0>
 80062c0:	2310      	movs	r3, #16
 80062c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062c6:	e07f      	b.n	80063c8 <UART_SetConfig+0x5d0>
 80062c8:	2320      	movs	r3, #32
 80062ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ce:	e07b      	b.n	80063c8 <UART_SetConfig+0x5d0>
 80062d0:	2340      	movs	r3, #64	; 0x40
 80062d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062d6:	e077      	b.n	80063c8 <UART_SetConfig+0x5d0>
 80062d8:	2380      	movs	r3, #128	; 0x80
 80062da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062de:	bf00      	nop
 80062e0:	e072      	b.n	80063c8 <UART_SetConfig+0x5d0>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a5e      	ldr	r2, [pc, #376]	; (8006460 <UART_SetConfig+0x668>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d132      	bne.n	8006352 <UART_SetConfig+0x55a>
 80062ec:	4b5a      	ldr	r3, [pc, #360]	; (8006458 <UART_SetConfig+0x660>)
 80062ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f0:	f003 0307 	and.w	r3, r3, #7
 80062f4:	2b05      	cmp	r3, #5
 80062f6:	d827      	bhi.n	8006348 <UART_SetConfig+0x550>
 80062f8:	a201      	add	r2, pc, #4	; (adr r2, 8006300 <UART_SetConfig+0x508>)
 80062fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fe:	bf00      	nop
 8006300:	08006319 	.word	0x08006319
 8006304:	08006321 	.word	0x08006321
 8006308:	08006329 	.word	0x08006329
 800630c:	08006331 	.word	0x08006331
 8006310:	08006339 	.word	0x08006339
 8006314:	08006341 	.word	0x08006341
 8006318:	2300      	movs	r3, #0
 800631a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800631e:	e053      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006320:	2304      	movs	r3, #4
 8006322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006326:	e04f      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006328:	2308      	movs	r3, #8
 800632a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800632e:	e04b      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006330:	2310      	movs	r3, #16
 8006332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006336:	e047      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006338:	2320      	movs	r3, #32
 800633a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800633e:	e043      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006340:	2340      	movs	r3, #64	; 0x40
 8006342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006346:	e03f      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006348:	2380      	movs	r3, #128	; 0x80
 800634a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800634e:	bf00      	nop
 8006350:	e03a      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a43      	ldr	r2, [pc, #268]	; (8006464 <UART_SetConfig+0x66c>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d132      	bne.n	80063c2 <UART_SetConfig+0x5ca>
 800635c:	4b3e      	ldr	r3, [pc, #248]	; (8006458 <UART_SetConfig+0x660>)
 800635e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006360:	f003 0307 	and.w	r3, r3, #7
 8006364:	2b05      	cmp	r3, #5
 8006366:	d827      	bhi.n	80063b8 <UART_SetConfig+0x5c0>
 8006368:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <UART_SetConfig+0x578>)
 800636a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636e:	bf00      	nop
 8006370:	08006389 	.word	0x08006389
 8006374:	08006391 	.word	0x08006391
 8006378:	08006399 	.word	0x08006399
 800637c:	080063a1 	.word	0x080063a1
 8006380:	080063a9 	.word	0x080063a9
 8006384:	080063b1 	.word	0x080063b1
 8006388:	2302      	movs	r3, #2
 800638a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800638e:	e01b      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006390:	2304      	movs	r3, #4
 8006392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006396:	e017      	b.n	80063c8 <UART_SetConfig+0x5d0>
 8006398:	2308      	movs	r3, #8
 800639a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800639e:	e013      	b.n	80063c8 <UART_SetConfig+0x5d0>
 80063a0:	2310      	movs	r3, #16
 80063a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063a6:	e00f      	b.n	80063c8 <UART_SetConfig+0x5d0>
 80063a8:	2320      	movs	r3, #32
 80063aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063ae:	e00b      	b.n	80063c8 <UART_SetConfig+0x5d0>
 80063b0:	2340      	movs	r3, #64	; 0x40
 80063b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063b6:	e007      	b.n	80063c8 <UART_SetConfig+0x5d0>
 80063b8:	2380      	movs	r3, #128	; 0x80
 80063ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063be:	bf00      	nop
 80063c0:	e002      	b.n	80063c8 <UART_SetConfig+0x5d0>
 80063c2:	2380      	movs	r3, #128	; 0x80
 80063c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a25      	ldr	r2, [pc, #148]	; (8006464 <UART_SetConfig+0x66c>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	f040 80b8 	bne.w	8006544 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063d8:	2b08      	cmp	r3, #8
 80063da:	d019      	beq.n	8006410 <UART_SetConfig+0x618>
 80063dc:	2b08      	cmp	r3, #8
 80063de:	dc04      	bgt.n	80063ea <UART_SetConfig+0x5f2>
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d009      	beq.n	80063f8 <UART_SetConfig+0x600>
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d00b      	beq.n	8006400 <UART_SetConfig+0x608>
 80063e8:	e042      	b.n	8006470 <UART_SetConfig+0x678>
 80063ea:	2b20      	cmp	r3, #32
 80063ec:	d02b      	beq.n	8006446 <UART_SetConfig+0x64e>
 80063ee:	2b40      	cmp	r3, #64	; 0x40
 80063f0:	d02c      	beq.n	800644c <UART_SetConfig+0x654>
 80063f2:	2b10      	cmp	r3, #16
 80063f4:	d014      	beq.n	8006420 <UART_SetConfig+0x628>
 80063f6:	e03b      	b.n	8006470 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80063f8:	f7fe f8f8 	bl	80045ec <HAL_RCCEx_GetD3PCLK1Freq>
 80063fc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80063fe:	e03d      	b.n	800647c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006400:	f107 0314 	add.w	r3, r7, #20
 8006404:	4618      	mov	r0, r3
 8006406:	f7fe f907 	bl	8004618 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800640e:	e035      	b.n	800647c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006410:	f107 0308 	add.w	r3, r7, #8
 8006414:	4618      	mov	r0, r3
 8006416:	f7fe fa4b 	bl	80048b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800641e:	e02d      	b.n	800647c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006420:	4b0d      	ldr	r3, [pc, #52]	; (8006458 <UART_SetConfig+0x660>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0320 	and.w	r3, r3, #32
 8006428:	2b00      	cmp	r3, #0
 800642a:	d009      	beq.n	8006440 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800642c:	4b0a      	ldr	r3, [pc, #40]	; (8006458 <UART_SetConfig+0x660>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	08db      	lsrs	r3, r3, #3
 8006432:	f003 0303 	and.w	r3, r3, #3
 8006436:	4a0c      	ldr	r2, [pc, #48]	; (8006468 <UART_SetConfig+0x670>)
 8006438:	fa22 f303 	lsr.w	r3, r2, r3
 800643c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800643e:	e01d      	b.n	800647c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8006440:	4b09      	ldr	r3, [pc, #36]	; (8006468 <UART_SetConfig+0x670>)
 8006442:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006444:	e01a      	b.n	800647c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006446:	4b09      	ldr	r3, [pc, #36]	; (800646c <UART_SetConfig+0x674>)
 8006448:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800644a:	e017      	b.n	800647c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800644c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006450:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006452:	e013      	b.n	800647c <UART_SetConfig+0x684>
 8006454:	40011400 	.word	0x40011400
 8006458:	58024400 	.word	0x58024400
 800645c:	40007800 	.word	0x40007800
 8006460:	40007c00 	.word	0x40007c00
 8006464:	58000c00 	.word	0x58000c00
 8006468:	03d09000 	.word	0x03d09000
 800646c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800647a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800647c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647e:	2b00      	cmp	r3, #0
 8006480:	f000 824d 	beq.w	800691e <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	4aad      	ldr	r2, [pc, #692]	; (8006740 <UART_SetConfig+0x948>)
 800648a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800648e:	461a      	mov	r2, r3
 8006490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006492:	fbb3 f3f2 	udiv	r3, r3, r2
 8006496:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	4613      	mov	r3, r2
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	4413      	add	r3, r2
 80064a2:	6a3a      	ldr	r2, [r7, #32]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d305      	bcc.n	80064b4 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064ae:	6a3a      	ldr	r2, [r7, #32]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d903      	bls.n	80064bc <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80064ba:	e230      	b.n	800691e <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064be:	4618      	mov	r0, r3
 80064c0:	f04f 0100 	mov.w	r1, #0
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c8:	4a9d      	ldr	r2, [pc, #628]	; (8006740 <UART_SetConfig+0x948>)
 80064ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	f04f 0400 	mov.w	r4, #0
 80064d4:	461a      	mov	r2, r3
 80064d6:	4623      	mov	r3, r4
 80064d8:	f7f9 fefe 	bl	80002d8 <__aeabi_uldivmod>
 80064dc:	4603      	mov	r3, r0
 80064de:	460c      	mov	r4, r1
 80064e0:	4619      	mov	r1, r3
 80064e2:	4622      	mov	r2, r4
 80064e4:	f04f 0300 	mov.w	r3, #0
 80064e8:	f04f 0400 	mov.w	r4, #0
 80064ec:	0214      	lsls	r4, r2, #8
 80064ee:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80064f2:	020b      	lsls	r3, r1, #8
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	6852      	ldr	r2, [r2, #4]
 80064f8:	0852      	lsrs	r2, r2, #1
 80064fa:	4611      	mov	r1, r2
 80064fc:	f04f 0200 	mov.w	r2, #0
 8006500:	eb13 0b01 	adds.w	fp, r3, r1
 8006504:	eb44 0c02 	adc.w	ip, r4, r2
 8006508:	4658      	mov	r0, fp
 800650a:	4661      	mov	r1, ip
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f04f 0400 	mov.w	r4, #0
 8006514:	461a      	mov	r2, r3
 8006516:	4623      	mov	r3, r4
 8006518:	f7f9 fede 	bl	80002d8 <__aeabi_uldivmod>
 800651c:	4603      	mov	r3, r0
 800651e:	460c      	mov	r4, r1
 8006520:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006524:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006528:	d308      	bcc.n	800653c <UART_SetConfig+0x744>
 800652a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006530:	d204      	bcs.n	800653c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006538:	60da      	str	r2, [r3, #12]
 800653a:	e1f0      	b.n	800691e <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006542:	e1ec      	b.n	800691e <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	69db      	ldr	r3, [r3, #28]
 8006548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800654c:	f040 8100 	bne.w	8006750 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8006550:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006554:	2b40      	cmp	r3, #64	; 0x40
 8006556:	f200 80b7 	bhi.w	80066c8 <UART_SetConfig+0x8d0>
 800655a:	a201      	add	r2, pc, #4	; (adr r2, 8006560 <UART_SetConfig+0x768>)
 800655c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006560:	08006665 	.word	0x08006665
 8006564:	0800666d 	.word	0x0800666d
 8006568:	080066c9 	.word	0x080066c9
 800656c:	080066c9 	.word	0x080066c9
 8006570:	08006675 	.word	0x08006675
 8006574:	080066c9 	.word	0x080066c9
 8006578:	080066c9 	.word	0x080066c9
 800657c:	080066c9 	.word	0x080066c9
 8006580:	08006685 	.word	0x08006685
 8006584:	080066c9 	.word	0x080066c9
 8006588:	080066c9 	.word	0x080066c9
 800658c:	080066c9 	.word	0x080066c9
 8006590:	080066c9 	.word	0x080066c9
 8006594:	080066c9 	.word	0x080066c9
 8006598:	080066c9 	.word	0x080066c9
 800659c:	080066c9 	.word	0x080066c9
 80065a0:	08006695 	.word	0x08006695
 80065a4:	080066c9 	.word	0x080066c9
 80065a8:	080066c9 	.word	0x080066c9
 80065ac:	080066c9 	.word	0x080066c9
 80065b0:	080066c9 	.word	0x080066c9
 80065b4:	080066c9 	.word	0x080066c9
 80065b8:	080066c9 	.word	0x080066c9
 80065bc:	080066c9 	.word	0x080066c9
 80065c0:	080066c9 	.word	0x080066c9
 80065c4:	080066c9 	.word	0x080066c9
 80065c8:	080066c9 	.word	0x080066c9
 80065cc:	080066c9 	.word	0x080066c9
 80065d0:	080066c9 	.word	0x080066c9
 80065d4:	080066c9 	.word	0x080066c9
 80065d8:	080066c9 	.word	0x080066c9
 80065dc:	080066c9 	.word	0x080066c9
 80065e0:	080066bb 	.word	0x080066bb
 80065e4:	080066c9 	.word	0x080066c9
 80065e8:	080066c9 	.word	0x080066c9
 80065ec:	080066c9 	.word	0x080066c9
 80065f0:	080066c9 	.word	0x080066c9
 80065f4:	080066c9 	.word	0x080066c9
 80065f8:	080066c9 	.word	0x080066c9
 80065fc:	080066c9 	.word	0x080066c9
 8006600:	080066c9 	.word	0x080066c9
 8006604:	080066c9 	.word	0x080066c9
 8006608:	080066c9 	.word	0x080066c9
 800660c:	080066c9 	.word	0x080066c9
 8006610:	080066c9 	.word	0x080066c9
 8006614:	080066c9 	.word	0x080066c9
 8006618:	080066c9 	.word	0x080066c9
 800661c:	080066c9 	.word	0x080066c9
 8006620:	080066c9 	.word	0x080066c9
 8006624:	080066c9 	.word	0x080066c9
 8006628:	080066c9 	.word	0x080066c9
 800662c:	080066c9 	.word	0x080066c9
 8006630:	080066c9 	.word	0x080066c9
 8006634:	080066c9 	.word	0x080066c9
 8006638:	080066c9 	.word	0x080066c9
 800663c:	080066c9 	.word	0x080066c9
 8006640:	080066c9 	.word	0x080066c9
 8006644:	080066c9 	.word	0x080066c9
 8006648:	080066c9 	.word	0x080066c9
 800664c:	080066c9 	.word	0x080066c9
 8006650:	080066c9 	.word	0x080066c9
 8006654:	080066c9 	.word	0x080066c9
 8006658:	080066c9 	.word	0x080066c9
 800665c:	080066c9 	.word	0x080066c9
 8006660:	080066c1 	.word	0x080066c1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006664:	f7fd f8a8 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 8006668:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800666a:	e033      	b.n	80066d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800666c:	f7fd f8ba 	bl	80037e4 <HAL_RCC_GetPCLK2Freq>
 8006670:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006672:	e02f      	b.n	80066d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006674:	f107 0314 	add.w	r3, r7, #20
 8006678:	4618      	mov	r0, r3
 800667a:	f7fd ffcd 	bl	8004618 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006682:	e027      	b.n	80066d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006684:	f107 0308 	add.w	r3, r7, #8
 8006688:	4618      	mov	r0, r3
 800668a:	f7fe f911 	bl	80048b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006692:	e01f      	b.n	80066d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006694:	4b2b      	ldr	r3, [pc, #172]	; (8006744 <UART_SetConfig+0x94c>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0320 	and.w	r3, r3, #32
 800669c:	2b00      	cmp	r3, #0
 800669e:	d009      	beq.n	80066b4 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80066a0:	4b28      	ldr	r3, [pc, #160]	; (8006744 <UART_SetConfig+0x94c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	08db      	lsrs	r3, r3, #3
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	4a27      	ldr	r2, [pc, #156]	; (8006748 <UART_SetConfig+0x950>)
 80066ac:	fa22 f303 	lsr.w	r3, r2, r3
 80066b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80066b2:	e00f      	b.n	80066d4 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80066b4:	4b24      	ldr	r3, [pc, #144]	; (8006748 <UART_SetConfig+0x950>)
 80066b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066b8:	e00c      	b.n	80066d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80066ba:	4b24      	ldr	r3, [pc, #144]	; (800674c <UART_SetConfig+0x954>)
 80066bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066be:	e009      	b.n	80066d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066c6:	e005      	b.n	80066d4 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80066c8:	2300      	movs	r3, #0
 80066ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80066d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f000 8121 	beq.w	800691e <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e0:	4a17      	ldr	r2, [pc, #92]	; (8006740 <UART_SetConfig+0x948>)
 80066e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066e6:	461a      	mov	r2, r3
 80066e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80066ee:	005a      	lsls	r2, r3, #1
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	085b      	lsrs	r3, r3, #1
 80066f6:	441a      	add	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006700:	b29b      	uxth	r3, r3
 8006702:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006706:	2b0f      	cmp	r3, #15
 8006708:	d916      	bls.n	8006738 <UART_SetConfig+0x940>
 800670a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006710:	d212      	bcs.n	8006738 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006714:	b29b      	uxth	r3, r3
 8006716:	f023 030f 	bic.w	r3, r3, #15
 800671a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800671c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671e:	085b      	lsrs	r3, r3, #1
 8006720:	b29b      	uxth	r3, r3
 8006722:	f003 0307 	and.w	r3, r3, #7
 8006726:	b29a      	uxth	r2, r3
 8006728:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800672a:	4313      	orrs	r3, r2
 800672c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006734:	60da      	str	r2, [r3, #12]
 8006736:	e0f2      	b.n	800691e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800673e:	e0ee      	b.n	800691e <UART_SetConfig+0xb26>
 8006740:	0800744c 	.word	0x0800744c
 8006744:	58024400 	.word	0x58024400
 8006748:	03d09000 	.word	0x03d09000
 800674c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8006750:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006754:	2b40      	cmp	r3, #64	; 0x40
 8006756:	f200 80b7 	bhi.w	80068c8 <UART_SetConfig+0xad0>
 800675a:	a201      	add	r2, pc, #4	; (adr r2, 8006760 <UART_SetConfig+0x968>)
 800675c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006760:	08006865 	.word	0x08006865
 8006764:	0800686d 	.word	0x0800686d
 8006768:	080068c9 	.word	0x080068c9
 800676c:	080068c9 	.word	0x080068c9
 8006770:	08006875 	.word	0x08006875
 8006774:	080068c9 	.word	0x080068c9
 8006778:	080068c9 	.word	0x080068c9
 800677c:	080068c9 	.word	0x080068c9
 8006780:	08006885 	.word	0x08006885
 8006784:	080068c9 	.word	0x080068c9
 8006788:	080068c9 	.word	0x080068c9
 800678c:	080068c9 	.word	0x080068c9
 8006790:	080068c9 	.word	0x080068c9
 8006794:	080068c9 	.word	0x080068c9
 8006798:	080068c9 	.word	0x080068c9
 800679c:	080068c9 	.word	0x080068c9
 80067a0:	08006895 	.word	0x08006895
 80067a4:	080068c9 	.word	0x080068c9
 80067a8:	080068c9 	.word	0x080068c9
 80067ac:	080068c9 	.word	0x080068c9
 80067b0:	080068c9 	.word	0x080068c9
 80067b4:	080068c9 	.word	0x080068c9
 80067b8:	080068c9 	.word	0x080068c9
 80067bc:	080068c9 	.word	0x080068c9
 80067c0:	080068c9 	.word	0x080068c9
 80067c4:	080068c9 	.word	0x080068c9
 80067c8:	080068c9 	.word	0x080068c9
 80067cc:	080068c9 	.word	0x080068c9
 80067d0:	080068c9 	.word	0x080068c9
 80067d4:	080068c9 	.word	0x080068c9
 80067d8:	080068c9 	.word	0x080068c9
 80067dc:	080068c9 	.word	0x080068c9
 80067e0:	080068bb 	.word	0x080068bb
 80067e4:	080068c9 	.word	0x080068c9
 80067e8:	080068c9 	.word	0x080068c9
 80067ec:	080068c9 	.word	0x080068c9
 80067f0:	080068c9 	.word	0x080068c9
 80067f4:	080068c9 	.word	0x080068c9
 80067f8:	080068c9 	.word	0x080068c9
 80067fc:	080068c9 	.word	0x080068c9
 8006800:	080068c9 	.word	0x080068c9
 8006804:	080068c9 	.word	0x080068c9
 8006808:	080068c9 	.word	0x080068c9
 800680c:	080068c9 	.word	0x080068c9
 8006810:	080068c9 	.word	0x080068c9
 8006814:	080068c9 	.word	0x080068c9
 8006818:	080068c9 	.word	0x080068c9
 800681c:	080068c9 	.word	0x080068c9
 8006820:	080068c9 	.word	0x080068c9
 8006824:	080068c9 	.word	0x080068c9
 8006828:	080068c9 	.word	0x080068c9
 800682c:	080068c9 	.word	0x080068c9
 8006830:	080068c9 	.word	0x080068c9
 8006834:	080068c9 	.word	0x080068c9
 8006838:	080068c9 	.word	0x080068c9
 800683c:	080068c9 	.word	0x080068c9
 8006840:	080068c9 	.word	0x080068c9
 8006844:	080068c9 	.word	0x080068c9
 8006848:	080068c9 	.word	0x080068c9
 800684c:	080068c9 	.word	0x080068c9
 8006850:	080068c9 	.word	0x080068c9
 8006854:	080068c9 	.word	0x080068c9
 8006858:	080068c9 	.word	0x080068c9
 800685c:	080068c9 	.word	0x080068c9
 8006860:	080068c1 	.word	0x080068c1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006864:	f7fc ffa8 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 8006868:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800686a:	e033      	b.n	80068d4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800686c:	f7fc ffba 	bl	80037e4 <HAL_RCC_GetPCLK2Freq>
 8006870:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006872:	e02f      	b.n	80068d4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006874:	f107 0314 	add.w	r3, r7, #20
 8006878:	4618      	mov	r0, r3
 800687a:	f7fd fecd 	bl	8004618 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006882:	e027      	b.n	80068d4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006884:	f107 0308 	add.w	r3, r7, #8
 8006888:	4618      	mov	r0, r3
 800688a:	f7fe f811 	bl	80048b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006892:	e01f      	b.n	80068d4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006894:	4b2c      	ldr	r3, [pc, #176]	; (8006948 <UART_SetConfig+0xb50>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0320 	and.w	r3, r3, #32
 800689c:	2b00      	cmp	r3, #0
 800689e:	d009      	beq.n	80068b4 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80068a0:	4b29      	ldr	r3, [pc, #164]	; (8006948 <UART_SetConfig+0xb50>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	08db      	lsrs	r3, r3, #3
 80068a6:	f003 0303 	and.w	r3, r3, #3
 80068aa:	4a28      	ldr	r2, [pc, #160]	; (800694c <UART_SetConfig+0xb54>)
 80068ac:	fa22 f303 	lsr.w	r3, r2, r3
 80068b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80068b2:	e00f      	b.n	80068d4 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 80068b4:	4b25      	ldr	r3, [pc, #148]	; (800694c <UART_SetConfig+0xb54>)
 80068b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068b8:	e00c      	b.n	80068d4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80068ba:	4b25      	ldr	r3, [pc, #148]	; (8006950 <UART_SetConfig+0xb58>)
 80068bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068be:	e009      	b.n	80068d4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068c6:	e005      	b.n	80068d4 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80068c8:	2300      	movs	r3, #0
 80068ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80068d2:	bf00      	nop
    }

    if (pclk != 0U)
 80068d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d021      	beq.n	800691e <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068de:	4a1d      	ldr	r2, [pc, #116]	; (8006954 <UART_SetConfig+0xb5c>)
 80068e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068e4:	461a      	mov	r2, r3
 80068e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e8:	fbb3 f2f2 	udiv	r2, r3, r2
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	085b      	lsrs	r3, r3, #1
 80068f2:	441a      	add	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006902:	2b0f      	cmp	r3, #15
 8006904:	d908      	bls.n	8006918 <UART_SetConfig+0xb20>
 8006906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800690c:	d204      	bcs.n	8006918 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006914:	60da      	str	r2, [r3, #12]
 8006916:	e002      	b.n	800691e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800693a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800693e:	4618      	mov	r0, r3
 8006940:	3738      	adds	r7, #56	; 0x38
 8006942:	46bd      	mov	sp, r7
 8006944:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006948:	58024400 	.word	0x58024400
 800694c:	03d09000 	.word	0x03d09000
 8006950:	003d0900 	.word	0x003d0900
 8006954:	0800744c 	.word	0x0800744c

08006958 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00a      	beq.n	8006982 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	430a      	orrs	r2, r1
 8006980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00a      	beq.n	80069a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	430a      	orrs	r2, r1
 80069a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a8:	f003 0304 	and.w	r3, r3, #4
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00a      	beq.n	80069c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ca:	f003 0308 	and.w	r3, r3, #8
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00a      	beq.n	80069e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ec:	f003 0310 	and.w	r3, r3, #16
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00a      	beq.n	8006a0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0e:	f003 0320 	and.w	r3, r3, #32
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d01a      	beq.n	8006a6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a56:	d10a      	bne.n	8006a6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	605a      	str	r2, [r3, #4]
  }
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af02      	add	r7, sp, #8
 8006aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006aac:	f7fa fe78 	bl	80017a0 <HAL_GetTick>
 8006ab0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0308 	and.w	r3, r3, #8
 8006abc:	2b08      	cmp	r3, #8
 8006abe:	d10e      	bne.n	8006ade <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ac0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f82c 	bl	8006b2c <UART_WaitOnFlagUntilTimeout>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e022      	b.n	8006b24 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0304 	and.w	r3, r3, #4
 8006ae8:	2b04      	cmp	r3, #4
 8006aea:	d10e      	bne.n	8006b0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f816 	bl	8006b2c <UART_WaitOnFlagUntilTimeout>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e00c      	b.n	8006b24 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2220      	movs	r2, #32
 8006b16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	603b      	str	r3, [r7, #0]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b3c:	e062      	b.n	8006c04 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b44:	d05e      	beq.n	8006c04 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b46:	f7fa fe2b 	bl	80017a0 <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d302      	bcc.n	8006b5c <UART_WaitOnFlagUntilTimeout+0x30>
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d11d      	bne.n	8006b98 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b6a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	689a      	ldr	r2, [r3, #8]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 0201 	bic.w	r2, r2, #1
 8006b7a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2220      	movs	r2, #32
 8006b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e045      	b.n	8006c24 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0304 	and.w	r3, r3, #4
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d02e      	beq.n	8006c04 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bb4:	d126      	bne.n	8006c04 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bbe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006bce:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689a      	ldr	r2, [r3, #8]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0201 	bic.w	r2, r2, #1
 8006bde:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2220      	movs	r2, #32
 8006be4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2220      	movs	r2, #32
 8006bec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e00f      	b.n	8006c24 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	69da      	ldr	r2, [r3, #28]
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	bf0c      	ite	eq
 8006c14:	2301      	moveq	r3, #1
 8006c16:	2300      	movne	r3, #0
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	79fb      	ldrb	r3, [r7, #7]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d08d      	beq.n	8006b3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d101      	bne.n	8006c42 <HAL_UARTEx_DisableFifoMode+0x16>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	e027      	b.n	8006c92 <HAL_UARTEx_DisableFifoMode+0x66>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2224      	movs	r2, #36	; 0x24
 8006c4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f022 0201 	bic.w	r2, r2, #1
 8006c68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2220      	movs	r2, #32
 8006c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d101      	bne.n	8006cb6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	e02d      	b.n	8006d12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2224      	movs	r2, #36	; 0x24
 8006cc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f022 0201 	bic.w	r2, r2, #1
 8006cdc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f850 	bl	8006d98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2220      	movs	r2, #32
 8006d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d101      	bne.n	8006d32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d2e:	2302      	movs	r3, #2
 8006d30:	e02d      	b.n	8006d8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2224      	movs	r2, #36	; 0x24
 8006d3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f022 0201 	bic.w	r2, r2, #1
 8006d58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	683a      	ldr	r2, [r7, #0]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f812 	bl	8006d98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
	...

08006d98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b089      	sub	sp, #36	; 0x24
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006da0:	4a2f      	ldr	r2, [pc, #188]	; (8006e60 <UARTEx_SetNbDataToProcess+0xc8>)
 8006da2:	f107 0314 	add.w	r3, r7, #20
 8006da6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006daa:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006dae:	4a2d      	ldr	r2, [pc, #180]	; (8006e64 <UARTEx_SetNbDataToProcess+0xcc>)
 8006db0:	f107 030c 	add.w	r3, r7, #12
 8006db4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006db8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d108      	bne.n	8006dd6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006dd4:	e03d      	b.n	8006e52 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006dd6:	2310      	movs	r3, #16
 8006dd8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006dda:	2310      	movs	r3, #16
 8006ddc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	0e5b      	lsrs	r3, r3, #25
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	f003 0307 	and.w	r3, r3, #7
 8006dec:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	0f5b      	lsrs	r3, r3, #29
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	f003 0307 	and.w	r3, r3, #7
 8006dfc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006dfe:	7fbb      	ldrb	r3, [r7, #30]
 8006e00:	7f3a      	ldrb	r2, [r7, #28]
 8006e02:	f107 0120 	add.w	r1, r7, #32
 8006e06:	440a      	add	r2, r1
 8006e08:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006e0c:	fb02 f303 	mul.w	r3, r2, r3
 8006e10:	7f3a      	ldrb	r2, [r7, #28]
 8006e12:	f107 0120 	add.w	r1, r7, #32
 8006e16:	440a      	add	r2, r1
 8006e18:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006e1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006e28:	7ffb      	ldrb	r3, [r7, #31]
 8006e2a:	7f7a      	ldrb	r2, [r7, #29]
 8006e2c:	f107 0120 	add.w	r1, r7, #32
 8006e30:	440a      	add	r2, r1
 8006e32:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006e36:	fb02 f303 	mul.w	r3, r2, r3
 8006e3a:	7f7a      	ldrb	r2, [r7, #29]
 8006e3c:	f107 0120 	add.w	r1, r7, #32
 8006e40:	440a      	add	r2, r1
 8006e42:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006e46:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006e52:	bf00      	nop
 8006e54:	3724      	adds	r7, #36	; 0x24
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	0800742c 	.word	0x0800742c
 8006e64:	08007434 	.word	0x08007434

08006e68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e68:	b084      	sub	sp, #16
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	f107 001c 	add.w	r0, r7, #28
 8006e76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d120      	bne.n	8006ec2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	68da      	ldr	r2, [r3, #12]
 8006e90:	4b25      	ldr	r3, [pc, #148]	; (8006f28 <USB_CoreInit+0xc0>)
 8006e92:	4013      	ands	r3, r2
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d105      	bne.n	8006eb6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fa4c 	bl	8007354 <USB_CoreReset>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	73fb      	strb	r3, [r7, #15]
 8006ec0:	e01a      	b.n	8006ef8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fa40 	bl	8007354 <USB_CoreReset>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d106      	bne.n	8006eec <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	639a      	str	r2, [r3, #56]	; 0x38
 8006eea:	e005      	b.n	8006ef8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d10b      	bne.n	8006f16 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f043 0206 	orr.w	r2, r3, #6
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f043 0220 	orr.w	r2, r3, #32
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f22:	b004      	add	sp, #16
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	ffbdffbf 	.word	0xffbdffbf

08006f2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f023 0201 	bic.w	r2, r3, #1
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b082      	sub	sp, #8
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
 8006f56:	460b      	mov	r3, r1
 8006f58:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f66:	78fb      	ldrb	r3, [r7, #3]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d106      	bne.n	8006f7a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	60da      	str	r2, [r3, #12]
 8006f78:	e00b      	b.n	8006f92 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f7a:	78fb      	ldrb	r3, [r7, #3]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d106      	bne.n	8006f8e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	60da      	str	r2, [r3, #12]
 8006f8c:	e001      	b.n	8006f92 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e003      	b.n	8006f9a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006f92:	2032      	movs	r0, #50	; 0x32
 8006f94:	f7fa fc10 	bl	80017b8 <HAL_Delay>

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
	...

08006fa4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fa4:	b084      	sub	sp, #16
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b086      	sub	sp, #24
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006fb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	613b      	str	r3, [r7, #16]
 8006fc2:	e009      	b.n	8006fd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	3340      	adds	r3, #64	; 0x40
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4413      	add	r3, r2
 8006fce:	2200      	movs	r2, #0
 8006fd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	613b      	str	r3, [r7, #16]
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	2b0e      	cmp	r3, #14
 8006fdc:	d9f2      	bls.n	8006fc4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d11c      	bne.n	800701e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ff2:	f043 0302 	orr.w	r3, r3, #2
 8006ff6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	601a      	str	r2, [r3, #0]
 800701c:	e005      	b.n	800702a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007022:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007030:	461a      	mov	r2, r3
 8007032:	2300      	movs	r3, #0
 8007034:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800703c:	4619      	mov	r1, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007044:	461a      	mov	r2, r3
 8007046:	680b      	ldr	r3, [r1, #0]
 8007048:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800704a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704c:	2b01      	cmp	r3, #1
 800704e:	d10c      	bne.n	800706a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007052:	2b00      	cmp	r3, #0
 8007054:	d104      	bne.n	8007060 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007056:	2100      	movs	r1, #0
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f949 	bl	80072f0 <USB_SetDevSpeed>
 800705e:	e008      	b.n	8007072 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007060:	2101      	movs	r1, #1
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f944 	bl	80072f0 <USB_SetDevSpeed>
 8007068:	e003      	b.n	8007072 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800706a:	2103      	movs	r1, #3
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f93f 	bl	80072f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007072:	2110      	movs	r1, #16
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f8f3 	bl	8007260 <USB_FlushTxFifo>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f911 	bl	80072ac <USB_FlushRxFifo>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d001      	beq.n	8007094 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800709a:	461a      	mov	r2, r3
 800709c:	2300      	movs	r3, #0
 800709e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a6:	461a      	mov	r2, r3
 80070a8:	2300      	movs	r3, #0
 80070aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070b2:	461a      	mov	r2, r3
 80070b4:	2300      	movs	r3, #0
 80070b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070b8:	2300      	movs	r3, #0
 80070ba:	613b      	str	r3, [r7, #16]
 80070bc:	e043      	b.n	8007146 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	015a      	lsls	r2, r3, #5
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	4413      	add	r3, r2
 80070c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070d4:	d118      	bne.n	8007108 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10a      	bne.n	80070f2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e8:	461a      	mov	r2, r3
 80070ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80070ee:	6013      	str	r3, [r2, #0]
 80070f0:	e013      	b.n	800711a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070fe:	461a      	mov	r2, r3
 8007100:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007104:	6013      	str	r3, [r2, #0]
 8007106:	e008      	b.n	800711a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	015a      	lsls	r2, r3, #5
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	4413      	add	r3, r2
 8007110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007114:	461a      	mov	r2, r3
 8007116:	2300      	movs	r3, #0
 8007118:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	4413      	add	r3, r2
 8007122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007126:	461a      	mov	r2, r3
 8007128:	2300      	movs	r3, #0
 800712a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4413      	add	r3, r2
 8007134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007138:	461a      	mov	r2, r3
 800713a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800713e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	3301      	adds	r3, #1
 8007144:	613b      	str	r3, [r7, #16]
 8007146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	429a      	cmp	r2, r3
 800714c:	d3b7      	bcc.n	80070be <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800714e:	2300      	movs	r3, #0
 8007150:	613b      	str	r3, [r7, #16]
 8007152:	e043      	b.n	80071dc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4413      	add	r3, r2
 800715c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007166:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800716a:	d118      	bne.n	800719e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10a      	bne.n	8007188 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	4413      	add	r3, r2
 800717a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800717e:	461a      	mov	r2, r3
 8007180:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007184:	6013      	str	r3, [r2, #0]
 8007186:	e013      	b.n	80071b0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	015a      	lsls	r2, r3, #5
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	4413      	add	r3, r2
 8007190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007194:	461a      	mov	r2, r3
 8007196:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800719a:	6013      	str	r3, [r2, #0]
 800719c:	e008      	b.n	80071b0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	015a      	lsls	r2, r3, #5
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071aa:	461a      	mov	r2, r3
 80071ac:	2300      	movs	r3, #0
 80071ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	015a      	lsls	r2, r3, #5
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	4413      	add	r3, r2
 80071b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071bc:	461a      	mov	r2, r3
 80071be:	2300      	movs	r3, #0
 80071c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	015a      	lsls	r2, r3, #5
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	4413      	add	r3, r2
 80071ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ce:	461a      	mov	r2, r3
 80071d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80071d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	3301      	adds	r3, #1
 80071da:	613b      	str	r3, [r7, #16]
 80071dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d3b7      	bcc.n	8007154 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007204:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007208:	2b00      	cmp	r3, #0
 800720a:	d105      	bne.n	8007218 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	f043 0210 	orr.w	r2, r3, #16
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	699a      	ldr	r2, [r3, #24]
 800721c:	4b0e      	ldr	r3, [pc, #56]	; (8007258 <USB_DevInit+0x2b4>)
 800721e:	4313      	orrs	r3, r2
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007226:	2b00      	cmp	r3, #0
 8007228:	d005      	beq.n	8007236 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	f043 0208 	orr.w	r2, r3, #8
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007238:	2b01      	cmp	r3, #1
 800723a:	d105      	bne.n	8007248 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	699a      	ldr	r2, [r3, #24]
 8007240:	4b06      	ldr	r3, [pc, #24]	; (800725c <USB_DevInit+0x2b8>)
 8007242:	4313      	orrs	r3, r2
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007248:	7dfb      	ldrb	r3, [r7, #23]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007254:	b004      	add	sp, #16
 8007256:	4770      	bx	lr
 8007258:	803c3800 	.word	0x803c3800
 800725c:	40000004 	.word	0x40000004

08007260 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800726a:	2300      	movs	r3, #0
 800726c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	019b      	lsls	r3, r3, #6
 8007272:	f043 0220 	orr.w	r2, r3, #32
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	3301      	adds	r3, #1
 800727e:	60fb      	str	r3, [r7, #12]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	4a09      	ldr	r2, [pc, #36]	; (80072a8 <USB_FlushTxFifo+0x48>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d901      	bls.n	800728c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e006      	b.n	800729a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	f003 0320 	and.w	r3, r3, #32
 8007294:	2b20      	cmp	r3, #32
 8007296:	d0f0      	beq.n	800727a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	00030d40 	.word	0x00030d40

080072ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80072b4:	2300      	movs	r3, #0
 80072b6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2210      	movs	r2, #16
 80072bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3301      	adds	r3, #1
 80072c2:	60fb      	str	r3, [r7, #12]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	4a09      	ldr	r2, [pc, #36]	; (80072ec <USB_FlushRxFifo+0x40>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d901      	bls.n	80072d0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e006      	b.n	80072de <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	f003 0310 	and.w	r3, r3, #16
 80072d8:	2b10      	cmp	r3, #16
 80072da:	d0f0      	beq.n	80072be <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	00030d40 	.word	0x00030d40

080072f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	460b      	mov	r3, r1
 80072fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	78fb      	ldrb	r3, [r7, #3]
 800730a:	68f9      	ldr	r1, [r7, #12]
 800730c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007310:	4313      	orrs	r3, r2
 8007312:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3714      	adds	r7, #20
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr

08007322 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b084      	sub	sp, #16
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800733c:	f043 0302 	orr.w	r3, r3, #2
 8007340:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007342:	2003      	movs	r0, #3
 8007344:	f7fa fa38 	bl	80017b8 <HAL_Delay>

  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
	...

08007354 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800735c:	2300      	movs	r3, #0
 800735e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	3301      	adds	r3, #1
 8007364:	60fb      	str	r3, [r7, #12]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	4a13      	ldr	r2, [pc, #76]	; (80073b8 <USB_CoreReset+0x64>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d901      	bls.n	8007372 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e01b      	b.n	80073aa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	2b00      	cmp	r3, #0
 8007378:	daf2      	bge.n	8007360 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800737a:	2300      	movs	r3, #0
 800737c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	f043 0201 	orr.w	r2, r3, #1
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	3301      	adds	r3, #1
 800738e:	60fb      	str	r3, [r7, #12]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	4a09      	ldr	r2, [pc, #36]	; (80073b8 <USB_CoreReset+0x64>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d901      	bls.n	800739c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e006      	b.n	80073aa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d0f0      	beq.n	800738a <USB_CoreReset+0x36>

  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	00030d40 	.word	0x00030d40

080073bc <__libc_init_array>:
 80073bc:	b570      	push	{r4, r5, r6, lr}
 80073be:	4e0d      	ldr	r6, [pc, #52]	; (80073f4 <__libc_init_array+0x38>)
 80073c0:	4c0d      	ldr	r4, [pc, #52]	; (80073f8 <__libc_init_array+0x3c>)
 80073c2:	1ba4      	subs	r4, r4, r6
 80073c4:	10a4      	asrs	r4, r4, #2
 80073c6:	2500      	movs	r5, #0
 80073c8:	42a5      	cmp	r5, r4
 80073ca:	d109      	bne.n	80073e0 <__libc_init_array+0x24>
 80073cc:	4e0b      	ldr	r6, [pc, #44]	; (80073fc <__libc_init_array+0x40>)
 80073ce:	4c0c      	ldr	r4, [pc, #48]	; (8007400 <__libc_init_array+0x44>)
 80073d0:	f000 f820 	bl	8007414 <_init>
 80073d4:	1ba4      	subs	r4, r4, r6
 80073d6:	10a4      	asrs	r4, r4, #2
 80073d8:	2500      	movs	r5, #0
 80073da:	42a5      	cmp	r5, r4
 80073dc:	d105      	bne.n	80073ea <__libc_init_array+0x2e>
 80073de:	bd70      	pop	{r4, r5, r6, pc}
 80073e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073e4:	4798      	blx	r3
 80073e6:	3501      	adds	r5, #1
 80073e8:	e7ee      	b.n	80073c8 <__libc_init_array+0xc>
 80073ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073ee:	4798      	blx	r3
 80073f0:	3501      	adds	r5, #1
 80073f2:	e7f2      	b.n	80073da <__libc_init_array+0x1e>
 80073f4:	0800746c 	.word	0x0800746c
 80073f8:	0800746c 	.word	0x0800746c
 80073fc:	0800746c 	.word	0x0800746c
 8007400:	08007470 	.word	0x08007470

08007404 <memset>:
 8007404:	4402      	add	r2, r0
 8007406:	4603      	mov	r3, r0
 8007408:	4293      	cmp	r3, r2
 800740a:	d100      	bne.n	800740e <memset+0xa>
 800740c:	4770      	bx	lr
 800740e:	f803 1b01 	strb.w	r1, [r3], #1
 8007412:	e7f9      	b.n	8007408 <memset+0x4>

08007414 <_init>:
 8007414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007416:	bf00      	nop
 8007418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800741a:	bc08      	pop	{r3}
 800741c:	469e      	mov	lr, r3
 800741e:	4770      	bx	lr

08007420 <_fini>:
 8007420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007422:	bf00      	nop
 8007424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007426:	bc08      	pop	{r3}
 8007428:	469e      	mov	lr, r3
 800742a:	4770      	bx	lr
