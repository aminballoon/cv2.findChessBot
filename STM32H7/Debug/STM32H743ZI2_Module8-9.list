
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008230  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080084c8  080084c8  000184c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008508  08008508  00018508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008510  08008510  00018510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008514  08008514  00018514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08008518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006d8  20000010  08008528  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200006e8  08008528  000206e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022355  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000035bf  00000000  00000000  00042393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001388  00000000  00000000  00045958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001290  00000000  00000000  00046ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000371cd  00000000  00000000  00047f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000183e5  00000000  00000000  0007f13d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016229d  00000000  00000000  00097522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001f97bf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005410  00000000  00000000  001f9814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080084b0 	.word	0x080084b0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	080084b0 	.word	0x080084b0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 ffac 	bl	8001530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f812 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 fb30 	bl	8000c40 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e0:	f000 fb06 	bl	8000bf0 <MX_DMA_Init>
  MX_TIM1_Init();
 80005e4:	f000 f886 	bl	80006f4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80005e8:	f000 f98a 	bl	8000900 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005ec:	f000 fa00 	bl	80009f0 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80005f0:	f000 fa80 	bl	8000af4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80005f4:	f000 f936 	bl	8000864 <MX_TIM2_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f8:	f000 fac8 	bl	8000b8c <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x2c>
	...

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b09c      	sub	sp, #112	; 0x70
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800060a:	224c      	movs	r2, #76	; 0x4c
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f007 ff46 	bl	80084a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2220      	movs	r2, #32
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f007 ff40 	bl	80084a0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000620:	2002      	movs	r0, #2
 8000622:	f003 f92b 	bl	800387c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000626:	2300      	movs	r3, #0
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	4b30      	ldr	r3, [pc, #192]	; (80006ec <SystemClock_Config+0xec>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	4a2f      	ldr	r2, [pc, #188]	; (80006ec <SystemClock_Config+0xec>)
 8000630:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000634:	6193      	str	r3, [r2, #24]
 8000636:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <SystemClock_Config+0xec>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <SystemClock_Config+0xf0>)
 8000642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000644:	4a2a      	ldr	r2, [pc, #168]	; (80006f0 <SystemClock_Config+0xf0>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800064c:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <SystemClock_Config+0xf0>)
 800064e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000650:	f003 0301 	and.w	r3, r3, #1
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000658:	bf00      	nop
 800065a:	4b24      	ldr	r3, [pc, #144]	; (80006ec <SystemClock_Config+0xec>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000666:	d1f8      	bne.n	800065a <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000668:	2301      	movs	r3, #1
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800066c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000670:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000676:	2302      	movs	r3, #2
 8000678:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 800067a:	2303      	movs	r3, #3
 800067c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 800067e:	233c      	movs	r3, #60	; 0x3c
 8000680:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000682:	2302      	movs	r3, #2
 8000684:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000686:	230f      	movs	r3, #15
 8000688:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800068a:	2302      	movs	r3, #2
 800068c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800068e:	230c      	movs	r3, #12
 8000690:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000692:	2300      	movs	r3, #0
 8000694:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069e:	4618      	mov	r0, r3
 80006a0:	f003 f936 	bl	8003910 <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006aa:	f000 fbd7 	bl	8000e5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	233f      	movs	r3, #63	; 0x3f
 80006b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2303      	movs	r3, #3
 80006b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006ba:	2308      	movs	r3, #8
 80006bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006be:	2340      	movs	r3, #64	; 0x40
 80006c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006c2:	2340      	movs	r3, #64	; 0x40
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006cc:	2340      	movs	r3, #64	; 0x40
 80006ce:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2104      	movs	r1, #4
 80006d4:	4618      	mov	r0, r3
 80006d6:	f003 fd2b 	bl	8004130 <HAL_RCC_ClockConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80006e0:	f000 fbbc 	bl	8000e5c <Error_Handler>
  }
}
 80006e4:	bf00      	nop
 80006e6:	3770      	adds	r7, #112	; 0x70
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	58024800 	.word	0x58024800
 80006f0:	58000400 	.word	0x58000400

080006f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b09a      	sub	sp, #104	; 0x68
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000708:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000714:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
 8000724:	615a      	str	r2, [r3, #20]
 8000726:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	222c      	movs	r2, #44	; 0x2c
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f007 feb6 	bl	80084a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000734:	4b49      	ldr	r3, [pc, #292]	; (800085c <MX_TIM1_Init+0x168>)
 8000736:	4a4a      	ldr	r2, [pc, #296]	; (8000860 <MX_TIM1_Init+0x16c>)
 8000738:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800073a:	4b48      	ldr	r3, [pc, #288]	; (800085c <MX_TIM1_Init+0x168>)
 800073c:	2200      	movs	r2, #0
 800073e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000740:	4b46      	ldr	r3, [pc, #280]	; (800085c <MX_TIM1_Init+0x168>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000746:	4b45      	ldr	r3, [pc, #276]	; (800085c <MX_TIM1_Init+0x168>)
 8000748:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800074c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074e:	4b43      	ldr	r3, [pc, #268]	; (800085c <MX_TIM1_Init+0x168>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000754:	4b41      	ldr	r3, [pc, #260]	; (800085c <MX_TIM1_Init+0x168>)
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075a:	4b40      	ldr	r3, [pc, #256]	; (800085c <MX_TIM1_Init+0x168>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000760:	483e      	ldr	r0, [pc, #248]	; (800085c <MX_TIM1_Init+0x168>)
 8000762:	f005 fbd3 	bl	8005f0c <HAL_TIM_Base_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800076c:	f000 fb76 	bl	8000e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000774:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000776:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800077a:	4619      	mov	r1, r3
 800077c:	4837      	ldr	r0, [pc, #220]	; (800085c <MX_TIM1_Init+0x168>)
 800077e:	f005 fd8d 	bl	800629c <HAL_TIM_ConfigClockSource>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000788:	f000 fb68 	bl	8000e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800078c:	4833      	ldr	r0, [pc, #204]	; (800085c <MX_TIM1_Init+0x168>)
 800078e:	f005 fc14 	bl	8005fba <HAL_TIM_PWM_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000798:	f000 fb60 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079c:	2300      	movs	r3, #0
 800079e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007a0:	2300      	movs	r3, #0
 80007a2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007ac:	4619      	mov	r1, r3
 80007ae:	482b      	ldr	r0, [pc, #172]	; (800085c <MX_TIM1_Init+0x168>)
 80007b0:	f006 fa6e 	bl	8006c90 <HAL_TIMEx_MasterConfigSynchronization>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80007ba:	f000 fb4f 	bl	8000e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007be:	2360      	movs	r3, #96	; 0x60
 80007c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c6:	2300      	movs	r3, #0
 80007c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007ca:	2300      	movs	r3, #0
 80007cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007d2:	2300      	movs	r3, #0
 80007d4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007d6:	2300      	movs	r3, #0
 80007d8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007de:	2204      	movs	r2, #4
 80007e0:	4619      	mov	r1, r3
 80007e2:	481e      	ldr	r0, [pc, #120]	; (800085c <MX_TIM1_Init+0x168>)
 80007e4:	f005 fc4a 	bl	800607c <HAL_TIM_PWM_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80007ee:	f000 fb35 	bl	8000e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007f6:	2208      	movs	r2, #8
 80007f8:	4619      	mov	r1, r3
 80007fa:	4818      	ldr	r0, [pc, #96]	; (800085c <MX_TIM1_Init+0x168>)
 80007fc:	f005 fc3e 	bl	800607c <HAL_TIM_PWM_ConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000806:	f000 fb29 	bl	8000e5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800081e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000822:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800082c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	4619      	mov	r1, r3
 800083e:	4807      	ldr	r0, [pc, #28]	; (800085c <MX_TIM1_Init+0x168>)
 8000840:	f006 faae 	bl	8006da0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800084a:	f000 fb07 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800084e:	4803      	ldr	r0, [pc, #12]	; (800085c <MX_TIM1_Init+0x168>)
 8000850:	f000 fb8a 	bl	8000f68 <HAL_TIM_MspPostInit>

}
 8000854:	bf00      	nop
 8000856:	3768      	adds	r7, #104	; 0x68
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	2000064c 	.word	0x2000064c
 8000860:	40010000 	.word	0x40010000

08000864 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086a:	f107 0310 	add.w	r3, r7, #16
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000882:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <MX_TIM2_Init+0x98>)
 8000884:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000888:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <MX_TIM2_Init+0x98>)
 800088c:	2200      	movs	r2, #0
 800088e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000890:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_TIM2_Init+0x98>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <MX_TIM2_Init+0x98>)
 8000898:	f04f 32ff 	mov.w	r2, #4294967295
 800089c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_TIM2_Init+0x98>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_TIM2_Init+0x98>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008aa:	4814      	ldr	r0, [pc, #80]	; (80008fc <MX_TIM2_Init+0x98>)
 80008ac:	f005 fb2e 	bl	8005f0c <HAL_TIM_Base_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008b6:	f000 fad1 	bl	8000e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	4619      	mov	r1, r3
 80008c6:	480d      	ldr	r0, [pc, #52]	; (80008fc <MX_TIM2_Init+0x98>)
 80008c8:	f005 fce8 	bl	800629c <HAL_TIM_ConfigClockSource>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80008d2:	f000 fac3 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	4619      	mov	r1, r3
 80008e2:	4806      	ldr	r0, [pc, #24]	; (80008fc <MX_TIM2_Init+0x98>)
 80008e4:	f006 f9d4 	bl	8006c90 <HAL_TIMEx_MasterConfigSynchronization>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008ee:	f000 fab5 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	3720      	adds	r7, #32
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000698 	.word	0x20000698

08000900 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08e      	sub	sp, #56	; 0x38
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000906:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000920:	463b      	mov	r3, r7
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]
 800092e:	615a      	str	r2, [r3, #20]
 8000930:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000932:	4b2d      	ldr	r3, [pc, #180]	; (80009e8 <MX_TIM3_Init+0xe8>)
 8000934:	4a2d      	ldr	r2, [pc, #180]	; (80009ec <MX_TIM3_Init+0xec>)
 8000936:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000938:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <MX_TIM3_Init+0xe8>)
 800093a:	2200      	movs	r2, #0
 800093c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093e:	4b2a      	ldr	r3, [pc, #168]	; (80009e8 <MX_TIM3_Init+0xe8>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000944:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <MX_TIM3_Init+0xe8>)
 8000946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800094a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094c:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <MX_TIM3_Init+0xe8>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000952:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <MX_TIM3_Init+0xe8>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000958:	4823      	ldr	r0, [pc, #140]	; (80009e8 <MX_TIM3_Init+0xe8>)
 800095a:	f005 fad7 	bl	8005f0c <HAL_TIM_Base_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000964:	f000 fa7a 	bl	8000e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800096e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000972:	4619      	mov	r1, r3
 8000974:	481c      	ldr	r0, [pc, #112]	; (80009e8 <MX_TIM3_Init+0xe8>)
 8000976:	f005 fc91 	bl	800629c <HAL_TIM_ConfigClockSource>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000980:	f000 fa6c 	bl	8000e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000984:	4818      	ldr	r0, [pc, #96]	; (80009e8 <MX_TIM3_Init+0xe8>)
 8000986:	f005 fb18 	bl	8005fba <HAL_TIM_PWM_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000990:	f000 fa64 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4811      	ldr	r0, [pc, #68]	; (80009e8 <MX_TIM3_Init+0xe8>)
 80009a4:	f006 f974 	bl	8006c90 <HAL_TIMEx_MasterConfigSynchronization>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80009ae:	f000 fa55 	bl	8000e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009b2:	2360      	movs	r3, #96	; 0x60
 80009b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009c2:	463b      	mov	r3, r7
 80009c4:	2204      	movs	r2, #4
 80009c6:	4619      	mov	r1, r3
 80009c8:	4807      	ldr	r0, [pc, #28]	; (80009e8 <MX_TIM3_Init+0xe8>)
 80009ca:	f005 fb57 	bl	800607c <HAL_TIM_PWM_ConfigChannel>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80009d4:	f000 fa42 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009d8:	4803      	ldr	r0, [pc, #12]	; (80009e8 <MX_TIM3_Init+0xe8>)
 80009da:	f000 fac5 	bl	8000f68 <HAL_TIM_MspPostInit>

}
 80009de:	bf00      	nop
 80009e0:	3738      	adds	r7, #56	; 0x38
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000600 	.word	0x20000600
 80009ec:	40000400 	.word	0x40000400

080009f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08e      	sub	sp, #56	; 0x38
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a10:	463b      	mov	r3, r7
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]
 8000a1e:	615a      	str	r2, [r3, #20]
 8000a20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a22:	4b32      	ldr	r3, [pc, #200]	; (8000aec <MX_TIM4_Init+0xfc>)
 8000a24:	4a32      	ldr	r2, [pc, #200]	; (8000af0 <MX_TIM4_Init+0x100>)
 8000a26:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a28:	4b30      	ldr	r3, [pc, #192]	; (8000aec <MX_TIM4_Init+0xfc>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2e:	4b2f      	ldr	r3, [pc, #188]	; (8000aec <MX_TIM4_Init+0xfc>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a34:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <MX_TIM4_Init+0xfc>)
 8000a36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a3a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3c:	4b2b      	ldr	r3, [pc, #172]	; (8000aec <MX_TIM4_Init+0xfc>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a42:	4b2a      	ldr	r3, [pc, #168]	; (8000aec <MX_TIM4_Init+0xfc>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a48:	4828      	ldr	r0, [pc, #160]	; (8000aec <MX_TIM4_Init+0xfc>)
 8000a4a:	f005 fa5f 	bl	8005f0c <HAL_TIM_Base_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000a54:	f000 fa02 	bl	8000e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a62:	4619      	mov	r1, r3
 8000a64:	4821      	ldr	r0, [pc, #132]	; (8000aec <MX_TIM4_Init+0xfc>)
 8000a66:	f005 fc19 	bl	800629c <HAL_TIM_ConfigClockSource>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000a70:	f000 f9f4 	bl	8000e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a74:	481d      	ldr	r0, [pc, #116]	; (8000aec <MX_TIM4_Init+0xfc>)
 8000a76:	f005 faa0 	bl	8005fba <HAL_TIM_PWM_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000a80:	f000 f9ec 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	4816      	ldr	r0, [pc, #88]	; (8000aec <MX_TIM4_Init+0xfc>)
 8000a94:	f006 f8fc 	bl	8006c90 <HAL_TIMEx_MasterConfigSynchronization>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000a9e:	f000 f9dd 	bl	8000e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa2:	2360      	movs	r3, #96	; 0x60
 8000aa4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	2204      	movs	r2, #4
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	480c      	ldr	r0, [pc, #48]	; (8000aec <MX_TIM4_Init+0xfc>)
 8000aba:	f005 fadf 	bl	800607c <HAL_TIM_PWM_ConfigChannel>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000ac4:	f000 f9ca 	bl	8000e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ac8:	463b      	mov	r3, r7
 8000aca:	220c      	movs	r2, #12
 8000acc:	4619      	mov	r1, r3
 8000ace:	4807      	ldr	r0, [pc, #28]	; (8000aec <MX_TIM4_Init+0xfc>)
 8000ad0:	f005 fad4 	bl	800607c <HAL_TIM_PWM_ConfigChannel>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000ada:	f000 f9bf 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ade:	4803      	ldr	r0, [pc, #12]	; (8000aec <MX_TIM4_Init+0xfc>)
 8000ae0:	f000 fa42 	bl	8000f68 <HAL_TIM_MspPostInit>

}
 8000ae4:	bf00      	nop
 8000ae6:	3738      	adds	r7, #56	; 0x38
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	2000002c 	.word	0x2000002c
 8000af0:	40000800 	.word	0x40000800

08000af4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000af8:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000afa:	4a23      	ldr	r2, [pc, #140]	; (8000b88 <MX_USART3_UART_Init+0x94>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000afe:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b06:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b0c:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b18:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b2a:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b36:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b3c:	4811      	ldr	r0, [pc, #68]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b3e:	f006 f9ad 	bl	8006e9c <HAL_UART_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b48:	f000 f988 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	480d      	ldr	r0, [pc, #52]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b50:	f007 f8fa 	bl	8007d48 <HAL_UARTEx_SetTxFifoThreshold>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b5a:	f000 f97f 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4808      	ldr	r0, [pc, #32]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b62:	f007 f92f 	bl	8007dc4 <HAL_UARTEx_SetRxFifoThreshold>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b6c:	f000 f976 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b70:	4804      	ldr	r0, [pc, #16]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b72:	f007 f8b0 	bl	8007cd6 <HAL_UARTEx_DisableFifoMode>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b7c:	f000 f96e 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200000f0 	.word	0x200000f0
 8000b88:	40004800 	.word	0x40004800

08000b8c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b92:	4a16      	ldr	r2, [pc, #88]	; (8000bec <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b94:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b98:	2209      	movs	r2, #9
 8000b9a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000baa:	2202      	movs	r2, #2
 8000bac:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bd4:	f002 fd09 	bl	80035ea <HAL_PCD_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000bde:	f000 f93d 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000180 	.word	0x20000180
 8000bec:	40080000 	.word	0x40080000

08000bf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_DMA_Init+0x4c>)
 8000bf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bfc:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <MX_DMA_Init+0x4c>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <MX_DMA_Init+0x4c>)
 8000c08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2100      	movs	r1, #0
 8000c18:	200b      	movs	r0, #11
 8000c1a:	f000 fe26 	bl	800186a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c1e:	200b      	movs	r0, #11
 8000c20:	f000 fe3d 	bl	800189e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2100      	movs	r1, #0
 8000c28:	200c      	movs	r0, #12
 8000c2a:	f000 fe1e 	bl	800186a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c2e:	200c      	movs	r0, #12
 8000c30:	f000 fe35 	bl	800189e <HAL_NVIC_EnableIRQ>

}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	58024400 	.word	0x58024400

08000c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	; 0x30
 8000c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c56:	4b79      	ldr	r3, [pc, #484]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5c:	4a77      	ldr	r2, [pc, #476]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000c5e:	f043 0310 	orr.w	r3, r3, #16
 8000c62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c66:	4b75      	ldr	r3, [pc, #468]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6c:	f003 0310 	and.w	r3, r3, #16
 8000c70:	61bb      	str	r3, [r7, #24]
 8000c72:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c74:	4b71      	ldr	r3, [pc, #452]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7a:	4a70      	ldr	r2, [pc, #448]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000c7c:	f043 0304 	orr.w	r3, r3, #4
 8000c80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c84:	4b6d      	ldr	r3, [pc, #436]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8a:	f003 0304 	and.w	r3, r3, #4
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c92:	4b6a      	ldr	r3, [pc, #424]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c98:	4a68      	ldr	r2, [pc, #416]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca2:	4b66      	ldr	r3, [pc, #408]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb0:	4b62      	ldr	r3, [pc, #392]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb6:	4a61      	ldr	r2, [pc, #388]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc0:	4b5e      	ldr	r3, [pc, #376]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	4b5b      	ldr	r3, [pc, #364]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd4:	4a59      	ldr	r2, [pc, #356]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000cd6:	f043 0302 	orr.w	r3, r3, #2
 8000cda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cde:	4b57      	ldr	r3, [pc, #348]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce4:	f003 0302 	and.w	r3, r3, #2
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cec:	4b53      	ldr	r3, [pc, #332]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf2:	4a52      	ldr	r2, [pc, #328]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000cf4:	f043 0308 	orr.w	r3, r3, #8
 8000cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfc:	4b4f      	ldr	r3, [pc, #316]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d02:	f003 0308 	and.w	r3, r3, #8
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d0a:	4b4c      	ldr	r3, [pc, #304]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d10:	4a4a      	ldr	r2, [pc, #296]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d1a:	4b48      	ldr	r3, [pc, #288]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d24:	603b      	str	r3, [r7, #0]
 8000d26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_5_GPIO_Port, DIR_5_Pin, GPIO_PIN_RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2140      	movs	r1, #64	; 0x40
 8000d2c:	4844      	ldr	r0, [pc, #272]	; (8000e40 <MX_GPIO_Init+0x200>)
 8000d2e:	f002 fc43 	bl	80035b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|DIR_1_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f244 0141 	movw	r1, #16449	; 0x4041
 8000d38:	4842      	ldr	r0, [pc, #264]	; (8000e44 <MX_GPIO_Init+0x204>)
 8000d3a:	f002 fc3d 	bl	80035b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_3_Pin|DIR_2_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f244 2102 	movw	r1, #16898	; 0x4202
 8000d44:	4840      	ldr	r0, [pc, #256]	; (8000e48 <MX_GPIO_Init+0x208>)
 8000d46:	f002 fc37 	bl	80035b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|DIR_4_Pin, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 8000d50:	483e      	ldr	r0, [pc, #248]	; (8000e4c <MX_GPIO_Init+0x20c>)
 8000d52:	f002 fc31 	bl	80035b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LM4_Pin LM3_Pin LM5_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin|LM5_Pin;
 8000d56:	f249 0340 	movw	r3, #36928	; 0x9040
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d64:	f107 031c 	add.w	r3, r7, #28
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4837      	ldr	r0, [pc, #220]	; (8000e48 <MX_GPIO_Init+0x208>)
 8000d6c:	f002 fa74 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	4619      	mov	r1, r3
 8000d84:	4832      	ldr	r0, [pc, #200]	; (8000e50 <MX_GPIO_Init+0x210>)
 8000d86:	f002 fa67 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_5_Pin */
  GPIO_InitStruct.Pin = DIR_5_Pin;
 8000d8a:	2340      	movs	r3, #64	; 0x40
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DIR_5_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4827      	ldr	r0, [pc, #156]	; (8000e40 <MX_GPIO_Init+0x200>)
 8000da2:	f002 fa59 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin DIR_1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|DIR_1_Pin;
 8000da6:	f244 0341 	movw	r3, #16449	; 0x4041
 8000daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4821      	ldr	r0, [pc, #132]	; (8000e44 <MX_GPIO_Init+0x204>)
 8000dc0:	f002 fa4a 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_3_Pin DIR_2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_3_Pin|DIR_2_Pin|LD2_Pin;
 8000dc4:	f244 2302 	movw	r3, #16898	; 0x4202
 8000dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	481a      	ldr	r0, [pc, #104]	; (8000e48 <MX_GPIO_Init+0x208>)
 8000dde:	f002 fa3b 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM1_Pin LM2_Pin */
  GPIO_InitStruct.Pin = LM1_Pin|LM2_Pin;
 8000de2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	4619      	mov	r1, r3
 8000df6:	4813      	ldr	r0, [pc, #76]	; (8000e44 <MX_GPIO_Init+0x204>)
 8000df8:	f002 fa2e 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin DIR_4_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|DIR_4_Pin;
 8000dfc:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	480d      	ldr	r0, [pc, #52]	; (8000e4c <MX_GPIO_Init+0x20c>)
 8000e16:	f002 fa1f 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <MX_GPIO_Init+0x214>)
 8000e20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	480a      	ldr	r0, [pc, #40]	; (8000e58 <MX_GPIO_Init+0x218>)
 8000e2e:	f002 fa13 	bl	8003258 <HAL_GPIO_Init>

}
 8000e32:	bf00      	nop
 8000e34:	3730      	adds	r7, #48	; 0x30
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	58024400 	.word	0x58024400
 8000e40:	58020000 	.word	0x58020000
 8000e44:	58020400 	.word	0x58020400
 8000e48:	58021000 	.word	0x58021000
 8000e4c:	58020c00 	.word	0x58020c00
 8000e50:	58020800 	.word	0x58020800
 8000e54:	11110000 	.word	0x11110000
 8000e58:	58021800 	.word	0x58021800

08000e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <Error_Handler+0x8>
	...

08000e68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_MspInit+0x30>)
 8000e70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e74:	4a08      	ldr	r2, [pc, #32]	; (8000e98 <HAL_MspInit+0x30>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_MspInit+0x30>)
 8000e80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	58024400 	.word	0x58024400

08000e9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b087      	sub	sp, #28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a2b      	ldr	r2, [pc, #172]	; (8000f58 <HAL_TIM_Base_MspInit+0xbc>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d10f      	bne.n	8000ece <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eae:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <HAL_TIM_Base_MspInit+0xc0>)
 8000eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000eb4:	4a29      	ldr	r2, [pc, #164]	; (8000f5c <HAL_TIM_Base_MspInit+0xc0>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000ebe:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <HAL_TIM_Base_MspInit+0xc0>)
 8000ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ecc:	e03d      	b.n	8000f4a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ed6:	d10f      	bne.n	8000ef8 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ed8:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <HAL_TIM_Base_MspInit+0xc0>)
 8000eda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ede:	4a1f      	ldr	r2, [pc, #124]	; (8000f5c <HAL_TIM_Base_MspInit+0xc0>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <HAL_TIM_Base_MspInit+0xc0>)
 8000eea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]
}
 8000ef6:	e028      	b.n	8000f4a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a18      	ldr	r2, [pc, #96]	; (8000f60 <HAL_TIM_Base_MspInit+0xc4>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d10f      	bne.n	8000f22 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <HAL_TIM_Base_MspInit+0xc0>)
 8000f04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f08:	4a14      	ldr	r2, [pc, #80]	; (8000f5c <HAL_TIM_Base_MspInit+0xc0>)
 8000f0a:	f043 0302 	orr.w	r3, r3, #2
 8000f0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_TIM_Base_MspInit+0xc0>)
 8000f14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
}
 8000f20:	e013      	b.n	8000f4a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a0f      	ldr	r2, [pc, #60]	; (8000f64 <HAL_TIM_Base_MspInit+0xc8>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d10e      	bne.n	8000f4a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_TIM_Base_MspInit+0xc0>)
 8000f2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <HAL_TIM_Base_MspInit+0xc0>)
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <HAL_TIM_Base_MspInit+0xc0>)
 8000f3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f42:	f003 0304 	and.w	r3, r3, #4
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
}
 8000f4a:	bf00      	nop
 8000f4c:	371c      	adds	r7, #28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40010000 	.word	0x40010000
 8000f5c:	58024400 	.word	0x58024400
 8000f60:	40000400 	.word	0x40000400
 8000f64:	40000800 	.word	0x40000800

08000f68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08c      	sub	sp, #48	; 0x30
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 031c 	add.w	r3, r7, #28
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a48      	ldr	r2, [pc, #288]	; (80010a8 <HAL_TIM_MspPostInit+0x140>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d120      	bne.n	8000fcc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f8a:	4b48      	ldr	r3, [pc, #288]	; (80010ac <HAL_TIM_MspPostInit+0x144>)
 8000f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f90:	4a46      	ldr	r2, [pc, #280]	; (80010ac <HAL_TIM_MspPostInit+0x144>)
 8000f92:	f043 0310 	orr.w	r3, r3, #16
 8000f96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f9a:	4b44      	ldr	r3, [pc, #272]	; (80010ac <HAL_TIM_MspPostInit+0x144>)
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa0:	f003 0310 	and.w	r3, r3, #16
 8000fa4:	61bb      	str	r3, [r7, #24]
 8000fa6:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PUL_3_Pin|PUL_2_Pin;
 8000fa8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	483a      	ldr	r0, [pc, #232]	; (80010b0 <HAL_TIM_MspPostInit+0x148>)
 8000fc6:	f002 f947 	bl	8003258 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000fca:	e068      	b.n	800109e <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM3)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a38      	ldr	r2, [pc, #224]	; (80010b4 <HAL_TIM_MspPostInit+0x14c>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d11f      	bne.n	8001016 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	4b35      	ldr	r3, [pc, #212]	; (80010ac <HAL_TIM_MspPostInit+0x144>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fdc:	4a33      	ldr	r2, [pc, #204]	; (80010ac <HAL_TIM_MspPostInit+0x144>)
 8000fde:	f043 0302 	orr.w	r3, r3, #2
 8000fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe6:	4b31      	ldr	r3, [pc, #196]	; (80010ac <HAL_TIM_MspPostInit+0x144>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PUL_5_Pin;
 8000ff4:	2320      	movs	r3, #32
 8000ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001004:	2302      	movs	r3, #2
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PUL_5_GPIO_Port, &GPIO_InitStruct);
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4619      	mov	r1, r3
 800100e:	482a      	ldr	r0, [pc, #168]	; (80010b8 <HAL_TIM_MspPostInit+0x150>)
 8001010:	f002 f922 	bl	8003258 <HAL_GPIO_Init>
}
 8001014:	e043      	b.n	800109e <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a28      	ldr	r2, [pc, #160]	; (80010bc <HAL_TIM_MspPostInit+0x154>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d13e      	bne.n	800109e <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001020:	4b22      	ldr	r3, [pc, #136]	; (80010ac <HAL_TIM_MspPostInit+0x144>)
 8001022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001026:	4a21      	ldr	r2, [pc, #132]	; (80010ac <HAL_TIM_MspPostInit+0x144>)
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001030:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <HAL_TIM_MspPostInit+0x144>)
 8001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <HAL_TIM_MspPostInit+0x144>)
 8001040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001044:	4a19      	ldr	r2, [pc, #100]	; (80010ac <HAL_TIM_MspPostInit+0x144>)
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <HAL_TIM_MspPostInit+0x144>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PUL_4_Pin;
 800105c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800106e:	2302      	movs	r3, #2
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PUL_4_GPIO_Port, &GPIO_InitStruct);
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	4619      	mov	r1, r3
 8001078:	4811      	ldr	r0, [pc, #68]	; (80010c0 <HAL_TIM_MspPostInit+0x158>)
 800107a:	f002 f8ed 	bl	8003258 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PUL_1_Pin;
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	2300      	movs	r3, #0
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800108e:	2302      	movs	r3, #2
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PUL_1_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	4619      	mov	r1, r3
 8001098:	4807      	ldr	r0, [pc, #28]	; (80010b8 <HAL_TIM_MspPostInit+0x150>)
 800109a:	f002 f8dd 	bl	8003258 <HAL_GPIO_Init>
}
 800109e:	bf00      	nop
 80010a0:	3730      	adds	r7, #48	; 0x30
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40010000 	.word	0x40010000
 80010ac:	58024400 	.word	0x58024400
 80010b0:	58021000 	.word	0x58021000
 80010b4:	40000400 	.word	0x40000400
 80010b8:	58020400 	.word	0x58020400
 80010bc:	40000800 	.word	0x40000800
 80010c0:	58020c00 	.word	0x58020c00

080010c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b0b8      	sub	sp, #224	; 0xe0
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010dc:	f107 0310 	add.w	r3, r7, #16
 80010e0:	22bc      	movs	r2, #188	; 0xbc
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f007 f9db 	bl	80084a0 <memset>
  if(huart->Instance==USART3)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a52      	ldr	r2, [pc, #328]	; (8001238 <HAL_UART_MspInit+0x174>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	f040 809d 	bne.w	8001230 <HAL_UART_MspInit+0x16c>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010f6:	2302      	movs	r3, #2
 80010f8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	4618      	mov	r0, r3
 8001106:	f003 fb9f 	bl	8004848 <HAL_RCCEx_PeriphCLKConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001110:	f7ff fea4 	bl	8000e5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001114:	4b49      	ldr	r3, [pc, #292]	; (800123c <HAL_UART_MspInit+0x178>)
 8001116:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800111a:	4a48      	ldr	r2, [pc, #288]	; (800123c <HAL_UART_MspInit+0x178>)
 800111c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001120:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001124:	4b45      	ldr	r3, [pc, #276]	; (800123c <HAL_UART_MspInit+0x178>)
 8001126:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800112a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001132:	4b42      	ldr	r3, [pc, #264]	; (800123c <HAL_UART_MspInit+0x178>)
 8001134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001138:	4a40      	ldr	r2, [pc, #256]	; (800123c <HAL_UART_MspInit+0x178>)
 800113a:	f043 0308 	orr.w	r3, r3, #8
 800113e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001142:	4b3e      	ldr	r3, [pc, #248]	; (800123c <HAL_UART_MspInit+0x178>)
 8001144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001148:	f003 0308 	and.w	r3, r3, #8
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001150:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001154:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800116a:	2307      	movs	r3, #7
 800116c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001170:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001174:	4619      	mov	r1, r3
 8001176:	4832      	ldr	r0, [pc, #200]	; (8001240 <HAL_UART_MspInit+0x17c>)
 8001178:	f002 f86e 	bl	8003258 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 800117c:	4b31      	ldr	r3, [pc, #196]	; (8001244 <HAL_UART_MspInit+0x180>)
 800117e:	4a32      	ldr	r2, [pc, #200]	; (8001248 <HAL_UART_MspInit+0x184>)
 8001180:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001182:	4b30      	ldr	r3, [pc, #192]	; (8001244 <HAL_UART_MspInit+0x180>)
 8001184:	222d      	movs	r2, #45	; 0x2d
 8001186:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001188:	4b2e      	ldr	r3, [pc, #184]	; (8001244 <HAL_UART_MspInit+0x180>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800118e:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <HAL_UART_MspInit+0x180>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <HAL_UART_MspInit+0x180>)
 8001196:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800119a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800119c:	4b29      	ldr	r3, [pc, #164]	; (8001244 <HAL_UART_MspInit+0x180>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a2:	4b28      	ldr	r3, [pc, #160]	; (8001244 <HAL_UART_MspInit+0x180>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80011a8:	4b26      	ldr	r3, [pc, #152]	; (8001244 <HAL_UART_MspInit+0x180>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011ae:	4b25      	ldr	r3, [pc, #148]	; (8001244 <HAL_UART_MspInit+0x180>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011b4:	4b23      	ldr	r3, [pc, #140]	; (8001244 <HAL_UART_MspInit+0x180>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80011ba:	4822      	ldr	r0, [pc, #136]	; (8001244 <HAL_UART_MspInit+0x180>)
 80011bc:	f000 fb8a 	bl	80018d4 <HAL_DMA_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 80011c6:	f7ff fe49 	bl	8000e5c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a1d      	ldr	r2, [pc, #116]	; (8001244 <HAL_UART_MspInit+0x180>)
 80011ce:	67da      	str	r2, [r3, #124]	; 0x7c
 80011d0:	4a1c      	ldr	r2, [pc, #112]	; (8001244 <HAL_UART_MspInit+0x180>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80011d6:	4b1d      	ldr	r3, [pc, #116]	; (800124c <HAL_UART_MspInit+0x188>)
 80011d8:	4a1d      	ldr	r2, [pc, #116]	; (8001250 <HAL_UART_MspInit+0x18c>)
 80011da:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80011dc:	4b1b      	ldr	r3, [pc, #108]	; (800124c <HAL_UART_MspInit+0x188>)
 80011de:	222e      	movs	r2, #46	; 0x2e
 80011e0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011e2:	4b1a      	ldr	r3, [pc, #104]	; (800124c <HAL_UART_MspInit+0x188>)
 80011e4:	2240      	movs	r2, #64	; 0x40
 80011e6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011e8:	4b18      	ldr	r3, [pc, #96]	; (800124c <HAL_UART_MspInit+0x188>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <HAL_UART_MspInit+0x188>)
 80011f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011f4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_UART_MspInit+0x188>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <HAL_UART_MspInit+0x188>)
 80011fe:	2200      	movs	r2, #0
 8001200:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_UART_MspInit+0x188>)
 8001204:	2200      	movs	r2, #0
 8001206:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001208:	4b10      	ldr	r3, [pc, #64]	; (800124c <HAL_UART_MspInit+0x188>)
 800120a:	2200      	movs	r2, #0
 800120c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <HAL_UART_MspInit+0x188>)
 8001210:	2200      	movs	r2, #0
 8001212:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <HAL_UART_MspInit+0x188>)
 8001216:	f000 fb5d 	bl	80018d4 <HAL_DMA_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <HAL_UART_MspInit+0x160>
    {
      Error_Handler();
 8001220:	f7ff fe1c 	bl	8000e5c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a09      	ldr	r2, [pc, #36]	; (800124c <HAL_UART_MspInit+0x188>)
 8001228:	679a      	str	r2, [r3, #120]	; 0x78
 800122a:	4a08      	ldr	r2, [pc, #32]	; (800124c <HAL_UART_MspInit+0x188>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001230:	bf00      	nop
 8001232:	37e0      	adds	r7, #224	; 0xe0
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40004800 	.word	0x40004800
 800123c:	58024400 	.word	0x58024400
 8001240:	58020c00 	.word	0x58020c00
 8001244:	20000078 	.word	0x20000078
 8001248:	40020010 	.word	0x40020010
 800124c:	20000588 	.word	0x20000588
 8001250:	40020028 	.word	0x40020028

08001254 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b0b8      	sub	sp, #224	; 0xe0
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	22bc      	movs	r2, #188	; 0xbc
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f007 f913 	bl	80084a0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a2f      	ldr	r2, [pc, #188]	; (800133c <HAL_PCD_MspInit+0xe8>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d156      	bne.n	8001332 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001284:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001288:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800128a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800128e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001292:	f107 0310 	add.w	r3, r7, #16
 8001296:	4618      	mov	r0, r3
 8001298:	f003 fad6 	bl	8004848 <HAL_RCCEx_PeriphCLKConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80012a2:	f7ff fddb 	bl	8000e5c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80012a6:	f002 fb23 	bl	80038f0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	4b25      	ldr	r3, [pc, #148]	; (8001340 <HAL_PCD_MspInit+0xec>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	4a23      	ldr	r2, [pc, #140]	; (8001340 <HAL_PCD_MspInit+0xec>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ba:	4b21      	ldr	r3, [pc, #132]	; (8001340 <HAL_PCD_MspInit+0xec>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80012c8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80012cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80012e2:	230a      	movs	r3, #10
 80012e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012ec:	4619      	mov	r1, r3
 80012ee:	4815      	ldr	r0, [pc, #84]	; (8001344 <HAL_PCD_MspInit+0xf0>)
 80012f0:	f001 ffb2 	bl	8003258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800130c:	4619      	mov	r1, r3
 800130e:	480d      	ldr	r0, [pc, #52]	; (8001344 <HAL_PCD_MspInit+0xf0>)
 8001310:	f001 ffa2 	bl	8003258 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_PCD_MspInit+0xec>)
 8001316:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800131a:	4a09      	ldr	r2, [pc, #36]	; (8001340 <HAL_PCD_MspInit+0xec>)
 800131c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001320:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_PCD_MspInit+0xec>)
 8001326:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800132a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001332:	bf00      	nop
 8001334:	37e0      	adds	r7, #224	; 0xe0
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40080000 	.word	0x40080000
 8001340:	58024400 	.word	0x58024400
 8001344:	58020000 	.word	0x58020000

08001348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800134c:	e7fe      	b.n	800134c <NMI_Handler+0x4>

0800134e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001352:	e7fe      	b.n	8001352 <HardFault_Handler+0x4>

08001354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <MemManage_Handler+0x4>

0800135a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <BusFault_Handler+0x4>

08001360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <UsageFault_Handler+0x4>

08001366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001394:	f000 f93e 	bl	8001614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}

0800139c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <DMA1_Stream0_IRQHandler+0x10>)
 80013a2:	f000 fdf3 	bl	8001f8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000078 	.word	0x20000078

080013b0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <DMA1_Stream1_IRQHandler+0x10>)
 80013b6:	f000 fde9 	bl	8001f8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000588 	.word	0x20000588

080013c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013c8:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <SystemInit+0xec>)
 80013ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ce:	4a38      	ldr	r2, [pc, #224]	; (80014b0 <SystemInit+0xec>)
 80013d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013d8:	4b36      	ldr	r3, [pc, #216]	; (80014b4 <SystemInit+0xf0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 030f 	and.w	r3, r3, #15
 80013e0:	2b06      	cmp	r3, #6
 80013e2:	d807      	bhi.n	80013f4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013e4:	4b33      	ldr	r3, [pc, #204]	; (80014b4 <SystemInit+0xf0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f023 030f 	bic.w	r3, r3, #15
 80013ec:	4a31      	ldr	r2, [pc, #196]	; (80014b4 <SystemInit+0xf0>)
 80013ee:	f043 0307 	orr.w	r3, r3, #7
 80013f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013f4:	4b30      	ldr	r3, [pc, #192]	; (80014b8 <SystemInit+0xf4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a2f      	ldr	r2, [pc, #188]	; (80014b8 <SystemInit+0xf4>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001400:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <SystemInit+0xf4>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001406:	4b2c      	ldr	r3, [pc, #176]	; (80014b8 <SystemInit+0xf4>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	492b      	ldr	r1, [pc, #172]	; (80014b8 <SystemInit+0xf4>)
 800140c:	4b2b      	ldr	r3, [pc, #172]	; (80014bc <SystemInit+0xf8>)
 800140e:	4013      	ands	r3, r2
 8001410:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001412:	4b28      	ldr	r3, [pc, #160]	; (80014b4 <SystemInit+0xf0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d007      	beq.n	800142e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800141e:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <SystemInit+0xf0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f023 030f 	bic.w	r3, r3, #15
 8001426:	4a23      	ldr	r2, [pc, #140]	; (80014b4 <SystemInit+0xf0>)
 8001428:	f043 0307 	orr.w	r3, r3, #7
 800142c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800142e:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <SystemInit+0xf4>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001434:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <SystemInit+0xf4>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800143a:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <SystemInit+0xf4>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001440:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <SystemInit+0xf4>)
 8001442:	4a1f      	ldr	r2, [pc, #124]	; (80014c0 <SystemInit+0xfc>)
 8001444:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001446:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <SystemInit+0xf4>)
 8001448:	4a1e      	ldr	r2, [pc, #120]	; (80014c4 <SystemInit+0x100>)
 800144a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800144c:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <SystemInit+0xf4>)
 800144e:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <SystemInit+0x104>)
 8001450:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001452:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <SystemInit+0xf4>)
 8001454:	2200      	movs	r2, #0
 8001456:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <SystemInit+0xf4>)
 800145a:	4a1b      	ldr	r2, [pc, #108]	; (80014c8 <SystemInit+0x104>)
 800145c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <SystemInit+0xf4>)
 8001460:	2200      	movs	r2, #0
 8001462:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <SystemInit+0xf4>)
 8001466:	4a18      	ldr	r2, [pc, #96]	; (80014c8 <SystemInit+0x104>)
 8001468:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <SystemInit+0xf4>)
 800146c:	2200      	movs	r2, #0
 800146e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <SystemInit+0xf4>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a10      	ldr	r2, [pc, #64]	; (80014b8 <SystemInit+0xf4>)
 8001476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <SystemInit+0xf4>)
 800147e:	2200      	movs	r2, #0
 8001480:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <SystemInit+0x108>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <SystemInit+0x10c>)
 8001488:	4013      	ands	r3, r2
 800148a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800148e:	d202      	bcs.n	8001496 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001490:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <SystemInit+0x110>)
 8001492:	2201      	movs	r2, #1
 8001494:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <SystemInit+0x114>)
 8001498:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800149c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800149e:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <SystemInit+0xec>)
 80014a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014a4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00
 80014b4:	52002000 	.word	0x52002000
 80014b8:	58024400 	.word	0x58024400
 80014bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80014c0:	02020200 	.word	0x02020200
 80014c4:	01ff0000 	.word	0x01ff0000
 80014c8:	01010280 	.word	0x01010280
 80014cc:	5c001000 	.word	0x5c001000
 80014d0:	ffff0000 	.word	0xffff0000
 80014d4:	51008108 	.word	0x51008108
 80014d8:	52004000 	.word	0x52004000

080014dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001514 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014e0:	f7ff ff70 	bl	80013c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e4:	480c      	ldr	r0, [pc, #48]	; (8001518 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014e6:	490d      	ldr	r1, [pc, #52]	; (800151c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ec:	e002      	b.n	80014f4 <LoopCopyDataInit>

080014ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f2:	3304      	adds	r3, #4

080014f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f8:	d3f9      	bcc.n	80014ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014fc:	4c0a      	ldr	r4, [pc, #40]	; (8001528 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001500:	e001      	b.n	8001506 <LoopFillZerobss>

08001502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001504:	3204      	adds	r2, #4

08001506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001508:	d3fb      	bcc.n	8001502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800150a:	f006 ffa5 	bl	8008458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800150e:	f7ff f85f 	bl	80005d0 <main>
  bx  lr
 8001512:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001514:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800151c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001520:	08008518 	.word	0x08008518
  ldr r2, =_sbss
 8001524:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001528:	200006e8 	.word	0x200006e8

0800152c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800152c:	e7fe      	b.n	800152c <ADC3_IRQHandler>
	...

08001530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001536:	2003      	movs	r0, #3
 8001538:	f000 f98c 	bl	8001854 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800153c:	f002 ffae 	bl	800449c <HAL_RCC_GetSysClockFreq>
 8001540:	4602      	mov	r2, r0
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <HAL_Init+0x68>)
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	0a1b      	lsrs	r3, r3, #8
 8001548:	f003 030f 	and.w	r3, r3, #15
 800154c:	4913      	ldr	r1, [pc, #76]	; (800159c <HAL_Init+0x6c>)
 800154e:	5ccb      	ldrb	r3, [r1, r3]
 8001550:	f003 031f 	and.w	r3, r3, #31
 8001554:	fa22 f303 	lsr.w	r3, r2, r3
 8001558:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <HAL_Init+0x68>)
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	4a0e      	ldr	r2, [pc, #56]	; (800159c <HAL_Init+0x6c>)
 8001564:	5cd3      	ldrb	r3, [r2, r3]
 8001566:	f003 031f 	and.w	r3, r3, #31
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	fa22 f303 	lsr.w	r3, r2, r3
 8001570:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <HAL_Init+0x70>)
 8001572:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001574:	4a0b      	ldr	r2, [pc, #44]	; (80015a4 <HAL_Init+0x74>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800157a:	2000      	movs	r0, #0
 800157c:	f000 f814 	bl	80015a8 <HAL_InitTick>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e002      	b.n	8001590 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800158a:	f7ff fc6d 	bl	8000e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	58024400 	.word	0x58024400
 800159c:	080084c8 	.word	0x080084c8
 80015a0:	20000004 	.word	0x20000004
 80015a4:	20000000 	.word	0x20000000

080015a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015b0:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HAL_InitTick+0x60>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e021      	b.n	8001600 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <HAL_InitTick+0x64>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <HAL_InitTick+0x60>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4619      	mov	r1, r3
 80015c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f971 	bl	80018ba <HAL_SYSTICK_Config>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e00e      	b.n	8001600 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b0f      	cmp	r3, #15
 80015e6:	d80a      	bhi.n	80015fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e8:	2200      	movs	r2, #0
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f000 f93b 	bl	800186a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f4:	4a06      	ldr	r2, [pc, #24]	; (8001610 <HAL_InitTick+0x68>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	e000      	b.n	8001600 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	2000000c 	.word	0x2000000c
 800160c:	20000000 	.word	0x20000000
 8001610:	20000008 	.word	0x20000008

08001614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_IncTick+0x20>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	461a      	mov	r2, r3
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_IncTick+0x24>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4413      	add	r3, r2
 8001624:	4a04      	ldr	r2, [pc, #16]	; (8001638 <HAL_IncTick+0x24>)
 8001626:	6013      	str	r3, [r2, #0]
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	2000000c 	.word	0x2000000c
 8001638:	200006e4 	.word	0x200006e4

0800163c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return uwTick;
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <HAL_GetTick+0x14>)
 8001642:	681b      	ldr	r3, [r3, #0]
}
 8001644:	4618      	mov	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	200006e4 	.word	0x200006e4

08001654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800165c:	f7ff ffee 	bl	800163c <HAL_GetTick>
 8001660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800166c:	d005      	beq.n	800167a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <HAL_Delay+0x44>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	461a      	mov	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4413      	add	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800167a:	bf00      	nop
 800167c:	f7ff ffde 	bl	800163c <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	429a      	cmp	r2, r3
 800168a:	d8f7      	bhi.n	800167c <HAL_Delay+0x28>
  {
  }
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	2000000c 	.word	0x2000000c

0800169c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <HAL_GetREVID+0x14>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	0c1b      	lsrs	r3, r3, #16
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	5c001000 	.word	0x5c001000

080016b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <__NVIC_SetPriorityGrouping+0x40>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016d0:	4013      	ands	r3, r2
 80016d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e2:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <__NVIC_SetPriorityGrouping+0x40>)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	60d3      	str	r3, [r2, #12]
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000ed00 	.word	0xe000ed00
 80016f8:	05fa0000 	.word	0x05fa0000

080016fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <__NVIC_GetPriorityGrouping+0x18>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	f003 0307 	and.w	r3, r3, #7
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001726:	2b00      	cmp	r3, #0
 8001728:	db0b      	blt.n	8001742 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800172a:	88fb      	ldrh	r3, [r7, #6]
 800172c:	f003 021f 	and.w	r2, r3, #31
 8001730:	4907      	ldr	r1, [pc, #28]	; (8001750 <__NVIC_EnableIRQ+0x38>)
 8001732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001736:	095b      	lsrs	r3, r3, #5
 8001738:	2001      	movs	r0, #1
 800173a:	fa00 f202 	lsl.w	r2, r0, r2
 800173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000e100 	.word	0xe000e100

08001754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	6039      	str	r1, [r7, #0]
 800175e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001760:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001764:	2b00      	cmp	r3, #0
 8001766:	db0a      	blt.n	800177e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	b2da      	uxtb	r2, r3
 800176c:	490c      	ldr	r1, [pc, #48]	; (80017a0 <__NVIC_SetPriority+0x4c>)
 800176e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001772:	0112      	lsls	r2, r2, #4
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	440b      	add	r3, r1
 8001778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800177c:	e00a      	b.n	8001794 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4908      	ldr	r1, [pc, #32]	; (80017a4 <__NVIC_SetPriority+0x50>)
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	3b04      	subs	r3, #4
 800178c:	0112      	lsls	r2, r2, #4
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	440b      	add	r3, r1
 8001792:	761a      	strb	r2, [r3, #24]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000e100 	.word	0xe000e100
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	; 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f1c3 0307 	rsb	r3, r3, #7
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	bf28      	it	cs
 80017c6:	2304      	movcs	r3, #4
 80017c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3304      	adds	r3, #4
 80017ce:	2b06      	cmp	r3, #6
 80017d0:	d902      	bls.n	80017d8 <NVIC_EncodePriority+0x30>
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3b03      	subs	r3, #3
 80017d6:	e000      	b.n	80017da <NVIC_EncodePriority+0x32>
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	f04f 32ff 	mov.w	r2, #4294967295
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43da      	mvns	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	401a      	ands	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	43d9      	mvns	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	4313      	orrs	r3, r2
         );
}
 8001802:	4618      	mov	r0, r3
 8001804:	3724      	adds	r7, #36	; 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001820:	d301      	bcc.n	8001826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001822:	2301      	movs	r3, #1
 8001824:	e00f      	b.n	8001846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001826:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <SysTick_Config+0x40>)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800182e:	210f      	movs	r1, #15
 8001830:	f04f 30ff 	mov.w	r0, #4294967295
 8001834:	f7ff ff8e 	bl	8001754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <SysTick_Config+0x40>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183e:	4b04      	ldr	r3, [pc, #16]	; (8001850 <SysTick_Config+0x40>)
 8001840:	2207      	movs	r2, #7
 8001842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	e000e010 	.word	0xe000e010

08001854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff ff29 	bl	80016b4 <__NVIC_SetPriorityGrouping>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b086      	sub	sp, #24
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001878:	f7ff ff40 	bl	80016fc <__NVIC_GetPriorityGrouping>
 800187c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	68b9      	ldr	r1, [r7, #8]
 8001882:	6978      	ldr	r0, [r7, #20]
 8001884:	f7ff ff90 	bl	80017a8 <NVIC_EncodePriority>
 8001888:	4602      	mov	r2, r0
 800188a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800188e:	4611      	mov	r1, r2
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff5f 	bl	8001754 <__NVIC_SetPriority>
}
 8001896:	bf00      	nop
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	4603      	mov	r3, r0
 80018a6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff33 	bl	8001718 <__NVIC_EnableIRQ>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ffa4 	bl	8001810 <SysTick_Config>
 80018c8:	4603      	mov	r3, r0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80018dc:	f7ff feae 	bl	800163c <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e316      	b.n	8001f1a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a66      	ldr	r2, [pc, #408]	; (8001a8c <HAL_DMA_Init+0x1b8>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d04a      	beq.n	800198c <HAL_DMA_Init+0xb8>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a65      	ldr	r2, [pc, #404]	; (8001a90 <HAL_DMA_Init+0x1bc>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d045      	beq.n	800198c <HAL_DMA_Init+0xb8>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a63      	ldr	r2, [pc, #396]	; (8001a94 <HAL_DMA_Init+0x1c0>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d040      	beq.n	800198c <HAL_DMA_Init+0xb8>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a62      	ldr	r2, [pc, #392]	; (8001a98 <HAL_DMA_Init+0x1c4>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d03b      	beq.n	800198c <HAL_DMA_Init+0xb8>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a60      	ldr	r2, [pc, #384]	; (8001a9c <HAL_DMA_Init+0x1c8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d036      	beq.n	800198c <HAL_DMA_Init+0xb8>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a5f      	ldr	r2, [pc, #380]	; (8001aa0 <HAL_DMA_Init+0x1cc>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d031      	beq.n	800198c <HAL_DMA_Init+0xb8>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a5d      	ldr	r2, [pc, #372]	; (8001aa4 <HAL_DMA_Init+0x1d0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d02c      	beq.n	800198c <HAL_DMA_Init+0xb8>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a5c      	ldr	r2, [pc, #368]	; (8001aa8 <HAL_DMA_Init+0x1d4>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d027      	beq.n	800198c <HAL_DMA_Init+0xb8>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a5a      	ldr	r2, [pc, #360]	; (8001aac <HAL_DMA_Init+0x1d8>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d022      	beq.n	800198c <HAL_DMA_Init+0xb8>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a59      	ldr	r2, [pc, #356]	; (8001ab0 <HAL_DMA_Init+0x1dc>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d01d      	beq.n	800198c <HAL_DMA_Init+0xb8>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a57      	ldr	r2, [pc, #348]	; (8001ab4 <HAL_DMA_Init+0x1e0>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d018      	beq.n	800198c <HAL_DMA_Init+0xb8>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a56      	ldr	r2, [pc, #344]	; (8001ab8 <HAL_DMA_Init+0x1e4>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d013      	beq.n	800198c <HAL_DMA_Init+0xb8>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a54      	ldr	r2, [pc, #336]	; (8001abc <HAL_DMA_Init+0x1e8>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d00e      	beq.n	800198c <HAL_DMA_Init+0xb8>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a53      	ldr	r2, [pc, #332]	; (8001ac0 <HAL_DMA_Init+0x1ec>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d009      	beq.n	800198c <HAL_DMA_Init+0xb8>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a51      	ldr	r2, [pc, #324]	; (8001ac4 <HAL_DMA_Init+0x1f0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d004      	beq.n	800198c <HAL_DMA_Init+0xb8>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a50      	ldr	r2, [pc, #320]	; (8001ac8 <HAL_DMA_Init+0x1f4>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d101      	bne.n	8001990 <HAL_DMA_Init+0xbc>
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <HAL_DMA_Init+0xbe>
 8001990:	2300      	movs	r3, #0
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 813b 	beq.w	8001c0e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2202      	movs	r2, #2
 80019a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a37      	ldr	r2, [pc, #220]	; (8001a8c <HAL_DMA_Init+0x1b8>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d04a      	beq.n	8001a48 <HAL_DMA_Init+0x174>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a36      	ldr	r2, [pc, #216]	; (8001a90 <HAL_DMA_Init+0x1bc>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d045      	beq.n	8001a48 <HAL_DMA_Init+0x174>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a34      	ldr	r2, [pc, #208]	; (8001a94 <HAL_DMA_Init+0x1c0>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d040      	beq.n	8001a48 <HAL_DMA_Init+0x174>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a33      	ldr	r2, [pc, #204]	; (8001a98 <HAL_DMA_Init+0x1c4>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d03b      	beq.n	8001a48 <HAL_DMA_Init+0x174>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a31      	ldr	r2, [pc, #196]	; (8001a9c <HAL_DMA_Init+0x1c8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d036      	beq.n	8001a48 <HAL_DMA_Init+0x174>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a30      	ldr	r2, [pc, #192]	; (8001aa0 <HAL_DMA_Init+0x1cc>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d031      	beq.n	8001a48 <HAL_DMA_Init+0x174>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a2e      	ldr	r2, [pc, #184]	; (8001aa4 <HAL_DMA_Init+0x1d0>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d02c      	beq.n	8001a48 <HAL_DMA_Init+0x174>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a2d      	ldr	r2, [pc, #180]	; (8001aa8 <HAL_DMA_Init+0x1d4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d027      	beq.n	8001a48 <HAL_DMA_Init+0x174>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a2b      	ldr	r2, [pc, #172]	; (8001aac <HAL_DMA_Init+0x1d8>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d022      	beq.n	8001a48 <HAL_DMA_Init+0x174>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a2a      	ldr	r2, [pc, #168]	; (8001ab0 <HAL_DMA_Init+0x1dc>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d01d      	beq.n	8001a48 <HAL_DMA_Init+0x174>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a28      	ldr	r2, [pc, #160]	; (8001ab4 <HAL_DMA_Init+0x1e0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d018      	beq.n	8001a48 <HAL_DMA_Init+0x174>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a27      	ldr	r2, [pc, #156]	; (8001ab8 <HAL_DMA_Init+0x1e4>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d013      	beq.n	8001a48 <HAL_DMA_Init+0x174>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a25      	ldr	r2, [pc, #148]	; (8001abc <HAL_DMA_Init+0x1e8>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d00e      	beq.n	8001a48 <HAL_DMA_Init+0x174>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a24      	ldr	r2, [pc, #144]	; (8001ac0 <HAL_DMA_Init+0x1ec>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d009      	beq.n	8001a48 <HAL_DMA_Init+0x174>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a22      	ldr	r2, [pc, #136]	; (8001ac4 <HAL_DMA_Init+0x1f0>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d004      	beq.n	8001a48 <HAL_DMA_Init+0x174>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a21      	ldr	r2, [pc, #132]	; (8001ac8 <HAL_DMA_Init+0x1f4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d108      	bne.n	8001a5a <HAL_DMA_Init+0x186>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0201 	bic.w	r2, r2, #1
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	e007      	b.n	8001a6a <HAL_DMA_Init+0x196>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 0201 	bic.w	r2, r2, #1
 8001a68:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a6a:	e02f      	b.n	8001acc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a6c:	f7ff fde6 	bl	800163c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b05      	cmp	r3, #5
 8001a78:	d928      	bls.n	8001acc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2203      	movs	r2, #3
 8001a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e246      	b.n	8001f1a <HAL_DMA_Init+0x646>
 8001a8c:	40020010 	.word	0x40020010
 8001a90:	40020028 	.word	0x40020028
 8001a94:	40020040 	.word	0x40020040
 8001a98:	40020058 	.word	0x40020058
 8001a9c:	40020070 	.word	0x40020070
 8001aa0:	40020088 	.word	0x40020088
 8001aa4:	400200a0 	.word	0x400200a0
 8001aa8:	400200b8 	.word	0x400200b8
 8001aac:	40020410 	.word	0x40020410
 8001ab0:	40020428 	.word	0x40020428
 8001ab4:	40020440 	.word	0x40020440
 8001ab8:	40020458 	.word	0x40020458
 8001abc:	40020470 	.word	0x40020470
 8001ac0:	40020488 	.word	0x40020488
 8001ac4:	400204a0 	.word	0x400204a0
 8001ac8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1c8      	bne.n	8001a6c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	4b83      	ldr	r3, [pc, #524]	; (8001cf4 <HAL_DMA_Init+0x420>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001af2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001afe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b0a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d107      	bne.n	8001b30 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001b30:	4b71      	ldr	r3, [pc, #452]	; (8001cf8 <HAL_DMA_Init+0x424>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b71      	ldr	r3, [pc, #452]	; (8001cfc <HAL_DMA_Init+0x428>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b3c:	d328      	bcc.n	8001b90 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b28      	cmp	r3, #40	; 0x28
 8001b44:	d903      	bls.n	8001b4e <HAL_DMA_Init+0x27a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b2e      	cmp	r3, #46	; 0x2e
 8001b4c:	d917      	bls.n	8001b7e <HAL_DMA_Init+0x2aa>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b3e      	cmp	r3, #62	; 0x3e
 8001b54:	d903      	bls.n	8001b5e <HAL_DMA_Init+0x28a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b42      	cmp	r3, #66	; 0x42
 8001b5c:	d90f      	bls.n	8001b7e <HAL_DMA_Init+0x2aa>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b46      	cmp	r3, #70	; 0x46
 8001b64:	d903      	bls.n	8001b6e <HAL_DMA_Init+0x29a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b48      	cmp	r3, #72	; 0x48
 8001b6c:	d907      	bls.n	8001b7e <HAL_DMA_Init+0x2aa>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b4e      	cmp	r3, #78	; 0x4e
 8001b74:	d905      	bls.n	8001b82 <HAL_DMA_Init+0x2ae>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b52      	cmp	r3, #82	; 0x52
 8001b7c:	d801      	bhi.n	8001b82 <HAL_DMA_Init+0x2ae>
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e000      	b.n	8001b84 <HAL_DMA_Init+0x2b0>
 8001b82:	2300      	movs	r3, #0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b8e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f023 0307 	bic.w	r3, r3, #7
 8001ba6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d117      	bne.n	8001bea <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00e      	beq.n	8001bea <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f001 f9b9 	bl	8002f44 <DMA_CheckFifoParam>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d008      	beq.n	8001bea <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2240      	movs	r2, #64	; 0x40
 8001bdc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e197      	b.n	8001f1a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f001 f8f4 	bl	8002de0 <DMA_CalcBaseAndBitshift>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c00:	f003 031f 	and.w	r3, r3, #31
 8001c04:	223f      	movs	r2, #63	; 0x3f
 8001c06:	409a      	lsls	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	e0cd      	b.n	8001daa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a3b      	ldr	r2, [pc, #236]	; (8001d00 <HAL_DMA_Init+0x42c>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d022      	beq.n	8001c5e <HAL_DMA_Init+0x38a>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a39      	ldr	r2, [pc, #228]	; (8001d04 <HAL_DMA_Init+0x430>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d01d      	beq.n	8001c5e <HAL_DMA_Init+0x38a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a38      	ldr	r2, [pc, #224]	; (8001d08 <HAL_DMA_Init+0x434>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d018      	beq.n	8001c5e <HAL_DMA_Init+0x38a>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a36      	ldr	r2, [pc, #216]	; (8001d0c <HAL_DMA_Init+0x438>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d013      	beq.n	8001c5e <HAL_DMA_Init+0x38a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a35      	ldr	r2, [pc, #212]	; (8001d10 <HAL_DMA_Init+0x43c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d00e      	beq.n	8001c5e <HAL_DMA_Init+0x38a>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a33      	ldr	r2, [pc, #204]	; (8001d14 <HAL_DMA_Init+0x440>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d009      	beq.n	8001c5e <HAL_DMA_Init+0x38a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a32      	ldr	r2, [pc, #200]	; (8001d18 <HAL_DMA_Init+0x444>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d004      	beq.n	8001c5e <HAL_DMA_Init+0x38a>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a30      	ldr	r2, [pc, #192]	; (8001d1c <HAL_DMA_Init+0x448>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d101      	bne.n	8001c62 <HAL_DMA_Init+0x38e>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_DMA_Init+0x390>
 8001c62:	2300      	movs	r3, #0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 8097 	beq.w	8001d98 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a24      	ldr	r2, [pc, #144]	; (8001d00 <HAL_DMA_Init+0x42c>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d021      	beq.n	8001cb8 <HAL_DMA_Init+0x3e4>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a22      	ldr	r2, [pc, #136]	; (8001d04 <HAL_DMA_Init+0x430>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d01c      	beq.n	8001cb8 <HAL_DMA_Init+0x3e4>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a21      	ldr	r2, [pc, #132]	; (8001d08 <HAL_DMA_Init+0x434>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d017      	beq.n	8001cb8 <HAL_DMA_Init+0x3e4>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a1f      	ldr	r2, [pc, #124]	; (8001d0c <HAL_DMA_Init+0x438>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d012      	beq.n	8001cb8 <HAL_DMA_Init+0x3e4>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a1e      	ldr	r2, [pc, #120]	; (8001d10 <HAL_DMA_Init+0x43c>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d00d      	beq.n	8001cb8 <HAL_DMA_Init+0x3e4>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1c      	ldr	r2, [pc, #112]	; (8001d14 <HAL_DMA_Init+0x440>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d008      	beq.n	8001cb8 <HAL_DMA_Init+0x3e4>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a1b      	ldr	r2, [pc, #108]	; (8001d18 <HAL_DMA_Init+0x444>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d003      	beq.n	8001cb8 <HAL_DMA_Init+0x3e4>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a19      	ldr	r2, [pc, #100]	; (8001d1c <HAL_DMA_Init+0x448>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_DMA_Init+0x44c>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b40      	cmp	r3, #64	; 0x40
 8001ce0:	d020      	beq.n	8001d24 <HAL_DMA_Init+0x450>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b80      	cmp	r3, #128	; 0x80
 8001ce8:	d102      	bne.n	8001cf0 <HAL_DMA_Init+0x41c>
 8001cea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cee:	e01a      	b.n	8001d26 <HAL_DMA_Init+0x452>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e018      	b.n	8001d26 <HAL_DMA_Init+0x452>
 8001cf4:	fe10803f 	.word	0xfe10803f
 8001cf8:	5c001000 	.word	0x5c001000
 8001cfc:	ffff0000 	.word	0xffff0000
 8001d00:	58025408 	.word	0x58025408
 8001d04:	5802541c 	.word	0x5802541c
 8001d08:	58025430 	.word	0x58025430
 8001d0c:	58025444 	.word	0x58025444
 8001d10:	58025458 	.word	0x58025458
 8001d14:	5802546c 	.word	0x5802546c
 8001d18:	58025480 	.word	0x58025480
 8001d1c:	58025494 	.word	0x58025494
 8001d20:	fffe000f 	.word	0xfffe000f
 8001d24:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68d2      	ldr	r2, [r2, #12]
 8001d2a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d54:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4b6e      	ldr	r3, [pc, #440]	; (8001f24 <HAL_DMA_Init+0x650>)
 8001d6c:	4413      	add	r3, r2
 8001d6e:	4a6e      	ldr	r2, [pc, #440]	; (8001f28 <HAL_DMA_Init+0x654>)
 8001d70:	fba2 2303 	umull	r2, r3, r2, r3
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	009a      	lsls	r2, r3, #2
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f001 f82f 	bl	8002de0 <DMA_CalcBaseAndBitshift>
 8001d82:	4603      	mov	r3, r0
 8001d84:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8a:	f003 031f 	and.w	r3, r3, #31
 8001d8e:	2201      	movs	r2, #1
 8001d90:	409a      	lsls	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	e008      	b.n	8001daa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2240      	movs	r2, #64	; 0x40
 8001d9c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2203      	movs	r2, #3
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e0b7      	b.n	8001f1a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a5f      	ldr	r2, [pc, #380]	; (8001f2c <HAL_DMA_Init+0x658>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d072      	beq.n	8001e9a <HAL_DMA_Init+0x5c6>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a5d      	ldr	r2, [pc, #372]	; (8001f30 <HAL_DMA_Init+0x65c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d06d      	beq.n	8001e9a <HAL_DMA_Init+0x5c6>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a5c      	ldr	r2, [pc, #368]	; (8001f34 <HAL_DMA_Init+0x660>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d068      	beq.n	8001e9a <HAL_DMA_Init+0x5c6>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a5a      	ldr	r2, [pc, #360]	; (8001f38 <HAL_DMA_Init+0x664>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d063      	beq.n	8001e9a <HAL_DMA_Init+0x5c6>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a59      	ldr	r2, [pc, #356]	; (8001f3c <HAL_DMA_Init+0x668>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d05e      	beq.n	8001e9a <HAL_DMA_Init+0x5c6>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a57      	ldr	r2, [pc, #348]	; (8001f40 <HAL_DMA_Init+0x66c>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d059      	beq.n	8001e9a <HAL_DMA_Init+0x5c6>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a56      	ldr	r2, [pc, #344]	; (8001f44 <HAL_DMA_Init+0x670>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d054      	beq.n	8001e9a <HAL_DMA_Init+0x5c6>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a54      	ldr	r2, [pc, #336]	; (8001f48 <HAL_DMA_Init+0x674>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d04f      	beq.n	8001e9a <HAL_DMA_Init+0x5c6>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a53      	ldr	r2, [pc, #332]	; (8001f4c <HAL_DMA_Init+0x678>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d04a      	beq.n	8001e9a <HAL_DMA_Init+0x5c6>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a51      	ldr	r2, [pc, #324]	; (8001f50 <HAL_DMA_Init+0x67c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d045      	beq.n	8001e9a <HAL_DMA_Init+0x5c6>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a50      	ldr	r2, [pc, #320]	; (8001f54 <HAL_DMA_Init+0x680>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d040      	beq.n	8001e9a <HAL_DMA_Init+0x5c6>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a4e      	ldr	r2, [pc, #312]	; (8001f58 <HAL_DMA_Init+0x684>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d03b      	beq.n	8001e9a <HAL_DMA_Init+0x5c6>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a4d      	ldr	r2, [pc, #308]	; (8001f5c <HAL_DMA_Init+0x688>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d036      	beq.n	8001e9a <HAL_DMA_Init+0x5c6>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a4b      	ldr	r2, [pc, #300]	; (8001f60 <HAL_DMA_Init+0x68c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d031      	beq.n	8001e9a <HAL_DMA_Init+0x5c6>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a4a      	ldr	r2, [pc, #296]	; (8001f64 <HAL_DMA_Init+0x690>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d02c      	beq.n	8001e9a <HAL_DMA_Init+0x5c6>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a48      	ldr	r2, [pc, #288]	; (8001f68 <HAL_DMA_Init+0x694>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d027      	beq.n	8001e9a <HAL_DMA_Init+0x5c6>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a47      	ldr	r2, [pc, #284]	; (8001f6c <HAL_DMA_Init+0x698>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d022      	beq.n	8001e9a <HAL_DMA_Init+0x5c6>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a45      	ldr	r2, [pc, #276]	; (8001f70 <HAL_DMA_Init+0x69c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d01d      	beq.n	8001e9a <HAL_DMA_Init+0x5c6>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a44      	ldr	r2, [pc, #272]	; (8001f74 <HAL_DMA_Init+0x6a0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d018      	beq.n	8001e9a <HAL_DMA_Init+0x5c6>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a42      	ldr	r2, [pc, #264]	; (8001f78 <HAL_DMA_Init+0x6a4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d013      	beq.n	8001e9a <HAL_DMA_Init+0x5c6>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a41      	ldr	r2, [pc, #260]	; (8001f7c <HAL_DMA_Init+0x6a8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d00e      	beq.n	8001e9a <HAL_DMA_Init+0x5c6>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a3f      	ldr	r2, [pc, #252]	; (8001f80 <HAL_DMA_Init+0x6ac>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d009      	beq.n	8001e9a <HAL_DMA_Init+0x5c6>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a3e      	ldr	r2, [pc, #248]	; (8001f84 <HAL_DMA_Init+0x6b0>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d004      	beq.n	8001e9a <HAL_DMA_Init+0x5c6>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a3c      	ldr	r2, [pc, #240]	; (8001f88 <HAL_DMA_Init+0x6b4>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d101      	bne.n	8001e9e <HAL_DMA_Init+0x5ca>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <HAL_DMA_Init+0x5cc>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d032      	beq.n	8001f0a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f001 f8c9 	bl	800303c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b80      	cmp	r3, #128	; 0x80
 8001eb0:	d102      	bne.n	8001eb8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001ecc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d010      	beq.n	8001ef8 <HAL_DMA_Init+0x624>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d80c      	bhi.n	8001ef8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f001 f946 	bl	8003170 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	e008      	b.n	8001f0a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	a7fdabf8 	.word	0xa7fdabf8
 8001f28:	cccccccd 	.word	0xcccccccd
 8001f2c:	40020010 	.word	0x40020010
 8001f30:	40020028 	.word	0x40020028
 8001f34:	40020040 	.word	0x40020040
 8001f38:	40020058 	.word	0x40020058
 8001f3c:	40020070 	.word	0x40020070
 8001f40:	40020088 	.word	0x40020088
 8001f44:	400200a0 	.word	0x400200a0
 8001f48:	400200b8 	.word	0x400200b8
 8001f4c:	40020410 	.word	0x40020410
 8001f50:	40020428 	.word	0x40020428
 8001f54:	40020440 	.word	0x40020440
 8001f58:	40020458 	.word	0x40020458
 8001f5c:	40020470 	.word	0x40020470
 8001f60:	40020488 	.word	0x40020488
 8001f64:	400204a0 	.word	0x400204a0
 8001f68:	400204b8 	.word	0x400204b8
 8001f6c:	58025408 	.word	0x58025408
 8001f70:	5802541c 	.word	0x5802541c
 8001f74:	58025430 	.word	0x58025430
 8001f78:	58025444 	.word	0x58025444
 8001f7c:	58025458 	.word	0x58025458
 8001f80:	5802546c 	.word	0x5802546c
 8001f84:	58025480 	.word	0x58025480
 8001f88:	58025494 	.word	0x58025494

08001f8c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	; 0x28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f98:	4b67      	ldr	r3, [pc, #412]	; (8002138 <HAL_DMA_IRQHandler+0x1ac>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a67      	ldr	r2, [pc, #412]	; (800213c <HAL_DMA_IRQHandler+0x1b0>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	0a9b      	lsrs	r3, r3, #10
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a5f      	ldr	r2, [pc, #380]	; (8002140 <HAL_DMA_IRQHandler+0x1b4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d04a      	beq.n	800205e <HAL_DMA_IRQHandler+0xd2>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a5d      	ldr	r2, [pc, #372]	; (8002144 <HAL_DMA_IRQHandler+0x1b8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d045      	beq.n	800205e <HAL_DMA_IRQHandler+0xd2>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a5c      	ldr	r2, [pc, #368]	; (8002148 <HAL_DMA_IRQHandler+0x1bc>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d040      	beq.n	800205e <HAL_DMA_IRQHandler+0xd2>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a5a      	ldr	r2, [pc, #360]	; (800214c <HAL_DMA_IRQHandler+0x1c0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d03b      	beq.n	800205e <HAL_DMA_IRQHandler+0xd2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a59      	ldr	r2, [pc, #356]	; (8002150 <HAL_DMA_IRQHandler+0x1c4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d036      	beq.n	800205e <HAL_DMA_IRQHandler+0xd2>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a57      	ldr	r2, [pc, #348]	; (8002154 <HAL_DMA_IRQHandler+0x1c8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d031      	beq.n	800205e <HAL_DMA_IRQHandler+0xd2>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a56      	ldr	r2, [pc, #344]	; (8002158 <HAL_DMA_IRQHandler+0x1cc>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d02c      	beq.n	800205e <HAL_DMA_IRQHandler+0xd2>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a54      	ldr	r2, [pc, #336]	; (800215c <HAL_DMA_IRQHandler+0x1d0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d027      	beq.n	800205e <HAL_DMA_IRQHandler+0xd2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a53      	ldr	r2, [pc, #332]	; (8002160 <HAL_DMA_IRQHandler+0x1d4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d022      	beq.n	800205e <HAL_DMA_IRQHandler+0xd2>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a51      	ldr	r2, [pc, #324]	; (8002164 <HAL_DMA_IRQHandler+0x1d8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d01d      	beq.n	800205e <HAL_DMA_IRQHandler+0xd2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a50      	ldr	r2, [pc, #320]	; (8002168 <HAL_DMA_IRQHandler+0x1dc>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d018      	beq.n	800205e <HAL_DMA_IRQHandler+0xd2>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a4e      	ldr	r2, [pc, #312]	; (800216c <HAL_DMA_IRQHandler+0x1e0>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d013      	beq.n	800205e <HAL_DMA_IRQHandler+0xd2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a4d      	ldr	r2, [pc, #308]	; (8002170 <HAL_DMA_IRQHandler+0x1e4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d00e      	beq.n	800205e <HAL_DMA_IRQHandler+0xd2>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a4b      	ldr	r2, [pc, #300]	; (8002174 <HAL_DMA_IRQHandler+0x1e8>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d009      	beq.n	800205e <HAL_DMA_IRQHandler+0xd2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a4a      	ldr	r2, [pc, #296]	; (8002178 <HAL_DMA_IRQHandler+0x1ec>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d004      	beq.n	800205e <HAL_DMA_IRQHandler+0xd2>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a48      	ldr	r2, [pc, #288]	; (800217c <HAL_DMA_IRQHandler+0x1f0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d101      	bne.n	8002062 <HAL_DMA_IRQHandler+0xd6>
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <HAL_DMA_IRQHandler+0xd8>
 8002062:	2300      	movs	r3, #0
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 842b 	beq.w	80028c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	f003 031f 	and.w	r3, r3, #31
 8002072:	2208      	movs	r2, #8
 8002074:	409a      	lsls	r2, r3
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 80a2 	beq.w	80021c4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a2e      	ldr	r2, [pc, #184]	; (8002140 <HAL_DMA_IRQHandler+0x1b4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d04a      	beq.n	8002120 <HAL_DMA_IRQHandler+0x194>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a2d      	ldr	r2, [pc, #180]	; (8002144 <HAL_DMA_IRQHandler+0x1b8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d045      	beq.n	8002120 <HAL_DMA_IRQHandler+0x194>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a2b      	ldr	r2, [pc, #172]	; (8002148 <HAL_DMA_IRQHandler+0x1bc>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d040      	beq.n	8002120 <HAL_DMA_IRQHandler+0x194>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a2a      	ldr	r2, [pc, #168]	; (800214c <HAL_DMA_IRQHandler+0x1c0>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d03b      	beq.n	8002120 <HAL_DMA_IRQHandler+0x194>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a28      	ldr	r2, [pc, #160]	; (8002150 <HAL_DMA_IRQHandler+0x1c4>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d036      	beq.n	8002120 <HAL_DMA_IRQHandler+0x194>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a27      	ldr	r2, [pc, #156]	; (8002154 <HAL_DMA_IRQHandler+0x1c8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d031      	beq.n	8002120 <HAL_DMA_IRQHandler+0x194>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a25      	ldr	r2, [pc, #148]	; (8002158 <HAL_DMA_IRQHandler+0x1cc>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d02c      	beq.n	8002120 <HAL_DMA_IRQHandler+0x194>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a24      	ldr	r2, [pc, #144]	; (800215c <HAL_DMA_IRQHandler+0x1d0>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d027      	beq.n	8002120 <HAL_DMA_IRQHandler+0x194>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a22      	ldr	r2, [pc, #136]	; (8002160 <HAL_DMA_IRQHandler+0x1d4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d022      	beq.n	8002120 <HAL_DMA_IRQHandler+0x194>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a21      	ldr	r2, [pc, #132]	; (8002164 <HAL_DMA_IRQHandler+0x1d8>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d01d      	beq.n	8002120 <HAL_DMA_IRQHandler+0x194>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a1f      	ldr	r2, [pc, #124]	; (8002168 <HAL_DMA_IRQHandler+0x1dc>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d018      	beq.n	8002120 <HAL_DMA_IRQHandler+0x194>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a1e      	ldr	r2, [pc, #120]	; (800216c <HAL_DMA_IRQHandler+0x1e0>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d013      	beq.n	8002120 <HAL_DMA_IRQHandler+0x194>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a1c      	ldr	r2, [pc, #112]	; (8002170 <HAL_DMA_IRQHandler+0x1e4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00e      	beq.n	8002120 <HAL_DMA_IRQHandler+0x194>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a1b      	ldr	r2, [pc, #108]	; (8002174 <HAL_DMA_IRQHandler+0x1e8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d009      	beq.n	8002120 <HAL_DMA_IRQHandler+0x194>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a19      	ldr	r2, [pc, #100]	; (8002178 <HAL_DMA_IRQHandler+0x1ec>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d004      	beq.n	8002120 <HAL_DMA_IRQHandler+0x194>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a18      	ldr	r2, [pc, #96]	; (800217c <HAL_DMA_IRQHandler+0x1f0>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d12f      	bne.n	8002180 <HAL_DMA_IRQHandler+0x1f4>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	2b00      	cmp	r3, #0
 800212c:	bf14      	ite	ne
 800212e:	2301      	movne	r3, #1
 8002130:	2300      	moveq	r3, #0
 8002132:	b2db      	uxtb	r3, r3
 8002134:	e02e      	b.n	8002194 <HAL_DMA_IRQHandler+0x208>
 8002136:	bf00      	nop
 8002138:	20000000 	.word	0x20000000
 800213c:	1b4e81b5 	.word	0x1b4e81b5
 8002140:	40020010 	.word	0x40020010
 8002144:	40020028 	.word	0x40020028
 8002148:	40020040 	.word	0x40020040
 800214c:	40020058 	.word	0x40020058
 8002150:	40020070 	.word	0x40020070
 8002154:	40020088 	.word	0x40020088
 8002158:	400200a0 	.word	0x400200a0
 800215c:	400200b8 	.word	0x400200b8
 8002160:	40020410 	.word	0x40020410
 8002164:	40020428 	.word	0x40020428
 8002168:	40020440 	.word	0x40020440
 800216c:	40020458 	.word	0x40020458
 8002170:	40020470 	.word	0x40020470
 8002174:	40020488 	.word	0x40020488
 8002178:	400204a0 	.word	0x400204a0
 800217c:	400204b8 	.word	0x400204b8
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	bf14      	ite	ne
 800218e:	2301      	movne	r3, #1
 8002190:	2300      	moveq	r3, #0
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d015      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0204 	bic.w	r2, r2, #4
 80021a6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ac:	f003 031f 	and.w	r3, r3, #31
 80021b0:	2208      	movs	r2, #8
 80021b2:	409a      	lsls	r2, r3
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021bc:	f043 0201 	orr.w	r2, r3, #1
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c8:	f003 031f 	and.w	r3, r3, #31
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	fa22 f303 	lsr.w	r3, r2, r3
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d06e      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a69      	ldr	r2, [pc, #420]	; (8002384 <HAL_DMA_IRQHandler+0x3f8>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d04a      	beq.n	800227a <HAL_DMA_IRQHandler+0x2ee>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a67      	ldr	r2, [pc, #412]	; (8002388 <HAL_DMA_IRQHandler+0x3fc>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d045      	beq.n	800227a <HAL_DMA_IRQHandler+0x2ee>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a66      	ldr	r2, [pc, #408]	; (800238c <HAL_DMA_IRQHandler+0x400>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d040      	beq.n	800227a <HAL_DMA_IRQHandler+0x2ee>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a64      	ldr	r2, [pc, #400]	; (8002390 <HAL_DMA_IRQHandler+0x404>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d03b      	beq.n	800227a <HAL_DMA_IRQHandler+0x2ee>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a63      	ldr	r2, [pc, #396]	; (8002394 <HAL_DMA_IRQHandler+0x408>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d036      	beq.n	800227a <HAL_DMA_IRQHandler+0x2ee>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a61      	ldr	r2, [pc, #388]	; (8002398 <HAL_DMA_IRQHandler+0x40c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d031      	beq.n	800227a <HAL_DMA_IRQHandler+0x2ee>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a60      	ldr	r2, [pc, #384]	; (800239c <HAL_DMA_IRQHandler+0x410>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d02c      	beq.n	800227a <HAL_DMA_IRQHandler+0x2ee>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a5e      	ldr	r2, [pc, #376]	; (80023a0 <HAL_DMA_IRQHandler+0x414>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d027      	beq.n	800227a <HAL_DMA_IRQHandler+0x2ee>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a5d      	ldr	r2, [pc, #372]	; (80023a4 <HAL_DMA_IRQHandler+0x418>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d022      	beq.n	800227a <HAL_DMA_IRQHandler+0x2ee>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a5b      	ldr	r2, [pc, #364]	; (80023a8 <HAL_DMA_IRQHandler+0x41c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d01d      	beq.n	800227a <HAL_DMA_IRQHandler+0x2ee>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a5a      	ldr	r2, [pc, #360]	; (80023ac <HAL_DMA_IRQHandler+0x420>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d018      	beq.n	800227a <HAL_DMA_IRQHandler+0x2ee>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a58      	ldr	r2, [pc, #352]	; (80023b0 <HAL_DMA_IRQHandler+0x424>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d013      	beq.n	800227a <HAL_DMA_IRQHandler+0x2ee>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a57      	ldr	r2, [pc, #348]	; (80023b4 <HAL_DMA_IRQHandler+0x428>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d00e      	beq.n	800227a <HAL_DMA_IRQHandler+0x2ee>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a55      	ldr	r2, [pc, #340]	; (80023b8 <HAL_DMA_IRQHandler+0x42c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d009      	beq.n	800227a <HAL_DMA_IRQHandler+0x2ee>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a54      	ldr	r2, [pc, #336]	; (80023bc <HAL_DMA_IRQHandler+0x430>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d004      	beq.n	800227a <HAL_DMA_IRQHandler+0x2ee>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a52      	ldr	r2, [pc, #328]	; (80023c0 <HAL_DMA_IRQHandler+0x434>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d10a      	bne.n	8002290 <HAL_DMA_IRQHandler+0x304>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002284:	2b00      	cmp	r3, #0
 8002286:	bf14      	ite	ne
 8002288:	2301      	movne	r3, #1
 800228a:	2300      	moveq	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	e003      	b.n	8002298 <HAL_DMA_IRQHandler+0x30c>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2300      	movs	r3, #0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00d      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a0:	f003 031f 	and.w	r3, r3, #31
 80022a4:	2201      	movs	r2, #1
 80022a6:	409a      	lsls	r2, r3
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b0:	f043 0202 	orr.w	r2, r3, #2
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022bc:	f003 031f 	and.w	r3, r3, #31
 80022c0:	2204      	movs	r2, #4
 80022c2:	409a      	lsls	r2, r3
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 808f 	beq.w	80023ec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a2c      	ldr	r2, [pc, #176]	; (8002384 <HAL_DMA_IRQHandler+0x3f8>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d04a      	beq.n	800236e <HAL_DMA_IRQHandler+0x3e2>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a2a      	ldr	r2, [pc, #168]	; (8002388 <HAL_DMA_IRQHandler+0x3fc>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d045      	beq.n	800236e <HAL_DMA_IRQHandler+0x3e2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a29      	ldr	r2, [pc, #164]	; (800238c <HAL_DMA_IRQHandler+0x400>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d040      	beq.n	800236e <HAL_DMA_IRQHandler+0x3e2>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a27      	ldr	r2, [pc, #156]	; (8002390 <HAL_DMA_IRQHandler+0x404>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d03b      	beq.n	800236e <HAL_DMA_IRQHandler+0x3e2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a26      	ldr	r2, [pc, #152]	; (8002394 <HAL_DMA_IRQHandler+0x408>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d036      	beq.n	800236e <HAL_DMA_IRQHandler+0x3e2>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a24      	ldr	r2, [pc, #144]	; (8002398 <HAL_DMA_IRQHandler+0x40c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d031      	beq.n	800236e <HAL_DMA_IRQHandler+0x3e2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a23      	ldr	r2, [pc, #140]	; (800239c <HAL_DMA_IRQHandler+0x410>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d02c      	beq.n	800236e <HAL_DMA_IRQHandler+0x3e2>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a21      	ldr	r2, [pc, #132]	; (80023a0 <HAL_DMA_IRQHandler+0x414>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d027      	beq.n	800236e <HAL_DMA_IRQHandler+0x3e2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a20      	ldr	r2, [pc, #128]	; (80023a4 <HAL_DMA_IRQHandler+0x418>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d022      	beq.n	800236e <HAL_DMA_IRQHandler+0x3e2>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a1e      	ldr	r2, [pc, #120]	; (80023a8 <HAL_DMA_IRQHandler+0x41c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d01d      	beq.n	800236e <HAL_DMA_IRQHandler+0x3e2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a1d      	ldr	r2, [pc, #116]	; (80023ac <HAL_DMA_IRQHandler+0x420>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d018      	beq.n	800236e <HAL_DMA_IRQHandler+0x3e2>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a1b      	ldr	r2, [pc, #108]	; (80023b0 <HAL_DMA_IRQHandler+0x424>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d013      	beq.n	800236e <HAL_DMA_IRQHandler+0x3e2>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a1a      	ldr	r2, [pc, #104]	; (80023b4 <HAL_DMA_IRQHandler+0x428>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d00e      	beq.n	800236e <HAL_DMA_IRQHandler+0x3e2>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a18      	ldr	r2, [pc, #96]	; (80023b8 <HAL_DMA_IRQHandler+0x42c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d009      	beq.n	800236e <HAL_DMA_IRQHandler+0x3e2>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a17      	ldr	r2, [pc, #92]	; (80023bc <HAL_DMA_IRQHandler+0x430>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d004      	beq.n	800236e <HAL_DMA_IRQHandler+0x3e2>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a15      	ldr	r2, [pc, #84]	; (80023c0 <HAL_DMA_IRQHandler+0x434>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d12a      	bne.n	80023c4 <HAL_DMA_IRQHandler+0x438>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	bf14      	ite	ne
 800237c:	2301      	movne	r3, #1
 800237e:	2300      	moveq	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	e023      	b.n	80023cc <HAL_DMA_IRQHandler+0x440>
 8002384:	40020010 	.word	0x40020010
 8002388:	40020028 	.word	0x40020028
 800238c:	40020040 	.word	0x40020040
 8002390:	40020058 	.word	0x40020058
 8002394:	40020070 	.word	0x40020070
 8002398:	40020088 	.word	0x40020088
 800239c:	400200a0 	.word	0x400200a0
 80023a0:	400200b8 	.word	0x400200b8
 80023a4:	40020410 	.word	0x40020410
 80023a8:	40020428 	.word	0x40020428
 80023ac:	40020440 	.word	0x40020440
 80023b0:	40020458 	.word	0x40020458
 80023b4:	40020470 	.word	0x40020470
 80023b8:	40020488 	.word	0x40020488
 80023bc:	400204a0 	.word	0x400204a0
 80023c0:	400204b8 	.word	0x400204b8
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2300      	movs	r3, #0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00d      	beq.n	80023ec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d4:	f003 031f 	and.w	r3, r3, #31
 80023d8:	2204      	movs	r2, #4
 80023da:	409a      	lsls	r2, r3
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e4:	f043 0204 	orr.w	r2, r3, #4
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	2210      	movs	r2, #16
 80023f6:	409a      	lsls	r2, r3
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 80a6 	beq.w	800254e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a85      	ldr	r2, [pc, #532]	; (800261c <HAL_DMA_IRQHandler+0x690>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d04a      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x516>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a83      	ldr	r2, [pc, #524]	; (8002620 <HAL_DMA_IRQHandler+0x694>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d045      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x516>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a82      	ldr	r2, [pc, #520]	; (8002624 <HAL_DMA_IRQHandler+0x698>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d040      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x516>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a80      	ldr	r2, [pc, #512]	; (8002628 <HAL_DMA_IRQHandler+0x69c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d03b      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x516>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a7f      	ldr	r2, [pc, #508]	; (800262c <HAL_DMA_IRQHandler+0x6a0>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d036      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x516>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a7d      	ldr	r2, [pc, #500]	; (8002630 <HAL_DMA_IRQHandler+0x6a4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d031      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x516>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a7c      	ldr	r2, [pc, #496]	; (8002634 <HAL_DMA_IRQHandler+0x6a8>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d02c      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x516>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a7a      	ldr	r2, [pc, #488]	; (8002638 <HAL_DMA_IRQHandler+0x6ac>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d027      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x516>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a79      	ldr	r2, [pc, #484]	; (800263c <HAL_DMA_IRQHandler+0x6b0>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d022      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x516>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a77      	ldr	r2, [pc, #476]	; (8002640 <HAL_DMA_IRQHandler+0x6b4>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d01d      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x516>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a76      	ldr	r2, [pc, #472]	; (8002644 <HAL_DMA_IRQHandler+0x6b8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d018      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x516>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a74      	ldr	r2, [pc, #464]	; (8002648 <HAL_DMA_IRQHandler+0x6bc>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d013      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x516>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a73      	ldr	r2, [pc, #460]	; (800264c <HAL_DMA_IRQHandler+0x6c0>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d00e      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x516>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a71      	ldr	r2, [pc, #452]	; (8002650 <HAL_DMA_IRQHandler+0x6c4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d009      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x516>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a70      	ldr	r2, [pc, #448]	; (8002654 <HAL_DMA_IRQHandler+0x6c8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d004      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x516>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a6e      	ldr	r2, [pc, #440]	; (8002658 <HAL_DMA_IRQHandler+0x6cc>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d10a      	bne.n	80024b8 <HAL_DMA_IRQHandler+0x52c>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf14      	ite	ne
 80024b0:	2301      	movne	r3, #1
 80024b2:	2300      	moveq	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	e009      	b.n	80024cc <HAL_DMA_IRQHandler+0x540>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	bf14      	ite	ne
 80024c6:	2301      	movne	r3, #1
 80024c8:	2300      	moveq	r3, #0
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d03e      	beq.n	800254e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	2210      	movs	r2, #16
 80024da:	409a      	lsls	r2, r3
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d018      	beq.n	8002520 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d108      	bne.n	800250e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	2b00      	cmp	r3, #0
 8002502:	d024      	beq.n	800254e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	4798      	blx	r3
 800250c:	e01f      	b.n	800254e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002512:	2b00      	cmp	r3, #0
 8002514:	d01b      	beq.n	800254e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	4798      	blx	r3
 800251e:	e016      	b.n	800254e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252a:	2b00      	cmp	r3, #0
 800252c:	d107      	bne.n	800253e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0208 	bic.w	r2, r2, #8
 800253c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002552:	f003 031f 	and.w	r3, r3, #31
 8002556:	2220      	movs	r2, #32
 8002558:	409a      	lsls	r2, r3
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 8110 	beq.w	8002784 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a2c      	ldr	r2, [pc, #176]	; (800261c <HAL_DMA_IRQHandler+0x690>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d04a      	beq.n	8002604 <HAL_DMA_IRQHandler+0x678>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a2b      	ldr	r2, [pc, #172]	; (8002620 <HAL_DMA_IRQHandler+0x694>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d045      	beq.n	8002604 <HAL_DMA_IRQHandler+0x678>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a29      	ldr	r2, [pc, #164]	; (8002624 <HAL_DMA_IRQHandler+0x698>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d040      	beq.n	8002604 <HAL_DMA_IRQHandler+0x678>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a28      	ldr	r2, [pc, #160]	; (8002628 <HAL_DMA_IRQHandler+0x69c>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d03b      	beq.n	8002604 <HAL_DMA_IRQHandler+0x678>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a26      	ldr	r2, [pc, #152]	; (800262c <HAL_DMA_IRQHandler+0x6a0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d036      	beq.n	8002604 <HAL_DMA_IRQHandler+0x678>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a25      	ldr	r2, [pc, #148]	; (8002630 <HAL_DMA_IRQHandler+0x6a4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d031      	beq.n	8002604 <HAL_DMA_IRQHandler+0x678>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a23      	ldr	r2, [pc, #140]	; (8002634 <HAL_DMA_IRQHandler+0x6a8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d02c      	beq.n	8002604 <HAL_DMA_IRQHandler+0x678>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a22      	ldr	r2, [pc, #136]	; (8002638 <HAL_DMA_IRQHandler+0x6ac>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d027      	beq.n	8002604 <HAL_DMA_IRQHandler+0x678>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a20      	ldr	r2, [pc, #128]	; (800263c <HAL_DMA_IRQHandler+0x6b0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d022      	beq.n	8002604 <HAL_DMA_IRQHandler+0x678>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a1f      	ldr	r2, [pc, #124]	; (8002640 <HAL_DMA_IRQHandler+0x6b4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d01d      	beq.n	8002604 <HAL_DMA_IRQHandler+0x678>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a1d      	ldr	r2, [pc, #116]	; (8002644 <HAL_DMA_IRQHandler+0x6b8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d018      	beq.n	8002604 <HAL_DMA_IRQHandler+0x678>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a1c      	ldr	r2, [pc, #112]	; (8002648 <HAL_DMA_IRQHandler+0x6bc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d013      	beq.n	8002604 <HAL_DMA_IRQHandler+0x678>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a1a      	ldr	r2, [pc, #104]	; (800264c <HAL_DMA_IRQHandler+0x6c0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00e      	beq.n	8002604 <HAL_DMA_IRQHandler+0x678>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a19      	ldr	r2, [pc, #100]	; (8002650 <HAL_DMA_IRQHandler+0x6c4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d009      	beq.n	8002604 <HAL_DMA_IRQHandler+0x678>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a17      	ldr	r2, [pc, #92]	; (8002654 <HAL_DMA_IRQHandler+0x6c8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d004      	beq.n	8002604 <HAL_DMA_IRQHandler+0x678>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a16      	ldr	r2, [pc, #88]	; (8002658 <HAL_DMA_IRQHandler+0x6cc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d12b      	bne.n	800265c <HAL_DMA_IRQHandler+0x6d0>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	2b00      	cmp	r3, #0
 8002610:	bf14      	ite	ne
 8002612:	2301      	movne	r3, #1
 8002614:	2300      	moveq	r3, #0
 8002616:	b2db      	uxtb	r3, r3
 8002618:	e02a      	b.n	8002670 <HAL_DMA_IRQHandler+0x6e4>
 800261a:	bf00      	nop
 800261c:	40020010 	.word	0x40020010
 8002620:	40020028 	.word	0x40020028
 8002624:	40020040 	.word	0x40020040
 8002628:	40020058 	.word	0x40020058
 800262c:	40020070 	.word	0x40020070
 8002630:	40020088 	.word	0x40020088
 8002634:	400200a0 	.word	0x400200a0
 8002638:	400200b8 	.word	0x400200b8
 800263c:	40020410 	.word	0x40020410
 8002640:	40020428 	.word	0x40020428
 8002644:	40020440 	.word	0x40020440
 8002648:	40020458 	.word	0x40020458
 800264c:	40020470 	.word	0x40020470
 8002650:	40020488 	.word	0x40020488
 8002654:	400204a0 	.word	0x400204a0
 8002658:	400204b8 	.word	0x400204b8
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	bf14      	ite	ne
 800266a:	2301      	movne	r3, #1
 800266c:	2300      	moveq	r3, #0
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 8087 	beq.w	8002784 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267a:	f003 031f 	and.w	r3, r3, #31
 800267e:	2220      	movs	r2, #32
 8002680:	409a      	lsls	r2, r3
 8002682:	6a3b      	ldr	r3, [r7, #32]
 8002684:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b04      	cmp	r3, #4
 8002690:	d139      	bne.n	8002706 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0216 	bic.w	r2, r2, #22
 80026a0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026b0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d103      	bne.n	80026c2 <HAL_DMA_IRQHandler+0x736>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d007      	beq.n	80026d2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0208 	bic.w	r2, r2, #8
 80026d0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	223f      	movs	r2, #63	; 0x3f
 80026dc:	409a      	lsls	r2, r3
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 834a 	beq.w	8002d90 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	4798      	blx	r3
          }
          return;
 8002704:	e344      	b.n	8002d90 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d018      	beq.n	8002746 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d108      	bne.n	8002734 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	2b00      	cmp	r3, #0
 8002728:	d02c      	beq.n	8002784 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	4798      	blx	r3
 8002732:	e027      	b.n	8002784 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002738:	2b00      	cmp	r3, #0
 800273a:	d023      	beq.n	8002784 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	4798      	blx	r3
 8002744:	e01e      	b.n	8002784 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10f      	bne.n	8002774 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0210 	bic.w	r2, r2, #16
 8002762:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 8306 	beq.w	8002d9a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 8088 	beq.w	80028ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2204      	movs	r2, #4
 80027a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a7a      	ldr	r2, [pc, #488]	; (8002994 <HAL_DMA_IRQHandler+0xa08>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d04a      	beq.n	8002844 <HAL_DMA_IRQHandler+0x8b8>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a79      	ldr	r2, [pc, #484]	; (8002998 <HAL_DMA_IRQHandler+0xa0c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d045      	beq.n	8002844 <HAL_DMA_IRQHandler+0x8b8>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a77      	ldr	r2, [pc, #476]	; (800299c <HAL_DMA_IRQHandler+0xa10>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d040      	beq.n	8002844 <HAL_DMA_IRQHandler+0x8b8>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a76      	ldr	r2, [pc, #472]	; (80029a0 <HAL_DMA_IRQHandler+0xa14>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d03b      	beq.n	8002844 <HAL_DMA_IRQHandler+0x8b8>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a74      	ldr	r2, [pc, #464]	; (80029a4 <HAL_DMA_IRQHandler+0xa18>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d036      	beq.n	8002844 <HAL_DMA_IRQHandler+0x8b8>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a73      	ldr	r2, [pc, #460]	; (80029a8 <HAL_DMA_IRQHandler+0xa1c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d031      	beq.n	8002844 <HAL_DMA_IRQHandler+0x8b8>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a71      	ldr	r2, [pc, #452]	; (80029ac <HAL_DMA_IRQHandler+0xa20>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d02c      	beq.n	8002844 <HAL_DMA_IRQHandler+0x8b8>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a70      	ldr	r2, [pc, #448]	; (80029b0 <HAL_DMA_IRQHandler+0xa24>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d027      	beq.n	8002844 <HAL_DMA_IRQHandler+0x8b8>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a6e      	ldr	r2, [pc, #440]	; (80029b4 <HAL_DMA_IRQHandler+0xa28>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d022      	beq.n	8002844 <HAL_DMA_IRQHandler+0x8b8>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a6d      	ldr	r2, [pc, #436]	; (80029b8 <HAL_DMA_IRQHandler+0xa2c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d01d      	beq.n	8002844 <HAL_DMA_IRQHandler+0x8b8>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a6b      	ldr	r2, [pc, #428]	; (80029bc <HAL_DMA_IRQHandler+0xa30>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d018      	beq.n	8002844 <HAL_DMA_IRQHandler+0x8b8>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a6a      	ldr	r2, [pc, #424]	; (80029c0 <HAL_DMA_IRQHandler+0xa34>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d013      	beq.n	8002844 <HAL_DMA_IRQHandler+0x8b8>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a68      	ldr	r2, [pc, #416]	; (80029c4 <HAL_DMA_IRQHandler+0xa38>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d00e      	beq.n	8002844 <HAL_DMA_IRQHandler+0x8b8>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a67      	ldr	r2, [pc, #412]	; (80029c8 <HAL_DMA_IRQHandler+0xa3c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d009      	beq.n	8002844 <HAL_DMA_IRQHandler+0x8b8>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a65      	ldr	r2, [pc, #404]	; (80029cc <HAL_DMA_IRQHandler+0xa40>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d004      	beq.n	8002844 <HAL_DMA_IRQHandler+0x8b8>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a64      	ldr	r2, [pc, #400]	; (80029d0 <HAL_DMA_IRQHandler+0xa44>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d108      	bne.n	8002856 <HAL_DMA_IRQHandler+0x8ca>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0201 	bic.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	e007      	b.n	8002866 <HAL_DMA_IRQHandler+0x8da>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0201 	bic.w	r2, r2, #1
 8002864:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	3301      	adds	r3, #1
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286e:	429a      	cmp	r2, r3
 8002870:	d307      	bcc.n	8002882 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1f2      	bne.n	8002866 <HAL_DMA_IRQHandler+0x8da>
 8002880:	e000      	b.n	8002884 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002882:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d004      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2203      	movs	r2, #3
 800289e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80028a2:	e003      	b.n	80028ac <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 8272 	beq.w	8002d9a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	4798      	blx	r3
 80028be:	e26c      	b.n	8002d9a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a43      	ldr	r2, [pc, #268]	; (80029d4 <HAL_DMA_IRQHandler+0xa48>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d022      	beq.n	8002910 <HAL_DMA_IRQHandler+0x984>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a42      	ldr	r2, [pc, #264]	; (80029d8 <HAL_DMA_IRQHandler+0xa4c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d01d      	beq.n	8002910 <HAL_DMA_IRQHandler+0x984>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a40      	ldr	r2, [pc, #256]	; (80029dc <HAL_DMA_IRQHandler+0xa50>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d018      	beq.n	8002910 <HAL_DMA_IRQHandler+0x984>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a3f      	ldr	r2, [pc, #252]	; (80029e0 <HAL_DMA_IRQHandler+0xa54>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d013      	beq.n	8002910 <HAL_DMA_IRQHandler+0x984>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a3d      	ldr	r2, [pc, #244]	; (80029e4 <HAL_DMA_IRQHandler+0xa58>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d00e      	beq.n	8002910 <HAL_DMA_IRQHandler+0x984>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a3c      	ldr	r2, [pc, #240]	; (80029e8 <HAL_DMA_IRQHandler+0xa5c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d009      	beq.n	8002910 <HAL_DMA_IRQHandler+0x984>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a3a      	ldr	r2, [pc, #232]	; (80029ec <HAL_DMA_IRQHandler+0xa60>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d004      	beq.n	8002910 <HAL_DMA_IRQHandler+0x984>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a39      	ldr	r2, [pc, #228]	; (80029f0 <HAL_DMA_IRQHandler+0xa64>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d101      	bne.n	8002914 <HAL_DMA_IRQHandler+0x988>
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <HAL_DMA_IRQHandler+0x98a>
 8002914:	2300      	movs	r3, #0
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 823f 	beq.w	8002d9a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002928:	f003 031f 	and.w	r3, r3, #31
 800292c:	2204      	movs	r2, #4
 800292e:	409a      	lsls	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80cd 	beq.w	8002ad4 <HAL_DMA_IRQHandler+0xb48>
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 80c7 	beq.w	8002ad4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294a:	f003 031f 	and.w	r3, r3, #31
 800294e:	2204      	movs	r2, #4
 8002950:	409a      	lsls	r2, r3
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d049      	beq.n	80029f4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d109      	bne.n	800297e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 8210 	beq.w	8002d94 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800297c:	e20a      	b.n	8002d94 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 8206 	beq.w	8002d94 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002990:	e200      	b.n	8002d94 <HAL_DMA_IRQHandler+0xe08>
 8002992:	bf00      	nop
 8002994:	40020010 	.word	0x40020010
 8002998:	40020028 	.word	0x40020028
 800299c:	40020040 	.word	0x40020040
 80029a0:	40020058 	.word	0x40020058
 80029a4:	40020070 	.word	0x40020070
 80029a8:	40020088 	.word	0x40020088
 80029ac:	400200a0 	.word	0x400200a0
 80029b0:	400200b8 	.word	0x400200b8
 80029b4:	40020410 	.word	0x40020410
 80029b8:	40020428 	.word	0x40020428
 80029bc:	40020440 	.word	0x40020440
 80029c0:	40020458 	.word	0x40020458
 80029c4:	40020470 	.word	0x40020470
 80029c8:	40020488 	.word	0x40020488
 80029cc:	400204a0 	.word	0x400204a0
 80029d0:	400204b8 	.word	0x400204b8
 80029d4:	58025408 	.word	0x58025408
 80029d8:	5802541c 	.word	0x5802541c
 80029dc:	58025430 	.word	0x58025430
 80029e0:	58025444 	.word	0x58025444
 80029e4:	58025458 	.word	0x58025458
 80029e8:	5802546c 	.word	0x5802546c
 80029ec:	58025480 	.word	0x58025480
 80029f0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f003 0320 	and.w	r3, r3, #32
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d160      	bne.n	8002ac0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a8c      	ldr	r2, [pc, #560]	; (8002c34 <HAL_DMA_IRQHandler+0xca8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d04a      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xb12>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a8a      	ldr	r2, [pc, #552]	; (8002c38 <HAL_DMA_IRQHandler+0xcac>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d045      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xb12>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a89      	ldr	r2, [pc, #548]	; (8002c3c <HAL_DMA_IRQHandler+0xcb0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d040      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xb12>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a87      	ldr	r2, [pc, #540]	; (8002c40 <HAL_DMA_IRQHandler+0xcb4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d03b      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xb12>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a86      	ldr	r2, [pc, #536]	; (8002c44 <HAL_DMA_IRQHandler+0xcb8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d036      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xb12>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a84      	ldr	r2, [pc, #528]	; (8002c48 <HAL_DMA_IRQHandler+0xcbc>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d031      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xb12>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a83      	ldr	r2, [pc, #524]	; (8002c4c <HAL_DMA_IRQHandler+0xcc0>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d02c      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xb12>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a81      	ldr	r2, [pc, #516]	; (8002c50 <HAL_DMA_IRQHandler+0xcc4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d027      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xb12>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a80      	ldr	r2, [pc, #512]	; (8002c54 <HAL_DMA_IRQHandler+0xcc8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d022      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xb12>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a7e      	ldr	r2, [pc, #504]	; (8002c58 <HAL_DMA_IRQHandler+0xccc>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d01d      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xb12>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a7d      	ldr	r2, [pc, #500]	; (8002c5c <HAL_DMA_IRQHandler+0xcd0>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d018      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xb12>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a7b      	ldr	r2, [pc, #492]	; (8002c60 <HAL_DMA_IRQHandler+0xcd4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d013      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xb12>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a7a      	ldr	r2, [pc, #488]	; (8002c64 <HAL_DMA_IRQHandler+0xcd8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d00e      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xb12>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a78      	ldr	r2, [pc, #480]	; (8002c68 <HAL_DMA_IRQHandler+0xcdc>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d009      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xb12>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a77      	ldr	r2, [pc, #476]	; (8002c6c <HAL_DMA_IRQHandler+0xce0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d004      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xb12>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a75      	ldr	r2, [pc, #468]	; (8002c70 <HAL_DMA_IRQHandler+0xce4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d108      	bne.n	8002ab0 <HAL_DMA_IRQHandler+0xb24>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0208 	bic.w	r2, r2, #8
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	e007      	b.n	8002ac0 <HAL_DMA_IRQHandler+0xb34>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0204 	bic.w	r2, r2, #4
 8002abe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 8165 	beq.w	8002d94 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ad2:	e15f      	b.n	8002d94 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad8:	f003 031f 	and.w	r3, r3, #31
 8002adc:	2202      	movs	r2, #2
 8002ade:	409a      	lsls	r2, r3
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 80c5 	beq.w	8002c74 <HAL_DMA_IRQHandler+0xce8>
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80bf 	beq.w	8002c74 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afa:	f003 031f 	and.w	r3, r3, #31
 8002afe:	2202      	movs	r2, #2
 8002b00:	409a      	lsls	r2, r3
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d018      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 813a 	beq.w	8002d98 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b2c:	e134      	b.n	8002d98 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 8130 	beq.w	8002d98 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b40:	e12a      	b.n	8002d98 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d168      	bne.n	8002c1e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a38      	ldr	r2, [pc, #224]	; (8002c34 <HAL_DMA_IRQHandler+0xca8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d04a      	beq.n	8002bec <HAL_DMA_IRQHandler+0xc60>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a37      	ldr	r2, [pc, #220]	; (8002c38 <HAL_DMA_IRQHandler+0xcac>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d045      	beq.n	8002bec <HAL_DMA_IRQHandler+0xc60>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a35      	ldr	r2, [pc, #212]	; (8002c3c <HAL_DMA_IRQHandler+0xcb0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d040      	beq.n	8002bec <HAL_DMA_IRQHandler+0xc60>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a34      	ldr	r2, [pc, #208]	; (8002c40 <HAL_DMA_IRQHandler+0xcb4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d03b      	beq.n	8002bec <HAL_DMA_IRQHandler+0xc60>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a32      	ldr	r2, [pc, #200]	; (8002c44 <HAL_DMA_IRQHandler+0xcb8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d036      	beq.n	8002bec <HAL_DMA_IRQHandler+0xc60>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a31      	ldr	r2, [pc, #196]	; (8002c48 <HAL_DMA_IRQHandler+0xcbc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d031      	beq.n	8002bec <HAL_DMA_IRQHandler+0xc60>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a2f      	ldr	r2, [pc, #188]	; (8002c4c <HAL_DMA_IRQHandler+0xcc0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d02c      	beq.n	8002bec <HAL_DMA_IRQHandler+0xc60>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a2e      	ldr	r2, [pc, #184]	; (8002c50 <HAL_DMA_IRQHandler+0xcc4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d027      	beq.n	8002bec <HAL_DMA_IRQHandler+0xc60>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a2c      	ldr	r2, [pc, #176]	; (8002c54 <HAL_DMA_IRQHandler+0xcc8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d022      	beq.n	8002bec <HAL_DMA_IRQHandler+0xc60>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a2b      	ldr	r2, [pc, #172]	; (8002c58 <HAL_DMA_IRQHandler+0xccc>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d01d      	beq.n	8002bec <HAL_DMA_IRQHandler+0xc60>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a29      	ldr	r2, [pc, #164]	; (8002c5c <HAL_DMA_IRQHandler+0xcd0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d018      	beq.n	8002bec <HAL_DMA_IRQHandler+0xc60>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a28      	ldr	r2, [pc, #160]	; (8002c60 <HAL_DMA_IRQHandler+0xcd4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d013      	beq.n	8002bec <HAL_DMA_IRQHandler+0xc60>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a26      	ldr	r2, [pc, #152]	; (8002c64 <HAL_DMA_IRQHandler+0xcd8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00e      	beq.n	8002bec <HAL_DMA_IRQHandler+0xc60>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a25      	ldr	r2, [pc, #148]	; (8002c68 <HAL_DMA_IRQHandler+0xcdc>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d009      	beq.n	8002bec <HAL_DMA_IRQHandler+0xc60>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a23      	ldr	r2, [pc, #140]	; (8002c6c <HAL_DMA_IRQHandler+0xce0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d004      	beq.n	8002bec <HAL_DMA_IRQHandler+0xc60>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a22      	ldr	r2, [pc, #136]	; (8002c70 <HAL_DMA_IRQHandler+0xce4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d108      	bne.n	8002bfe <HAL_DMA_IRQHandler+0xc72>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0214 	bic.w	r2, r2, #20
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e007      	b.n	8002c0e <HAL_DMA_IRQHandler+0xc82>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 020a 	bic.w	r2, r2, #10
 8002c0c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 80b8 	beq.w	8002d98 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c30:	e0b2      	b.n	8002d98 <HAL_DMA_IRQHandler+0xe0c>
 8002c32:	bf00      	nop
 8002c34:	40020010 	.word	0x40020010
 8002c38:	40020028 	.word	0x40020028
 8002c3c:	40020040 	.word	0x40020040
 8002c40:	40020058 	.word	0x40020058
 8002c44:	40020070 	.word	0x40020070
 8002c48:	40020088 	.word	0x40020088
 8002c4c:	400200a0 	.word	0x400200a0
 8002c50:	400200b8 	.word	0x400200b8
 8002c54:	40020410 	.word	0x40020410
 8002c58:	40020428 	.word	0x40020428
 8002c5c:	40020440 	.word	0x40020440
 8002c60:	40020458 	.word	0x40020458
 8002c64:	40020470 	.word	0x40020470
 8002c68:	40020488 	.word	0x40020488
 8002c6c:	400204a0 	.word	0x400204a0
 8002c70:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c78:	f003 031f 	and.w	r3, r3, #31
 8002c7c:	2208      	movs	r2, #8
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	4013      	ands	r3, r2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 8088 	beq.w	8002d9a <HAL_DMA_IRQHandler+0xe0e>
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 8082 	beq.w	8002d9a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a41      	ldr	r2, [pc, #260]	; (8002da0 <HAL_DMA_IRQHandler+0xe14>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d04a      	beq.n	8002d36 <HAL_DMA_IRQHandler+0xdaa>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a3f      	ldr	r2, [pc, #252]	; (8002da4 <HAL_DMA_IRQHandler+0xe18>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d045      	beq.n	8002d36 <HAL_DMA_IRQHandler+0xdaa>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a3e      	ldr	r2, [pc, #248]	; (8002da8 <HAL_DMA_IRQHandler+0xe1c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d040      	beq.n	8002d36 <HAL_DMA_IRQHandler+0xdaa>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a3c      	ldr	r2, [pc, #240]	; (8002dac <HAL_DMA_IRQHandler+0xe20>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d03b      	beq.n	8002d36 <HAL_DMA_IRQHandler+0xdaa>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a3b      	ldr	r2, [pc, #236]	; (8002db0 <HAL_DMA_IRQHandler+0xe24>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d036      	beq.n	8002d36 <HAL_DMA_IRQHandler+0xdaa>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a39      	ldr	r2, [pc, #228]	; (8002db4 <HAL_DMA_IRQHandler+0xe28>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d031      	beq.n	8002d36 <HAL_DMA_IRQHandler+0xdaa>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a38      	ldr	r2, [pc, #224]	; (8002db8 <HAL_DMA_IRQHandler+0xe2c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d02c      	beq.n	8002d36 <HAL_DMA_IRQHandler+0xdaa>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a36      	ldr	r2, [pc, #216]	; (8002dbc <HAL_DMA_IRQHandler+0xe30>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d027      	beq.n	8002d36 <HAL_DMA_IRQHandler+0xdaa>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a35      	ldr	r2, [pc, #212]	; (8002dc0 <HAL_DMA_IRQHandler+0xe34>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d022      	beq.n	8002d36 <HAL_DMA_IRQHandler+0xdaa>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a33      	ldr	r2, [pc, #204]	; (8002dc4 <HAL_DMA_IRQHandler+0xe38>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d01d      	beq.n	8002d36 <HAL_DMA_IRQHandler+0xdaa>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a32      	ldr	r2, [pc, #200]	; (8002dc8 <HAL_DMA_IRQHandler+0xe3c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d018      	beq.n	8002d36 <HAL_DMA_IRQHandler+0xdaa>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a30      	ldr	r2, [pc, #192]	; (8002dcc <HAL_DMA_IRQHandler+0xe40>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d013      	beq.n	8002d36 <HAL_DMA_IRQHandler+0xdaa>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a2f      	ldr	r2, [pc, #188]	; (8002dd0 <HAL_DMA_IRQHandler+0xe44>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d00e      	beq.n	8002d36 <HAL_DMA_IRQHandler+0xdaa>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a2d      	ldr	r2, [pc, #180]	; (8002dd4 <HAL_DMA_IRQHandler+0xe48>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d009      	beq.n	8002d36 <HAL_DMA_IRQHandler+0xdaa>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a2c      	ldr	r2, [pc, #176]	; (8002dd8 <HAL_DMA_IRQHandler+0xe4c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d004      	beq.n	8002d36 <HAL_DMA_IRQHandler+0xdaa>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a2a      	ldr	r2, [pc, #168]	; (8002ddc <HAL_DMA_IRQHandler+0xe50>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d108      	bne.n	8002d48 <HAL_DMA_IRQHandler+0xdbc>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 021c 	bic.w	r2, r2, #28
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	e007      	b.n	8002d58 <HAL_DMA_IRQHandler+0xdcc>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 020e 	bic.w	r2, r2, #14
 8002d56:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5c:	f003 031f 	and.w	r3, r3, #31
 8002d60:	2201      	movs	r2, #1
 8002d62:	409a      	lsls	r2, r3
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d009      	beq.n	8002d9a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	4798      	blx	r3
 8002d8e:	e004      	b.n	8002d9a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002d90:	bf00      	nop
 8002d92:	e002      	b.n	8002d9a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d94:	bf00      	nop
 8002d96:	e000      	b.n	8002d9a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d98:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002d9a:	3728      	adds	r7, #40	; 0x28
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40020010 	.word	0x40020010
 8002da4:	40020028 	.word	0x40020028
 8002da8:	40020040 	.word	0x40020040
 8002dac:	40020058 	.word	0x40020058
 8002db0:	40020070 	.word	0x40020070
 8002db4:	40020088 	.word	0x40020088
 8002db8:	400200a0 	.word	0x400200a0
 8002dbc:	400200b8 	.word	0x400200b8
 8002dc0:	40020410 	.word	0x40020410
 8002dc4:	40020428 	.word	0x40020428
 8002dc8:	40020440 	.word	0x40020440
 8002dcc:	40020458 	.word	0x40020458
 8002dd0:	40020470 	.word	0x40020470
 8002dd4:	40020488 	.word	0x40020488
 8002dd8:	400204a0 	.word	0x400204a0
 8002ddc:	400204b8 	.word	0x400204b8

08002de0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a42      	ldr	r2, [pc, #264]	; (8002ef8 <DMA_CalcBaseAndBitshift+0x118>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d04a      	beq.n	8002e88 <DMA_CalcBaseAndBitshift+0xa8>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a41      	ldr	r2, [pc, #260]	; (8002efc <DMA_CalcBaseAndBitshift+0x11c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d045      	beq.n	8002e88 <DMA_CalcBaseAndBitshift+0xa8>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a3f      	ldr	r2, [pc, #252]	; (8002f00 <DMA_CalcBaseAndBitshift+0x120>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d040      	beq.n	8002e88 <DMA_CalcBaseAndBitshift+0xa8>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a3e      	ldr	r2, [pc, #248]	; (8002f04 <DMA_CalcBaseAndBitshift+0x124>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d03b      	beq.n	8002e88 <DMA_CalcBaseAndBitshift+0xa8>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a3c      	ldr	r2, [pc, #240]	; (8002f08 <DMA_CalcBaseAndBitshift+0x128>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d036      	beq.n	8002e88 <DMA_CalcBaseAndBitshift+0xa8>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a3b      	ldr	r2, [pc, #236]	; (8002f0c <DMA_CalcBaseAndBitshift+0x12c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d031      	beq.n	8002e88 <DMA_CalcBaseAndBitshift+0xa8>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a39      	ldr	r2, [pc, #228]	; (8002f10 <DMA_CalcBaseAndBitshift+0x130>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d02c      	beq.n	8002e88 <DMA_CalcBaseAndBitshift+0xa8>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a38      	ldr	r2, [pc, #224]	; (8002f14 <DMA_CalcBaseAndBitshift+0x134>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d027      	beq.n	8002e88 <DMA_CalcBaseAndBitshift+0xa8>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a36      	ldr	r2, [pc, #216]	; (8002f18 <DMA_CalcBaseAndBitshift+0x138>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d022      	beq.n	8002e88 <DMA_CalcBaseAndBitshift+0xa8>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a35      	ldr	r2, [pc, #212]	; (8002f1c <DMA_CalcBaseAndBitshift+0x13c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d01d      	beq.n	8002e88 <DMA_CalcBaseAndBitshift+0xa8>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a33      	ldr	r2, [pc, #204]	; (8002f20 <DMA_CalcBaseAndBitshift+0x140>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d018      	beq.n	8002e88 <DMA_CalcBaseAndBitshift+0xa8>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a32      	ldr	r2, [pc, #200]	; (8002f24 <DMA_CalcBaseAndBitshift+0x144>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d013      	beq.n	8002e88 <DMA_CalcBaseAndBitshift+0xa8>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a30      	ldr	r2, [pc, #192]	; (8002f28 <DMA_CalcBaseAndBitshift+0x148>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00e      	beq.n	8002e88 <DMA_CalcBaseAndBitshift+0xa8>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a2f      	ldr	r2, [pc, #188]	; (8002f2c <DMA_CalcBaseAndBitshift+0x14c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d009      	beq.n	8002e88 <DMA_CalcBaseAndBitshift+0xa8>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a2d      	ldr	r2, [pc, #180]	; (8002f30 <DMA_CalcBaseAndBitshift+0x150>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d004      	beq.n	8002e88 <DMA_CalcBaseAndBitshift+0xa8>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a2c      	ldr	r2, [pc, #176]	; (8002f34 <DMA_CalcBaseAndBitshift+0x154>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d101      	bne.n	8002e8c <DMA_CalcBaseAndBitshift+0xac>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <DMA_CalcBaseAndBitshift+0xae>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d024      	beq.n	8002edc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	3b10      	subs	r3, #16
 8002e9a:	4a27      	ldr	r2, [pc, #156]	; (8002f38 <DMA_CalcBaseAndBitshift+0x158>)
 8002e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea0:	091b      	lsrs	r3, r3, #4
 8002ea2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	4a24      	ldr	r2, [pc, #144]	; (8002f3c <DMA_CalcBaseAndBitshift+0x15c>)
 8002eac:	5cd3      	ldrb	r3, [r2, r3]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d908      	bls.n	8002ecc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	4b1f      	ldr	r3, [pc, #124]	; (8002f40 <DMA_CalcBaseAndBitshift+0x160>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	1d1a      	adds	r2, r3, #4
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	659a      	str	r2, [r3, #88]	; 0x58
 8002eca:	e00d      	b.n	8002ee8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4b1b      	ldr	r3, [pc, #108]	; (8002f40 <DMA_CalcBaseAndBitshift+0x160>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6593      	str	r3, [r2, #88]	; 0x58
 8002eda:	e005      	b.n	8002ee8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	40020010 	.word	0x40020010
 8002efc:	40020028 	.word	0x40020028
 8002f00:	40020040 	.word	0x40020040
 8002f04:	40020058 	.word	0x40020058
 8002f08:	40020070 	.word	0x40020070
 8002f0c:	40020088 	.word	0x40020088
 8002f10:	400200a0 	.word	0x400200a0
 8002f14:	400200b8 	.word	0x400200b8
 8002f18:	40020410 	.word	0x40020410
 8002f1c:	40020428 	.word	0x40020428
 8002f20:	40020440 	.word	0x40020440
 8002f24:	40020458 	.word	0x40020458
 8002f28:	40020470 	.word	0x40020470
 8002f2c:	40020488 	.word	0x40020488
 8002f30:	400204a0 	.word	0x400204a0
 8002f34:	400204b8 	.word	0x400204b8
 8002f38:	aaaaaaab 	.word	0xaaaaaaab
 8002f3c:	080084d8 	.word	0x080084d8
 8002f40:	fffffc00 	.word	0xfffffc00

08002f44 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d120      	bne.n	8002f9a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d858      	bhi.n	8003012 <DMA_CheckFifoParam+0xce>
 8002f60:	a201      	add	r2, pc, #4	; (adr r2, 8002f68 <DMA_CheckFifoParam+0x24>)
 8002f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f66:	bf00      	nop
 8002f68:	08002f79 	.word	0x08002f79
 8002f6c:	08002f8b 	.word	0x08002f8b
 8002f70:	08002f79 	.word	0x08002f79
 8002f74:	08003013 	.word	0x08003013
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d048      	beq.n	8003016 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f88:	e045      	b.n	8003016 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f92:	d142      	bne.n	800301a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f98:	e03f      	b.n	800301a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fa2:	d123      	bne.n	8002fec <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa8:	2b03      	cmp	r3, #3
 8002faa:	d838      	bhi.n	800301e <DMA_CheckFifoParam+0xda>
 8002fac:	a201      	add	r2, pc, #4	; (adr r2, 8002fb4 <DMA_CheckFifoParam+0x70>)
 8002fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb2:	bf00      	nop
 8002fb4:	08002fc5 	.word	0x08002fc5
 8002fb8:	08002fcb 	.word	0x08002fcb
 8002fbc:	08002fc5 	.word	0x08002fc5
 8002fc0:	08002fdd 	.word	0x08002fdd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	73fb      	strb	r3, [r7, #15]
        break;
 8002fc8:	e030      	b.n	800302c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d025      	beq.n	8003022 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002fda:	e022      	b.n	8003022 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fe4:	d11f      	bne.n	8003026 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002fea:	e01c      	b.n	8003026 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d902      	bls.n	8002ffa <DMA_CheckFifoParam+0xb6>
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	d003      	beq.n	8003000 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002ff8:	e018      	b.n	800302c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	73fb      	strb	r3, [r7, #15]
        break;
 8002ffe:	e015      	b.n	800302c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00e      	beq.n	800302a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	73fb      	strb	r3, [r7, #15]
    break;
 8003010:	e00b      	b.n	800302a <DMA_CheckFifoParam+0xe6>
        break;
 8003012:	bf00      	nop
 8003014:	e00a      	b.n	800302c <DMA_CheckFifoParam+0xe8>
        break;
 8003016:	bf00      	nop
 8003018:	e008      	b.n	800302c <DMA_CheckFifoParam+0xe8>
        break;
 800301a:	bf00      	nop
 800301c:	e006      	b.n	800302c <DMA_CheckFifoParam+0xe8>
        break;
 800301e:	bf00      	nop
 8003020:	e004      	b.n	800302c <DMA_CheckFifoParam+0xe8>
        break;
 8003022:	bf00      	nop
 8003024:	e002      	b.n	800302c <DMA_CheckFifoParam+0xe8>
        break;
 8003026:	bf00      	nop
 8003028:	e000      	b.n	800302c <DMA_CheckFifoParam+0xe8>
    break;
 800302a:	bf00      	nop
    }
  }

  return status;
 800302c:	7bfb      	ldrb	r3, [r7, #15]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop

0800303c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a38      	ldr	r2, [pc, #224]	; (8003130 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d022      	beq.n	800309a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a36      	ldr	r2, [pc, #216]	; (8003134 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d01d      	beq.n	800309a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a35      	ldr	r2, [pc, #212]	; (8003138 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d018      	beq.n	800309a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a33      	ldr	r2, [pc, #204]	; (800313c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d013      	beq.n	800309a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a32      	ldr	r2, [pc, #200]	; (8003140 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00e      	beq.n	800309a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a30      	ldr	r2, [pc, #192]	; (8003144 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d009      	beq.n	800309a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a2f      	ldr	r2, [pc, #188]	; (8003148 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d004      	beq.n	800309a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a2d      	ldr	r2, [pc, #180]	; (800314c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d101      	bne.n	800309e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800309e:	2300      	movs	r3, #0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d01a      	beq.n	80030da <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	3b08      	subs	r3, #8
 80030ac:	4a28      	ldr	r2, [pc, #160]	; (8003150 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80030ae:	fba2 2303 	umull	r2, r3, r2, r3
 80030b2:	091b      	lsrs	r3, r3, #4
 80030b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4b26      	ldr	r3, [pc, #152]	; (8003154 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	461a      	mov	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a24      	ldr	r2, [pc, #144]	; (8003158 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80030c8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f003 031f 	and.w	r3, r3, #31
 80030d0:	2201      	movs	r2, #1
 80030d2:	409a      	lsls	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80030d8:	e024      	b.n	8003124 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	3b10      	subs	r3, #16
 80030e2:	4a1e      	ldr	r2, [pc, #120]	; (800315c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80030e4:	fba2 2303 	umull	r2, r3, r2, r3
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	4a1c      	ldr	r2, [pc, #112]	; (8003160 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d806      	bhi.n	8003102 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4a1b      	ldr	r2, [pc, #108]	; (8003164 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d902      	bls.n	8003102 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	3308      	adds	r3, #8
 8003100:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	4b18      	ldr	r3, [pc, #96]	; (8003168 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003106:	4413      	add	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	461a      	mov	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a16      	ldr	r2, [pc, #88]	; (800316c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003114:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f003 031f 	and.w	r3, r3, #31
 800311c:	2201      	movs	r2, #1
 800311e:	409a      	lsls	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003124:	bf00      	nop
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	58025408 	.word	0x58025408
 8003134:	5802541c 	.word	0x5802541c
 8003138:	58025430 	.word	0x58025430
 800313c:	58025444 	.word	0x58025444
 8003140:	58025458 	.word	0x58025458
 8003144:	5802546c 	.word	0x5802546c
 8003148:	58025480 	.word	0x58025480
 800314c:	58025494 	.word	0x58025494
 8003150:	cccccccd 	.word	0xcccccccd
 8003154:	16009600 	.word	0x16009600
 8003158:	58025880 	.word	0x58025880
 800315c:	aaaaaaab 	.word	0xaaaaaaab
 8003160:	400204b8 	.word	0x400204b8
 8003164:	4002040f 	.word	0x4002040f
 8003168:	10008200 	.word	0x10008200
 800316c:	40020880 	.word	0x40020880

08003170 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d04a      	beq.n	800321c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2b08      	cmp	r3, #8
 800318a:	d847      	bhi.n	800321c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a25      	ldr	r2, [pc, #148]	; (8003228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d022      	beq.n	80031dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a24      	ldr	r2, [pc, #144]	; (800322c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d01d      	beq.n	80031dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a22      	ldr	r2, [pc, #136]	; (8003230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d018      	beq.n	80031dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a21      	ldr	r2, [pc, #132]	; (8003234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d013      	beq.n	80031dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a1f      	ldr	r2, [pc, #124]	; (8003238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d00e      	beq.n	80031dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a1e      	ldr	r2, [pc, #120]	; (800323c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d009      	beq.n	80031dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a1c      	ldr	r2, [pc, #112]	; (8003240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d004      	beq.n	80031dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a1b      	ldr	r2, [pc, #108]	; (8003244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d101      	bne.n	80031e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80031e0:	2300      	movs	r3, #0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4b17      	ldr	r3, [pc, #92]	; (8003248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	461a      	mov	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a15      	ldr	r2, [pc, #84]	; (800324c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80031f8:	671a      	str	r2, [r3, #112]	; 0x70
 80031fa:	e009      	b.n	8003210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4b14      	ldr	r3, [pc, #80]	; (8003250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	461a      	mov	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a11      	ldr	r2, [pc, #68]	; (8003254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800320e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	3b01      	subs	r3, #1
 8003214:	2201      	movs	r2, #1
 8003216:	409a      	lsls	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	58025408 	.word	0x58025408
 800322c:	5802541c 	.word	0x5802541c
 8003230:	58025430 	.word	0x58025430
 8003234:	58025444 	.word	0x58025444
 8003238:	58025458 	.word	0x58025458
 800323c:	5802546c 	.word	0x5802546c
 8003240:	58025480 	.word	0x58025480
 8003244:	58025494 	.word	0x58025494
 8003248:	1600963f 	.word	0x1600963f
 800324c:	58025940 	.word	0x58025940
 8003250:	1000823f 	.word	0x1000823f
 8003254:	40020940 	.word	0x40020940

08003258 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003258:	b480      	push	{r7}
 800325a:	b089      	sub	sp, #36	; 0x24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003262:	2300      	movs	r3, #0
 8003264:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003266:	4b89      	ldr	r3, [pc, #548]	; (800348c <HAL_GPIO_Init+0x234>)
 8003268:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800326a:	e194      	b.n	8003596 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	2101      	movs	r1, #1
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	fa01 f303 	lsl.w	r3, r1, r3
 8003278:	4013      	ands	r3, r2
 800327a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 8186 	beq.w	8003590 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d00b      	beq.n	80032a4 <HAL_GPIO_Init+0x4c>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b02      	cmp	r3, #2
 8003292:	d007      	beq.n	80032a4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003298:	2b11      	cmp	r3, #17
 800329a:	d003      	beq.n	80032a4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b12      	cmp	r3, #18
 80032a2:	d130      	bne.n	8003306 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	2203      	movs	r2, #3
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032da:	2201      	movs	r2, #1
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43db      	mvns	r3, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4013      	ands	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	091b      	lsrs	r3, r3, #4
 80032f0:	f003 0201 	and.w	r2, r3, #1
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	2203      	movs	r2, #3
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4013      	ands	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	689a      	ldr	r2, [r3, #8]
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d003      	beq.n	8003346 <HAL_GPIO_Init+0xee>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b12      	cmp	r3, #18
 8003344:	d123      	bne.n	800338e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	08da      	lsrs	r2, r3, #3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3208      	adds	r2, #8
 800334e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003352:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	220f      	movs	r2, #15
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4013      	ands	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	691a      	ldr	r2, [r3, #16]
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4313      	orrs	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	08da      	lsrs	r2, r3, #3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3208      	adds	r2, #8
 8003388:	69b9      	ldr	r1, [r7, #24]
 800338a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	2203      	movs	r2, #3
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43db      	mvns	r3, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4013      	ands	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 0203 	and.w	r2, r3, #3
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 80e0 	beq.w	8003590 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033d0:	4b2f      	ldr	r3, [pc, #188]	; (8003490 <HAL_GPIO_Init+0x238>)
 80033d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033d6:	4a2e      	ldr	r2, [pc, #184]	; (8003490 <HAL_GPIO_Init+0x238>)
 80033d8:	f043 0302 	orr.w	r3, r3, #2
 80033dc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80033e0:	4b2b      	ldr	r3, [pc, #172]	; (8003490 <HAL_GPIO_Init+0x238>)
 80033e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033ee:	4a29      	ldr	r2, [pc, #164]	; (8003494 <HAL_GPIO_Init+0x23c>)
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	089b      	lsrs	r3, r3, #2
 80033f4:	3302      	adds	r3, #2
 80033f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	220f      	movs	r2, #15
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43db      	mvns	r3, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4013      	ands	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a20      	ldr	r2, [pc, #128]	; (8003498 <HAL_GPIO_Init+0x240>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d052      	beq.n	80034c0 <HAL_GPIO_Init+0x268>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a1f      	ldr	r2, [pc, #124]	; (800349c <HAL_GPIO_Init+0x244>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d031      	beq.n	8003486 <HAL_GPIO_Init+0x22e>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a1e      	ldr	r2, [pc, #120]	; (80034a0 <HAL_GPIO_Init+0x248>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d02b      	beq.n	8003482 <HAL_GPIO_Init+0x22a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a1d      	ldr	r2, [pc, #116]	; (80034a4 <HAL_GPIO_Init+0x24c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d025      	beq.n	800347e <HAL_GPIO_Init+0x226>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a1c      	ldr	r2, [pc, #112]	; (80034a8 <HAL_GPIO_Init+0x250>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d01f      	beq.n	800347a <HAL_GPIO_Init+0x222>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a1b      	ldr	r2, [pc, #108]	; (80034ac <HAL_GPIO_Init+0x254>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d019      	beq.n	8003476 <HAL_GPIO_Init+0x21e>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a1a      	ldr	r2, [pc, #104]	; (80034b0 <HAL_GPIO_Init+0x258>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d013      	beq.n	8003472 <HAL_GPIO_Init+0x21a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a19      	ldr	r2, [pc, #100]	; (80034b4 <HAL_GPIO_Init+0x25c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00d      	beq.n	800346e <HAL_GPIO_Init+0x216>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a18      	ldr	r2, [pc, #96]	; (80034b8 <HAL_GPIO_Init+0x260>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d007      	beq.n	800346a <HAL_GPIO_Init+0x212>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a17      	ldr	r2, [pc, #92]	; (80034bc <HAL_GPIO_Init+0x264>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d101      	bne.n	8003466 <HAL_GPIO_Init+0x20e>
 8003462:	2309      	movs	r3, #9
 8003464:	e02d      	b.n	80034c2 <HAL_GPIO_Init+0x26a>
 8003466:	230a      	movs	r3, #10
 8003468:	e02b      	b.n	80034c2 <HAL_GPIO_Init+0x26a>
 800346a:	2308      	movs	r3, #8
 800346c:	e029      	b.n	80034c2 <HAL_GPIO_Init+0x26a>
 800346e:	2307      	movs	r3, #7
 8003470:	e027      	b.n	80034c2 <HAL_GPIO_Init+0x26a>
 8003472:	2306      	movs	r3, #6
 8003474:	e025      	b.n	80034c2 <HAL_GPIO_Init+0x26a>
 8003476:	2305      	movs	r3, #5
 8003478:	e023      	b.n	80034c2 <HAL_GPIO_Init+0x26a>
 800347a:	2304      	movs	r3, #4
 800347c:	e021      	b.n	80034c2 <HAL_GPIO_Init+0x26a>
 800347e:	2303      	movs	r3, #3
 8003480:	e01f      	b.n	80034c2 <HAL_GPIO_Init+0x26a>
 8003482:	2302      	movs	r3, #2
 8003484:	e01d      	b.n	80034c2 <HAL_GPIO_Init+0x26a>
 8003486:	2301      	movs	r3, #1
 8003488:	e01b      	b.n	80034c2 <HAL_GPIO_Init+0x26a>
 800348a:	bf00      	nop
 800348c:	58000080 	.word	0x58000080
 8003490:	58024400 	.word	0x58024400
 8003494:	58000400 	.word	0x58000400
 8003498:	58020000 	.word	0x58020000
 800349c:	58020400 	.word	0x58020400
 80034a0:	58020800 	.word	0x58020800
 80034a4:	58020c00 	.word	0x58020c00
 80034a8:	58021000 	.word	0x58021000
 80034ac:	58021400 	.word	0x58021400
 80034b0:	58021800 	.word	0x58021800
 80034b4:	58021c00 	.word	0x58021c00
 80034b8:	58022000 	.word	0x58022000
 80034bc:	58022400 	.word	0x58022400
 80034c0:	2300      	movs	r3, #0
 80034c2:	69fa      	ldr	r2, [r7, #28]
 80034c4:	f002 0203 	and.w	r2, r2, #3
 80034c8:	0092      	lsls	r2, r2, #2
 80034ca:	4093      	lsls	r3, r2
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034d2:	4938      	ldr	r1, [pc, #224]	; (80035b4 <HAL_GPIO_Init+0x35c>)
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	089b      	lsrs	r3, r3, #2
 80034d8:	3302      	adds	r3, #2
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	43db      	mvns	r3, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4013      	ands	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	43db      	mvns	r3, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4013      	ands	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	43db      	mvns	r3, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4013      	ands	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800355a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	43db      	mvns	r3, r3
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4013      	ands	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003588:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	3301      	adds	r3, #1
 8003594:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	fa22 f303 	lsr.w	r3, r2, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f47f ae63 	bne.w	800326c <HAL_GPIO_Init+0x14>
  }
}
 80035a6:	bf00      	nop
 80035a8:	bf00      	nop
 80035aa:	3724      	adds	r7, #36	; 0x24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	58000400 	.word	0x58000400

080035b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	807b      	strh	r3, [r7, #2]
 80035c4:	4613      	mov	r3, r2
 80035c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035c8:	787b      	ldrb	r3, [r7, #1]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035ce:	887a      	ldrh	r2, [r7, #2]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80035d4:	e003      	b.n	80035de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80035d6:	887b      	ldrh	r3, [r7, #2]
 80035d8:	041a      	lsls	r2, r3, #16
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	619a      	str	r2, [r3, #24]
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ec:	b08f      	sub	sp, #60	; 0x3c
 80035ee:	af0a      	add	r7, sp, #40	; 0x28
 80035f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e116      	b.n	800382a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fd fe1c 	bl	8001254 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2203      	movs	r2, #3
 8003620:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362c:	2b00      	cmp	r3, #0
 800362e:	d102      	bne.n	8003636 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f004 fcbc 	bl	8007fb8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	603b      	str	r3, [r7, #0]
 8003646:	687e      	ldr	r6, [r7, #4]
 8003648:	466d      	mov	r5, sp
 800364a:	f106 0410 	add.w	r4, r6, #16
 800364e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003650:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003652:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003654:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003656:	e894 0003 	ldmia.w	r4, {r0, r1}
 800365a:	e885 0003 	stmia.w	r5, {r0, r1}
 800365e:	1d33      	adds	r3, r6, #4
 8003660:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003662:	6838      	ldr	r0, [r7, #0]
 8003664:	f004 fc3a 	bl	8007edc <USB_CoreInit>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2202      	movs	r2, #2
 8003672:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e0d7      	b.n	800382a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2100      	movs	r1, #0
 8003680:	4618      	mov	r0, r3
 8003682:	f004 fcaa 	bl	8007fda <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003686:	2300      	movs	r3, #0
 8003688:	73fb      	strb	r3, [r7, #15]
 800368a:	e04a      	b.n	8003722 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800368c:	7bfa      	ldrb	r2, [r7, #15]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	333d      	adds	r3, #61	; 0x3d
 800369c:	2201      	movs	r2, #1
 800369e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036a0:	7bfa      	ldrb	r2, [r7, #15]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	1a9b      	subs	r3, r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	333c      	adds	r3, #60	; 0x3c
 80036b0:	7bfa      	ldrb	r2, [r7, #15]
 80036b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036b4:	7bfa      	ldrb	r2, [r7, #15]
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	b298      	uxth	r0, r3
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	3342      	adds	r3, #66	; 0x42
 80036c8:	4602      	mov	r2, r0
 80036ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036cc:	7bfa      	ldrb	r2, [r7, #15]
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	333f      	adds	r3, #63	; 0x3f
 80036dc:	2200      	movs	r2, #0
 80036de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036e0:	7bfa      	ldrb	r2, [r7, #15]
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	3344      	adds	r3, #68	; 0x44
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036f4:	7bfa      	ldrb	r2, [r7, #15]
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	4613      	mov	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	1a9b      	subs	r3, r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	3348      	adds	r3, #72	; 0x48
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003708:	7bfa      	ldrb	r2, [r7, #15]
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	4613      	mov	r3, r2
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	1a9b      	subs	r3, r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	3350      	adds	r3, #80	; 0x50
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800371c:	7bfb      	ldrb	r3, [r7, #15]
 800371e:	3301      	adds	r3, #1
 8003720:	73fb      	strb	r3, [r7, #15]
 8003722:	7bfa      	ldrb	r2, [r7, #15]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	429a      	cmp	r2, r3
 800372a:	d3af      	bcc.n	800368c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800372c:	2300      	movs	r3, #0
 800372e:	73fb      	strb	r3, [r7, #15]
 8003730:	e044      	b.n	80037bc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003732:	7bfa      	ldrb	r2, [r7, #15]
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	1a9b      	subs	r3, r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003744:	2200      	movs	r2, #0
 8003746:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003748:	7bfa      	ldrb	r2, [r7, #15]
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800375a:	7bfa      	ldrb	r2, [r7, #15]
 800375c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800375e:	7bfa      	ldrb	r2, [r7, #15]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	1a9b      	subs	r3, r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003770:	2200      	movs	r2, #0
 8003772:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003774:	7bfa      	ldrb	r2, [r7, #15]
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800378a:	7bfa      	ldrb	r2, [r7, #15]
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037a0:	7bfa      	ldrb	r2, [r7, #15]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	3301      	adds	r3, #1
 80037ba:	73fb      	strb	r3, [r7, #15]
 80037bc:	7bfa      	ldrb	r2, [r7, #15]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d3b5      	bcc.n	8003732 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	687e      	ldr	r6, [r7, #4]
 80037ce:	466d      	mov	r5, sp
 80037d0:	f106 0410 	add.w	r4, r6, #16
 80037d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80037e4:	1d33      	adds	r3, r6, #4
 80037e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037e8:	6838      	ldr	r0, [r7, #0]
 80037ea:	f004 fc21 	bl	8008030 <USB_DevInit>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e014      	b.n	800382a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	2b01      	cmp	r3, #1
 8003816:	d102      	bne.n	800381e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f80b 	bl	8003834 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f004 fdc3 	bl	80083ae <USB_DevDisconnect>

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003834 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003862:	4b05      	ldr	r3, [pc, #20]	; (8003878 <HAL_PCDEx_ActivateLPM+0x44>)
 8003864:	4313      	orrs	r3, r2
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	10000003 	.word	0x10000003

0800387c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003884:	4b19      	ldr	r3, [pc, #100]	; (80038ec <HAL_PWREx_ConfigSupply+0x70>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b04      	cmp	r3, #4
 800388e:	d00a      	beq.n	80038a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003890:	4b16      	ldr	r3, [pc, #88]	; (80038ec <HAL_PWREx_ConfigSupply+0x70>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	429a      	cmp	r2, r3
 800389c:	d001      	beq.n	80038a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e01f      	b.n	80038e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	e01d      	b.n	80038e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80038a6:	4b11      	ldr	r3, [pc, #68]	; (80038ec <HAL_PWREx_ConfigSupply+0x70>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f023 0207 	bic.w	r2, r3, #7
 80038ae:	490f      	ldr	r1, [pc, #60]	; (80038ec <HAL_PWREx_ConfigSupply+0x70>)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80038b6:	f7fd fec1 	bl	800163c <HAL_GetTick>
 80038ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038bc:	e009      	b.n	80038d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80038be:	f7fd febd 	bl	800163c <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038cc:	d901      	bls.n	80038d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e007      	b.n	80038e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038d2:	4b06      	ldr	r3, [pc, #24]	; (80038ec <HAL_PWREx_ConfigSupply+0x70>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038de:	d1ee      	bne.n	80038be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	58024800 	.word	0x58024800

080038f0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	4a04      	ldr	r2, [pc, #16]	; (800390c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80038fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038fe:	60d3      	str	r3, [r2, #12]
}
 8003900:	bf00      	nop
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	58024800 	.word	0x58024800

08003910 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08c      	sub	sp, #48	; 0x30
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e3ff      	b.n	8004122 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 8087 	beq.w	8003a3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003930:	4b99      	ldr	r3, [pc, #612]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003938:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800393a:	4b97      	ldr	r3, [pc, #604]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 800393c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003942:	2b10      	cmp	r3, #16
 8003944:	d007      	beq.n	8003956 <HAL_RCC_OscConfig+0x46>
 8003946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003948:	2b18      	cmp	r3, #24
 800394a:	d110      	bne.n	800396e <HAL_RCC_OscConfig+0x5e>
 800394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d10b      	bne.n	800396e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003956:	4b90      	ldr	r3, [pc, #576]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d06c      	beq.n	8003a3c <HAL_RCC_OscConfig+0x12c>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d168      	bne.n	8003a3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e3d9      	b.n	8004122 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003976:	d106      	bne.n	8003986 <HAL_RCC_OscConfig+0x76>
 8003978:	4b87      	ldr	r3, [pc, #540]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a86      	ldr	r2, [pc, #536]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 800397e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	e02e      	b.n	80039e4 <HAL_RCC_OscConfig+0xd4>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10c      	bne.n	80039a8 <HAL_RCC_OscConfig+0x98>
 800398e:	4b82      	ldr	r3, [pc, #520]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a81      	ldr	r2, [pc, #516]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 8003994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	4b7f      	ldr	r3, [pc, #508]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a7e      	ldr	r2, [pc, #504]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 80039a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	e01d      	b.n	80039e4 <HAL_RCC_OscConfig+0xd4>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039b0:	d10c      	bne.n	80039cc <HAL_RCC_OscConfig+0xbc>
 80039b2:	4b79      	ldr	r3, [pc, #484]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a78      	ldr	r2, [pc, #480]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 80039b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	4b76      	ldr	r3, [pc, #472]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a75      	ldr	r2, [pc, #468]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 80039c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	e00b      	b.n	80039e4 <HAL_RCC_OscConfig+0xd4>
 80039cc:	4b72      	ldr	r3, [pc, #456]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a71      	ldr	r2, [pc, #452]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 80039d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	4b6f      	ldr	r3, [pc, #444]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a6e      	ldr	r2, [pc, #440]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 80039de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d013      	beq.n	8003a14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ec:	f7fd fe26 	bl	800163c <HAL_GetTick>
 80039f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039f4:	f7fd fe22 	bl	800163c <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	; 0x64
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e38d      	b.n	8004122 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a06:	4b64      	ldr	r3, [pc, #400]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0f0      	beq.n	80039f4 <HAL_RCC_OscConfig+0xe4>
 8003a12:	e014      	b.n	8003a3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a14:	f7fd fe12 	bl	800163c <HAL_GetTick>
 8003a18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a1c:	f7fd fe0e 	bl	800163c <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b64      	cmp	r3, #100	; 0x64
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e379      	b.n	8004122 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a2e:	4b5a      	ldr	r3, [pc, #360]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f0      	bne.n	8003a1c <HAL_RCC_OscConfig+0x10c>
 8003a3a:	e000      	b.n	8003a3e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 80ae 	beq.w	8003ba8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a4c:	4b52      	ldr	r3, [pc, #328]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a54:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a56:	4b50      	ldr	r3, [pc, #320]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 8003a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d007      	beq.n	8003a72 <HAL_RCC_OscConfig+0x162>
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	2b18      	cmp	r3, #24
 8003a66:	d13a      	bne.n	8003ade <HAL_RCC_OscConfig+0x1ce>
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d135      	bne.n	8003ade <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a72:	4b49      	ldr	r3, [pc, #292]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d005      	beq.n	8003a8a <HAL_RCC_OscConfig+0x17a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e34b      	b.n	8004122 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a8a:	f7fd fe07 	bl	800169c <HAL_GetREVID>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d817      	bhi.n	8003ac8 <HAL_RCC_OscConfig+0x1b8>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	2b40      	cmp	r3, #64	; 0x40
 8003a9e:	d108      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x1a2>
 8003aa0:	4b3d      	ldr	r3, [pc, #244]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003aa8:	4a3b      	ldr	r2, [pc, #236]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 8003aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aae:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ab0:	e07a      	b.n	8003ba8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab2:	4b39      	ldr	r3, [pc, #228]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	031b      	lsls	r3, r3, #12
 8003ac0:	4935      	ldr	r1, [pc, #212]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac6:	e06f      	b.n	8003ba8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac8:	4b33      	ldr	r3, [pc, #204]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	061b      	lsls	r3, r3, #24
 8003ad6:	4930      	ldr	r1, [pc, #192]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003adc:	e064      	b.n	8003ba8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d045      	beq.n	8003b72 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ae6:	4b2c      	ldr	r3, [pc, #176]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 0219 	bic.w	r2, r3, #25
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	4929      	ldr	r1, [pc, #164]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af8:	f7fd fda0 	bl	800163c <HAL_GetTick>
 8003afc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b00:	f7fd fd9c 	bl	800163c <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e307      	b.n	8004122 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b12:	4b21      	ldr	r3, [pc, #132]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0f0      	beq.n	8003b00 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b1e:	f7fd fdbd 	bl	800169c <HAL_GetREVID>
 8003b22:	4603      	mov	r3, r0
 8003b24:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d817      	bhi.n	8003b5c <HAL_RCC_OscConfig+0x24c>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	2b40      	cmp	r3, #64	; 0x40
 8003b32:	d108      	bne.n	8003b46 <HAL_RCC_OscConfig+0x236>
 8003b34:	4b18      	ldr	r3, [pc, #96]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003b3c:	4a16      	ldr	r2, [pc, #88]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 8003b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b42:	6053      	str	r3, [r2, #4]
 8003b44:	e030      	b.n	8003ba8 <HAL_RCC_OscConfig+0x298>
 8003b46:	4b14      	ldr	r3, [pc, #80]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	031b      	lsls	r3, r3, #12
 8003b54:	4910      	ldr	r1, [pc, #64]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	604b      	str	r3, [r1, #4]
 8003b5a:	e025      	b.n	8003ba8 <HAL_RCC_OscConfig+0x298>
 8003b5c:	4b0e      	ldr	r3, [pc, #56]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	061b      	lsls	r3, r3, #24
 8003b6a:	490b      	ldr	r1, [pc, #44]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	604b      	str	r3, [r1, #4]
 8003b70:	e01a      	b.n	8003ba8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b72:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a08      	ldr	r2, [pc, #32]	; (8003b98 <HAL_RCC_OscConfig+0x288>)
 8003b78:	f023 0301 	bic.w	r3, r3, #1
 8003b7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7e:	f7fd fd5d 	bl	800163c <HAL_GetTick>
 8003b82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b84:	e00a      	b.n	8003b9c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b86:	f7fd fd59 	bl	800163c <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d903      	bls.n	8003b9c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e2c4      	b.n	8004122 <HAL_RCC_OscConfig+0x812>
 8003b98:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b9c:	4ba4      	ldr	r3, [pc, #656]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1ee      	bne.n	8003b86 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 80a9 	beq.w	8003d08 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bb6:	4b9e      	ldr	r3, [pc, #632]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bbe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bc0:	4b9b      	ldr	r3, [pc, #620]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d007      	beq.n	8003bdc <HAL_RCC_OscConfig+0x2cc>
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	2b18      	cmp	r3, #24
 8003bd0:	d13a      	bne.n	8003c48 <HAL_RCC_OscConfig+0x338>
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d135      	bne.n	8003c48 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bdc:	4b94      	ldr	r3, [pc, #592]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x2e4>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	2b80      	cmp	r3, #128	; 0x80
 8003bee:	d001      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e296      	b.n	8004122 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bf4:	f7fd fd52 	bl	800169c <HAL_GetREVID>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	f241 0203 	movw	r2, #4099	; 0x1003
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d817      	bhi.n	8003c32 <HAL_RCC_OscConfig+0x322>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	2b20      	cmp	r3, #32
 8003c08:	d108      	bne.n	8003c1c <HAL_RCC_OscConfig+0x30c>
 8003c0a:	4b89      	ldr	r3, [pc, #548]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003c12:	4a87      	ldr	r2, [pc, #540]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003c14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c18:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c1a:	e075      	b.n	8003d08 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c1c:	4b84      	ldr	r3, [pc, #528]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	069b      	lsls	r3, r3, #26
 8003c2a:	4981      	ldr	r1, [pc, #516]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c30:	e06a      	b.n	8003d08 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c32:	4b7f      	ldr	r3, [pc, #508]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	061b      	lsls	r3, r3, #24
 8003c40:	497b      	ldr	r1, [pc, #492]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c46:	e05f      	b.n	8003d08 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d042      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c50:	4b77      	ldr	r3, [pc, #476]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a76      	ldr	r2, [pc, #472]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7fd fcee 	bl	800163c <HAL_GetTick>
 8003c60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003c64:	f7fd fcea 	bl	800163c <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e255      	b.n	8004122 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c76:	4b6e      	ldr	r3, [pc, #440]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f0      	beq.n	8003c64 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c82:	f7fd fd0b 	bl	800169c <HAL_GetREVID>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d817      	bhi.n	8003cc0 <HAL_RCC_OscConfig+0x3b0>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d108      	bne.n	8003caa <HAL_RCC_OscConfig+0x39a>
 8003c98:	4b65      	ldr	r3, [pc, #404]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003ca0:	4a63      	ldr	r2, [pc, #396]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003ca2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ca6:	6053      	str	r3, [r2, #4]
 8003ca8:	e02e      	b.n	8003d08 <HAL_RCC_OscConfig+0x3f8>
 8003caa:	4b61      	ldr	r3, [pc, #388]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	069b      	lsls	r3, r3, #26
 8003cb8:	495d      	ldr	r1, [pc, #372]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	604b      	str	r3, [r1, #4]
 8003cbe:	e023      	b.n	8003d08 <HAL_RCC_OscConfig+0x3f8>
 8003cc0:	4b5b      	ldr	r3, [pc, #364]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	061b      	lsls	r3, r3, #24
 8003cce:	4958      	ldr	r1, [pc, #352]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60cb      	str	r3, [r1, #12]
 8003cd4:	e018      	b.n	8003d08 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003cd6:	4b56      	ldr	r3, [pc, #344]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a55      	ldr	r2, [pc, #340]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003cdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce2:	f7fd fcab 	bl	800163c <HAL_GetTick>
 8003ce6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003cea:	f7fd fca7 	bl	800163c <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e212      	b.n	8004122 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003cfc:	4b4c      	ldr	r3, [pc, #304]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1f0      	bne.n	8003cea <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0308 	and.w	r3, r3, #8
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d036      	beq.n	8003d82 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d019      	beq.n	8003d50 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d1c:	4b44      	ldr	r3, [pc, #272]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d20:	4a43      	ldr	r2, [pc, #268]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d28:	f7fd fc88 	bl	800163c <HAL_GetTick>
 8003d2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d30:	f7fd fc84 	bl	800163c <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e1ef      	b.n	8004122 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d42:	4b3b      	ldr	r3, [pc, #236]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0x420>
 8003d4e:	e018      	b.n	8003d82 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d50:	4b37      	ldr	r3, [pc, #220]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d54:	4a36      	ldr	r2, [pc, #216]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003d56:	f023 0301 	bic.w	r3, r3, #1
 8003d5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5c:	f7fd fc6e 	bl	800163c <HAL_GetTick>
 8003d60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d64:	f7fd fc6a 	bl	800163c <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e1d5      	b.n	8004122 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d76:	4b2e      	ldr	r3, [pc, #184]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d036      	beq.n	8003dfc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d019      	beq.n	8003dca <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d96:	4b26      	ldr	r3, [pc, #152]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a25      	ldr	r2, [pc, #148]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003d9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003da0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003da2:	f7fd fc4b 	bl	800163c <HAL_GetTick>
 8003da6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003daa:	f7fd fc47 	bl	800163c <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e1b2      	b.n	8004122 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003dbc:	4b1c      	ldr	r3, [pc, #112]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0f0      	beq.n	8003daa <HAL_RCC_OscConfig+0x49a>
 8003dc8:	e018      	b.n	8003dfc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003dca:	4b19      	ldr	r3, [pc, #100]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a18      	ldr	r2, [pc, #96]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003dd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dd4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003dd6:	f7fd fc31 	bl	800163c <HAL_GetTick>
 8003dda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003dde:	f7fd fc2d 	bl	800163c <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e198      	b.n	8004122 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003df0:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <HAL_RCC_OscConfig+0x520>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f0      	bne.n	8003dde <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 8085 	beq.w	8003f14 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e0a:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <HAL_RCC_OscConfig+0x524>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <HAL_RCC_OscConfig+0x524>)
 8003e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e16:	f7fd fc11 	bl	800163c <HAL_GetTick>
 8003e1a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e1c:	e00c      	b.n	8003e38 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e1e:	f7fd fc0d 	bl	800163c <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b64      	cmp	r3, #100	; 0x64
 8003e2a:	d905      	bls.n	8003e38 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e178      	b.n	8004122 <HAL_RCC_OscConfig+0x812>
 8003e30:	58024400 	.word	0x58024400
 8003e34:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e38:	4b96      	ldr	r3, [pc, #600]	; (8004094 <HAL_RCC_OscConfig+0x784>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0ec      	beq.n	8003e1e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d106      	bne.n	8003e5a <HAL_RCC_OscConfig+0x54a>
 8003e4c:	4b92      	ldr	r3, [pc, #584]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e50:	4a91      	ldr	r2, [pc, #580]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	6713      	str	r3, [r2, #112]	; 0x70
 8003e58:	e02d      	b.n	8003eb6 <HAL_RCC_OscConfig+0x5a6>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10c      	bne.n	8003e7c <HAL_RCC_OscConfig+0x56c>
 8003e62:	4b8d      	ldr	r3, [pc, #564]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e66:	4a8c      	ldr	r2, [pc, #560]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003e68:	f023 0301 	bic.w	r3, r3, #1
 8003e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e6e:	4b8a      	ldr	r3, [pc, #552]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e72:	4a89      	ldr	r2, [pc, #548]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003e74:	f023 0304 	bic.w	r3, r3, #4
 8003e78:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7a:	e01c      	b.n	8003eb6 <HAL_RCC_OscConfig+0x5a6>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	2b05      	cmp	r3, #5
 8003e82:	d10c      	bne.n	8003e9e <HAL_RCC_OscConfig+0x58e>
 8003e84:	4b84      	ldr	r3, [pc, #528]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e88:	4a83      	ldr	r2, [pc, #524]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003e8a:	f043 0304 	orr.w	r3, r3, #4
 8003e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e90:	4b81      	ldr	r3, [pc, #516]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	4a80      	ldr	r2, [pc, #512]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9c:	e00b      	b.n	8003eb6 <HAL_RCC_OscConfig+0x5a6>
 8003e9e:	4b7e      	ldr	r3, [pc, #504]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea2:	4a7d      	ldr	r2, [pc, #500]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003ea4:	f023 0301 	bic.w	r3, r3, #1
 8003ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eaa:	4b7b      	ldr	r3, [pc, #492]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eae:	4a7a      	ldr	r2, [pc, #488]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003eb0:	f023 0304 	bic.w	r3, r3, #4
 8003eb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d015      	beq.n	8003eea <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebe:	f7fd fbbd 	bl	800163c <HAL_GetTick>
 8003ec2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ec4:	e00a      	b.n	8003edc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec6:	f7fd fbb9 	bl	800163c <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e122      	b.n	8004122 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003edc:	4b6e      	ldr	r3, [pc, #440]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0ee      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x5b6>
 8003ee8:	e014      	b.n	8003f14 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eea:	f7fd fba7 	bl	800163c <HAL_GetTick>
 8003eee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ef0:	e00a      	b.n	8003f08 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef2:	f7fd fba3 	bl	800163c <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e10c      	b.n	8004122 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f08:	4b63      	ldr	r3, [pc, #396]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1ee      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 8101 	beq.w	8004120 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003f1e:	4b5e      	ldr	r3, [pc, #376]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f26:	2b18      	cmp	r3, #24
 8003f28:	f000 80bc 	beq.w	80040a4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	f040 8095 	bne.w	8004060 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f36:	4b58      	ldr	r3, [pc, #352]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a57      	ldr	r2, [pc, #348]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003f3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f42:	f7fd fb7b 	bl	800163c <HAL_GetTick>
 8003f46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f4a:	f7fd fb77 	bl	800163c <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e0e2      	b.n	8004122 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f5c:	4b4e      	ldr	r3, [pc, #312]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f0      	bne.n	8003f4a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f68:	4b4b      	ldr	r3, [pc, #300]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003f6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f6c:	4b4b      	ldr	r3, [pc, #300]	; (800409c <HAL_RCC_OscConfig+0x78c>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f78:	0112      	lsls	r2, r2, #4
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	4946      	ldr	r1, [pc, #280]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	628b      	str	r3, [r1, #40]	; 0x28
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	3b01      	subs	r3, #1
 8003f88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f90:	3b01      	subs	r3, #1
 8003f92:	025b      	lsls	r3, r3, #9
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	041b      	lsls	r3, r3, #16
 8003fa0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003faa:	3b01      	subs	r3, #1
 8003fac:	061b      	lsls	r3, r3, #24
 8003fae:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003fb2:	4939      	ldr	r1, [pc, #228]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003fb8:	4b37      	ldr	r3, [pc, #220]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	4a36      	ldr	r2, [pc, #216]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003fbe:	f023 0301 	bic.w	r3, r3, #1
 8003fc2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003fc4:	4b34      	ldr	r3, [pc, #208]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003fc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fc8:	4b35      	ldr	r3, [pc, #212]	; (80040a0 <HAL_RCC_OscConfig+0x790>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003fd0:	00d2      	lsls	r2, r2, #3
 8003fd2:	4931      	ldr	r1, [pc, #196]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003fd8:	4b2f      	ldr	r3, [pc, #188]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	f023 020c 	bic.w	r2, r3, #12
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe4:	492c      	ldr	r1, [pc, #176]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003fea:	4b2b      	ldr	r3, [pc, #172]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fee:	f023 0202 	bic.w	r2, r3, #2
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff6:	4928      	ldr	r1, [pc, #160]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ffc:	4b26      	ldr	r3, [pc, #152]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	4a25      	ldr	r2, [pc, #148]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8004002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004006:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004008:	4b23      	ldr	r3, [pc, #140]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	4a22      	ldr	r2, [pc, #136]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 800400e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004012:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004014:	4b20      	ldr	r3, [pc, #128]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	4a1f      	ldr	r2, [pc, #124]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 800401a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800401e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004020:	4b1d      	ldr	r3, [pc, #116]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	4a1c      	ldr	r2, [pc, #112]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8004026:	f043 0301 	orr.w	r3, r3, #1
 800402a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800402c:	4b1a      	ldr	r3, [pc, #104]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a19      	ldr	r2, [pc, #100]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8004032:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004038:	f7fd fb00 	bl	800163c <HAL_GetTick>
 800403c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004040:	f7fd fafc 	bl	800163c <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e067      	b.n	8004122 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004052:	4b11      	ldr	r3, [pc, #68]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f0      	beq.n	8004040 <HAL_RCC_OscConfig+0x730>
 800405e:	e05f      	b.n	8004120 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004060:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a0c      	ldr	r2, [pc, #48]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8004066:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800406a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406c:	f7fd fae6 	bl	800163c <HAL_GetTick>
 8004070:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004074:	f7fd fae2 	bl	800163c <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e04d      	b.n	8004122 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004086:	4b04      	ldr	r3, [pc, #16]	; (8004098 <HAL_RCC_OscConfig+0x788>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f0      	bne.n	8004074 <HAL_RCC_OscConfig+0x764>
 8004092:	e045      	b.n	8004120 <HAL_RCC_OscConfig+0x810>
 8004094:	58024800 	.word	0x58024800
 8004098:	58024400 	.word	0x58024400
 800409c:	fffffc0c 	.word	0xfffffc0c
 80040a0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80040a4:	4b21      	ldr	r3, [pc, #132]	; (800412c <HAL_RCC_OscConfig+0x81c>)
 80040a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80040aa:	4b20      	ldr	r3, [pc, #128]	; (800412c <HAL_RCC_OscConfig+0x81c>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d031      	beq.n	800411c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f003 0203 	and.w	r2, r3, #3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d12a      	bne.n	800411c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	091b      	lsrs	r3, r3, #4
 80040ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d122      	bne.n	800411c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d11a      	bne.n	800411c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	0a5b      	lsrs	r3, r3, #9
 80040ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d111      	bne.n	800411c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	0c1b      	lsrs	r3, r3, #16
 80040fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004104:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004106:	429a      	cmp	r2, r3
 8004108:	d108      	bne.n	800411c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	0e1b      	lsrs	r3, r3, #24
 800410e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004116:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004118:	429a      	cmp	r2, r3
 800411a:	d001      	beq.n	8004120 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e000      	b.n	8004122 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3730      	adds	r7, #48	; 0x30
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	58024400 	.word	0x58024400

08004130 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e19c      	b.n	800447e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004144:	4b8a      	ldr	r3, [pc, #552]	; (8004370 <HAL_RCC_ClockConfig+0x240>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 030f 	and.w	r3, r3, #15
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d910      	bls.n	8004174 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004152:	4b87      	ldr	r3, [pc, #540]	; (8004370 <HAL_RCC_ClockConfig+0x240>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f023 020f 	bic.w	r2, r3, #15
 800415a:	4985      	ldr	r1, [pc, #532]	; (8004370 <HAL_RCC_ClockConfig+0x240>)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	4313      	orrs	r3, r2
 8004160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004162:	4b83      	ldr	r3, [pc, #524]	; (8004370 <HAL_RCC_ClockConfig+0x240>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d001      	beq.n	8004174 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e184      	b.n	800447e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d010      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	4b7b      	ldr	r3, [pc, #492]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800418c:	429a      	cmp	r2, r3
 800418e:	d908      	bls.n	80041a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004190:	4b78      	ldr	r3, [pc, #480]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	4975      	ldr	r1, [pc, #468]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d010      	beq.n	80041d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695a      	ldr	r2, [r3, #20]
 80041b2:	4b70      	ldr	r3, [pc, #448]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d908      	bls.n	80041d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041be:	4b6d      	ldr	r3, [pc, #436]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	496a      	ldr	r1, [pc, #424]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d010      	beq.n	80041fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699a      	ldr	r2, [r3, #24]
 80041e0:	4b64      	ldr	r3, [pc, #400]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d908      	bls.n	80041fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041ec:	4b61      	ldr	r3, [pc, #388]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	495e      	ldr	r1, [pc, #376]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0320 	and.w	r3, r3, #32
 8004206:	2b00      	cmp	r3, #0
 8004208:	d010      	beq.n	800422c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69da      	ldr	r2, [r3, #28]
 800420e:	4b59      	ldr	r3, [pc, #356]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004216:	429a      	cmp	r2, r3
 8004218:	d908      	bls.n	800422c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800421a:	4b56      	ldr	r3, [pc, #344]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	4953      	ldr	r1, [pc, #332]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004228:	4313      	orrs	r3, r2
 800422a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d010      	beq.n	800425a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68da      	ldr	r2, [r3, #12]
 800423c:	4b4d      	ldr	r3, [pc, #308]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	429a      	cmp	r2, r3
 8004246:	d908      	bls.n	800425a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004248:	4b4a      	ldr	r3, [pc, #296]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	f023 020f 	bic.w	r2, r3, #15
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	4947      	ldr	r1, [pc, #284]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004256:	4313      	orrs	r3, r2
 8004258:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d055      	beq.n	8004312 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004266:	4b43      	ldr	r3, [pc, #268]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	4940      	ldr	r1, [pc, #256]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004274:	4313      	orrs	r3, r2
 8004276:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b02      	cmp	r3, #2
 800427e:	d107      	bne.n	8004290 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004280:	4b3c      	ldr	r3, [pc, #240]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d121      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0f6      	b.n	800447e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b03      	cmp	r3, #3
 8004296:	d107      	bne.n	80042a8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004298:	4b36      	ldr	r3, [pc, #216]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d115      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0ea      	b.n	800447e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d107      	bne.n	80042c0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042b0:	4b30      	ldr	r3, [pc, #192]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d109      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e0de      	b.n	800447e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042c0:	4b2c      	ldr	r3, [pc, #176]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e0d6      	b.n	800447e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042d0:	4b28      	ldr	r3, [pc, #160]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	f023 0207 	bic.w	r2, r3, #7
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4925      	ldr	r1, [pc, #148]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e2:	f7fd f9ab 	bl	800163c <HAL_GetTick>
 80042e6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e8:	e00a      	b.n	8004300 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ea:	f7fd f9a7 	bl	800163c <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e0be      	b.n	800447e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004300:	4b1c      	ldr	r3, [pc, #112]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	429a      	cmp	r2, r3
 8004310:	d1eb      	bne.n	80042ea <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d010      	beq.n	8004340 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	4b14      	ldr	r3, [pc, #80]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	429a      	cmp	r2, r3
 800432c:	d208      	bcs.n	8004340 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800432e:	4b11      	ldr	r3, [pc, #68]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	f023 020f 	bic.w	r2, r3, #15
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	490e      	ldr	r1, [pc, #56]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 800433c:	4313      	orrs	r3, r2
 800433e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004340:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <HAL_RCC_ClockConfig+0x240>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d214      	bcs.n	8004378 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434e:	4b08      	ldr	r3, [pc, #32]	; (8004370 <HAL_RCC_ClockConfig+0x240>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 020f 	bic.w	r2, r3, #15
 8004356:	4906      	ldr	r1, [pc, #24]	; (8004370 <HAL_RCC_ClockConfig+0x240>)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	4313      	orrs	r3, r2
 800435c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800435e:	4b04      	ldr	r3, [pc, #16]	; (8004370 <HAL_RCC_ClockConfig+0x240>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d005      	beq.n	8004378 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e086      	b.n	800447e <HAL_RCC_ClockConfig+0x34e>
 8004370:	52002000 	.word	0x52002000
 8004374:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	d010      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	4b3f      	ldr	r3, [pc, #252]	; (8004488 <HAL_RCC_ClockConfig+0x358>)
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004390:	429a      	cmp	r2, r3
 8004392:	d208      	bcs.n	80043a6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004394:	4b3c      	ldr	r3, [pc, #240]	; (8004488 <HAL_RCC_ClockConfig+0x358>)
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	4939      	ldr	r1, [pc, #228]	; (8004488 <HAL_RCC_ClockConfig+0x358>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d010      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	695a      	ldr	r2, [r3, #20]
 80043b6:	4b34      	ldr	r3, [pc, #208]	; (8004488 <HAL_RCC_ClockConfig+0x358>)
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043be:	429a      	cmp	r2, r3
 80043c0:	d208      	bcs.n	80043d4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043c2:	4b31      	ldr	r3, [pc, #196]	; (8004488 <HAL_RCC_ClockConfig+0x358>)
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	492e      	ldr	r1, [pc, #184]	; (8004488 <HAL_RCC_ClockConfig+0x358>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0310 	and.w	r3, r3, #16
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d010      	beq.n	8004402 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699a      	ldr	r2, [r3, #24]
 80043e4:	4b28      	ldr	r3, [pc, #160]	; (8004488 <HAL_RCC_ClockConfig+0x358>)
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d208      	bcs.n	8004402 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043f0:	4b25      	ldr	r3, [pc, #148]	; (8004488 <HAL_RCC_ClockConfig+0x358>)
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	4922      	ldr	r1, [pc, #136]	; (8004488 <HAL_RCC_ClockConfig+0x358>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0320 	and.w	r3, r3, #32
 800440a:	2b00      	cmp	r3, #0
 800440c:	d010      	beq.n	8004430 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69da      	ldr	r2, [r3, #28]
 8004412:	4b1d      	ldr	r3, [pc, #116]	; (8004488 <HAL_RCC_ClockConfig+0x358>)
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800441a:	429a      	cmp	r2, r3
 800441c:	d208      	bcs.n	8004430 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800441e:	4b1a      	ldr	r3, [pc, #104]	; (8004488 <HAL_RCC_ClockConfig+0x358>)
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	4917      	ldr	r1, [pc, #92]	; (8004488 <HAL_RCC_ClockConfig+0x358>)
 800442c:	4313      	orrs	r3, r2
 800442e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004430:	f000 f834 	bl	800449c <HAL_RCC_GetSysClockFreq>
 8004434:	4602      	mov	r2, r0
 8004436:	4b14      	ldr	r3, [pc, #80]	; (8004488 <HAL_RCC_ClockConfig+0x358>)
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	0a1b      	lsrs	r3, r3, #8
 800443c:	f003 030f 	and.w	r3, r3, #15
 8004440:	4912      	ldr	r1, [pc, #72]	; (800448c <HAL_RCC_ClockConfig+0x35c>)
 8004442:	5ccb      	ldrb	r3, [r1, r3]
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
 800444c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800444e:	4b0e      	ldr	r3, [pc, #56]	; (8004488 <HAL_RCC_ClockConfig+0x358>)
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	4a0d      	ldr	r2, [pc, #52]	; (800448c <HAL_RCC_ClockConfig+0x35c>)
 8004458:	5cd3      	ldrb	r3, [r2, r3]
 800445a:	f003 031f 	and.w	r3, r3, #31
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	fa22 f303 	lsr.w	r3, r2, r3
 8004464:	4a0a      	ldr	r2, [pc, #40]	; (8004490 <HAL_RCC_ClockConfig+0x360>)
 8004466:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004468:	4a0a      	ldr	r2, [pc, #40]	; (8004494 <HAL_RCC_ClockConfig+0x364>)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800446e:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <HAL_RCC_ClockConfig+0x368>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f7fd f898 	bl	80015a8 <HAL_InitTick>
 8004478:	4603      	mov	r3, r0
 800447a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800447c:	7bfb      	ldrb	r3, [r7, #15]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	58024400 	.word	0x58024400
 800448c:	080084c8 	.word	0x080084c8
 8004490:	20000004 	.word	0x20000004
 8004494:	20000000 	.word	0x20000000
 8004498:	20000008 	.word	0x20000008

0800449c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800449c:	b480      	push	{r7}
 800449e:	b089      	sub	sp, #36	; 0x24
 80044a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044a2:	4bb3      	ldr	r3, [pc, #716]	; (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044aa:	2b18      	cmp	r3, #24
 80044ac:	f200 8155 	bhi.w	800475a <HAL_RCC_GetSysClockFreq+0x2be>
 80044b0:	a201      	add	r2, pc, #4	; (adr r2, 80044b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80044b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b6:	bf00      	nop
 80044b8:	0800451d 	.word	0x0800451d
 80044bc:	0800475b 	.word	0x0800475b
 80044c0:	0800475b 	.word	0x0800475b
 80044c4:	0800475b 	.word	0x0800475b
 80044c8:	0800475b 	.word	0x0800475b
 80044cc:	0800475b 	.word	0x0800475b
 80044d0:	0800475b 	.word	0x0800475b
 80044d4:	0800475b 	.word	0x0800475b
 80044d8:	08004543 	.word	0x08004543
 80044dc:	0800475b 	.word	0x0800475b
 80044e0:	0800475b 	.word	0x0800475b
 80044e4:	0800475b 	.word	0x0800475b
 80044e8:	0800475b 	.word	0x0800475b
 80044ec:	0800475b 	.word	0x0800475b
 80044f0:	0800475b 	.word	0x0800475b
 80044f4:	0800475b 	.word	0x0800475b
 80044f8:	08004549 	.word	0x08004549
 80044fc:	0800475b 	.word	0x0800475b
 8004500:	0800475b 	.word	0x0800475b
 8004504:	0800475b 	.word	0x0800475b
 8004508:	0800475b 	.word	0x0800475b
 800450c:	0800475b 	.word	0x0800475b
 8004510:	0800475b 	.word	0x0800475b
 8004514:	0800475b 	.word	0x0800475b
 8004518:	0800454f 	.word	0x0800454f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800451c:	4b94      	ldr	r3, [pc, #592]	; (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0320 	and.w	r3, r3, #32
 8004524:	2b00      	cmp	r3, #0
 8004526:	d009      	beq.n	800453c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004528:	4b91      	ldr	r3, [pc, #580]	; (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	08db      	lsrs	r3, r3, #3
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	4a90      	ldr	r2, [pc, #576]	; (8004774 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004534:	fa22 f303 	lsr.w	r3, r2, r3
 8004538:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800453a:	e111      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800453c:	4b8d      	ldr	r3, [pc, #564]	; (8004774 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800453e:	61bb      	str	r3, [r7, #24]
    break;
 8004540:	e10e      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004542:	4b8d      	ldr	r3, [pc, #564]	; (8004778 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004544:	61bb      	str	r3, [r7, #24]
    break;
 8004546:	e10b      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004548:	4b8c      	ldr	r3, [pc, #560]	; (800477c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800454a:	61bb      	str	r3, [r7, #24]
    break;
 800454c:	e108      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800454e:	4b88      	ldr	r3, [pc, #544]	; (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004558:	4b85      	ldr	r3, [pc, #532]	; (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800455a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455c:	091b      	lsrs	r3, r3, #4
 800455e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004562:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004564:	4b82      	ldr	r3, [pc, #520]	; (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800456e:	4b80      	ldr	r3, [pc, #512]	; (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004572:	08db      	lsrs	r3, r3, #3
 8004574:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	fb02 f303 	mul.w	r3, r2, r3
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004586:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 80e1 	beq.w	8004754 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2b02      	cmp	r3, #2
 8004596:	f000 8083 	beq.w	80046a0 <HAL_RCC_GetSysClockFreq+0x204>
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2b02      	cmp	r3, #2
 800459e:	f200 80a1 	bhi.w	80046e4 <HAL_RCC_GetSysClockFreq+0x248>
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_RCC_GetSysClockFreq+0x114>
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d056      	beq.n	800465c <HAL_RCC_GetSysClockFreq+0x1c0>
 80045ae:	e099      	b.n	80046e4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045b0:	4b6f      	ldr	r3, [pc, #444]	; (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d02d      	beq.n	8004618 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045bc:	4b6c      	ldr	r3, [pc, #432]	; (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	08db      	lsrs	r3, r3, #3
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	4a6b      	ldr	r2, [pc, #428]	; (8004774 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045c8:	fa22 f303 	lsr.w	r3, r2, r3
 80045cc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	ee07 3a90 	vmov	s15, r3
 80045d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	ee07 3a90 	vmov	s15, r3
 80045de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045e6:	4b62      	ldr	r3, [pc, #392]	; (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ee:	ee07 3a90 	vmov	s15, r3
 80045f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80045fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004780 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800460a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800460e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004612:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004616:	e087      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004622:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004784 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800462a:	4b51      	ldr	r3, [pc, #324]	; (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800462c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800463a:	ed97 6a02 	vldr	s12, [r7, #8]
 800463e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004780 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800464a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800464e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004656:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800465a:	e065      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	ee07 3a90 	vmov	s15, r3
 8004662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004666:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004788 <HAL_RCC_GetSysClockFreq+0x2ec>
 800466a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800466e:	4b40      	ldr	r3, [pc, #256]	; (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004676:	ee07 3a90 	vmov	s15, r3
 800467a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800467e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004682:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004780 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800468a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800468e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800469a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800469e:	e043      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046aa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800478c <HAL_RCC_GetSysClockFreq+0x2f0>
 80046ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046b2:	4b2f      	ldr	r3, [pc, #188]	; (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80046c6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004780 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046e2:	e021      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	ee07 3a90 	vmov	s15, r3
 80046ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004788 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046f6:	4b1e      	ldr	r3, [pc, #120]	; (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004706:	ed97 6a02 	vldr	s12, [r7, #8]
 800470a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004780 <HAL_RCC_GetSysClockFreq+0x2e4>
 800470e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800471a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800471e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004722:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004726:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004728:	4b11      	ldr	r3, [pc, #68]	; (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800472a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472c:	0a5b      	lsrs	r3, r3, #9
 800472e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004732:	3301      	adds	r3, #1
 8004734:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	ee07 3a90 	vmov	s15, r3
 800473c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004740:	edd7 6a07 	vldr	s13, [r7, #28]
 8004744:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800474c:	ee17 3a90 	vmov	r3, s15
 8004750:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004752:	e005      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	61bb      	str	r3, [r7, #24]
    break;
 8004758:	e002      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800475a:	4b07      	ldr	r3, [pc, #28]	; (8004778 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800475c:	61bb      	str	r3, [r7, #24]
    break;
 800475e:	bf00      	nop
  }

  return sysclockfreq;
 8004760:	69bb      	ldr	r3, [r7, #24]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3724      	adds	r7, #36	; 0x24
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	58024400 	.word	0x58024400
 8004774:	03d09000 	.word	0x03d09000
 8004778:	003d0900 	.word	0x003d0900
 800477c:	02dc6c00 	.word	0x02dc6c00
 8004780:	46000000 	.word	0x46000000
 8004784:	4c742400 	.word	0x4c742400
 8004788:	4a742400 	.word	0x4a742400
 800478c:	4c371b00 	.word	0x4c371b00

08004790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004796:	f7ff fe81 	bl	800449c <HAL_RCC_GetSysClockFreq>
 800479a:	4602      	mov	r2, r0
 800479c:	4b10      	ldr	r3, [pc, #64]	; (80047e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	0a1b      	lsrs	r3, r3, #8
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	490f      	ldr	r1, [pc, #60]	; (80047e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80047a8:	5ccb      	ldrb	r3, [r1, r3]
 80047aa:	f003 031f 	and.w	r3, r3, #31
 80047ae:	fa22 f303 	lsr.w	r3, r2, r3
 80047b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80047b4:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	f003 030f 	and.w	r3, r3, #15
 80047bc:	4a09      	ldr	r2, [pc, #36]	; (80047e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80047be:	5cd3      	ldrb	r3, [r2, r3]
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ca:	4a07      	ldr	r2, [pc, #28]	; (80047e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80047cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047ce:	4a07      	ldr	r2, [pc, #28]	; (80047ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80047d4:	4b04      	ldr	r3, [pc, #16]	; (80047e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80047d6:	681b      	ldr	r3, [r3, #0]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	58024400 	.word	0x58024400
 80047e4:	080084c8 	.word	0x080084c8
 80047e8:	20000004 	.word	0x20000004
 80047ec:	20000000 	.word	0x20000000

080047f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80047f4:	f7ff ffcc 	bl	8004790 <HAL_RCC_GetHCLKFreq>
 80047f8:	4602      	mov	r2, r0
 80047fa:	4b06      	ldr	r3, [pc, #24]	; (8004814 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	091b      	lsrs	r3, r3, #4
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	4904      	ldr	r1, [pc, #16]	; (8004818 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004806:	5ccb      	ldrb	r3, [r1, r3]
 8004808:	f003 031f 	and.w	r3, r3, #31
 800480c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004810:	4618      	mov	r0, r3
 8004812:	bd80      	pop	{r7, pc}
 8004814:	58024400 	.word	0x58024400
 8004818:	080084c8 	.word	0x080084c8

0800481c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004820:	f7ff ffb6 	bl	8004790 <HAL_RCC_GetHCLKFreq>
 8004824:	4602      	mov	r2, r0
 8004826:	4b06      	ldr	r3, [pc, #24]	; (8004840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	0a1b      	lsrs	r3, r3, #8
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	4904      	ldr	r1, [pc, #16]	; (8004844 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004832:	5ccb      	ldrb	r3, [r1, r3]
 8004834:	f003 031f 	and.w	r3, r3, #31
 8004838:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800483c:	4618      	mov	r0, r3
 800483e:	bd80      	pop	{r7, pc}
 8004840:	58024400 	.word	0x58024400
 8004844:	080084c8 	.word	0x080084c8

08004848 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004850:	2300      	movs	r3, #0
 8004852:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004854:	2300      	movs	r3, #0
 8004856:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d03f      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004868:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800486c:	d02a      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800486e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004872:	d824      	bhi.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004874:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004878:	d018      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800487a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800487e:	d81e      	bhi.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004884:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004888:	d007      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800488a:	e018      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800488c:	4bab      	ldr	r3, [pc, #684]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	4aaa      	ldr	r2, [pc, #680]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004896:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004898:	e015      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3304      	adds	r3, #4
 800489e:	2102      	movs	r1, #2
 80048a0:	4618      	mov	r0, r3
 80048a2:	f001 f9cf 	bl	8005c44 <RCCEx_PLL2_Config>
 80048a6:	4603      	mov	r3, r0
 80048a8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80048aa:	e00c      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3324      	adds	r3, #36	; 0x24
 80048b0:	2102      	movs	r1, #2
 80048b2:	4618      	mov	r0, r3
 80048b4:	f001 fa78 	bl	8005da8 <RCCEx_PLL3_Config>
 80048b8:	4603      	mov	r3, r0
 80048ba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80048bc:	e003      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	75fb      	strb	r3, [r7, #23]
      break;
 80048c2:	e000      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80048c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048c6:	7dfb      	ldrb	r3, [r7, #23]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d109      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80048cc:	4b9b      	ldr	r3, [pc, #620]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048d8:	4998      	ldr	r1, [pc, #608]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	650b      	str	r3, [r1, #80]	; 0x50
 80048de:	e001      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e0:	7dfb      	ldrb	r3, [r7, #23]
 80048e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d03d      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d826      	bhi.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80048f8:	a201      	add	r2, pc, #4	; (adr r2, 8004900 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80048fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fe:	bf00      	nop
 8004900:	08004915 	.word	0x08004915
 8004904:	08004923 	.word	0x08004923
 8004908:	08004935 	.word	0x08004935
 800490c:	0800494d 	.word	0x0800494d
 8004910:	0800494d 	.word	0x0800494d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004914:	4b89      	ldr	r3, [pc, #548]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004918:	4a88      	ldr	r2, [pc, #544]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800491a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800491e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004920:	e015      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	3304      	adds	r3, #4
 8004926:	2100      	movs	r1, #0
 8004928:	4618      	mov	r0, r3
 800492a:	f001 f98b 	bl	8005c44 <RCCEx_PLL2_Config>
 800492e:	4603      	mov	r3, r0
 8004930:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004932:	e00c      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3324      	adds	r3, #36	; 0x24
 8004938:	2100      	movs	r1, #0
 800493a:	4618      	mov	r0, r3
 800493c:	f001 fa34 	bl	8005da8 <RCCEx_PLL3_Config>
 8004940:	4603      	mov	r3, r0
 8004942:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004944:	e003      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	75fb      	strb	r3, [r7, #23]
      break;
 800494a:	e000      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800494c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800494e:	7dfb      	ldrb	r3, [r7, #23]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d109      	bne.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004954:	4b79      	ldr	r3, [pc, #484]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004958:	f023 0207 	bic.w	r2, r3, #7
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004960:	4976      	ldr	r1, [pc, #472]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004962:	4313      	orrs	r3, r2
 8004964:	650b      	str	r3, [r1, #80]	; 0x50
 8004966:	e001      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004968:	7dfb      	ldrb	r3, [r7, #23]
 800496a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004974:	2b00      	cmp	r3, #0
 8004976:	d042      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004980:	d02b      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004986:	d825      	bhi.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004988:	2bc0      	cmp	r3, #192	; 0xc0
 800498a:	d028      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x196>
 800498c:	2bc0      	cmp	r3, #192	; 0xc0
 800498e:	d821      	bhi.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004990:	2b80      	cmp	r3, #128	; 0x80
 8004992:	d016      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004994:	2b80      	cmp	r3, #128	; 0x80
 8004996:	d81d      	bhi.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800499c:	2b40      	cmp	r3, #64	; 0x40
 800499e:	d007      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80049a0:	e018      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049a2:	4b66      	ldr	r3, [pc, #408]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a6:	4a65      	ldr	r2, [pc, #404]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80049ae:	e017      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3304      	adds	r3, #4
 80049b4:	2100      	movs	r1, #0
 80049b6:	4618      	mov	r0, r3
 80049b8:	f001 f944 	bl	8005c44 <RCCEx_PLL2_Config>
 80049bc:	4603      	mov	r3, r0
 80049be:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80049c0:	e00e      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3324      	adds	r3, #36	; 0x24
 80049c6:	2100      	movs	r1, #0
 80049c8:	4618      	mov	r0, r3
 80049ca:	f001 f9ed 	bl	8005da8 <RCCEx_PLL3_Config>
 80049ce:	4603      	mov	r3, r0
 80049d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80049d2:	e005      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	75fb      	strb	r3, [r7, #23]
      break;
 80049d8:	e002      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80049da:	bf00      	nop
 80049dc:	e000      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80049de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049e0:	7dfb      	ldrb	r3, [r7, #23]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d109      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80049e6:	4b55      	ldr	r3, [pc, #340]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ea:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f2:	4952      	ldr	r1, [pc, #328]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	650b      	str	r3, [r1, #80]	; 0x50
 80049f8:	e001      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049fa:	7dfb      	ldrb	r3, [r7, #23]
 80049fc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d049      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a14:	d030      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004a16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a1a:	d82a      	bhi.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004a1c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004a20:	d02c      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004a22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004a26:	d824      	bhi.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004a28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a2c:	d018      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004a2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a32:	d81e      	bhi.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004a38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a3c:	d007      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004a3e:	e018      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a40:	4b3e      	ldr	r3, [pc, #248]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a44:	4a3d      	ldr	r2, [pc, #244]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a4c:	e017      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	3304      	adds	r3, #4
 8004a52:	2100      	movs	r1, #0
 8004a54:	4618      	mov	r0, r3
 8004a56:	f001 f8f5 	bl	8005c44 <RCCEx_PLL2_Config>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004a5e:	e00e      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3324      	adds	r3, #36	; 0x24
 8004a64:	2100      	movs	r1, #0
 8004a66:	4618      	mov	r0, r3
 8004a68:	f001 f99e 	bl	8005da8 <RCCEx_PLL3_Config>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a70:	e005      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	75fb      	strb	r3, [r7, #23]
      break;
 8004a76:	e002      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004a78:	bf00      	nop
 8004a7a:	e000      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004a7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a7e:	7dfb      	ldrb	r3, [r7, #23]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10a      	bne.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004a84:	4b2d      	ldr	r3, [pc, #180]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a88:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a92:	492a      	ldr	r1, [pc, #168]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	658b      	str	r3, [r1, #88]	; 0x58
 8004a98:	e001      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a9a:	7dfb      	ldrb	r3, [r7, #23]
 8004a9c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d04c      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ab0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ab4:	d030      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004ab6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004aba:	d82a      	bhi.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004abc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ac0:	d02c      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004ac2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ac6:	d824      	bhi.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004ac8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004acc:	d018      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004ace:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ad2:	d81e      	bhi.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004adc:	d007      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004ade:	e018      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ae0:	4b16      	ldr	r3, [pc, #88]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	4a15      	ldr	r2, [pc, #84]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004aec:	e017      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3304      	adds	r3, #4
 8004af2:	2100      	movs	r1, #0
 8004af4:	4618      	mov	r0, r3
 8004af6:	f001 f8a5 	bl	8005c44 <RCCEx_PLL2_Config>
 8004afa:	4603      	mov	r3, r0
 8004afc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004afe:	e00e      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3324      	adds	r3, #36	; 0x24
 8004b04:	2100      	movs	r1, #0
 8004b06:	4618      	mov	r0, r3
 8004b08:	f001 f94e 	bl	8005da8 <RCCEx_PLL3_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b10:	e005      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	75fb      	strb	r3, [r7, #23]
      break;
 8004b16:	e002      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004b18:	bf00      	nop
 8004b1a:	e000      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004b1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b1e:	7dfb      	ldrb	r3, [r7, #23]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10d      	bne.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004b24:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b28:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b32:	4902      	ldr	r1, [pc, #8]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	658b      	str	r3, [r1, #88]	; 0x58
 8004b38:	e004      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004b3a:	bf00      	nop
 8004b3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b40:	7dfb      	ldrb	r3, [r7, #23]
 8004b42:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d032      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b54:	2b30      	cmp	r3, #48	; 0x30
 8004b56:	d01c      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004b58:	2b30      	cmp	r3, #48	; 0x30
 8004b5a:	d817      	bhi.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004b5c:	2b20      	cmp	r3, #32
 8004b5e:	d00c      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	d813      	bhi.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d016      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004b68:	2b10      	cmp	r3, #16
 8004b6a:	d10f      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b6c:	4baf      	ldr	r3, [pc, #700]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	4aae      	ldr	r2, [pc, #696]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004b78:	e00e      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	2102      	movs	r1, #2
 8004b80:	4618      	mov	r0, r3
 8004b82:	f001 f85f 	bl	8005c44 <RCCEx_PLL2_Config>
 8004b86:	4603      	mov	r3, r0
 8004b88:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004b8a:	e005      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b90:	e002      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004b92:	bf00      	nop
 8004b94:	e000      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004b96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b98:	7dfb      	ldrb	r3, [r7, #23]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d109      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004b9e:	4ba3      	ldr	r3, [pc, #652]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004baa:	49a0      	ldr	r1, [pc, #640]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004bb0:	e001      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb2:	7dfb      	ldrb	r3, [r7, #23]
 8004bb4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d047      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bca:	d030      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bd0:	d82a      	bhi.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004bd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bd6:	d02c      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004bd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bdc:	d824      	bhi.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be2:	d018      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be8:	d81e      	bhi.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf2:	d007      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004bf4:	e018      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bf6:	4b8d      	ldr	r3, [pc, #564]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfa:	4a8c      	ldr	r2, [pc, #560]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c02:	e017      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3304      	adds	r3, #4
 8004c08:	2100      	movs	r1, #0
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f001 f81a 	bl	8005c44 <RCCEx_PLL2_Config>
 8004c10:	4603      	mov	r3, r0
 8004c12:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c14:	e00e      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	3324      	adds	r3, #36	; 0x24
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f001 f8c3 	bl	8005da8 <RCCEx_PLL3_Config>
 8004c22:	4603      	mov	r3, r0
 8004c24:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c26:	e005      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c2c:	e002      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004c2e:	bf00      	nop
 8004c30:	e000      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004c32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c34:	7dfb      	ldrb	r3, [r7, #23]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d109      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c3a:	4b7c      	ldr	r3, [pc, #496]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c3e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c46:	4979      	ldr	r1, [pc, #484]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	650b      	str	r3, [r1, #80]	; 0x50
 8004c4c:	e001      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c4e:	7dfb      	ldrb	r3, [r7, #23]
 8004c50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d049      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c66:	d02e      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c6c:	d828      	bhi.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004c6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c72:	d02a      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004c74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c78:	d822      	bhi.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004c7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c7e:	d026      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004c80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c84:	d81c      	bhi.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004c86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c8a:	d010      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004c8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c90:	d816      	bhi.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d01d      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c9a:	d111      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 ffce 	bl	8005c44 <RCCEx_PLL2_Config>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004cac:	e012      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3324      	adds	r3, #36	; 0x24
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f001 f877 	bl	8005da8 <RCCEx_PLL3_Config>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004cbe:	e009      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8004cc4:	e006      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004cc6:	bf00      	nop
 8004cc8:	e004      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004cca:	bf00      	nop
 8004ccc:	e002      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004cce:	bf00      	nop
 8004cd0:	e000      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004cd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cd4:	7dfb      	ldrb	r3, [r7, #23]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d109      	bne.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004cda:	4b54      	ldr	r3, [pc, #336]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cde:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ce6:	4951      	ldr	r1, [pc, #324]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	650b      	str	r3, [r1, #80]	; 0x50
 8004cec:	e001      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cee:	7dfb      	ldrb	r3, [r7, #23]
 8004cf0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d04b      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d08:	d02e      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004d0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d0e:	d828      	bhi.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d14:	d02a      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d1a:	d822      	bhi.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d20:	d026      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004d22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d26:	d81c      	bhi.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d2c:	d010      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d32:	d816      	bhi.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01d      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004d38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d3c:	d111      	bne.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	3304      	adds	r3, #4
 8004d42:	2101      	movs	r1, #1
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 ff7d 	bl	8005c44 <RCCEx_PLL2_Config>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004d4e:	e012      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3324      	adds	r3, #36	; 0x24
 8004d54:	2101      	movs	r1, #1
 8004d56:	4618      	mov	r0, r3
 8004d58:	f001 f826 	bl	8005da8 <RCCEx_PLL3_Config>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004d60:	e009      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	75fb      	strb	r3, [r7, #23]
      break;
 8004d66:	e006      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004d68:	bf00      	nop
 8004d6a:	e004      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004d6c:	bf00      	nop
 8004d6e:	e002      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004d70:	bf00      	nop
 8004d72:	e000      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004d74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d76:	7dfb      	ldrb	r3, [r7, #23]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10a      	bne.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004d7c:	4b2b      	ldr	r3, [pc, #172]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d80:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d8a:	4928      	ldr	r1, [pc, #160]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	658b      	str	r3, [r1, #88]	; 0x58
 8004d90:	e001      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d92:	7dfb      	ldrb	r3, [r7, #23]
 8004d94:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d02f      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004da6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004daa:	d00e      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004dac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004db0:	d814      	bhi.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d015      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004db6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dba:	d10f      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dbc:	4b1b      	ldr	r3, [pc, #108]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc0:	4a1a      	ldr	r2, [pc, #104]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004dc8:	e00c      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	3304      	adds	r3, #4
 8004dce:	2101      	movs	r1, #1
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 ff37 	bl	8005c44 <RCCEx_PLL2_Config>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004dda:	e003      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	75fb      	strb	r3, [r7, #23]
      break;
 8004de0:	e000      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004de2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004de4:	7dfb      	ldrb	r3, [r7, #23]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d109      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004dea:	4b10      	ldr	r3, [pc, #64]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004df6:	490d      	ldr	r1, [pc, #52]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	650b      	str	r3, [r1, #80]	; 0x50
 8004dfc:	e001      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dfe:	7dfb      	ldrb	r3, [r7, #23]
 8004e00:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d033      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e12:	2b03      	cmp	r3, #3
 8004e14:	d81c      	bhi.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004e16:	a201      	add	r2, pc, #4	; (adr r2, 8004e1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1c:	08004e57 	.word	0x08004e57
 8004e20:	08004e31 	.word	0x08004e31
 8004e24:	08004e3f 	.word	0x08004e3f
 8004e28:	08004e57 	.word	0x08004e57
 8004e2c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e30:	4bb8      	ldr	r3, [pc, #736]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e34:	4ab7      	ldr	r2, [pc, #732]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004e3c:	e00c      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	3304      	adds	r3, #4
 8004e42:	2102      	movs	r1, #2
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 fefd 	bl	8005c44 <RCCEx_PLL2_Config>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004e4e:	e003      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	75fb      	strb	r3, [r7, #23]
      break;
 8004e54:	e000      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004e56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e58:	7dfb      	ldrb	r3, [r7, #23]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d109      	bne.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004e5e:	4bad      	ldr	r3, [pc, #692]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e62:	f023 0203 	bic.w	r2, r3, #3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6a:	49aa      	ldr	r1, [pc, #680]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004e70:	e001      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e72:	7dfb      	ldrb	r3, [r7, #23]
 8004e74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 8086 	beq.w	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e84:	4ba4      	ldr	r3, [pc, #656]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4aa3      	ldr	r2, [pc, #652]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e90:	f7fc fbd4 	bl	800163c <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e96:	e009      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e98:	f7fc fbd0 	bl	800163c <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b64      	cmp	r3, #100	; 0x64
 8004ea4:	d902      	bls.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	75fb      	strb	r3, [r7, #23]
        break;
 8004eaa:	e005      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004eac:	4b9a      	ldr	r3, [pc, #616]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0ef      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004eb8:	7dfb      	ldrb	r3, [r7, #23]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d166      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004ebe:	4b95      	ldr	r3, [pc, #596]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ec0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ec8:	4053      	eors	r3, r2
 8004eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d013      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ed2:	4b90      	ldr	r3, [pc, #576]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eda:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004edc:	4b8d      	ldr	r3, [pc, #564]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee0:	4a8c      	ldr	r2, [pc, #560]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ee8:	4b8a      	ldr	r3, [pc, #552]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eec:	4a89      	ldr	r2, [pc, #548]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ef2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004ef4:	4a87      	ldr	r2, [pc, #540]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f04:	d115      	bne.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f06:	f7fc fb99 	bl	800163c <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f0c:	e00b      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f0e:	f7fc fb95 	bl	800163c <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d902      	bls.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	75fb      	strb	r3, [r7, #23]
            break;
 8004f24:	e005      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f26:	4b7b      	ldr	r3, [pc, #492]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0ed      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004f32:	7dfb      	ldrb	r3, [r7, #23]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d126      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f46:	d10d      	bne.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004f48:	4b72      	ldr	r3, [pc, #456]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f56:	0919      	lsrs	r1, r3, #4
 8004f58:	4b70      	ldr	r3, [pc, #448]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8004f5a:	400b      	ands	r3, r1
 8004f5c:	496d      	ldr	r1, [pc, #436]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	610b      	str	r3, [r1, #16]
 8004f62:	e005      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004f64:	4b6b      	ldr	r3, [pc, #428]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	4a6a      	ldr	r2, [pc, #424]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f6a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f6e:	6113      	str	r3, [r2, #16]
 8004f70:	4b68      	ldr	r3, [pc, #416]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f7e:	4965      	ldr	r1, [pc, #404]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	670b      	str	r3, [r1, #112]	; 0x70
 8004f84:	e004      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f86:	7dfb      	ldrb	r3, [r7, #23]
 8004f88:	75bb      	strb	r3, [r7, #22]
 8004f8a:	e001      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f8c:	7dfb      	ldrb	r3, [r7, #23]
 8004f8e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d07e      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fa0:	2b28      	cmp	r3, #40	; 0x28
 8004fa2:	d867      	bhi.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004fa4:	a201      	add	r2, pc, #4	; (adr r2, 8004fac <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004faa:	bf00      	nop
 8004fac:	0800507b 	.word	0x0800507b
 8004fb0:	08005075 	.word	0x08005075
 8004fb4:	08005075 	.word	0x08005075
 8004fb8:	08005075 	.word	0x08005075
 8004fbc:	08005075 	.word	0x08005075
 8004fc0:	08005075 	.word	0x08005075
 8004fc4:	08005075 	.word	0x08005075
 8004fc8:	08005075 	.word	0x08005075
 8004fcc:	08005051 	.word	0x08005051
 8004fd0:	08005075 	.word	0x08005075
 8004fd4:	08005075 	.word	0x08005075
 8004fd8:	08005075 	.word	0x08005075
 8004fdc:	08005075 	.word	0x08005075
 8004fe0:	08005075 	.word	0x08005075
 8004fe4:	08005075 	.word	0x08005075
 8004fe8:	08005075 	.word	0x08005075
 8004fec:	08005063 	.word	0x08005063
 8004ff0:	08005075 	.word	0x08005075
 8004ff4:	08005075 	.word	0x08005075
 8004ff8:	08005075 	.word	0x08005075
 8004ffc:	08005075 	.word	0x08005075
 8005000:	08005075 	.word	0x08005075
 8005004:	08005075 	.word	0x08005075
 8005008:	08005075 	.word	0x08005075
 800500c:	0800507b 	.word	0x0800507b
 8005010:	08005075 	.word	0x08005075
 8005014:	08005075 	.word	0x08005075
 8005018:	08005075 	.word	0x08005075
 800501c:	08005075 	.word	0x08005075
 8005020:	08005075 	.word	0x08005075
 8005024:	08005075 	.word	0x08005075
 8005028:	08005075 	.word	0x08005075
 800502c:	0800507b 	.word	0x0800507b
 8005030:	08005075 	.word	0x08005075
 8005034:	08005075 	.word	0x08005075
 8005038:	08005075 	.word	0x08005075
 800503c:	08005075 	.word	0x08005075
 8005040:	08005075 	.word	0x08005075
 8005044:	08005075 	.word	0x08005075
 8005048:	08005075 	.word	0x08005075
 800504c:	0800507b 	.word	0x0800507b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3304      	adds	r3, #4
 8005054:	2101      	movs	r1, #1
 8005056:	4618      	mov	r0, r3
 8005058:	f000 fdf4 	bl	8005c44 <RCCEx_PLL2_Config>
 800505c:	4603      	mov	r3, r0
 800505e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005060:	e00c      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3324      	adds	r3, #36	; 0x24
 8005066:	2101      	movs	r1, #1
 8005068:	4618      	mov	r0, r3
 800506a:	f000 fe9d 	bl	8005da8 <RCCEx_PLL3_Config>
 800506e:	4603      	mov	r3, r0
 8005070:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005072:	e003      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	75fb      	strb	r3, [r7, #23]
      break;
 8005078:	e000      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800507a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800507c:	7dfb      	ldrb	r3, [r7, #23]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d109      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005082:	4b24      	ldr	r3, [pc, #144]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005086:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800508e:	4921      	ldr	r1, [pc, #132]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005090:	4313      	orrs	r3, r2
 8005092:	654b      	str	r3, [r1, #84]	; 0x54
 8005094:	e001      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005096:	7dfb      	ldrb	r3, [r7, #23]
 8005098:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d03e      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050aa:	2b05      	cmp	r3, #5
 80050ac:	d820      	bhi.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80050ae:	a201      	add	r2, pc, #4	; (adr r2, 80050b4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80050b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b4:	080050f7 	.word	0x080050f7
 80050b8:	080050cd 	.word	0x080050cd
 80050bc:	080050df 	.word	0x080050df
 80050c0:	080050f7 	.word	0x080050f7
 80050c4:	080050f7 	.word	0x080050f7
 80050c8:	080050f7 	.word	0x080050f7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3304      	adds	r3, #4
 80050d0:	2101      	movs	r1, #1
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fdb6 	bl	8005c44 <RCCEx_PLL2_Config>
 80050d8:	4603      	mov	r3, r0
 80050da:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80050dc:	e00c      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3324      	adds	r3, #36	; 0x24
 80050e2:	2101      	movs	r1, #1
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 fe5f 	bl	8005da8 <RCCEx_PLL3_Config>
 80050ea:	4603      	mov	r3, r0
 80050ec:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80050ee:	e003      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	75fb      	strb	r3, [r7, #23]
      break;
 80050f4:	e000      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80050f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050f8:	7dfb      	ldrb	r3, [r7, #23]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d110      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80050fe:	4b05      	ldr	r3, [pc, #20]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005102:	f023 0207 	bic.w	r2, r3, #7
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800510a:	4902      	ldr	r1, [pc, #8]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800510c:	4313      	orrs	r3, r2
 800510e:	654b      	str	r3, [r1, #84]	; 0x54
 8005110:	e008      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8005112:	bf00      	nop
 8005114:	58024400 	.word	0x58024400
 8005118:	58024800 	.word	0x58024800
 800511c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005120:	7dfb      	ldrb	r3, [r7, #23]
 8005122:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d039      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005136:	2b05      	cmp	r3, #5
 8005138:	d820      	bhi.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x934>
 800513a:	a201      	add	r2, pc, #4	; (adr r2, 8005140 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800513c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005140:	08005183 	.word	0x08005183
 8005144:	08005159 	.word	0x08005159
 8005148:	0800516b 	.word	0x0800516b
 800514c:	08005183 	.word	0x08005183
 8005150:	08005183 	.word	0x08005183
 8005154:	08005183 	.word	0x08005183
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	3304      	adds	r3, #4
 800515c:	2101      	movs	r1, #1
 800515e:	4618      	mov	r0, r3
 8005160:	f000 fd70 	bl	8005c44 <RCCEx_PLL2_Config>
 8005164:	4603      	mov	r3, r0
 8005166:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005168:	e00c      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	3324      	adds	r3, #36	; 0x24
 800516e:	2101      	movs	r1, #1
 8005170:	4618      	mov	r0, r3
 8005172:	f000 fe19 	bl	8005da8 <RCCEx_PLL3_Config>
 8005176:	4603      	mov	r3, r0
 8005178:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800517a:	e003      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	75fb      	strb	r3, [r7, #23]
      break;
 8005180:	e000      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8005182:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005184:	7dfb      	ldrb	r3, [r7, #23]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10a      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800518a:	4bb7      	ldr	r3, [pc, #732]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800518c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800518e:	f023 0207 	bic.w	r2, r3, #7
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005198:	49b3      	ldr	r1, [pc, #716]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800519a:	4313      	orrs	r3, r2
 800519c:	658b      	str	r3, [r1, #88]	; 0x58
 800519e:	e001      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a0:	7dfb      	ldrb	r3, [r7, #23]
 80051a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0320 	and.w	r3, r3, #32
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d04b      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051ba:	d02e      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80051bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051c0:	d828      	bhi.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80051c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c6:	d02a      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80051c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051cc:	d822      	bhi.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80051ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051d2:	d026      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80051d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051d8:	d81c      	bhi.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80051da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051de:	d010      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80051e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051e4:	d816      	bhi.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d01d      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80051ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051ee:	d111      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3304      	adds	r3, #4
 80051f4:	2100      	movs	r1, #0
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 fd24 	bl	8005c44 <RCCEx_PLL2_Config>
 80051fc:	4603      	mov	r3, r0
 80051fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005200:	e012      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	3324      	adds	r3, #36	; 0x24
 8005206:	2102      	movs	r1, #2
 8005208:	4618      	mov	r0, r3
 800520a:	f000 fdcd 	bl	8005da8 <RCCEx_PLL3_Config>
 800520e:	4603      	mov	r3, r0
 8005210:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005212:	e009      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	75fb      	strb	r3, [r7, #23]
      break;
 8005218:	e006      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800521a:	bf00      	nop
 800521c:	e004      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800521e:	bf00      	nop
 8005220:	e002      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005222:	bf00      	nop
 8005224:	e000      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005226:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005228:	7dfb      	ldrb	r3, [r7, #23]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10a      	bne.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800522e:	4b8e      	ldr	r3, [pc, #568]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005232:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800523c:	498a      	ldr	r1, [pc, #552]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800523e:	4313      	orrs	r3, r2
 8005240:	654b      	str	r3, [r1, #84]	; 0x54
 8005242:	e001      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005244:	7dfb      	ldrb	r3, [r7, #23]
 8005246:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	d04b      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800525a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800525e:	d02e      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005260:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005264:	d828      	bhi.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800526a:	d02a      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800526c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005270:	d822      	bhi.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005272:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005276:	d026      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005278:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800527c:	d81c      	bhi.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800527e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005282:	d010      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005288:	d816      	bhi.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800528a:	2b00      	cmp	r3, #0
 800528c:	d01d      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800528e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005292:	d111      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3304      	adds	r3, #4
 8005298:	2100      	movs	r1, #0
 800529a:	4618      	mov	r0, r3
 800529c:	f000 fcd2 	bl	8005c44 <RCCEx_PLL2_Config>
 80052a0:	4603      	mov	r3, r0
 80052a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80052a4:	e012      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	3324      	adds	r3, #36	; 0x24
 80052aa:	2102      	movs	r1, #2
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 fd7b 	bl	8005da8 <RCCEx_PLL3_Config>
 80052b2:	4603      	mov	r3, r0
 80052b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80052b6:	e009      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	75fb      	strb	r3, [r7, #23]
      break;
 80052bc:	e006      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80052be:	bf00      	nop
 80052c0:	e004      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80052c2:	bf00      	nop
 80052c4:	e002      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80052c6:	bf00      	nop
 80052c8:	e000      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80052ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052cc:	7dfb      	ldrb	r3, [r7, #23]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10a      	bne.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052d2:	4b65      	ldr	r3, [pc, #404]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80052d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052e0:	4961      	ldr	r1, [pc, #388]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	658b      	str	r3, [r1, #88]	; 0x58
 80052e6:	e001      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052e8:	7dfb      	ldrb	r3, [r7, #23]
 80052ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d04b      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005302:	d02e      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8005304:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005308:	d828      	bhi.n	800535c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800530a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800530e:	d02a      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8005310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005314:	d822      	bhi.n	800535c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005316:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800531a:	d026      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800531c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005320:	d81c      	bhi.n	800535c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005322:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005326:	d010      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800532c:	d816      	bhi.n	800535c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800532e:	2b00      	cmp	r3, #0
 8005330:	d01d      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005336:	d111      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3304      	adds	r3, #4
 800533c:	2100      	movs	r1, #0
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fc80 	bl	8005c44 <RCCEx_PLL2_Config>
 8005344:	4603      	mov	r3, r0
 8005346:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005348:	e012      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	3324      	adds	r3, #36	; 0x24
 800534e:	2102      	movs	r1, #2
 8005350:	4618      	mov	r0, r3
 8005352:	f000 fd29 	bl	8005da8 <RCCEx_PLL3_Config>
 8005356:	4603      	mov	r3, r0
 8005358:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800535a:	e009      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	75fb      	strb	r3, [r7, #23]
      break;
 8005360:	e006      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005362:	bf00      	nop
 8005364:	e004      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005366:	bf00      	nop
 8005368:	e002      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800536a:	bf00      	nop
 800536c:	e000      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800536e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005370:	7dfb      	ldrb	r3, [r7, #23]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10a      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005376:	4b3c      	ldr	r3, [pc, #240]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005384:	4938      	ldr	r1, [pc, #224]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005386:	4313      	orrs	r3, r2
 8005388:	658b      	str	r3, [r1, #88]	; 0x58
 800538a:	e001      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800538c:	7dfb      	ldrb	r3, [r7, #23]
 800538e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0308 	and.w	r3, r3, #8
 8005398:	2b00      	cmp	r3, #0
 800539a:	d01a      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a6:	d10a      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3324      	adds	r3, #36	; 0x24
 80053ac:	2102      	movs	r1, #2
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 fcfa 	bl	8005da8 <RCCEx_PLL3_Config>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80053be:	4b2a      	ldr	r3, [pc, #168]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80053c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053cc:	4926      	ldr	r1, [pc, #152]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0310 	and.w	r3, r3, #16
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d01a      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053e8:	d10a      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	3324      	adds	r3, #36	; 0x24
 80053ee:	2102      	movs	r1, #2
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 fcd9 	bl	8005da8 <RCCEx_PLL3_Config>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005400:	4b19      	ldr	r3, [pc, #100]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005404:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800540e:	4916      	ldr	r1, [pc, #88]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005410:	4313      	orrs	r3, r2
 8005412:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d036      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005426:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800542a:	d01f      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800542c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005430:	d817      	bhi.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8005436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800543a:	d009      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800543c:	e011      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	3304      	adds	r3, #4
 8005442:	2100      	movs	r1, #0
 8005444:	4618      	mov	r0, r3
 8005446:	f000 fbfd 	bl	8005c44 <RCCEx_PLL2_Config>
 800544a:	4603      	mov	r3, r0
 800544c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800544e:	e00e      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3324      	adds	r3, #36	; 0x24
 8005454:	2102      	movs	r1, #2
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fca6 	bl	8005da8 <RCCEx_PLL3_Config>
 800545c:	4603      	mov	r3, r0
 800545e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005460:	e005      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	75fb      	strb	r3, [r7, #23]
      break;
 8005466:	e002      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005468:	58024400 	.word	0x58024400
      break;
 800546c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800546e:	7dfb      	ldrb	r3, [r7, #23]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10a      	bne.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005474:	4b93      	ldr	r3, [pc, #588]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005478:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005482:	4990      	ldr	r1, [pc, #576]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005484:	4313      	orrs	r3, r2
 8005486:	658b      	str	r3, [r1, #88]	; 0x58
 8005488:	e001      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800548a:	7dfb      	ldrb	r3, [r7, #23]
 800548c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d033      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80054a4:	d01c      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80054a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80054aa:	d816      	bhi.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80054ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054b0:	d003      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80054b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054b6:	d007      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80054b8:	e00f      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ba:	4b82      	ldr	r3, [pc, #520]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054be:	4a81      	ldr	r2, [pc, #516]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80054c6:	e00c      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3324      	adds	r3, #36	; 0x24
 80054cc:	2101      	movs	r1, #1
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 fc6a 	bl	8005da8 <RCCEx_PLL3_Config>
 80054d4:	4603      	mov	r3, r0
 80054d6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80054d8:	e003      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	75fb      	strb	r3, [r7, #23]
      break;
 80054de:	e000      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80054e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054e2:	7dfb      	ldrb	r3, [r7, #23]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10a      	bne.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054e8:	4b76      	ldr	r3, [pc, #472]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054f6:	4973      	ldr	r1, [pc, #460]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	654b      	str	r3, [r1, #84]	; 0x54
 80054fc:	e001      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fe:	7dfb      	ldrb	r3, [r7, #23]
 8005500:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d029      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8005516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800551a:	d007      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800551c:	e00f      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800551e:	4b69      	ldr	r3, [pc, #420]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005522:	4a68      	ldr	r2, [pc, #416]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005528:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800552a:	e00b      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	3304      	adds	r3, #4
 8005530:	2102      	movs	r1, #2
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fb86 	bl	8005c44 <RCCEx_PLL2_Config>
 8005538:	4603      	mov	r3, r0
 800553a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800553c:	e002      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	75fb      	strb	r3, [r7, #23]
      break;
 8005542:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005544:	7dfb      	ldrb	r3, [r7, #23]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d109      	bne.n	800555e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800554a:	4b5e      	ldr	r3, [pc, #376]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800554c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800554e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005556:	495b      	ldr	r1, [pc, #364]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005558:	4313      	orrs	r3, r2
 800555a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800555c:	e001      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800555e:	7dfb      	ldrb	r3, [r7, #23]
 8005560:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3324      	adds	r3, #36	; 0x24
 8005572:	2102      	movs	r1, #2
 8005574:	4618      	mov	r0, r3
 8005576:	f000 fc17 	bl	8005da8 <RCCEx_PLL3_Config>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d030      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005594:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005598:	d017      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800559a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800559e:	d811      	bhi.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80055a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055a4:	d013      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80055a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055aa:	d80b      	bhi.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d010      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80055b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055b4:	d106      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055b6:	4b43      	ldr	r3, [pc, #268]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ba:	4a42      	ldr	r2, [pc, #264]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80055c2:	e007      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	75fb      	strb	r3, [r7, #23]
      break;
 80055c8:	e004      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80055ca:	bf00      	nop
 80055cc:	e002      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80055ce:	bf00      	nop
 80055d0:	e000      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80055d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055d4:	7dfb      	ldrb	r3, [r7, #23]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d109      	bne.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055da:	4b3a      	ldr	r3, [pc, #232]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055e6:	4937      	ldr	r1, [pc, #220]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	654b      	str	r3, [r1, #84]	; 0x54
 80055ec:	e001      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ee:	7dfb      	ldrb	r3, [r7, #23]
 80055f0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d008      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055fe:	4b31      	ldr	r3, [pc, #196]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005602:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560a:	492e      	ldr	r1, [pc, #184]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800560c:	4313      	orrs	r3, r2
 800560e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d009      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800561c:	4b29      	ldr	r3, [pc, #164]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800562a:	4926      	ldr	r1, [pc, #152]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800562c:	4313      	orrs	r3, r2
 800562e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d008      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800563c:	4b21      	ldr	r3, [pc, #132]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800563e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005640:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005648:	491e      	ldr	r1, [pc, #120]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800564a:	4313      	orrs	r3, r2
 800564c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00d      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800565a:	4b1a      	ldr	r3, [pc, #104]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	4a19      	ldr	r2, [pc, #100]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005660:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005664:	6113      	str	r3, [r2, #16]
 8005666:	4b17      	ldr	r3, [pc, #92]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005668:	691a      	ldr	r2, [r3, #16]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005670:	4914      	ldr	r1, [pc, #80]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005672:	4313      	orrs	r3, r2
 8005674:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	da08      	bge.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800567e:	4b11      	ldr	r3, [pc, #68]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005682:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800568a:	490e      	ldr	r1, [pc, #56]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800568c:	4313      	orrs	r3, r2
 800568e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d009      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800569c:	4b09      	ldr	r3, [pc, #36]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800569e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056aa:	4906      	ldr	r1, [pc, #24]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80056b0:	7dbb      	ldrb	r3, [r7, #22]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	e000      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3718      	adds	r7, #24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	58024400 	.word	0x58024400

080056c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80056cc:	f7ff f860 	bl	8004790 <HAL_RCC_GetHCLKFreq>
 80056d0:	4602      	mov	r2, r0
 80056d2:	4b06      	ldr	r3, [pc, #24]	; (80056ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	091b      	lsrs	r3, r3, #4
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	4904      	ldr	r1, [pc, #16]	; (80056f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80056de:	5ccb      	ldrb	r3, [r1, r3]
 80056e0:	f003 031f 	and.w	r3, r3, #31
 80056e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	58024400 	.word	0x58024400
 80056f0:	080084c8 	.word	0x080084c8

080056f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b089      	sub	sp, #36	; 0x24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056fc:	4ba1      	ldr	r3, [pc, #644]	; (8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005700:	f003 0303 	and.w	r3, r3, #3
 8005704:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005706:	4b9f      	ldr	r3, [pc, #636]	; (8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570a:	0b1b      	lsrs	r3, r3, #12
 800570c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005710:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005712:	4b9c      	ldr	r3, [pc, #624]	; (8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005716:	091b      	lsrs	r3, r3, #4
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800571e:	4b99      	ldr	r3, [pc, #612]	; (8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005722:	08db      	lsrs	r3, r3, #3
 8005724:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	fb02 f303 	mul.w	r3, r2, r3
 800572e:	ee07 3a90 	vmov	s15, r3
 8005732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005736:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 8111 	beq.w	8005964 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	2b02      	cmp	r3, #2
 8005746:	f000 8083 	beq.w	8005850 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	2b02      	cmp	r3, #2
 800574e:	f200 80a1 	bhi.w	8005894 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d003      	beq.n	8005760 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d056      	beq.n	800580c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800575e:	e099      	b.n	8005894 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005760:	4b88      	ldr	r3, [pc, #544]	; (8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0320 	and.w	r3, r3, #32
 8005768:	2b00      	cmp	r3, #0
 800576a:	d02d      	beq.n	80057c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800576c:	4b85      	ldr	r3, [pc, #532]	; (8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	08db      	lsrs	r3, r3, #3
 8005772:	f003 0303 	and.w	r3, r3, #3
 8005776:	4a84      	ldr	r2, [pc, #528]	; (8005988 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005778:	fa22 f303 	lsr.w	r3, r2, r3
 800577c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	ee07 3a90 	vmov	s15, r3
 8005784:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	ee07 3a90 	vmov	s15, r3
 800578e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005796:	4b7b      	ldr	r3, [pc, #492]	; (8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800579e:	ee07 3a90 	vmov	s15, r3
 80057a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80057aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800598c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80057c6:	e087      	b.n	80058d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005990 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80057d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057da:	4b6a      	ldr	r3, [pc, #424]	; (8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e2:	ee07 3a90 	vmov	s15, r3
 80057e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80057ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800598c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005806:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800580a:	e065      	b.n	80058d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	ee07 3a90 	vmov	s15, r3
 8005812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005816:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005994 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800581a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800581e:	4b59      	ldr	r3, [pc, #356]	; (8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800582e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005832:	eddf 5a56 	vldr	s11, [pc, #344]	; 800598c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800583a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800583e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800584a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800584e:	e043      	b.n	80058d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800585a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800585e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005862:	4b48      	ldr	r3, [pc, #288]	; (8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800586a:	ee07 3a90 	vmov	s15, r3
 800586e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005872:	ed97 6a03 	vldr	s12, [r7, #12]
 8005876:	eddf 5a45 	vldr	s11, [pc, #276]	; 800598c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800587a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800587e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800588a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800588e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005892:	e021      	b.n	80058d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	ee07 3a90 	vmov	s15, r3
 800589a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800589e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005994 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80058a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058a6:	4b37      	ldr	r3, [pc, #220]	; (8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ae:	ee07 3a90 	vmov	s15, r3
 80058b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800598c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80058d8:	4b2a      	ldr	r3, [pc, #168]	; (8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058dc:	0a5b      	lsrs	r3, r3, #9
 80058de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058e2:	ee07 3a90 	vmov	s15, r3
 80058e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80058f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058fe:	ee17 2a90 	vmov	r2, s15
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005906:	4b1f      	ldr	r3, [pc, #124]	; (8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590a:	0c1b      	lsrs	r3, r3, #16
 800590c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005910:	ee07 3a90 	vmov	s15, r3
 8005914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005918:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800591c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005920:	edd7 6a07 	vldr	s13, [r7, #28]
 8005924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800592c:	ee17 2a90 	vmov	r2, s15
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005934:	4b13      	ldr	r3, [pc, #76]	; (8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005938:	0e1b      	lsrs	r3, r3, #24
 800593a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800593e:	ee07 3a90 	vmov	s15, r3
 8005942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005946:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800594a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800594e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005952:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005956:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800595a:	ee17 2a90 	vmov	r2, s15
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005962:	e008      	b.n	8005976 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	609a      	str	r2, [r3, #8]
}
 8005976:	bf00      	nop
 8005978:	3724      	adds	r7, #36	; 0x24
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	58024400 	.word	0x58024400
 8005988:	03d09000 	.word	0x03d09000
 800598c:	46000000 	.word	0x46000000
 8005990:	4c742400 	.word	0x4c742400
 8005994:	4a742400 	.word	0x4a742400
 8005998:	4c371b00 	.word	0x4c371b00

0800599c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800599c:	b480      	push	{r7}
 800599e:	b089      	sub	sp, #36	; 0x24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059a4:	4ba1      	ldr	r3, [pc, #644]	; (8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a8:	f003 0303 	and.w	r3, r3, #3
 80059ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80059ae:	4b9f      	ldr	r3, [pc, #636]	; (8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b2:	0d1b      	lsrs	r3, r3, #20
 80059b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80059ba:	4b9c      	ldr	r3, [pc, #624]	; (8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059be:	0a1b      	lsrs	r3, r3, #8
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80059c6:	4b99      	ldr	r3, [pc, #612]	; (8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ca:	08db      	lsrs	r3, r3, #3
 80059cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	fb02 f303 	mul.w	r3, r2, r3
 80059d6:	ee07 3a90 	vmov	s15, r3
 80059da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 8111 	beq.w	8005c0c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	f000 8083 	beq.w	8005af8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	f200 80a1 	bhi.w	8005b3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d056      	beq.n	8005ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005a06:	e099      	b.n	8005b3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a08:	4b88      	ldr	r3, [pc, #544]	; (8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0320 	and.w	r3, r3, #32
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d02d      	beq.n	8005a70 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a14:	4b85      	ldr	r3, [pc, #532]	; (8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	08db      	lsrs	r3, r3, #3
 8005a1a:	f003 0303 	and.w	r3, r3, #3
 8005a1e:	4a84      	ldr	r2, [pc, #528]	; (8005c30 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005a20:	fa22 f303 	lsr.w	r3, r2, r3
 8005a24:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	ee07 3a90 	vmov	s15, r3
 8005a2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	ee07 3a90 	vmov	s15, r3
 8005a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a3e:	4b7b      	ldr	r3, [pc, #492]	; (8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a46:	ee07 3a90 	vmov	s15, r3
 8005a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a52:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005c34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a6a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005a6e:	e087      	b.n	8005b80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	ee07 3a90 	vmov	s15, r3
 8005a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005c38 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a82:	4b6a      	ldr	r3, [pc, #424]	; (8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a8a:	ee07 3a90 	vmov	s15, r3
 8005a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a96:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005c34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ab2:	e065      	b.n	8005b80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	ee07 3a90 	vmov	s15, r3
 8005aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005abe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005c3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ac6:	4b59      	ldr	r3, [pc, #356]	; (8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ace:	ee07 3a90 	vmov	s15, r3
 8005ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ada:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005c34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005af2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005af6:	e043      	b.n	8005b80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	ee07 3a90 	vmov	s15, r3
 8005afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b0a:	4b48      	ldr	r3, [pc, #288]	; (8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b12:	ee07 3a90 	vmov	s15, r3
 8005b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005c34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b3a:	e021      	b.n	8005b80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	ee07 3a90 	vmov	s15, r3
 8005b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005c3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b4e:	4b37      	ldr	r3, [pc, #220]	; (8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b56:	ee07 3a90 	vmov	s15, r3
 8005b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b62:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005c34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b7e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005b80:	4b2a      	ldr	r3, [pc, #168]	; (8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b84:	0a5b      	lsrs	r3, r3, #9
 8005b86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b8a:	ee07 3a90 	vmov	s15, r3
 8005b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ba2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ba6:	ee17 2a90 	vmov	r2, s15
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005bae:	4b1f      	ldr	r3, [pc, #124]	; (8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb2:	0c1b      	lsrs	r3, r3, #16
 8005bb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bb8:	ee07 3a90 	vmov	s15, r3
 8005bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bd4:	ee17 2a90 	vmov	r2, s15
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005bdc:	4b13      	ldr	r3, [pc, #76]	; (8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	0e1b      	lsrs	r3, r3, #24
 8005be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005be6:	ee07 3a90 	vmov	s15, r3
 8005bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c02:	ee17 2a90 	vmov	r2, s15
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005c0a:	e008      	b.n	8005c1e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	609a      	str	r2, [r3, #8]
}
 8005c1e:	bf00      	nop
 8005c20:	3724      	adds	r7, #36	; 0x24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	58024400 	.word	0x58024400
 8005c30:	03d09000 	.word	0x03d09000
 8005c34:	46000000 	.word	0x46000000
 8005c38:	4c742400 	.word	0x4c742400
 8005c3c:	4a742400 	.word	0x4a742400
 8005c40:	4c371b00 	.word	0x4c371b00

08005c44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c52:	4b53      	ldr	r3, [pc, #332]	; (8005da0 <RCCEx_PLL2_Config+0x15c>)
 8005c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c56:	f003 0303 	and.w	r3, r3, #3
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d101      	bne.n	8005c62 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e099      	b.n	8005d96 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005c62:	4b4f      	ldr	r3, [pc, #316]	; (8005da0 <RCCEx_PLL2_Config+0x15c>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a4e      	ldr	r2, [pc, #312]	; (8005da0 <RCCEx_PLL2_Config+0x15c>)
 8005c68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c6e:	f7fb fce5 	bl	800163c <HAL_GetTick>
 8005c72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c74:	e008      	b.n	8005c88 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005c76:	f7fb fce1 	bl	800163c <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d901      	bls.n	8005c88 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e086      	b.n	8005d96 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c88:	4b45      	ldr	r3, [pc, #276]	; (8005da0 <RCCEx_PLL2_Config+0x15c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1f0      	bne.n	8005c76 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005c94:	4b42      	ldr	r3, [pc, #264]	; (8005da0 <RCCEx_PLL2_Config+0x15c>)
 8005c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	031b      	lsls	r3, r3, #12
 8005ca2:	493f      	ldr	r1, [pc, #252]	; (8005da0 <RCCEx_PLL2_Config+0x15c>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	628b      	str	r3, [r1, #40]	; 0x28
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	3b01      	subs	r3, #1
 8005cae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	025b      	lsls	r3, r3, #9
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	041b      	lsls	r3, r3, #16
 8005cc6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	061b      	lsls	r3, r3, #24
 8005cd4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005cd8:	4931      	ldr	r1, [pc, #196]	; (8005da0 <RCCEx_PLL2_Config+0x15c>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005cde:	4b30      	ldr	r3, [pc, #192]	; (8005da0 <RCCEx_PLL2_Config+0x15c>)
 8005ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	492d      	ldr	r1, [pc, #180]	; (8005da0 <RCCEx_PLL2_Config+0x15c>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005cf0:	4b2b      	ldr	r3, [pc, #172]	; (8005da0 <RCCEx_PLL2_Config+0x15c>)
 8005cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf4:	f023 0220 	bic.w	r2, r3, #32
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	4928      	ldr	r1, [pc, #160]	; (8005da0 <RCCEx_PLL2_Config+0x15c>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005d02:	4b27      	ldr	r3, [pc, #156]	; (8005da0 <RCCEx_PLL2_Config+0x15c>)
 8005d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d06:	4a26      	ldr	r2, [pc, #152]	; (8005da0 <RCCEx_PLL2_Config+0x15c>)
 8005d08:	f023 0310 	bic.w	r3, r3, #16
 8005d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005d0e:	4b24      	ldr	r3, [pc, #144]	; (8005da0 <RCCEx_PLL2_Config+0x15c>)
 8005d10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d12:	4b24      	ldr	r3, [pc, #144]	; (8005da4 <RCCEx_PLL2_Config+0x160>)
 8005d14:	4013      	ands	r3, r2
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	69d2      	ldr	r2, [r2, #28]
 8005d1a:	00d2      	lsls	r2, r2, #3
 8005d1c:	4920      	ldr	r1, [pc, #128]	; (8005da0 <RCCEx_PLL2_Config+0x15c>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005d22:	4b1f      	ldr	r3, [pc, #124]	; (8005da0 <RCCEx_PLL2_Config+0x15c>)
 8005d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d26:	4a1e      	ldr	r2, [pc, #120]	; (8005da0 <RCCEx_PLL2_Config+0x15c>)
 8005d28:	f043 0310 	orr.w	r3, r3, #16
 8005d2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d106      	bne.n	8005d42 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005d34:	4b1a      	ldr	r3, [pc, #104]	; (8005da0 <RCCEx_PLL2_Config+0x15c>)
 8005d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d38:	4a19      	ldr	r2, [pc, #100]	; (8005da0 <RCCEx_PLL2_Config+0x15c>)
 8005d3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d40:	e00f      	b.n	8005d62 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d106      	bne.n	8005d56 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005d48:	4b15      	ldr	r3, [pc, #84]	; (8005da0 <RCCEx_PLL2_Config+0x15c>)
 8005d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4c:	4a14      	ldr	r2, [pc, #80]	; (8005da0 <RCCEx_PLL2_Config+0x15c>)
 8005d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d54:	e005      	b.n	8005d62 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005d56:	4b12      	ldr	r3, [pc, #72]	; (8005da0 <RCCEx_PLL2_Config+0x15c>)
 8005d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5a:	4a11      	ldr	r2, [pc, #68]	; (8005da0 <RCCEx_PLL2_Config+0x15c>)
 8005d5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005d62:	4b0f      	ldr	r3, [pc, #60]	; (8005da0 <RCCEx_PLL2_Config+0x15c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a0e      	ldr	r2, [pc, #56]	; (8005da0 <RCCEx_PLL2_Config+0x15c>)
 8005d68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d6e:	f7fb fc65 	bl	800163c <HAL_GetTick>
 8005d72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d74:	e008      	b.n	8005d88 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005d76:	f7fb fc61 	bl	800163c <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d901      	bls.n	8005d88 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e006      	b.n	8005d96 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d88:	4b05      	ldr	r3, [pc, #20]	; (8005da0 <RCCEx_PLL2_Config+0x15c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d0f0      	beq.n	8005d76 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	58024400 	.word	0x58024400
 8005da4:	ffff0007 	.word	0xffff0007

08005da8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005db6:	4b53      	ldr	r3, [pc, #332]	; (8005f04 <RCCEx_PLL3_Config+0x15c>)
 8005db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dba:	f003 0303 	and.w	r3, r3, #3
 8005dbe:	2b03      	cmp	r3, #3
 8005dc0:	d101      	bne.n	8005dc6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e099      	b.n	8005efa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005dc6:	4b4f      	ldr	r3, [pc, #316]	; (8005f04 <RCCEx_PLL3_Config+0x15c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a4e      	ldr	r2, [pc, #312]	; (8005f04 <RCCEx_PLL3_Config+0x15c>)
 8005dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dd2:	f7fb fc33 	bl	800163c <HAL_GetTick>
 8005dd6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005dd8:	e008      	b.n	8005dec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005dda:	f7fb fc2f 	bl	800163c <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d901      	bls.n	8005dec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e086      	b.n	8005efa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005dec:	4b45      	ldr	r3, [pc, #276]	; (8005f04 <RCCEx_PLL3_Config+0x15c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1f0      	bne.n	8005dda <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005df8:	4b42      	ldr	r3, [pc, #264]	; (8005f04 <RCCEx_PLL3_Config+0x15c>)
 8005dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	051b      	lsls	r3, r3, #20
 8005e06:	493f      	ldr	r1, [pc, #252]	; (8005f04 <RCCEx_PLL3_Config+0x15c>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	628b      	str	r3, [r1, #40]	; 0x28
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	3b01      	subs	r3, #1
 8005e12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	025b      	lsls	r3, r3, #9
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	431a      	orrs	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	041b      	lsls	r3, r3, #16
 8005e2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	3b01      	subs	r3, #1
 8005e36:	061b      	lsls	r3, r3, #24
 8005e38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e3c:	4931      	ldr	r1, [pc, #196]	; (8005f04 <RCCEx_PLL3_Config+0x15c>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005e42:	4b30      	ldr	r3, [pc, #192]	; (8005f04 <RCCEx_PLL3_Config+0x15c>)
 8005e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	492d      	ldr	r1, [pc, #180]	; (8005f04 <RCCEx_PLL3_Config+0x15c>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005e54:	4b2b      	ldr	r3, [pc, #172]	; (8005f04 <RCCEx_PLL3_Config+0x15c>)
 8005e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e58:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	4928      	ldr	r1, [pc, #160]	; (8005f04 <RCCEx_PLL3_Config+0x15c>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005e66:	4b27      	ldr	r3, [pc, #156]	; (8005f04 <RCCEx_PLL3_Config+0x15c>)
 8005e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6a:	4a26      	ldr	r2, [pc, #152]	; (8005f04 <RCCEx_PLL3_Config+0x15c>)
 8005e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005e72:	4b24      	ldr	r3, [pc, #144]	; (8005f04 <RCCEx_PLL3_Config+0x15c>)
 8005e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e76:	4b24      	ldr	r3, [pc, #144]	; (8005f08 <RCCEx_PLL3_Config+0x160>)
 8005e78:	4013      	ands	r3, r2
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	69d2      	ldr	r2, [r2, #28]
 8005e7e:	00d2      	lsls	r2, r2, #3
 8005e80:	4920      	ldr	r1, [pc, #128]	; (8005f04 <RCCEx_PLL3_Config+0x15c>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005e86:	4b1f      	ldr	r3, [pc, #124]	; (8005f04 <RCCEx_PLL3_Config+0x15c>)
 8005e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8a:	4a1e      	ldr	r2, [pc, #120]	; (8005f04 <RCCEx_PLL3_Config+0x15c>)
 8005e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d106      	bne.n	8005ea6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005e98:	4b1a      	ldr	r3, [pc, #104]	; (8005f04 <RCCEx_PLL3_Config+0x15c>)
 8005e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9c:	4a19      	ldr	r2, [pc, #100]	; (8005f04 <RCCEx_PLL3_Config+0x15c>)
 8005e9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ea2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ea4:	e00f      	b.n	8005ec6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d106      	bne.n	8005eba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005eac:	4b15      	ldr	r3, [pc, #84]	; (8005f04 <RCCEx_PLL3_Config+0x15c>)
 8005eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb0:	4a14      	ldr	r2, [pc, #80]	; (8005f04 <RCCEx_PLL3_Config+0x15c>)
 8005eb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005eb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005eb8:	e005      	b.n	8005ec6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005eba:	4b12      	ldr	r3, [pc, #72]	; (8005f04 <RCCEx_PLL3_Config+0x15c>)
 8005ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ebe:	4a11      	ldr	r2, [pc, #68]	; (8005f04 <RCCEx_PLL3_Config+0x15c>)
 8005ec0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ec4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005ec6:	4b0f      	ldr	r3, [pc, #60]	; (8005f04 <RCCEx_PLL3_Config+0x15c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a0e      	ldr	r2, [pc, #56]	; (8005f04 <RCCEx_PLL3_Config+0x15c>)
 8005ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ed0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ed2:	f7fb fbb3 	bl	800163c <HAL_GetTick>
 8005ed6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ed8:	e008      	b.n	8005eec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005eda:	f7fb fbaf 	bl	800163c <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d901      	bls.n	8005eec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e006      	b.n	8005efa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005eec:	4b05      	ldr	r3, [pc, #20]	; (8005f04 <RCCEx_PLL3_Config+0x15c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0f0      	beq.n	8005eda <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	58024400 	.word	0x58024400
 8005f08:	ffff0007 	.word	0xffff0007

08005f0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e049      	b.n	8005fb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d106      	bne.n	8005f38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7fa ffb2 	bl	8000e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3304      	adds	r3, #4
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	f000 fa9a 	bl	8006484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b082      	sub	sp, #8
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e049      	b.n	8006060 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d106      	bne.n	8005fe6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f841 	bl	8006068 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2202      	movs	r2, #2
 8005fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	f000 fa43 	bl	8006484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800608e:	2b01      	cmp	r3, #1
 8006090:	d101      	bne.n	8006096 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006092:	2302      	movs	r3, #2
 8006094:	e0fd      	b.n	8006292 <HAL_TIM_PWM_ConfigChannel+0x216>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2b14      	cmp	r3, #20
 80060a2:	f200 80f0 	bhi.w	8006286 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80060a6:	a201      	add	r2, pc, #4	; (adr r2, 80060ac <HAL_TIM_PWM_ConfigChannel+0x30>)
 80060a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ac:	08006101 	.word	0x08006101
 80060b0:	08006287 	.word	0x08006287
 80060b4:	08006287 	.word	0x08006287
 80060b8:	08006287 	.word	0x08006287
 80060bc:	08006141 	.word	0x08006141
 80060c0:	08006287 	.word	0x08006287
 80060c4:	08006287 	.word	0x08006287
 80060c8:	08006287 	.word	0x08006287
 80060cc:	08006183 	.word	0x08006183
 80060d0:	08006287 	.word	0x08006287
 80060d4:	08006287 	.word	0x08006287
 80060d8:	08006287 	.word	0x08006287
 80060dc:	080061c3 	.word	0x080061c3
 80060e0:	08006287 	.word	0x08006287
 80060e4:	08006287 	.word	0x08006287
 80060e8:	08006287 	.word	0x08006287
 80060ec:	08006205 	.word	0x08006205
 80060f0:	08006287 	.word	0x08006287
 80060f4:	08006287 	.word	0x08006287
 80060f8:	08006287 	.word	0x08006287
 80060fc:	08006245 	.word	0x08006245
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68b9      	ldr	r1, [r7, #8]
 8006106:	4618      	mov	r0, r3
 8006108:	f000 fa56 	bl	80065b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699a      	ldr	r2, [r3, #24]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f042 0208 	orr.w	r2, r2, #8
 800611a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	699a      	ldr	r2, [r3, #24]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f022 0204 	bic.w	r2, r2, #4
 800612a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6999      	ldr	r1, [r3, #24]
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	691a      	ldr	r2, [r3, #16]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	619a      	str	r2, [r3, #24]
      break;
 800613e:	e0a3      	b.n	8006288 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68b9      	ldr	r1, [r7, #8]
 8006146:	4618      	mov	r0, r3
 8006148:	f000 fac6 	bl	80066d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699a      	ldr	r2, [r3, #24]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800615a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699a      	ldr	r2, [r3, #24]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800616a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6999      	ldr	r1, [r3, #24]
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	021a      	lsls	r2, r3, #8
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	619a      	str	r2, [r3, #24]
      break;
 8006180:	e082      	b.n	8006288 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68b9      	ldr	r1, [r7, #8]
 8006188:	4618      	mov	r0, r3
 800618a:	f000 fb2f 	bl	80067ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	69da      	ldr	r2, [r3, #28]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f042 0208 	orr.w	r2, r2, #8
 800619c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	69da      	ldr	r2, [r3, #28]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0204 	bic.w	r2, r2, #4
 80061ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	69d9      	ldr	r1, [r3, #28]
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	691a      	ldr	r2, [r3, #16]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	430a      	orrs	r2, r1
 80061be:	61da      	str	r2, [r3, #28]
      break;
 80061c0:	e062      	b.n	8006288 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68b9      	ldr	r1, [r7, #8]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 fb95 	bl	80068f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69da      	ldr	r2, [r3, #28]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69da      	ldr	r2, [r3, #28]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69d9      	ldr	r1, [r3, #28]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	021a      	lsls	r2, r3, #8
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	430a      	orrs	r2, r1
 8006200:	61da      	str	r2, [r3, #28]
      break;
 8006202:	e041      	b.n	8006288 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68b9      	ldr	r1, [r7, #8]
 800620a:	4618      	mov	r0, r3
 800620c:	f000 fbdc 	bl	80069c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0208 	orr.w	r2, r2, #8
 800621e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0204 	bic.w	r2, r2, #4
 800622e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	691a      	ldr	r2, [r3, #16]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006242:	e021      	b.n	8006288 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68b9      	ldr	r1, [r7, #8]
 800624a:	4618      	mov	r0, r3
 800624c:	f000 fc1e 	bl	8006a8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800625e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800626e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	021a      	lsls	r2, r3, #8
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006284:	e000      	b.n	8006288 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006286:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop

0800629c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_TIM_ConfigClockSource+0x18>
 80062b0:	2302      	movs	r3, #2
 80062b2:	e0db      	b.n	800646c <HAL_TIM_ConfigClockSource+0x1d0>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	4b69      	ldr	r3, [pc, #420]	; (8006474 <HAL_TIM_ConfigClockSource+0x1d8>)
 80062d0:	4013      	ands	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a63      	ldr	r2, [pc, #396]	; (8006478 <HAL_TIM_ConfigClockSource+0x1dc>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	f000 80a9 	beq.w	8006442 <HAL_TIM_ConfigClockSource+0x1a6>
 80062f0:	4a61      	ldr	r2, [pc, #388]	; (8006478 <HAL_TIM_ConfigClockSource+0x1dc>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	f200 80ae 	bhi.w	8006454 <HAL_TIM_ConfigClockSource+0x1b8>
 80062f8:	4a60      	ldr	r2, [pc, #384]	; (800647c <HAL_TIM_ConfigClockSource+0x1e0>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	f000 80a1 	beq.w	8006442 <HAL_TIM_ConfigClockSource+0x1a6>
 8006300:	4a5e      	ldr	r2, [pc, #376]	; (800647c <HAL_TIM_ConfigClockSource+0x1e0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	f200 80a6 	bhi.w	8006454 <HAL_TIM_ConfigClockSource+0x1b8>
 8006308:	4a5d      	ldr	r2, [pc, #372]	; (8006480 <HAL_TIM_ConfigClockSource+0x1e4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	f000 8099 	beq.w	8006442 <HAL_TIM_ConfigClockSource+0x1a6>
 8006310:	4a5b      	ldr	r2, [pc, #364]	; (8006480 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006312:	4293      	cmp	r3, r2
 8006314:	f200 809e 	bhi.w	8006454 <HAL_TIM_ConfigClockSource+0x1b8>
 8006318:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800631c:	f000 8091 	beq.w	8006442 <HAL_TIM_ConfigClockSource+0x1a6>
 8006320:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006324:	f200 8096 	bhi.w	8006454 <HAL_TIM_ConfigClockSource+0x1b8>
 8006328:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800632c:	f000 8089 	beq.w	8006442 <HAL_TIM_ConfigClockSource+0x1a6>
 8006330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006334:	f200 808e 	bhi.w	8006454 <HAL_TIM_ConfigClockSource+0x1b8>
 8006338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800633c:	d03e      	beq.n	80063bc <HAL_TIM_ConfigClockSource+0x120>
 800633e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006342:	f200 8087 	bhi.w	8006454 <HAL_TIM_ConfigClockSource+0x1b8>
 8006346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800634a:	f000 8085 	beq.w	8006458 <HAL_TIM_ConfigClockSource+0x1bc>
 800634e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006352:	d87f      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x1b8>
 8006354:	2b70      	cmp	r3, #112	; 0x70
 8006356:	d01a      	beq.n	800638e <HAL_TIM_ConfigClockSource+0xf2>
 8006358:	2b70      	cmp	r3, #112	; 0x70
 800635a:	d87b      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x1b8>
 800635c:	2b60      	cmp	r3, #96	; 0x60
 800635e:	d050      	beq.n	8006402 <HAL_TIM_ConfigClockSource+0x166>
 8006360:	2b60      	cmp	r3, #96	; 0x60
 8006362:	d877      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x1b8>
 8006364:	2b50      	cmp	r3, #80	; 0x50
 8006366:	d03c      	beq.n	80063e2 <HAL_TIM_ConfigClockSource+0x146>
 8006368:	2b50      	cmp	r3, #80	; 0x50
 800636a:	d873      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x1b8>
 800636c:	2b40      	cmp	r3, #64	; 0x40
 800636e:	d058      	beq.n	8006422 <HAL_TIM_ConfigClockSource+0x186>
 8006370:	2b40      	cmp	r3, #64	; 0x40
 8006372:	d86f      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x1b8>
 8006374:	2b30      	cmp	r3, #48	; 0x30
 8006376:	d064      	beq.n	8006442 <HAL_TIM_ConfigClockSource+0x1a6>
 8006378:	2b30      	cmp	r3, #48	; 0x30
 800637a:	d86b      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x1b8>
 800637c:	2b20      	cmp	r3, #32
 800637e:	d060      	beq.n	8006442 <HAL_TIM_ConfigClockSource+0x1a6>
 8006380:	2b20      	cmp	r3, #32
 8006382:	d867      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x1b8>
 8006384:	2b00      	cmp	r3, #0
 8006386:	d05c      	beq.n	8006442 <HAL_TIM_ConfigClockSource+0x1a6>
 8006388:	2b10      	cmp	r3, #16
 800638a:	d05a      	beq.n	8006442 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800638c:	e062      	b.n	8006454 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6818      	ldr	r0, [r3, #0]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	6899      	ldr	r1, [r3, #8]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	f000 fc57 	bl	8006c50 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	609a      	str	r2, [r3, #8]
      break;
 80063ba:	e04e      	b.n	800645a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6818      	ldr	r0, [r3, #0]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	6899      	ldr	r1, [r3, #8]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f000 fc40 	bl	8006c50 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689a      	ldr	r2, [r3, #8]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063de:	609a      	str	r2, [r3, #8]
      break;
 80063e0:	e03b      	b.n	800645a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6818      	ldr	r0, [r3, #0]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	6859      	ldr	r1, [r3, #4]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	461a      	mov	r2, r3
 80063f0:	f000 fbb0 	bl	8006b54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2150      	movs	r1, #80	; 0x50
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 fc0a 	bl	8006c14 <TIM_ITRx_SetConfig>
      break;
 8006400:	e02b      	b.n	800645a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6818      	ldr	r0, [r3, #0]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	6859      	ldr	r1, [r3, #4]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	461a      	mov	r2, r3
 8006410:	f000 fbcf 	bl	8006bb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2160      	movs	r1, #96	; 0x60
 800641a:	4618      	mov	r0, r3
 800641c:	f000 fbfa 	bl	8006c14 <TIM_ITRx_SetConfig>
      break;
 8006420:	e01b      	b.n	800645a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6818      	ldr	r0, [r3, #0]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	6859      	ldr	r1, [r3, #4]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	461a      	mov	r2, r3
 8006430:	f000 fb90 	bl	8006b54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2140      	movs	r1, #64	; 0x40
 800643a:	4618      	mov	r0, r3
 800643c:	f000 fbea 	bl	8006c14 <TIM_ITRx_SetConfig>
      break;
 8006440:	e00b      	b.n	800645a <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4619      	mov	r1, r3
 800644c:	4610      	mov	r0, r2
 800644e:	f000 fbe1 	bl	8006c14 <TIM_ITRx_SetConfig>
        break;
 8006452:	e002      	b.n	800645a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8006454:	bf00      	nop
 8006456:	e000      	b.n	800645a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8006458:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	ffceff88 	.word	0xffceff88
 8006478:	00100040 	.word	0x00100040
 800647c:	00100030 	.word	0x00100030
 8006480:	00100020 	.word	0x00100020

08006484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a40      	ldr	r2, [pc, #256]	; (8006598 <TIM_Base_SetConfig+0x114>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d013      	beq.n	80064c4 <TIM_Base_SetConfig+0x40>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a2:	d00f      	beq.n	80064c4 <TIM_Base_SetConfig+0x40>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a3d      	ldr	r2, [pc, #244]	; (800659c <TIM_Base_SetConfig+0x118>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d00b      	beq.n	80064c4 <TIM_Base_SetConfig+0x40>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a3c      	ldr	r2, [pc, #240]	; (80065a0 <TIM_Base_SetConfig+0x11c>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d007      	beq.n	80064c4 <TIM_Base_SetConfig+0x40>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a3b      	ldr	r2, [pc, #236]	; (80065a4 <TIM_Base_SetConfig+0x120>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d003      	beq.n	80064c4 <TIM_Base_SetConfig+0x40>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a3a      	ldr	r2, [pc, #232]	; (80065a8 <TIM_Base_SetConfig+0x124>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d108      	bne.n	80064d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a2f      	ldr	r2, [pc, #188]	; (8006598 <TIM_Base_SetConfig+0x114>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d01f      	beq.n	800651e <TIM_Base_SetConfig+0x9a>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e4:	d01b      	beq.n	800651e <TIM_Base_SetConfig+0x9a>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a2c      	ldr	r2, [pc, #176]	; (800659c <TIM_Base_SetConfig+0x118>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d017      	beq.n	800651e <TIM_Base_SetConfig+0x9a>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a2b      	ldr	r2, [pc, #172]	; (80065a0 <TIM_Base_SetConfig+0x11c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d013      	beq.n	800651e <TIM_Base_SetConfig+0x9a>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a2a      	ldr	r2, [pc, #168]	; (80065a4 <TIM_Base_SetConfig+0x120>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d00f      	beq.n	800651e <TIM_Base_SetConfig+0x9a>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a29      	ldr	r2, [pc, #164]	; (80065a8 <TIM_Base_SetConfig+0x124>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d00b      	beq.n	800651e <TIM_Base_SetConfig+0x9a>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a28      	ldr	r2, [pc, #160]	; (80065ac <TIM_Base_SetConfig+0x128>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d007      	beq.n	800651e <TIM_Base_SetConfig+0x9a>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a27      	ldr	r2, [pc, #156]	; (80065b0 <TIM_Base_SetConfig+0x12c>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d003      	beq.n	800651e <TIM_Base_SetConfig+0x9a>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a26      	ldr	r2, [pc, #152]	; (80065b4 <TIM_Base_SetConfig+0x130>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d108      	bne.n	8006530 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	4313      	orrs	r3, r2
 800652e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	4313      	orrs	r3, r2
 800653c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	689a      	ldr	r2, [r3, #8]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a10      	ldr	r2, [pc, #64]	; (8006598 <TIM_Base_SetConfig+0x114>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d00f      	beq.n	800657c <TIM_Base_SetConfig+0xf8>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a12      	ldr	r2, [pc, #72]	; (80065a8 <TIM_Base_SetConfig+0x124>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d00b      	beq.n	800657c <TIM_Base_SetConfig+0xf8>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a11      	ldr	r2, [pc, #68]	; (80065ac <TIM_Base_SetConfig+0x128>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d007      	beq.n	800657c <TIM_Base_SetConfig+0xf8>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a10      	ldr	r2, [pc, #64]	; (80065b0 <TIM_Base_SetConfig+0x12c>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d003      	beq.n	800657c <TIM_Base_SetConfig+0xf8>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a0f      	ldr	r2, [pc, #60]	; (80065b4 <TIM_Base_SetConfig+0x130>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d103      	bne.n	8006584 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	691a      	ldr	r2, [r3, #16]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	615a      	str	r2, [r3, #20]
}
 800658a:	bf00      	nop
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	40010000 	.word	0x40010000
 800659c:	40000400 	.word	0x40000400
 80065a0:	40000800 	.word	0x40000800
 80065a4:	40000c00 	.word	0x40000c00
 80065a8:	40010400 	.word	0x40010400
 80065ac:	40014000 	.word	0x40014000
 80065b0:	40014400 	.word	0x40014400
 80065b4:	40014800 	.word	0x40014800

080065b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	f023 0201 	bic.w	r2, r3, #1
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	4b37      	ldr	r3, [pc, #220]	; (80066c0 <TIM_OC1_SetConfig+0x108>)
 80065e4:	4013      	ands	r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f023 0303 	bic.w	r3, r3, #3
 80065ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f023 0302 	bic.w	r3, r3, #2
 8006600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	4313      	orrs	r3, r2
 800660a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a2d      	ldr	r2, [pc, #180]	; (80066c4 <TIM_OC1_SetConfig+0x10c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d00f      	beq.n	8006634 <TIM_OC1_SetConfig+0x7c>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a2c      	ldr	r2, [pc, #176]	; (80066c8 <TIM_OC1_SetConfig+0x110>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d00b      	beq.n	8006634 <TIM_OC1_SetConfig+0x7c>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a2b      	ldr	r2, [pc, #172]	; (80066cc <TIM_OC1_SetConfig+0x114>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d007      	beq.n	8006634 <TIM_OC1_SetConfig+0x7c>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a2a      	ldr	r2, [pc, #168]	; (80066d0 <TIM_OC1_SetConfig+0x118>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d003      	beq.n	8006634 <TIM_OC1_SetConfig+0x7c>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a29      	ldr	r2, [pc, #164]	; (80066d4 <TIM_OC1_SetConfig+0x11c>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d10c      	bne.n	800664e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f023 0308 	bic.w	r3, r3, #8
 800663a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	4313      	orrs	r3, r2
 8006644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f023 0304 	bic.w	r3, r3, #4
 800664c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a1c      	ldr	r2, [pc, #112]	; (80066c4 <TIM_OC1_SetConfig+0x10c>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d00f      	beq.n	8006676 <TIM_OC1_SetConfig+0xbe>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a1b      	ldr	r2, [pc, #108]	; (80066c8 <TIM_OC1_SetConfig+0x110>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d00b      	beq.n	8006676 <TIM_OC1_SetConfig+0xbe>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a1a      	ldr	r2, [pc, #104]	; (80066cc <TIM_OC1_SetConfig+0x114>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d007      	beq.n	8006676 <TIM_OC1_SetConfig+0xbe>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a19      	ldr	r2, [pc, #100]	; (80066d0 <TIM_OC1_SetConfig+0x118>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d003      	beq.n	8006676 <TIM_OC1_SetConfig+0xbe>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a18      	ldr	r2, [pc, #96]	; (80066d4 <TIM_OC1_SetConfig+0x11c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d111      	bne.n	800669a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800667c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	4313      	orrs	r3, r2
 800668e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	4313      	orrs	r3, r2
 8006698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	621a      	str	r2, [r3, #32]
}
 80066b4:	bf00      	nop
 80066b6:	371c      	adds	r7, #28
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	fffeff8f 	.word	0xfffeff8f
 80066c4:	40010000 	.word	0x40010000
 80066c8:	40010400 	.word	0x40010400
 80066cc:	40014000 	.word	0x40014000
 80066d0:	40014400 	.word	0x40014400
 80066d4:	40014800 	.word	0x40014800

080066d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	f023 0210 	bic.w	r2, r3, #16
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	4b34      	ldr	r3, [pc, #208]	; (80067d4 <TIM_OC2_SetConfig+0xfc>)
 8006704:	4013      	ands	r3, r2
 8006706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800670e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	021b      	lsls	r3, r3, #8
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	4313      	orrs	r3, r2
 800671a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f023 0320 	bic.w	r3, r3, #32
 8006722:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	011b      	lsls	r3, r3, #4
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	4313      	orrs	r3, r2
 800672e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a29      	ldr	r2, [pc, #164]	; (80067d8 <TIM_OC2_SetConfig+0x100>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d003      	beq.n	8006740 <TIM_OC2_SetConfig+0x68>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a28      	ldr	r2, [pc, #160]	; (80067dc <TIM_OC2_SetConfig+0x104>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d10d      	bne.n	800675c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	011b      	lsls	r3, r3, #4
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	4313      	orrs	r3, r2
 8006752:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800675a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a1e      	ldr	r2, [pc, #120]	; (80067d8 <TIM_OC2_SetConfig+0x100>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d00f      	beq.n	8006784 <TIM_OC2_SetConfig+0xac>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a1d      	ldr	r2, [pc, #116]	; (80067dc <TIM_OC2_SetConfig+0x104>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d00b      	beq.n	8006784 <TIM_OC2_SetConfig+0xac>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a1c      	ldr	r2, [pc, #112]	; (80067e0 <TIM_OC2_SetConfig+0x108>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d007      	beq.n	8006784 <TIM_OC2_SetConfig+0xac>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a1b      	ldr	r2, [pc, #108]	; (80067e4 <TIM_OC2_SetConfig+0x10c>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d003      	beq.n	8006784 <TIM_OC2_SetConfig+0xac>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a1a      	ldr	r2, [pc, #104]	; (80067e8 <TIM_OC2_SetConfig+0x110>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d113      	bne.n	80067ac <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800678a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006792:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	4313      	orrs	r3, r2
 800679e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	621a      	str	r2, [r3, #32]
}
 80067c6:	bf00      	nop
 80067c8:	371c      	adds	r7, #28
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	feff8fff 	.word	0xfeff8fff
 80067d8:	40010000 	.word	0x40010000
 80067dc:	40010400 	.word	0x40010400
 80067e0:	40014000 	.word	0x40014000
 80067e4:	40014400 	.word	0x40014400
 80067e8:	40014800 	.word	0x40014800

080067ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	69db      	ldr	r3, [r3, #28]
 8006812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800681a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f023 0303 	bic.w	r3, r3, #3
 8006822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	4313      	orrs	r3, r2
 800682c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	021b      	lsls	r3, r3, #8
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	4313      	orrs	r3, r2
 8006840:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a27      	ldr	r2, [pc, #156]	; (80068e4 <TIM_OC3_SetConfig+0xf8>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d003      	beq.n	8006852 <TIM_OC3_SetConfig+0x66>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a26      	ldr	r2, [pc, #152]	; (80068e8 <TIM_OC3_SetConfig+0xfc>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d10d      	bne.n	800686e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006858:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	021b      	lsls	r3, r3, #8
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	4313      	orrs	r3, r2
 8006864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800686c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a1c      	ldr	r2, [pc, #112]	; (80068e4 <TIM_OC3_SetConfig+0xf8>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d00f      	beq.n	8006896 <TIM_OC3_SetConfig+0xaa>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a1b      	ldr	r2, [pc, #108]	; (80068e8 <TIM_OC3_SetConfig+0xfc>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d00b      	beq.n	8006896 <TIM_OC3_SetConfig+0xaa>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a1a      	ldr	r2, [pc, #104]	; (80068ec <TIM_OC3_SetConfig+0x100>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d007      	beq.n	8006896 <TIM_OC3_SetConfig+0xaa>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a19      	ldr	r2, [pc, #100]	; (80068f0 <TIM_OC3_SetConfig+0x104>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d003      	beq.n	8006896 <TIM_OC3_SetConfig+0xaa>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a18      	ldr	r2, [pc, #96]	; (80068f4 <TIM_OC3_SetConfig+0x108>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d113      	bne.n	80068be <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800689c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	011b      	lsls	r3, r3, #4
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	011b      	lsls	r3, r3, #4
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	621a      	str	r2, [r3, #32]
}
 80068d8:	bf00      	nop
 80068da:	371c      	adds	r7, #28
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	40010000 	.word	0x40010000
 80068e8:	40010400 	.word	0x40010400
 80068ec:	40014000 	.word	0x40014000
 80068f0:	40014400 	.word	0x40014400
 80068f4:	40014800 	.word	0x40014800

080068f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800692e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	021b      	lsls	r3, r3, #8
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	4313      	orrs	r3, r2
 800693a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006942:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	031b      	lsls	r3, r3, #12
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	4313      	orrs	r3, r2
 800694e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a18      	ldr	r2, [pc, #96]	; (80069b4 <TIM_OC4_SetConfig+0xbc>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d00f      	beq.n	8006978 <TIM_OC4_SetConfig+0x80>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a17      	ldr	r2, [pc, #92]	; (80069b8 <TIM_OC4_SetConfig+0xc0>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d00b      	beq.n	8006978 <TIM_OC4_SetConfig+0x80>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a16      	ldr	r2, [pc, #88]	; (80069bc <TIM_OC4_SetConfig+0xc4>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d007      	beq.n	8006978 <TIM_OC4_SetConfig+0x80>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a15      	ldr	r2, [pc, #84]	; (80069c0 <TIM_OC4_SetConfig+0xc8>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d003      	beq.n	8006978 <TIM_OC4_SetConfig+0x80>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a14      	ldr	r2, [pc, #80]	; (80069c4 <TIM_OC4_SetConfig+0xcc>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d109      	bne.n	800698c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800697e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	019b      	lsls	r3, r3, #6
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	4313      	orrs	r3, r2
 800698a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	621a      	str	r2, [r3, #32]
}
 80069a6:	bf00      	nop
 80069a8:	371c      	adds	r7, #28
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	40010000 	.word	0x40010000
 80069b8:	40010400 	.word	0x40010400
 80069bc:	40014000 	.word	0x40014000
 80069c0:	40014400 	.word	0x40014400
 80069c4:	40014800 	.word	0x40014800

080069c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	041b      	lsls	r3, r3, #16
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a17      	ldr	r2, [pc, #92]	; (8006a78 <TIM_OC5_SetConfig+0xb0>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d00f      	beq.n	8006a3e <TIM_OC5_SetConfig+0x76>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a16      	ldr	r2, [pc, #88]	; (8006a7c <TIM_OC5_SetConfig+0xb4>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d00b      	beq.n	8006a3e <TIM_OC5_SetConfig+0x76>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a15      	ldr	r2, [pc, #84]	; (8006a80 <TIM_OC5_SetConfig+0xb8>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d007      	beq.n	8006a3e <TIM_OC5_SetConfig+0x76>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a14      	ldr	r2, [pc, #80]	; (8006a84 <TIM_OC5_SetConfig+0xbc>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d003      	beq.n	8006a3e <TIM_OC5_SetConfig+0x76>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a13      	ldr	r2, [pc, #76]	; (8006a88 <TIM_OC5_SetConfig+0xc0>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d109      	bne.n	8006a52 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	021b      	lsls	r3, r3, #8
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	621a      	str	r2, [r3, #32]
}
 8006a6c:	bf00      	nop
 8006a6e:	371c      	adds	r7, #28
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr
 8006a78:	40010000 	.word	0x40010000
 8006a7c:	40010400 	.word	0x40010400
 8006a80:	40014000 	.word	0x40014000
 8006a84:	40014400 	.word	0x40014400
 8006a88:	40014800 	.word	0x40014800

08006a8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	021b      	lsls	r3, r3, #8
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ace:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	051b      	lsls	r3, r3, #20
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a18      	ldr	r2, [pc, #96]	; (8006b40 <TIM_OC6_SetConfig+0xb4>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d00f      	beq.n	8006b04 <TIM_OC6_SetConfig+0x78>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a17      	ldr	r2, [pc, #92]	; (8006b44 <TIM_OC6_SetConfig+0xb8>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d00b      	beq.n	8006b04 <TIM_OC6_SetConfig+0x78>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a16      	ldr	r2, [pc, #88]	; (8006b48 <TIM_OC6_SetConfig+0xbc>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d007      	beq.n	8006b04 <TIM_OC6_SetConfig+0x78>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a15      	ldr	r2, [pc, #84]	; (8006b4c <TIM_OC6_SetConfig+0xc0>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d003      	beq.n	8006b04 <TIM_OC6_SetConfig+0x78>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a14      	ldr	r2, [pc, #80]	; (8006b50 <TIM_OC6_SetConfig+0xc4>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d109      	bne.n	8006b18 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	029b      	lsls	r3, r3, #10
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	621a      	str	r2, [r3, #32]
}
 8006b32:	bf00      	nop
 8006b34:	371c      	adds	r7, #28
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	40010000 	.word	0x40010000
 8006b44:	40010400 	.word	0x40010400
 8006b48:	40014000 	.word	0x40014000
 8006b4c:	40014400 	.word	0x40014400
 8006b50:	40014800 	.word	0x40014800

08006b54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b087      	sub	sp, #28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	f023 0201 	bic.w	r2, r3, #1
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	011b      	lsls	r3, r3, #4
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f023 030a 	bic.w	r3, r3, #10
 8006b90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	621a      	str	r2, [r3, #32]
}
 8006ba6:	bf00      	nop
 8006ba8:	371c      	adds	r7, #28
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b087      	sub	sp, #28
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	60f8      	str	r0, [r7, #12]
 8006bba:	60b9      	str	r1, [r7, #8]
 8006bbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	f023 0210 	bic.w	r2, r3, #16
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6a1b      	ldr	r3, [r3, #32]
 8006bd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	031b      	lsls	r3, r3, #12
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	011b      	lsls	r3, r3, #4
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	621a      	str	r2, [r3, #32]
}
 8006c06:	bf00      	nop
 8006c08:	371c      	adds	r7, #28
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
	...

08006c14 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	4b09      	ldr	r3, [pc, #36]	; (8006c4c <TIM_ITRx_SetConfig+0x38>)
 8006c28:	4013      	ands	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	f043 0307 	orr.w	r3, r3, #7
 8006c36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	609a      	str	r2, [r3, #8]
}
 8006c3e:	bf00      	nop
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	ffcfff8f 	.word	0xffcfff8f

08006c50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b087      	sub	sp, #28
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
 8006c5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	021a      	lsls	r2, r3, #8
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	431a      	orrs	r2, r3
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	609a      	str	r2, [r3, #8]
}
 8006c84:	bf00      	nop
 8006c86:	371c      	adds	r7, #28
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d101      	bne.n	8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	e068      	b.n	8006d7a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a2e      	ldr	r2, [pc, #184]	; (8006d88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d004      	beq.n	8006cdc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a2d      	ldr	r2, [pc, #180]	; (8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d108      	bne.n	8006cee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ce2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a1e      	ldr	r2, [pc, #120]	; (8006d88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d01d      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d1a:	d018      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a1b      	ldr	r2, [pc, #108]	; (8006d90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d013      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a1a      	ldr	r2, [pc, #104]	; (8006d94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d00e      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a18      	ldr	r2, [pc, #96]	; (8006d98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d009      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a13      	ldr	r2, [pc, #76]	; (8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d004      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a14      	ldr	r2, [pc, #80]	; (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d10c      	bne.n	8006d68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	40010000 	.word	0x40010000
 8006d8c:	40010400 	.word	0x40010400
 8006d90:	40000400 	.word	0x40000400
 8006d94:	40000800 	.word	0x40000800
 8006d98:	40000c00 	.word	0x40000c00
 8006d9c:	40001800 	.word	0x40001800

08006da0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d101      	bne.n	8006dbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006db8:	2302      	movs	r3, #2
 8006dba:	e065      	b.n	8006e88 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	041b      	lsls	r3, r3, #16
 8006e32:	4313      	orrs	r3, r2
 8006e34:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a16      	ldr	r2, [pc, #88]	; (8006e94 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d004      	beq.n	8006e4a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a14      	ldr	r2, [pc, #80]	; (8006e98 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d115      	bne.n	8006e76 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e54:	051b      	lsls	r3, r3, #20
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	69db      	ldr	r3, [r3, #28]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	40010000 	.word	0x40010000
 8006e98:	40010400 	.word	0x40010400

08006e9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e042      	b.n	8006f34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d106      	bne.n	8006ec6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f7fa f8ff 	bl	80010c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2224      	movs	r2, #36	; 0x24
 8006eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 0201 	bic.w	r2, r2, #1
 8006edc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f82c 	bl	8006f3c <UART_SetConfig>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d101      	bne.n	8006eee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e022      	b.n	8006f34 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d002      	beq.n	8006efc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fd80 	bl	80079fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689a      	ldr	r2, [r3, #8]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f042 0201 	orr.w	r2, r2, #1
 8006f2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fe07 	bl	8007b40 <UART_CheckIdleState>
 8006f32:	4603      	mov	r3, r0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f3c:	b5b0      	push	{r4, r5, r7, lr}
 8006f3e:	b08e      	sub	sp, #56	; 0x38
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f44:	2300      	movs	r3, #0
 8006f46:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	689a      	ldr	r2, [r3, #8]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	431a      	orrs	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	431a      	orrs	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	4bbf      	ldr	r3, [pc, #764]	; (8007268 <UART_SetConfig+0x32c>)
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	6812      	ldr	r2, [r2, #0]
 8006f70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006f72:	430b      	orrs	r3, r1
 8006f74:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68da      	ldr	r2, [r3, #12]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4ab5      	ldr	r2, [pc, #724]	; (800726c <UART_SetConfig+0x330>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d004      	beq.n	8006fa6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a1b      	ldr	r3, [r3, #32]
 8006fa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	689a      	ldr	r2, [r3, #8]
 8006fac:	4bb0      	ldr	r3, [pc, #704]	; (8007270 <UART_SetConfig+0x334>)
 8006fae:	4013      	ands	r3, r2
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	6812      	ldr	r2, [r2, #0]
 8006fb4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006fb6:	430b      	orrs	r3, r1
 8006fb8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc0:	f023 010f 	bic.w	r1, r3, #15
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4aa7      	ldr	r2, [pc, #668]	; (8007274 <UART_SetConfig+0x338>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d176      	bne.n	80070c8 <UART_SetConfig+0x18c>
 8006fda:	4ba7      	ldr	r3, [pc, #668]	; (8007278 <UART_SetConfig+0x33c>)
 8006fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fe2:	2b28      	cmp	r3, #40	; 0x28
 8006fe4:	d86c      	bhi.n	80070c0 <UART_SetConfig+0x184>
 8006fe6:	a201      	add	r2, pc, #4	; (adr r2, 8006fec <UART_SetConfig+0xb0>)
 8006fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fec:	08007091 	.word	0x08007091
 8006ff0:	080070c1 	.word	0x080070c1
 8006ff4:	080070c1 	.word	0x080070c1
 8006ff8:	080070c1 	.word	0x080070c1
 8006ffc:	080070c1 	.word	0x080070c1
 8007000:	080070c1 	.word	0x080070c1
 8007004:	080070c1 	.word	0x080070c1
 8007008:	080070c1 	.word	0x080070c1
 800700c:	08007099 	.word	0x08007099
 8007010:	080070c1 	.word	0x080070c1
 8007014:	080070c1 	.word	0x080070c1
 8007018:	080070c1 	.word	0x080070c1
 800701c:	080070c1 	.word	0x080070c1
 8007020:	080070c1 	.word	0x080070c1
 8007024:	080070c1 	.word	0x080070c1
 8007028:	080070c1 	.word	0x080070c1
 800702c:	080070a1 	.word	0x080070a1
 8007030:	080070c1 	.word	0x080070c1
 8007034:	080070c1 	.word	0x080070c1
 8007038:	080070c1 	.word	0x080070c1
 800703c:	080070c1 	.word	0x080070c1
 8007040:	080070c1 	.word	0x080070c1
 8007044:	080070c1 	.word	0x080070c1
 8007048:	080070c1 	.word	0x080070c1
 800704c:	080070a9 	.word	0x080070a9
 8007050:	080070c1 	.word	0x080070c1
 8007054:	080070c1 	.word	0x080070c1
 8007058:	080070c1 	.word	0x080070c1
 800705c:	080070c1 	.word	0x080070c1
 8007060:	080070c1 	.word	0x080070c1
 8007064:	080070c1 	.word	0x080070c1
 8007068:	080070c1 	.word	0x080070c1
 800706c:	080070b1 	.word	0x080070b1
 8007070:	080070c1 	.word	0x080070c1
 8007074:	080070c1 	.word	0x080070c1
 8007078:	080070c1 	.word	0x080070c1
 800707c:	080070c1 	.word	0x080070c1
 8007080:	080070c1 	.word	0x080070c1
 8007084:	080070c1 	.word	0x080070c1
 8007088:	080070c1 	.word	0x080070c1
 800708c:	080070b9 	.word	0x080070b9
 8007090:	2301      	movs	r3, #1
 8007092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007096:	e222      	b.n	80074de <UART_SetConfig+0x5a2>
 8007098:	2304      	movs	r3, #4
 800709a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800709e:	e21e      	b.n	80074de <UART_SetConfig+0x5a2>
 80070a0:	2308      	movs	r3, #8
 80070a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070a6:	e21a      	b.n	80074de <UART_SetConfig+0x5a2>
 80070a8:	2310      	movs	r3, #16
 80070aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070ae:	e216      	b.n	80074de <UART_SetConfig+0x5a2>
 80070b0:	2320      	movs	r3, #32
 80070b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070b6:	e212      	b.n	80074de <UART_SetConfig+0x5a2>
 80070b8:	2340      	movs	r3, #64	; 0x40
 80070ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070be:	e20e      	b.n	80074de <UART_SetConfig+0x5a2>
 80070c0:	2380      	movs	r3, #128	; 0x80
 80070c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070c6:	e20a      	b.n	80074de <UART_SetConfig+0x5a2>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a6b      	ldr	r2, [pc, #428]	; (800727c <UART_SetConfig+0x340>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d130      	bne.n	8007134 <UART_SetConfig+0x1f8>
 80070d2:	4b69      	ldr	r3, [pc, #420]	; (8007278 <UART_SetConfig+0x33c>)
 80070d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	2b05      	cmp	r3, #5
 80070dc:	d826      	bhi.n	800712c <UART_SetConfig+0x1f0>
 80070de:	a201      	add	r2, pc, #4	; (adr r2, 80070e4 <UART_SetConfig+0x1a8>)
 80070e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e4:	080070fd 	.word	0x080070fd
 80070e8:	08007105 	.word	0x08007105
 80070ec:	0800710d 	.word	0x0800710d
 80070f0:	08007115 	.word	0x08007115
 80070f4:	0800711d 	.word	0x0800711d
 80070f8:	08007125 	.word	0x08007125
 80070fc:	2300      	movs	r3, #0
 80070fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007102:	e1ec      	b.n	80074de <UART_SetConfig+0x5a2>
 8007104:	2304      	movs	r3, #4
 8007106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800710a:	e1e8      	b.n	80074de <UART_SetConfig+0x5a2>
 800710c:	2308      	movs	r3, #8
 800710e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007112:	e1e4      	b.n	80074de <UART_SetConfig+0x5a2>
 8007114:	2310      	movs	r3, #16
 8007116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800711a:	e1e0      	b.n	80074de <UART_SetConfig+0x5a2>
 800711c:	2320      	movs	r3, #32
 800711e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007122:	e1dc      	b.n	80074de <UART_SetConfig+0x5a2>
 8007124:	2340      	movs	r3, #64	; 0x40
 8007126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800712a:	e1d8      	b.n	80074de <UART_SetConfig+0x5a2>
 800712c:	2380      	movs	r3, #128	; 0x80
 800712e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007132:	e1d4      	b.n	80074de <UART_SetConfig+0x5a2>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a51      	ldr	r2, [pc, #324]	; (8007280 <UART_SetConfig+0x344>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d130      	bne.n	80071a0 <UART_SetConfig+0x264>
 800713e:	4b4e      	ldr	r3, [pc, #312]	; (8007278 <UART_SetConfig+0x33c>)
 8007140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007142:	f003 0307 	and.w	r3, r3, #7
 8007146:	2b05      	cmp	r3, #5
 8007148:	d826      	bhi.n	8007198 <UART_SetConfig+0x25c>
 800714a:	a201      	add	r2, pc, #4	; (adr r2, 8007150 <UART_SetConfig+0x214>)
 800714c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007150:	08007169 	.word	0x08007169
 8007154:	08007171 	.word	0x08007171
 8007158:	08007179 	.word	0x08007179
 800715c:	08007181 	.word	0x08007181
 8007160:	08007189 	.word	0x08007189
 8007164:	08007191 	.word	0x08007191
 8007168:	2300      	movs	r3, #0
 800716a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800716e:	e1b6      	b.n	80074de <UART_SetConfig+0x5a2>
 8007170:	2304      	movs	r3, #4
 8007172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007176:	e1b2      	b.n	80074de <UART_SetConfig+0x5a2>
 8007178:	2308      	movs	r3, #8
 800717a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800717e:	e1ae      	b.n	80074de <UART_SetConfig+0x5a2>
 8007180:	2310      	movs	r3, #16
 8007182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007186:	e1aa      	b.n	80074de <UART_SetConfig+0x5a2>
 8007188:	2320      	movs	r3, #32
 800718a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800718e:	e1a6      	b.n	80074de <UART_SetConfig+0x5a2>
 8007190:	2340      	movs	r3, #64	; 0x40
 8007192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007196:	e1a2      	b.n	80074de <UART_SetConfig+0x5a2>
 8007198:	2380      	movs	r3, #128	; 0x80
 800719a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800719e:	e19e      	b.n	80074de <UART_SetConfig+0x5a2>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a37      	ldr	r2, [pc, #220]	; (8007284 <UART_SetConfig+0x348>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d130      	bne.n	800720c <UART_SetConfig+0x2d0>
 80071aa:	4b33      	ldr	r3, [pc, #204]	; (8007278 <UART_SetConfig+0x33c>)
 80071ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ae:	f003 0307 	and.w	r3, r3, #7
 80071b2:	2b05      	cmp	r3, #5
 80071b4:	d826      	bhi.n	8007204 <UART_SetConfig+0x2c8>
 80071b6:	a201      	add	r2, pc, #4	; (adr r2, 80071bc <UART_SetConfig+0x280>)
 80071b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071bc:	080071d5 	.word	0x080071d5
 80071c0:	080071dd 	.word	0x080071dd
 80071c4:	080071e5 	.word	0x080071e5
 80071c8:	080071ed 	.word	0x080071ed
 80071cc:	080071f5 	.word	0x080071f5
 80071d0:	080071fd 	.word	0x080071fd
 80071d4:	2300      	movs	r3, #0
 80071d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071da:	e180      	b.n	80074de <UART_SetConfig+0x5a2>
 80071dc:	2304      	movs	r3, #4
 80071de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071e2:	e17c      	b.n	80074de <UART_SetConfig+0x5a2>
 80071e4:	2308      	movs	r3, #8
 80071e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ea:	e178      	b.n	80074de <UART_SetConfig+0x5a2>
 80071ec:	2310      	movs	r3, #16
 80071ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071f2:	e174      	b.n	80074de <UART_SetConfig+0x5a2>
 80071f4:	2320      	movs	r3, #32
 80071f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071fa:	e170      	b.n	80074de <UART_SetConfig+0x5a2>
 80071fc:	2340      	movs	r3, #64	; 0x40
 80071fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007202:	e16c      	b.n	80074de <UART_SetConfig+0x5a2>
 8007204:	2380      	movs	r3, #128	; 0x80
 8007206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800720a:	e168      	b.n	80074de <UART_SetConfig+0x5a2>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a1d      	ldr	r2, [pc, #116]	; (8007288 <UART_SetConfig+0x34c>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d142      	bne.n	800729c <UART_SetConfig+0x360>
 8007216:	4b18      	ldr	r3, [pc, #96]	; (8007278 <UART_SetConfig+0x33c>)
 8007218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721a:	f003 0307 	and.w	r3, r3, #7
 800721e:	2b05      	cmp	r3, #5
 8007220:	d838      	bhi.n	8007294 <UART_SetConfig+0x358>
 8007222:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <UART_SetConfig+0x2ec>)
 8007224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007228:	08007241 	.word	0x08007241
 800722c:	08007249 	.word	0x08007249
 8007230:	08007251 	.word	0x08007251
 8007234:	08007259 	.word	0x08007259
 8007238:	08007261 	.word	0x08007261
 800723c:	0800728d 	.word	0x0800728d
 8007240:	2300      	movs	r3, #0
 8007242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007246:	e14a      	b.n	80074de <UART_SetConfig+0x5a2>
 8007248:	2304      	movs	r3, #4
 800724a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800724e:	e146      	b.n	80074de <UART_SetConfig+0x5a2>
 8007250:	2308      	movs	r3, #8
 8007252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007256:	e142      	b.n	80074de <UART_SetConfig+0x5a2>
 8007258:	2310      	movs	r3, #16
 800725a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800725e:	e13e      	b.n	80074de <UART_SetConfig+0x5a2>
 8007260:	2320      	movs	r3, #32
 8007262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007266:	e13a      	b.n	80074de <UART_SetConfig+0x5a2>
 8007268:	cfff69f3 	.word	0xcfff69f3
 800726c:	58000c00 	.word	0x58000c00
 8007270:	11fff4ff 	.word	0x11fff4ff
 8007274:	40011000 	.word	0x40011000
 8007278:	58024400 	.word	0x58024400
 800727c:	40004400 	.word	0x40004400
 8007280:	40004800 	.word	0x40004800
 8007284:	40004c00 	.word	0x40004c00
 8007288:	40005000 	.word	0x40005000
 800728c:	2340      	movs	r3, #64	; 0x40
 800728e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007292:	e124      	b.n	80074de <UART_SetConfig+0x5a2>
 8007294:	2380      	movs	r3, #128	; 0x80
 8007296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800729a:	e120      	b.n	80074de <UART_SetConfig+0x5a2>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4acc      	ldr	r2, [pc, #816]	; (80075d4 <UART_SetConfig+0x698>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d176      	bne.n	8007394 <UART_SetConfig+0x458>
 80072a6:	4bcc      	ldr	r3, [pc, #816]	; (80075d8 <UART_SetConfig+0x69c>)
 80072a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072ae:	2b28      	cmp	r3, #40	; 0x28
 80072b0:	d86c      	bhi.n	800738c <UART_SetConfig+0x450>
 80072b2:	a201      	add	r2, pc, #4	; (adr r2, 80072b8 <UART_SetConfig+0x37c>)
 80072b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b8:	0800735d 	.word	0x0800735d
 80072bc:	0800738d 	.word	0x0800738d
 80072c0:	0800738d 	.word	0x0800738d
 80072c4:	0800738d 	.word	0x0800738d
 80072c8:	0800738d 	.word	0x0800738d
 80072cc:	0800738d 	.word	0x0800738d
 80072d0:	0800738d 	.word	0x0800738d
 80072d4:	0800738d 	.word	0x0800738d
 80072d8:	08007365 	.word	0x08007365
 80072dc:	0800738d 	.word	0x0800738d
 80072e0:	0800738d 	.word	0x0800738d
 80072e4:	0800738d 	.word	0x0800738d
 80072e8:	0800738d 	.word	0x0800738d
 80072ec:	0800738d 	.word	0x0800738d
 80072f0:	0800738d 	.word	0x0800738d
 80072f4:	0800738d 	.word	0x0800738d
 80072f8:	0800736d 	.word	0x0800736d
 80072fc:	0800738d 	.word	0x0800738d
 8007300:	0800738d 	.word	0x0800738d
 8007304:	0800738d 	.word	0x0800738d
 8007308:	0800738d 	.word	0x0800738d
 800730c:	0800738d 	.word	0x0800738d
 8007310:	0800738d 	.word	0x0800738d
 8007314:	0800738d 	.word	0x0800738d
 8007318:	08007375 	.word	0x08007375
 800731c:	0800738d 	.word	0x0800738d
 8007320:	0800738d 	.word	0x0800738d
 8007324:	0800738d 	.word	0x0800738d
 8007328:	0800738d 	.word	0x0800738d
 800732c:	0800738d 	.word	0x0800738d
 8007330:	0800738d 	.word	0x0800738d
 8007334:	0800738d 	.word	0x0800738d
 8007338:	0800737d 	.word	0x0800737d
 800733c:	0800738d 	.word	0x0800738d
 8007340:	0800738d 	.word	0x0800738d
 8007344:	0800738d 	.word	0x0800738d
 8007348:	0800738d 	.word	0x0800738d
 800734c:	0800738d 	.word	0x0800738d
 8007350:	0800738d 	.word	0x0800738d
 8007354:	0800738d 	.word	0x0800738d
 8007358:	08007385 	.word	0x08007385
 800735c:	2301      	movs	r3, #1
 800735e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007362:	e0bc      	b.n	80074de <UART_SetConfig+0x5a2>
 8007364:	2304      	movs	r3, #4
 8007366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800736a:	e0b8      	b.n	80074de <UART_SetConfig+0x5a2>
 800736c:	2308      	movs	r3, #8
 800736e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007372:	e0b4      	b.n	80074de <UART_SetConfig+0x5a2>
 8007374:	2310      	movs	r3, #16
 8007376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800737a:	e0b0      	b.n	80074de <UART_SetConfig+0x5a2>
 800737c:	2320      	movs	r3, #32
 800737e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007382:	e0ac      	b.n	80074de <UART_SetConfig+0x5a2>
 8007384:	2340      	movs	r3, #64	; 0x40
 8007386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800738a:	e0a8      	b.n	80074de <UART_SetConfig+0x5a2>
 800738c:	2380      	movs	r3, #128	; 0x80
 800738e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007392:	e0a4      	b.n	80074de <UART_SetConfig+0x5a2>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a90      	ldr	r2, [pc, #576]	; (80075dc <UART_SetConfig+0x6a0>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d130      	bne.n	8007400 <UART_SetConfig+0x4c4>
 800739e:	4b8e      	ldr	r3, [pc, #568]	; (80075d8 <UART_SetConfig+0x69c>)
 80073a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a2:	f003 0307 	and.w	r3, r3, #7
 80073a6:	2b05      	cmp	r3, #5
 80073a8:	d826      	bhi.n	80073f8 <UART_SetConfig+0x4bc>
 80073aa:	a201      	add	r2, pc, #4	; (adr r2, 80073b0 <UART_SetConfig+0x474>)
 80073ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b0:	080073c9 	.word	0x080073c9
 80073b4:	080073d1 	.word	0x080073d1
 80073b8:	080073d9 	.word	0x080073d9
 80073bc:	080073e1 	.word	0x080073e1
 80073c0:	080073e9 	.word	0x080073e9
 80073c4:	080073f1 	.word	0x080073f1
 80073c8:	2300      	movs	r3, #0
 80073ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073ce:	e086      	b.n	80074de <UART_SetConfig+0x5a2>
 80073d0:	2304      	movs	r3, #4
 80073d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073d6:	e082      	b.n	80074de <UART_SetConfig+0x5a2>
 80073d8:	2308      	movs	r3, #8
 80073da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073de:	e07e      	b.n	80074de <UART_SetConfig+0x5a2>
 80073e0:	2310      	movs	r3, #16
 80073e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073e6:	e07a      	b.n	80074de <UART_SetConfig+0x5a2>
 80073e8:	2320      	movs	r3, #32
 80073ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073ee:	e076      	b.n	80074de <UART_SetConfig+0x5a2>
 80073f0:	2340      	movs	r3, #64	; 0x40
 80073f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073f6:	e072      	b.n	80074de <UART_SetConfig+0x5a2>
 80073f8:	2380      	movs	r3, #128	; 0x80
 80073fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073fe:	e06e      	b.n	80074de <UART_SetConfig+0x5a2>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a76      	ldr	r2, [pc, #472]	; (80075e0 <UART_SetConfig+0x6a4>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d130      	bne.n	800746c <UART_SetConfig+0x530>
 800740a:	4b73      	ldr	r3, [pc, #460]	; (80075d8 <UART_SetConfig+0x69c>)
 800740c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800740e:	f003 0307 	and.w	r3, r3, #7
 8007412:	2b05      	cmp	r3, #5
 8007414:	d826      	bhi.n	8007464 <UART_SetConfig+0x528>
 8007416:	a201      	add	r2, pc, #4	; (adr r2, 800741c <UART_SetConfig+0x4e0>)
 8007418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741c:	08007435 	.word	0x08007435
 8007420:	0800743d 	.word	0x0800743d
 8007424:	08007445 	.word	0x08007445
 8007428:	0800744d 	.word	0x0800744d
 800742c:	08007455 	.word	0x08007455
 8007430:	0800745d 	.word	0x0800745d
 8007434:	2300      	movs	r3, #0
 8007436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800743a:	e050      	b.n	80074de <UART_SetConfig+0x5a2>
 800743c:	2304      	movs	r3, #4
 800743e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007442:	e04c      	b.n	80074de <UART_SetConfig+0x5a2>
 8007444:	2308      	movs	r3, #8
 8007446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800744a:	e048      	b.n	80074de <UART_SetConfig+0x5a2>
 800744c:	2310      	movs	r3, #16
 800744e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007452:	e044      	b.n	80074de <UART_SetConfig+0x5a2>
 8007454:	2320      	movs	r3, #32
 8007456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800745a:	e040      	b.n	80074de <UART_SetConfig+0x5a2>
 800745c:	2340      	movs	r3, #64	; 0x40
 800745e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007462:	e03c      	b.n	80074de <UART_SetConfig+0x5a2>
 8007464:	2380      	movs	r3, #128	; 0x80
 8007466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800746a:	e038      	b.n	80074de <UART_SetConfig+0x5a2>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a5c      	ldr	r2, [pc, #368]	; (80075e4 <UART_SetConfig+0x6a8>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d130      	bne.n	80074d8 <UART_SetConfig+0x59c>
 8007476:	4b58      	ldr	r3, [pc, #352]	; (80075d8 <UART_SetConfig+0x69c>)
 8007478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800747a:	f003 0307 	and.w	r3, r3, #7
 800747e:	2b05      	cmp	r3, #5
 8007480:	d826      	bhi.n	80074d0 <UART_SetConfig+0x594>
 8007482:	a201      	add	r2, pc, #4	; (adr r2, 8007488 <UART_SetConfig+0x54c>)
 8007484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007488:	080074a1 	.word	0x080074a1
 800748c:	080074a9 	.word	0x080074a9
 8007490:	080074b1 	.word	0x080074b1
 8007494:	080074b9 	.word	0x080074b9
 8007498:	080074c1 	.word	0x080074c1
 800749c:	080074c9 	.word	0x080074c9
 80074a0:	2302      	movs	r3, #2
 80074a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074a6:	e01a      	b.n	80074de <UART_SetConfig+0x5a2>
 80074a8:	2304      	movs	r3, #4
 80074aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ae:	e016      	b.n	80074de <UART_SetConfig+0x5a2>
 80074b0:	2308      	movs	r3, #8
 80074b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074b6:	e012      	b.n	80074de <UART_SetConfig+0x5a2>
 80074b8:	2310      	movs	r3, #16
 80074ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074be:	e00e      	b.n	80074de <UART_SetConfig+0x5a2>
 80074c0:	2320      	movs	r3, #32
 80074c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074c6:	e00a      	b.n	80074de <UART_SetConfig+0x5a2>
 80074c8:	2340      	movs	r3, #64	; 0x40
 80074ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ce:	e006      	b.n	80074de <UART_SetConfig+0x5a2>
 80074d0:	2380      	movs	r3, #128	; 0x80
 80074d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074d6:	e002      	b.n	80074de <UART_SetConfig+0x5a2>
 80074d8:	2380      	movs	r3, #128	; 0x80
 80074da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a40      	ldr	r2, [pc, #256]	; (80075e4 <UART_SetConfig+0x6a8>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	f040 80ef 	bne.w	80076c8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80074ee:	2b20      	cmp	r3, #32
 80074f0:	dc46      	bgt.n	8007580 <UART_SetConfig+0x644>
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	f2c0 8081 	blt.w	80075fa <UART_SetConfig+0x6be>
 80074f8:	3b02      	subs	r3, #2
 80074fa:	2b1e      	cmp	r3, #30
 80074fc:	d87d      	bhi.n	80075fa <UART_SetConfig+0x6be>
 80074fe:	a201      	add	r2, pc, #4	; (adr r2, 8007504 <UART_SetConfig+0x5c8>)
 8007500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007504:	08007587 	.word	0x08007587
 8007508:	080075fb 	.word	0x080075fb
 800750c:	0800758f 	.word	0x0800758f
 8007510:	080075fb 	.word	0x080075fb
 8007514:	080075fb 	.word	0x080075fb
 8007518:	080075fb 	.word	0x080075fb
 800751c:	0800759f 	.word	0x0800759f
 8007520:	080075fb 	.word	0x080075fb
 8007524:	080075fb 	.word	0x080075fb
 8007528:	080075fb 	.word	0x080075fb
 800752c:	080075fb 	.word	0x080075fb
 8007530:	080075fb 	.word	0x080075fb
 8007534:	080075fb 	.word	0x080075fb
 8007538:	080075fb 	.word	0x080075fb
 800753c:	080075af 	.word	0x080075af
 8007540:	080075fb 	.word	0x080075fb
 8007544:	080075fb 	.word	0x080075fb
 8007548:	080075fb 	.word	0x080075fb
 800754c:	080075fb 	.word	0x080075fb
 8007550:	080075fb 	.word	0x080075fb
 8007554:	080075fb 	.word	0x080075fb
 8007558:	080075fb 	.word	0x080075fb
 800755c:	080075fb 	.word	0x080075fb
 8007560:	080075fb 	.word	0x080075fb
 8007564:	080075fb 	.word	0x080075fb
 8007568:	080075fb 	.word	0x080075fb
 800756c:	080075fb 	.word	0x080075fb
 8007570:	080075fb 	.word	0x080075fb
 8007574:	080075fb 	.word	0x080075fb
 8007578:	080075fb 	.word	0x080075fb
 800757c:	080075ed 	.word	0x080075ed
 8007580:	2b40      	cmp	r3, #64	; 0x40
 8007582:	d036      	beq.n	80075f2 <UART_SetConfig+0x6b6>
 8007584:	e039      	b.n	80075fa <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007586:	f7fe f89f 	bl	80056c8 <HAL_RCCEx_GetD3PCLK1Freq>
 800758a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800758c:	e03b      	b.n	8007606 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800758e:	f107 0314 	add.w	r3, r7, #20
 8007592:	4618      	mov	r0, r3
 8007594:	f7fe f8ae 	bl	80056f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800759c:	e033      	b.n	8007606 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800759e:	f107 0308 	add.w	r3, r7, #8
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fe f9fa 	bl	800599c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075ac:	e02b      	b.n	8007606 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075ae:	4b0a      	ldr	r3, [pc, #40]	; (80075d8 <UART_SetConfig+0x69c>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0320 	and.w	r3, r3, #32
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d009      	beq.n	80075ce <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80075ba:	4b07      	ldr	r3, [pc, #28]	; (80075d8 <UART_SetConfig+0x69c>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	08db      	lsrs	r3, r3, #3
 80075c0:	f003 0303 	and.w	r3, r3, #3
 80075c4:	4a08      	ldr	r2, [pc, #32]	; (80075e8 <UART_SetConfig+0x6ac>)
 80075c6:	fa22 f303 	lsr.w	r3, r2, r3
 80075ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80075cc:	e01b      	b.n	8007606 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80075ce:	4b06      	ldr	r3, [pc, #24]	; (80075e8 <UART_SetConfig+0x6ac>)
 80075d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075d2:	e018      	b.n	8007606 <UART_SetConfig+0x6ca>
 80075d4:	40011400 	.word	0x40011400
 80075d8:	58024400 	.word	0x58024400
 80075dc:	40007800 	.word	0x40007800
 80075e0:	40007c00 	.word	0x40007c00
 80075e4:	58000c00 	.word	0x58000c00
 80075e8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80075ec:	4bc4      	ldr	r3, [pc, #784]	; (8007900 <UART_SetConfig+0x9c4>)
 80075ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075f0:	e009      	b.n	8007606 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075f8:	e005      	b.n	8007606 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80075fa:	2300      	movs	r3, #0
 80075fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007604:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007608:	2b00      	cmp	r3, #0
 800760a:	f000 81da 	beq.w	80079c2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007612:	4abc      	ldr	r2, [pc, #752]	; (8007904 <UART_SetConfig+0x9c8>)
 8007614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007618:	461a      	mov	r2, r3
 800761a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007620:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685a      	ldr	r2, [r3, #4]
 8007626:	4613      	mov	r3, r2
 8007628:	005b      	lsls	r3, r3, #1
 800762a:	4413      	add	r3, r2
 800762c:	6a3a      	ldr	r2, [r7, #32]
 800762e:	429a      	cmp	r2, r3
 8007630:	d305      	bcc.n	800763e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007638:	6a3a      	ldr	r2, [r7, #32]
 800763a:	429a      	cmp	r2, r3
 800763c:	d903      	bls.n	8007646 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007644:	e1bd      	b.n	80079c2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007648:	4618      	mov	r0, r3
 800764a:	f04f 0100 	mov.w	r1, #0
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007652:	4aac      	ldr	r2, [pc, #688]	; (8007904 <UART_SetConfig+0x9c8>)
 8007654:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007658:	b29a      	uxth	r2, r3
 800765a:	f04f 0300 	mov.w	r3, #0
 800765e:	f7f8 fe3b 	bl	80002d8 <__aeabi_uldivmod>
 8007662:	4602      	mov	r2, r0
 8007664:	460b      	mov	r3, r1
 8007666:	4610      	mov	r0, r2
 8007668:	4619      	mov	r1, r3
 800766a:	f04f 0200 	mov.w	r2, #0
 800766e:	f04f 0300 	mov.w	r3, #0
 8007672:	020b      	lsls	r3, r1, #8
 8007674:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007678:	0202      	lsls	r2, r0, #8
 800767a:	6879      	ldr	r1, [r7, #4]
 800767c:	6849      	ldr	r1, [r1, #4]
 800767e:	0849      	lsrs	r1, r1, #1
 8007680:	4608      	mov	r0, r1
 8007682:	f04f 0100 	mov.w	r1, #0
 8007686:	1814      	adds	r4, r2, r0
 8007688:	eb43 0501 	adc.w	r5, r3, r1
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	461a      	mov	r2, r3
 8007692:	f04f 0300 	mov.w	r3, #0
 8007696:	4620      	mov	r0, r4
 8007698:	4629      	mov	r1, r5
 800769a:	f7f8 fe1d 	bl	80002d8 <__aeabi_uldivmod>
 800769e:	4602      	mov	r2, r0
 80076a0:	460b      	mov	r3, r1
 80076a2:	4613      	mov	r3, r2
 80076a4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076ac:	d308      	bcc.n	80076c0 <UART_SetConfig+0x784>
 80076ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076b4:	d204      	bcs.n	80076c0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076bc:	60da      	str	r2, [r3, #12]
 80076be:	e180      	b.n	80079c2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80076c6:	e17c      	b.n	80079c2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	69db      	ldr	r3, [r3, #28]
 80076cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076d0:	f040 80bf 	bne.w	8007852 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80076d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80076d8:	2b20      	cmp	r3, #32
 80076da:	dc49      	bgt.n	8007770 <UART_SetConfig+0x834>
 80076dc:	2b00      	cmp	r3, #0
 80076de:	db7c      	blt.n	80077da <UART_SetConfig+0x89e>
 80076e0:	2b20      	cmp	r3, #32
 80076e2:	d87a      	bhi.n	80077da <UART_SetConfig+0x89e>
 80076e4:	a201      	add	r2, pc, #4	; (adr r2, 80076ec <UART_SetConfig+0x7b0>)
 80076e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ea:	bf00      	nop
 80076ec:	08007777 	.word	0x08007777
 80076f0:	0800777f 	.word	0x0800777f
 80076f4:	080077db 	.word	0x080077db
 80076f8:	080077db 	.word	0x080077db
 80076fc:	08007787 	.word	0x08007787
 8007700:	080077db 	.word	0x080077db
 8007704:	080077db 	.word	0x080077db
 8007708:	080077db 	.word	0x080077db
 800770c:	08007797 	.word	0x08007797
 8007710:	080077db 	.word	0x080077db
 8007714:	080077db 	.word	0x080077db
 8007718:	080077db 	.word	0x080077db
 800771c:	080077db 	.word	0x080077db
 8007720:	080077db 	.word	0x080077db
 8007724:	080077db 	.word	0x080077db
 8007728:	080077db 	.word	0x080077db
 800772c:	080077a7 	.word	0x080077a7
 8007730:	080077db 	.word	0x080077db
 8007734:	080077db 	.word	0x080077db
 8007738:	080077db 	.word	0x080077db
 800773c:	080077db 	.word	0x080077db
 8007740:	080077db 	.word	0x080077db
 8007744:	080077db 	.word	0x080077db
 8007748:	080077db 	.word	0x080077db
 800774c:	080077db 	.word	0x080077db
 8007750:	080077db 	.word	0x080077db
 8007754:	080077db 	.word	0x080077db
 8007758:	080077db 	.word	0x080077db
 800775c:	080077db 	.word	0x080077db
 8007760:	080077db 	.word	0x080077db
 8007764:	080077db 	.word	0x080077db
 8007768:	080077db 	.word	0x080077db
 800776c:	080077cd 	.word	0x080077cd
 8007770:	2b40      	cmp	r3, #64	; 0x40
 8007772:	d02e      	beq.n	80077d2 <UART_SetConfig+0x896>
 8007774:	e031      	b.n	80077da <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007776:	f7fd f83b 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 800777a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800777c:	e033      	b.n	80077e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800777e:	f7fd f84d 	bl	800481c <HAL_RCC_GetPCLK2Freq>
 8007782:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007784:	e02f      	b.n	80077e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007786:	f107 0314 	add.w	r3, r7, #20
 800778a:	4618      	mov	r0, r3
 800778c:	f7fd ffb2 	bl	80056f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007794:	e027      	b.n	80077e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007796:	f107 0308 	add.w	r3, r7, #8
 800779a:	4618      	mov	r0, r3
 800779c:	f7fe f8fe 	bl	800599c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077a4:	e01f      	b.n	80077e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077a6:	4b58      	ldr	r3, [pc, #352]	; (8007908 <UART_SetConfig+0x9cc>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0320 	and.w	r3, r3, #32
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d009      	beq.n	80077c6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80077b2:	4b55      	ldr	r3, [pc, #340]	; (8007908 <UART_SetConfig+0x9cc>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	08db      	lsrs	r3, r3, #3
 80077b8:	f003 0303 	and.w	r3, r3, #3
 80077bc:	4a53      	ldr	r2, [pc, #332]	; (800790c <UART_SetConfig+0x9d0>)
 80077be:	fa22 f303 	lsr.w	r3, r2, r3
 80077c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80077c4:	e00f      	b.n	80077e6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80077c6:	4b51      	ldr	r3, [pc, #324]	; (800790c <UART_SetConfig+0x9d0>)
 80077c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077ca:	e00c      	b.n	80077e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80077cc:	4b4c      	ldr	r3, [pc, #304]	; (8007900 <UART_SetConfig+0x9c4>)
 80077ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077d0:	e009      	b.n	80077e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077d8:	e005      	b.n	80077e6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80077da:	2300      	movs	r3, #0
 80077dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80077e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	f000 80ea 	beq.w	80079c2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f2:	4a44      	ldr	r2, [pc, #272]	; (8007904 <UART_SetConfig+0x9c8>)
 80077f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077f8:	461a      	mov	r2, r3
 80077fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007800:	005a      	lsls	r2, r3, #1
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	085b      	lsrs	r3, r3, #1
 8007808:	441a      	add	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007812:	b29b      	uxth	r3, r3
 8007814:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007818:	2b0f      	cmp	r3, #15
 800781a:	d916      	bls.n	800784a <UART_SetConfig+0x90e>
 800781c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007822:	d212      	bcs.n	800784a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007826:	b29b      	uxth	r3, r3
 8007828:	f023 030f 	bic.w	r3, r3, #15
 800782c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800782e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007830:	085b      	lsrs	r3, r3, #1
 8007832:	b29b      	uxth	r3, r3
 8007834:	f003 0307 	and.w	r3, r3, #7
 8007838:	b29a      	uxth	r2, r3
 800783a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800783c:	4313      	orrs	r3, r2
 800783e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007846:	60da      	str	r2, [r3, #12]
 8007848:	e0bb      	b.n	80079c2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007850:	e0b7      	b.n	80079c2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007852:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007856:	2b20      	cmp	r3, #32
 8007858:	dc4a      	bgt.n	80078f0 <UART_SetConfig+0x9b4>
 800785a:	2b00      	cmp	r3, #0
 800785c:	f2c0 8086 	blt.w	800796c <UART_SetConfig+0xa30>
 8007860:	2b20      	cmp	r3, #32
 8007862:	f200 8083 	bhi.w	800796c <UART_SetConfig+0xa30>
 8007866:	a201      	add	r2, pc, #4	; (adr r2, 800786c <UART_SetConfig+0x930>)
 8007868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786c:	080078f7 	.word	0x080078f7
 8007870:	08007911 	.word	0x08007911
 8007874:	0800796d 	.word	0x0800796d
 8007878:	0800796d 	.word	0x0800796d
 800787c:	08007919 	.word	0x08007919
 8007880:	0800796d 	.word	0x0800796d
 8007884:	0800796d 	.word	0x0800796d
 8007888:	0800796d 	.word	0x0800796d
 800788c:	08007929 	.word	0x08007929
 8007890:	0800796d 	.word	0x0800796d
 8007894:	0800796d 	.word	0x0800796d
 8007898:	0800796d 	.word	0x0800796d
 800789c:	0800796d 	.word	0x0800796d
 80078a0:	0800796d 	.word	0x0800796d
 80078a4:	0800796d 	.word	0x0800796d
 80078a8:	0800796d 	.word	0x0800796d
 80078ac:	08007939 	.word	0x08007939
 80078b0:	0800796d 	.word	0x0800796d
 80078b4:	0800796d 	.word	0x0800796d
 80078b8:	0800796d 	.word	0x0800796d
 80078bc:	0800796d 	.word	0x0800796d
 80078c0:	0800796d 	.word	0x0800796d
 80078c4:	0800796d 	.word	0x0800796d
 80078c8:	0800796d 	.word	0x0800796d
 80078cc:	0800796d 	.word	0x0800796d
 80078d0:	0800796d 	.word	0x0800796d
 80078d4:	0800796d 	.word	0x0800796d
 80078d8:	0800796d 	.word	0x0800796d
 80078dc:	0800796d 	.word	0x0800796d
 80078e0:	0800796d 	.word	0x0800796d
 80078e4:	0800796d 	.word	0x0800796d
 80078e8:	0800796d 	.word	0x0800796d
 80078ec:	0800795f 	.word	0x0800795f
 80078f0:	2b40      	cmp	r3, #64	; 0x40
 80078f2:	d037      	beq.n	8007964 <UART_SetConfig+0xa28>
 80078f4:	e03a      	b.n	800796c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078f6:	f7fc ff7b 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 80078fa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80078fc:	e03c      	b.n	8007978 <UART_SetConfig+0xa3c>
 80078fe:	bf00      	nop
 8007900:	003d0900 	.word	0x003d0900
 8007904:	080084e0 	.word	0x080084e0
 8007908:	58024400 	.word	0x58024400
 800790c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007910:	f7fc ff84 	bl	800481c <HAL_RCC_GetPCLK2Freq>
 8007914:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007916:	e02f      	b.n	8007978 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007918:	f107 0314 	add.w	r3, r7, #20
 800791c:	4618      	mov	r0, r3
 800791e:	f7fd fee9 	bl	80056f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007926:	e027      	b.n	8007978 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007928:	f107 0308 	add.w	r3, r7, #8
 800792c:	4618      	mov	r0, r3
 800792e:	f7fe f835 	bl	800599c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007936:	e01f      	b.n	8007978 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007938:	4b2c      	ldr	r3, [pc, #176]	; (80079ec <UART_SetConfig+0xab0>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0320 	and.w	r3, r3, #32
 8007940:	2b00      	cmp	r3, #0
 8007942:	d009      	beq.n	8007958 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007944:	4b29      	ldr	r3, [pc, #164]	; (80079ec <UART_SetConfig+0xab0>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	08db      	lsrs	r3, r3, #3
 800794a:	f003 0303 	and.w	r3, r3, #3
 800794e:	4a28      	ldr	r2, [pc, #160]	; (80079f0 <UART_SetConfig+0xab4>)
 8007950:	fa22 f303 	lsr.w	r3, r2, r3
 8007954:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007956:	e00f      	b.n	8007978 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8007958:	4b25      	ldr	r3, [pc, #148]	; (80079f0 <UART_SetConfig+0xab4>)
 800795a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800795c:	e00c      	b.n	8007978 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800795e:	4b25      	ldr	r3, [pc, #148]	; (80079f4 <UART_SetConfig+0xab8>)
 8007960:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007962:	e009      	b.n	8007978 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007964:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007968:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800796a:	e005      	b.n	8007978 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800796c:	2300      	movs	r3, #0
 800796e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007976:	bf00      	nop
    }

    if (pclk != 0U)
 8007978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797a:	2b00      	cmp	r3, #0
 800797c:	d021      	beq.n	80079c2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007982:	4a1d      	ldr	r2, [pc, #116]	; (80079f8 <UART_SetConfig+0xabc>)
 8007984:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007988:	461a      	mov	r2, r3
 800798a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	085b      	lsrs	r3, r3, #1
 8007996:	441a      	add	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a6:	2b0f      	cmp	r3, #15
 80079a8:	d908      	bls.n	80079bc <UART_SetConfig+0xa80>
 80079aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079b0:	d204      	bcs.n	80079bc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079b8:	60da      	str	r2, [r3, #12]
 80079ba:	e002      	b.n	80079c2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80079de:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3738      	adds	r7, #56	; 0x38
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bdb0      	pop	{r4, r5, r7, pc}
 80079ea:	bf00      	nop
 80079ec:	58024400 	.word	0x58024400
 80079f0:	03d09000 	.word	0x03d09000
 80079f4:	003d0900 	.word	0x003d0900
 80079f8:	080084e0 	.word	0x080084e0

080079fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00a      	beq.n	8007a26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00a      	beq.n	8007a48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4c:	f003 0304 	and.w	r3, r3, #4
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00a      	beq.n	8007a6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	430a      	orrs	r2, r1
 8007a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6e:	f003 0308 	and.w	r3, r3, #8
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00a      	beq.n	8007a8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	430a      	orrs	r2, r1
 8007a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a90:	f003 0310 	and.w	r3, r3, #16
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00a      	beq.n	8007aae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab2:	f003 0320 	and.w	r3, r3, #32
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00a      	beq.n	8007ad0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	430a      	orrs	r2, r1
 8007ace:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d01a      	beq.n	8007b12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007afa:	d10a      	bne.n	8007b12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00a      	beq.n	8007b34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	430a      	orrs	r2, r1
 8007b32:	605a      	str	r2, [r3, #4]
  }
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af02      	add	r7, sp, #8
 8007b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b50:	f7f9 fd74 	bl	800163c <HAL_GetTick>
 8007b54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0308 	and.w	r3, r3, #8
 8007b60:	2b08      	cmp	r3, #8
 8007b62:	d10e      	bne.n	8007b82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b68:	9300      	str	r3, [sp, #0]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f82f 	bl	8007bd6 <UART_WaitOnFlagUntilTimeout>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e025      	b.n	8007bce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0304 	and.w	r3, r3, #4
 8007b8c:	2b04      	cmp	r3, #4
 8007b8e:	d10e      	bne.n	8007bae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b94:	9300      	str	r3, [sp, #0]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f819 	bl	8007bd6 <UART_WaitOnFlagUntilTimeout>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d001      	beq.n	8007bae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e00f      	b.n	8007bce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2220      	movs	r2, #32
 8007bb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2220      	movs	r2, #32
 8007bba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b084      	sub	sp, #16
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	60f8      	str	r0, [r7, #12]
 8007bde:	60b9      	str	r1, [r7, #8]
 8007be0:	603b      	str	r3, [r7, #0]
 8007be2:	4613      	mov	r3, r2
 8007be4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007be6:	e062      	b.n	8007cae <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bee:	d05e      	beq.n	8007cae <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bf0:	f7f9 fd24 	bl	800163c <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	69ba      	ldr	r2, [r7, #24]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d302      	bcc.n	8007c06 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d11d      	bne.n	8007c42 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c14:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	689a      	ldr	r2, [r3, #8]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f022 0201 	bic.w	r2, r2, #1
 8007c24:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2220      	movs	r2, #32
 8007c2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2220      	movs	r2, #32
 8007c32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e045      	b.n	8007cce <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0304 	and.w	r3, r3, #4
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d02e      	beq.n	8007cae <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c5e:	d126      	bne.n	8007cae <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c78:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	689a      	ldr	r2, [r3, #8]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f022 0201 	bic.w	r2, r2, #1
 8007c88:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2220      	movs	r2, #32
 8007c96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2220      	movs	r2, #32
 8007c9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e00f      	b.n	8007cce <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	69da      	ldr	r2, [r3, #28]
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	bf0c      	ite	eq
 8007cbe:	2301      	moveq	r3, #1
 8007cc0:	2300      	movne	r3, #0
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	79fb      	ldrb	r3, [r7, #7]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d08d      	beq.n	8007be8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b085      	sub	sp, #20
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d101      	bne.n	8007cec <HAL_UARTEx_DisableFifoMode+0x16>
 8007ce8:	2302      	movs	r3, #2
 8007cea:	e027      	b.n	8007d3c <HAL_UARTEx_DisableFifoMode+0x66>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2224      	movs	r2, #36	; 0x24
 8007cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f022 0201 	bic.w	r2, r2, #1
 8007d12:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007d1a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3714      	adds	r7, #20
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d101      	bne.n	8007d60 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	e02d      	b.n	8007dbc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2224      	movs	r2, #36	; 0x24
 8007d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f022 0201 	bic.w	r2, r2, #1
 8007d86:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 f84f 	bl	8007e40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2220      	movs	r2, #32
 8007dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d101      	bne.n	8007ddc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007dd8:	2302      	movs	r3, #2
 8007dda:	e02d      	b.n	8007e38 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2224      	movs	r2, #36	; 0x24
 8007de8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f022 0201 	bic.w	r2, r2, #1
 8007e02:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	430a      	orrs	r2, r1
 8007e16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f811 	bl	8007e40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2220      	movs	r2, #32
 8007e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d108      	bne.n	8007e62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e60:	e031      	b.n	8007ec6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e62:	2310      	movs	r3, #16
 8007e64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e66:	2310      	movs	r3, #16
 8007e68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	0e5b      	lsrs	r3, r3, #25
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	f003 0307 	and.w	r3, r3, #7
 8007e78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	0f5b      	lsrs	r3, r3, #29
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	f003 0307 	and.w	r3, r3, #7
 8007e88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e8a:	7bbb      	ldrb	r3, [r7, #14]
 8007e8c:	7b3a      	ldrb	r2, [r7, #12]
 8007e8e:	4911      	ldr	r1, [pc, #68]	; (8007ed4 <UARTEx_SetNbDataToProcess+0x94>)
 8007e90:	5c8a      	ldrb	r2, [r1, r2]
 8007e92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e96:	7b3a      	ldrb	r2, [r7, #12]
 8007e98:	490f      	ldr	r1, [pc, #60]	; (8007ed8 <UARTEx_SetNbDataToProcess+0x98>)
 8007e9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ea8:	7bfb      	ldrb	r3, [r7, #15]
 8007eaa:	7b7a      	ldrb	r2, [r7, #13]
 8007eac:	4909      	ldr	r1, [pc, #36]	; (8007ed4 <UARTEx_SetNbDataToProcess+0x94>)
 8007eae:	5c8a      	ldrb	r2, [r1, r2]
 8007eb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007eb4:	7b7a      	ldrb	r2, [r7, #13]
 8007eb6:	4908      	ldr	r1, [pc, #32]	; (8007ed8 <UARTEx_SetNbDataToProcess+0x98>)
 8007eb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007eba:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007ec6:	bf00      	nop
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	080084f8 	.word	0x080084f8
 8007ed8:	08008500 	.word	0x08008500

08007edc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007edc:	b084      	sub	sp, #16
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b084      	sub	sp, #16
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
 8007ee6:	f107 001c 	add.w	r0, r7, #28
 8007eea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d120      	bne.n	8007f36 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	68da      	ldr	r2, [r3, #12]
 8007f04:	4b2a      	ldr	r3, [pc, #168]	; (8007fb0 <USB_CoreInit+0xd4>)
 8007f06:	4013      	ands	r3, r2
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d105      	bne.n	8007f2a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fa60 	bl	80083f0 <USB_CoreReset>
 8007f30:	4603      	mov	r3, r0
 8007f32:	73fb      	strb	r3, [r7, #15]
 8007f34:	e01a      	b.n	8007f6c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 fa54 	bl	80083f0 <USB_CoreReset>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d106      	bne.n	8007f60 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	639a      	str	r2, [r3, #56]	; 0x38
 8007f5e:	e005      	b.n	8007f6c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d116      	bne.n	8007fa0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007f80:	4b0c      	ldr	r3, [pc, #48]	; (8007fb4 <USB_CoreInit+0xd8>)
 8007f82:	4313      	orrs	r3, r2
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	f043 0206 	orr.w	r2, r3, #6
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	f043 0220 	orr.w	r2, r3, #32
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007fac:	b004      	add	sp, #16
 8007fae:	4770      	bx	lr
 8007fb0:	ffbdffbf 	.word	0xffbdffbf
 8007fb4:	03ee0000 	.word	0x03ee0000

08007fb8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	f023 0201 	bic.w	r2, r3, #1
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	370c      	adds	r7, #12
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b082      	sub	sp, #8
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ff2:	78fb      	ldrb	r3, [r7, #3]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d106      	bne.n	8008006 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	60da      	str	r2, [r3, #12]
 8008004:	e00b      	b.n	800801e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008006:	78fb      	ldrb	r3, [r7, #3]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d106      	bne.n	800801a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	60da      	str	r2, [r3, #12]
 8008018:	e001      	b.n	800801e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e003      	b.n	8008026 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800801e:	2032      	movs	r0, #50	; 0x32
 8008020:	f7f9 fb18 	bl	8001654 <HAL_Delay>

  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3708      	adds	r7, #8
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
	...

08008030 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008030:	b084      	sub	sp, #16
 8008032:	b580      	push	{r7, lr}
 8008034:	b086      	sub	sp, #24
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800803e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008042:	2300      	movs	r3, #0
 8008044:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800804a:	2300      	movs	r3, #0
 800804c:	613b      	str	r3, [r7, #16]
 800804e:	e009      	b.n	8008064 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	3340      	adds	r3, #64	; 0x40
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4413      	add	r3, r2
 800805a:	2200      	movs	r2, #0
 800805c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	3301      	adds	r3, #1
 8008062:	613b      	str	r3, [r7, #16]
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	2b0e      	cmp	r3, #14
 8008068:	d9f2      	bls.n	8008050 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800806a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800806c:	2b00      	cmp	r3, #0
 800806e:	d11c      	bne.n	80080aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800807e:	f043 0302 	orr.w	r3, r3, #2
 8008082:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008088:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	601a      	str	r2, [r3, #0]
 80080a8:	e005      	b.n	80080b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080bc:	461a      	mov	r2, r3
 80080be:	2300      	movs	r3, #0
 80080c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080c8:	4619      	mov	r1, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080d0:	461a      	mov	r2, r3
 80080d2:	680b      	ldr	r3, [r1, #0]
 80080d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80080d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d10c      	bne.n	80080f6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80080dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d104      	bne.n	80080ec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80080e2:	2100      	movs	r1, #0
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f949 	bl	800837c <USB_SetDevSpeed>
 80080ea:	e008      	b.n	80080fe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80080ec:	2101      	movs	r1, #1
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f944 	bl	800837c <USB_SetDevSpeed>
 80080f4:	e003      	b.n	80080fe <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80080f6:	2103      	movs	r1, #3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f93f 	bl	800837c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80080fe:	2110      	movs	r1, #16
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f8f3 	bl	80082ec <USB_FlushTxFifo>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d001      	beq.n	8008110 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f911 	bl	8008338 <USB_FlushRxFifo>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d001      	beq.n	8008120 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008126:	461a      	mov	r2, r3
 8008128:	2300      	movs	r3, #0
 800812a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008132:	461a      	mov	r2, r3
 8008134:	2300      	movs	r3, #0
 8008136:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800813e:	461a      	mov	r2, r3
 8008140:	2300      	movs	r3, #0
 8008142:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008144:	2300      	movs	r3, #0
 8008146:	613b      	str	r3, [r7, #16]
 8008148:	e043      	b.n	80081d2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	015a      	lsls	r2, r3, #5
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	4413      	add	r3, r2
 8008152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800815c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008160:	d118      	bne.n	8008194 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d10a      	bne.n	800817e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	4413      	add	r3, r2
 8008170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008174:	461a      	mov	r2, r3
 8008176:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800817a:	6013      	str	r3, [r2, #0]
 800817c:	e013      	b.n	80081a6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	015a      	lsls	r2, r3, #5
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	4413      	add	r3, r2
 8008186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800818a:	461a      	mov	r2, r3
 800818c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008190:	6013      	str	r3, [r2, #0]
 8008192:	e008      	b.n	80081a6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	015a      	lsls	r2, r3, #5
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	4413      	add	r3, r2
 800819c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a0:	461a      	mov	r2, r3
 80081a2:	2300      	movs	r3, #0
 80081a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b2:	461a      	mov	r2, r3
 80081b4:	2300      	movs	r3, #0
 80081b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	015a      	lsls	r2, r3, #5
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	4413      	add	r3, r2
 80081c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c4:	461a      	mov	r2, r3
 80081c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80081ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	3301      	adds	r3, #1
 80081d0:	613b      	str	r3, [r7, #16]
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	693a      	ldr	r2, [r7, #16]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d3b7      	bcc.n	800814a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081da:	2300      	movs	r3, #0
 80081dc:	613b      	str	r3, [r7, #16]
 80081de:	e043      	b.n	8008268 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	015a      	lsls	r2, r3, #5
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	4413      	add	r3, r2
 80081e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081f6:	d118      	bne.n	800822a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d10a      	bne.n	8008214 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	015a      	lsls	r2, r3, #5
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	4413      	add	r3, r2
 8008206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800820a:	461a      	mov	r2, r3
 800820c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008210:	6013      	str	r3, [r2, #0]
 8008212:	e013      	b.n	800823c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	015a      	lsls	r2, r3, #5
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	4413      	add	r3, r2
 800821c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008220:	461a      	mov	r2, r3
 8008222:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008226:	6013      	str	r3, [r2, #0]
 8008228:	e008      	b.n	800823c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	015a      	lsls	r2, r3, #5
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	4413      	add	r3, r2
 8008232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008236:	461a      	mov	r2, r3
 8008238:	2300      	movs	r3, #0
 800823a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	015a      	lsls	r2, r3, #5
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4413      	add	r3, r2
 8008244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008248:	461a      	mov	r2, r3
 800824a:	2300      	movs	r3, #0
 800824c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	015a      	lsls	r2, r3, #5
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	4413      	add	r3, r2
 8008256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800825a:	461a      	mov	r2, r3
 800825c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008260:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	3301      	adds	r3, #1
 8008266:	613b      	str	r3, [r7, #16]
 8008268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826a:	693a      	ldr	r2, [r7, #16]
 800826c:	429a      	cmp	r2, r3
 800826e:	d3b7      	bcc.n	80081e0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800827e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008282:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008290:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008294:	2b00      	cmp	r3, #0
 8008296:	d105      	bne.n	80082a4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	f043 0210 	orr.w	r2, r3, #16
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	699a      	ldr	r2, [r3, #24]
 80082a8:	4b0e      	ldr	r3, [pc, #56]	; (80082e4 <USB_DevInit+0x2b4>)
 80082aa:	4313      	orrs	r3, r2
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80082b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d005      	beq.n	80082c2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	f043 0208 	orr.w	r2, r3, #8
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80082c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d105      	bne.n	80082d4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	699a      	ldr	r2, [r3, #24]
 80082cc:	4b06      	ldr	r3, [pc, #24]	; (80082e8 <USB_DevInit+0x2b8>)
 80082ce:	4313      	orrs	r3, r2
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80082d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3718      	adds	r7, #24
 80082da:	46bd      	mov	sp, r7
 80082dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082e0:	b004      	add	sp, #16
 80082e2:	4770      	bx	lr
 80082e4:	803c3800 	.word	0x803c3800
 80082e8:	40000004 	.word	0x40000004

080082ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80082f6:	2300      	movs	r3, #0
 80082f8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	019b      	lsls	r3, r3, #6
 80082fe:	f043 0220 	orr.w	r2, r3, #32
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	3301      	adds	r3, #1
 800830a:	60fb      	str	r3, [r7, #12]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	4a09      	ldr	r2, [pc, #36]	; (8008334 <USB_FlushTxFifo+0x48>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d901      	bls.n	8008318 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e006      	b.n	8008326 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	f003 0320 	and.w	r3, r3, #32
 8008320:	2b20      	cmp	r3, #32
 8008322:	d0f0      	beq.n	8008306 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3714      	adds	r7, #20
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	00030d40 	.word	0x00030d40

08008338 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008340:	2300      	movs	r3, #0
 8008342:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2210      	movs	r2, #16
 8008348:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	3301      	adds	r3, #1
 800834e:	60fb      	str	r3, [r7, #12]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	4a09      	ldr	r2, [pc, #36]	; (8008378 <USB_FlushRxFifo+0x40>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d901      	bls.n	800835c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	e006      	b.n	800836a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	f003 0310 	and.w	r3, r3, #16
 8008364:	2b10      	cmp	r3, #16
 8008366:	d0f0      	beq.n	800834a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3714      	adds	r7, #20
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop
 8008378:	00030d40 	.word	0x00030d40

0800837c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	460b      	mov	r3, r1
 8008386:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	78fb      	ldrb	r3, [r7, #3]
 8008396:	68f9      	ldr	r1, [r7, #12]
 8008398:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800839c:	4313      	orrs	r3, r2
 800839e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b085      	sub	sp, #20
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80083c8:	f023 0303 	bic.w	r3, r3, #3
 80083cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083dc:	f043 0302 	orr.w	r3, r3, #2
 80083e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3714      	adds	r7, #20
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80083f8:	2300      	movs	r3, #0
 80083fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	3301      	adds	r3, #1
 8008400:	60fb      	str	r3, [r7, #12]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	4a13      	ldr	r2, [pc, #76]	; (8008454 <USB_CoreReset+0x64>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d901      	bls.n	800840e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800840a:	2303      	movs	r3, #3
 800840c:	e01b      	b.n	8008446 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	2b00      	cmp	r3, #0
 8008414:	daf2      	bge.n	80083fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008416:	2300      	movs	r3, #0
 8008418:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	f043 0201 	orr.w	r2, r3, #1
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	3301      	adds	r3, #1
 800842a:	60fb      	str	r3, [r7, #12]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	4a09      	ldr	r2, [pc, #36]	; (8008454 <USB_CoreReset+0x64>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d901      	bls.n	8008438 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008434:	2303      	movs	r3, #3
 8008436:	e006      	b.n	8008446 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	2b01      	cmp	r3, #1
 8008442:	d0f0      	beq.n	8008426 <USB_CoreReset+0x36>

  return HAL_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3714      	adds	r7, #20
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	00030d40 	.word	0x00030d40

08008458 <__libc_init_array>:
 8008458:	b570      	push	{r4, r5, r6, lr}
 800845a:	4d0d      	ldr	r5, [pc, #52]	; (8008490 <__libc_init_array+0x38>)
 800845c:	4c0d      	ldr	r4, [pc, #52]	; (8008494 <__libc_init_array+0x3c>)
 800845e:	1b64      	subs	r4, r4, r5
 8008460:	10a4      	asrs	r4, r4, #2
 8008462:	2600      	movs	r6, #0
 8008464:	42a6      	cmp	r6, r4
 8008466:	d109      	bne.n	800847c <__libc_init_array+0x24>
 8008468:	4d0b      	ldr	r5, [pc, #44]	; (8008498 <__libc_init_array+0x40>)
 800846a:	4c0c      	ldr	r4, [pc, #48]	; (800849c <__libc_init_array+0x44>)
 800846c:	f000 f820 	bl	80084b0 <_init>
 8008470:	1b64      	subs	r4, r4, r5
 8008472:	10a4      	asrs	r4, r4, #2
 8008474:	2600      	movs	r6, #0
 8008476:	42a6      	cmp	r6, r4
 8008478:	d105      	bne.n	8008486 <__libc_init_array+0x2e>
 800847a:	bd70      	pop	{r4, r5, r6, pc}
 800847c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008480:	4798      	blx	r3
 8008482:	3601      	adds	r6, #1
 8008484:	e7ee      	b.n	8008464 <__libc_init_array+0xc>
 8008486:	f855 3b04 	ldr.w	r3, [r5], #4
 800848a:	4798      	blx	r3
 800848c:	3601      	adds	r6, #1
 800848e:	e7f2      	b.n	8008476 <__libc_init_array+0x1e>
 8008490:	08008510 	.word	0x08008510
 8008494:	08008510 	.word	0x08008510
 8008498:	08008510 	.word	0x08008510
 800849c:	08008514 	.word	0x08008514

080084a0 <memset>:
 80084a0:	4402      	add	r2, r0
 80084a2:	4603      	mov	r3, r0
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d100      	bne.n	80084aa <memset+0xa>
 80084a8:	4770      	bx	lr
 80084aa:	f803 1b01 	strb.w	r1, [r3], #1
 80084ae:	e7f9      	b.n	80084a4 <memset+0x4>

080084b0 <_init>:
 80084b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b2:	bf00      	nop
 80084b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084b6:	bc08      	pop	{r3}
 80084b8:	469e      	mov	lr, r3
 80084ba:	4770      	bx	lr

080084bc <_fini>:
 80084bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084be:	bf00      	nop
 80084c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084c2:	bc08      	pop	{r3}
 80084c4:	469e      	mov	lr, r3
 80084c6:	4770      	bx	lr
