
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008240  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080084d8  080084d8  000184d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008518  08008518  00018518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008520  08008520  00018520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008524  08008524  00018524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08008528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006d8  20000010  08008538  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200006e8  08008538  000206e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000226dc  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000035bf  00000000  00000000  0004271a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001388  00000000  00000000  00045ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001290  00000000  00000000  00047068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000371cd  00000000  00000000  000482f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000183e8  00000000  00000000  0007f4c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016229d  00000000  00000000  000978ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001f9b4a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005410  00000000  00000000  001f9ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080084c0 	.word	0x080084c0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	080084c0 	.word	0x080084c0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 ffb4 	bl	8001540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f812 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 fb30 	bl	8000c40 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e0:	f000 fb06 	bl	8000bf0 <MX_DMA_Init>
  MX_TIM1_Init();
 80005e4:	f000 f886 	bl	80006f4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80005e8:	f000 f98a 	bl	8000900 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005ec:	f000 fa00 	bl	80009f0 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80005f0:	f000 fa80 	bl	8000af4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80005f4:	f000 f936 	bl	8000864 <MX_TIM2_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f8:	f000 fac8 	bl	8000b8c <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x2c>
	...

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b09c      	sub	sp, #112	; 0x70
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800060a:	224c      	movs	r2, #76	; 0x4c
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f007 ff4e 	bl	80084b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2220      	movs	r2, #32
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f007 ff48 	bl	80084b0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000620:	2002      	movs	r0, #2
 8000622:	f003 f933 	bl	800388c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000626:	2300      	movs	r3, #0
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	4b30      	ldr	r3, [pc, #192]	; (80006ec <SystemClock_Config+0xec>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	4a2f      	ldr	r2, [pc, #188]	; (80006ec <SystemClock_Config+0xec>)
 8000630:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000634:	6193      	str	r3, [r2, #24]
 8000636:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <SystemClock_Config+0xec>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <SystemClock_Config+0xf0>)
 8000642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000644:	4a2a      	ldr	r2, [pc, #168]	; (80006f0 <SystemClock_Config+0xf0>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800064c:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <SystemClock_Config+0xf0>)
 800064e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000650:	f003 0301 	and.w	r3, r3, #1
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000658:	bf00      	nop
 800065a:	4b24      	ldr	r3, [pc, #144]	; (80006ec <SystemClock_Config+0xec>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000666:	d1f8      	bne.n	800065a <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000668:	2301      	movs	r3, #1
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800066c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000670:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000676:	2302      	movs	r3, #2
 8000678:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 800067a:	2303      	movs	r3, #3
 800067c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 800067e:	233c      	movs	r3, #60	; 0x3c
 8000680:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000682:	2302      	movs	r3, #2
 8000684:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000686:	230f      	movs	r3, #15
 8000688:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800068a:	2302      	movs	r3, #2
 800068c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800068e:	230c      	movs	r3, #12
 8000690:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000692:	2300      	movs	r3, #0
 8000694:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069e:	4618      	mov	r0, r3
 80006a0:	f003 f93e 	bl	8003920 <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006aa:	f000 fbd7 	bl	8000e5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	233f      	movs	r3, #63	; 0x3f
 80006b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2303      	movs	r3, #3
 80006b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006ba:	2308      	movs	r3, #8
 80006bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006be:	2340      	movs	r3, #64	; 0x40
 80006c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006c2:	2340      	movs	r3, #64	; 0x40
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006cc:	2340      	movs	r3, #64	; 0x40
 80006ce:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2104      	movs	r1, #4
 80006d4:	4618      	mov	r0, r3
 80006d6:	f003 fd33 	bl	8004140 <HAL_RCC_ClockConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80006e0:	f000 fbbc 	bl	8000e5c <Error_Handler>
  }
}
 80006e4:	bf00      	nop
 80006e6:	3770      	adds	r7, #112	; 0x70
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	58024800 	.word	0x58024800
 80006f0:	58000400 	.word	0x58000400

080006f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b09a      	sub	sp, #104	; 0x68
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000708:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000714:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
 8000724:	615a      	str	r2, [r3, #20]
 8000726:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	222c      	movs	r2, #44	; 0x2c
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f007 febe 	bl	80084b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000734:	4b49      	ldr	r3, [pc, #292]	; (800085c <MX_TIM1_Init+0x168>)
 8000736:	4a4a      	ldr	r2, [pc, #296]	; (8000860 <MX_TIM1_Init+0x16c>)
 8000738:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800073a:	4b48      	ldr	r3, [pc, #288]	; (800085c <MX_TIM1_Init+0x168>)
 800073c:	2200      	movs	r2, #0
 800073e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000740:	4b46      	ldr	r3, [pc, #280]	; (800085c <MX_TIM1_Init+0x168>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000746:	4b45      	ldr	r3, [pc, #276]	; (800085c <MX_TIM1_Init+0x168>)
 8000748:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800074c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074e:	4b43      	ldr	r3, [pc, #268]	; (800085c <MX_TIM1_Init+0x168>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000754:	4b41      	ldr	r3, [pc, #260]	; (800085c <MX_TIM1_Init+0x168>)
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075a:	4b40      	ldr	r3, [pc, #256]	; (800085c <MX_TIM1_Init+0x168>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000760:	483e      	ldr	r0, [pc, #248]	; (800085c <MX_TIM1_Init+0x168>)
 8000762:	f005 fbdb 	bl	8005f1c <HAL_TIM_Base_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800076c:	f000 fb76 	bl	8000e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000774:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000776:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800077a:	4619      	mov	r1, r3
 800077c:	4837      	ldr	r0, [pc, #220]	; (800085c <MX_TIM1_Init+0x168>)
 800077e:	f005 fd95 	bl	80062ac <HAL_TIM_ConfigClockSource>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000788:	f000 fb68 	bl	8000e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800078c:	4833      	ldr	r0, [pc, #204]	; (800085c <MX_TIM1_Init+0x168>)
 800078e:	f005 fc1c 	bl	8005fca <HAL_TIM_PWM_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000798:	f000 fb60 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079c:	2300      	movs	r3, #0
 800079e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007a0:	2300      	movs	r3, #0
 80007a2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007ac:	4619      	mov	r1, r3
 80007ae:	482b      	ldr	r0, [pc, #172]	; (800085c <MX_TIM1_Init+0x168>)
 80007b0:	f006 fa76 	bl	8006ca0 <HAL_TIMEx_MasterConfigSynchronization>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80007ba:	f000 fb4f 	bl	8000e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007be:	2360      	movs	r3, #96	; 0x60
 80007c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c6:	2300      	movs	r3, #0
 80007c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007ca:	2300      	movs	r3, #0
 80007cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007d2:	2300      	movs	r3, #0
 80007d4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007d6:	2300      	movs	r3, #0
 80007d8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007de:	2204      	movs	r2, #4
 80007e0:	4619      	mov	r1, r3
 80007e2:	481e      	ldr	r0, [pc, #120]	; (800085c <MX_TIM1_Init+0x168>)
 80007e4:	f005 fc52 	bl	800608c <HAL_TIM_PWM_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80007ee:	f000 fb35 	bl	8000e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007f6:	2208      	movs	r2, #8
 80007f8:	4619      	mov	r1, r3
 80007fa:	4818      	ldr	r0, [pc, #96]	; (800085c <MX_TIM1_Init+0x168>)
 80007fc:	f005 fc46 	bl	800608c <HAL_TIM_PWM_ConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000806:	f000 fb29 	bl	8000e5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800081e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000822:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800082c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	4619      	mov	r1, r3
 800083e:	4807      	ldr	r0, [pc, #28]	; (800085c <MX_TIM1_Init+0x168>)
 8000840:	f006 fab6 	bl	8006db0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800084a:	f000 fb07 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800084e:	4803      	ldr	r0, [pc, #12]	; (800085c <MX_TIM1_Init+0x168>)
 8000850:	f000 fb8a 	bl	8000f68 <HAL_TIM_MspPostInit>

}
 8000854:	bf00      	nop
 8000856:	3768      	adds	r7, #104	; 0x68
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	2000064c 	.word	0x2000064c
 8000860:	40010000 	.word	0x40010000

08000864 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086a:	f107 0310 	add.w	r3, r7, #16
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000882:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <MX_TIM2_Init+0x98>)
 8000884:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000888:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <MX_TIM2_Init+0x98>)
 800088c:	2200      	movs	r2, #0
 800088e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000890:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_TIM2_Init+0x98>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <MX_TIM2_Init+0x98>)
 8000898:	f04f 32ff 	mov.w	r2, #4294967295
 800089c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_TIM2_Init+0x98>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_TIM2_Init+0x98>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008aa:	4814      	ldr	r0, [pc, #80]	; (80008fc <MX_TIM2_Init+0x98>)
 80008ac:	f005 fb36 	bl	8005f1c <HAL_TIM_Base_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008b6:	f000 fad1 	bl	8000e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	4619      	mov	r1, r3
 80008c6:	480d      	ldr	r0, [pc, #52]	; (80008fc <MX_TIM2_Init+0x98>)
 80008c8:	f005 fcf0 	bl	80062ac <HAL_TIM_ConfigClockSource>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80008d2:	f000 fac3 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	4619      	mov	r1, r3
 80008e2:	4806      	ldr	r0, [pc, #24]	; (80008fc <MX_TIM2_Init+0x98>)
 80008e4:	f006 f9dc 	bl	8006ca0 <HAL_TIMEx_MasterConfigSynchronization>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008ee:	f000 fab5 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	3720      	adds	r7, #32
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000698 	.word	0x20000698

08000900 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08e      	sub	sp, #56	; 0x38
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000906:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000920:	463b      	mov	r3, r7
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]
 800092e:	615a      	str	r2, [r3, #20]
 8000930:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000932:	4b2d      	ldr	r3, [pc, #180]	; (80009e8 <MX_TIM3_Init+0xe8>)
 8000934:	4a2d      	ldr	r2, [pc, #180]	; (80009ec <MX_TIM3_Init+0xec>)
 8000936:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000938:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <MX_TIM3_Init+0xe8>)
 800093a:	2200      	movs	r2, #0
 800093c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093e:	4b2a      	ldr	r3, [pc, #168]	; (80009e8 <MX_TIM3_Init+0xe8>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000944:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <MX_TIM3_Init+0xe8>)
 8000946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800094a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094c:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <MX_TIM3_Init+0xe8>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000952:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <MX_TIM3_Init+0xe8>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000958:	4823      	ldr	r0, [pc, #140]	; (80009e8 <MX_TIM3_Init+0xe8>)
 800095a:	f005 fadf 	bl	8005f1c <HAL_TIM_Base_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000964:	f000 fa7a 	bl	8000e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800096e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000972:	4619      	mov	r1, r3
 8000974:	481c      	ldr	r0, [pc, #112]	; (80009e8 <MX_TIM3_Init+0xe8>)
 8000976:	f005 fc99 	bl	80062ac <HAL_TIM_ConfigClockSource>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000980:	f000 fa6c 	bl	8000e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000984:	4818      	ldr	r0, [pc, #96]	; (80009e8 <MX_TIM3_Init+0xe8>)
 8000986:	f005 fb20 	bl	8005fca <HAL_TIM_PWM_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000990:	f000 fa64 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4811      	ldr	r0, [pc, #68]	; (80009e8 <MX_TIM3_Init+0xe8>)
 80009a4:	f006 f97c 	bl	8006ca0 <HAL_TIMEx_MasterConfigSynchronization>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80009ae:	f000 fa55 	bl	8000e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009b2:	2360      	movs	r3, #96	; 0x60
 80009b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009c2:	463b      	mov	r3, r7
 80009c4:	2204      	movs	r2, #4
 80009c6:	4619      	mov	r1, r3
 80009c8:	4807      	ldr	r0, [pc, #28]	; (80009e8 <MX_TIM3_Init+0xe8>)
 80009ca:	f005 fb5f 	bl	800608c <HAL_TIM_PWM_ConfigChannel>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80009d4:	f000 fa42 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009d8:	4803      	ldr	r0, [pc, #12]	; (80009e8 <MX_TIM3_Init+0xe8>)
 80009da:	f000 fac5 	bl	8000f68 <HAL_TIM_MspPostInit>

}
 80009de:	bf00      	nop
 80009e0:	3738      	adds	r7, #56	; 0x38
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000600 	.word	0x20000600
 80009ec:	40000400 	.word	0x40000400

080009f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08e      	sub	sp, #56	; 0x38
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a10:	463b      	mov	r3, r7
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]
 8000a1e:	615a      	str	r2, [r3, #20]
 8000a20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a22:	4b32      	ldr	r3, [pc, #200]	; (8000aec <MX_TIM4_Init+0xfc>)
 8000a24:	4a32      	ldr	r2, [pc, #200]	; (8000af0 <MX_TIM4_Init+0x100>)
 8000a26:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a28:	4b30      	ldr	r3, [pc, #192]	; (8000aec <MX_TIM4_Init+0xfc>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2e:	4b2f      	ldr	r3, [pc, #188]	; (8000aec <MX_TIM4_Init+0xfc>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a34:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <MX_TIM4_Init+0xfc>)
 8000a36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a3a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3c:	4b2b      	ldr	r3, [pc, #172]	; (8000aec <MX_TIM4_Init+0xfc>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a42:	4b2a      	ldr	r3, [pc, #168]	; (8000aec <MX_TIM4_Init+0xfc>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a48:	4828      	ldr	r0, [pc, #160]	; (8000aec <MX_TIM4_Init+0xfc>)
 8000a4a:	f005 fa67 	bl	8005f1c <HAL_TIM_Base_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000a54:	f000 fa02 	bl	8000e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a62:	4619      	mov	r1, r3
 8000a64:	4821      	ldr	r0, [pc, #132]	; (8000aec <MX_TIM4_Init+0xfc>)
 8000a66:	f005 fc21 	bl	80062ac <HAL_TIM_ConfigClockSource>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000a70:	f000 f9f4 	bl	8000e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a74:	481d      	ldr	r0, [pc, #116]	; (8000aec <MX_TIM4_Init+0xfc>)
 8000a76:	f005 faa8 	bl	8005fca <HAL_TIM_PWM_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000a80:	f000 f9ec 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	4816      	ldr	r0, [pc, #88]	; (8000aec <MX_TIM4_Init+0xfc>)
 8000a94:	f006 f904 	bl	8006ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000a9e:	f000 f9dd 	bl	8000e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa2:	2360      	movs	r3, #96	; 0x60
 8000aa4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	2204      	movs	r2, #4
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	480c      	ldr	r0, [pc, #48]	; (8000aec <MX_TIM4_Init+0xfc>)
 8000aba:	f005 fae7 	bl	800608c <HAL_TIM_PWM_ConfigChannel>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000ac4:	f000 f9ca 	bl	8000e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ac8:	463b      	mov	r3, r7
 8000aca:	220c      	movs	r2, #12
 8000acc:	4619      	mov	r1, r3
 8000ace:	4807      	ldr	r0, [pc, #28]	; (8000aec <MX_TIM4_Init+0xfc>)
 8000ad0:	f005 fadc 	bl	800608c <HAL_TIM_PWM_ConfigChannel>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000ada:	f000 f9bf 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ade:	4803      	ldr	r0, [pc, #12]	; (8000aec <MX_TIM4_Init+0xfc>)
 8000ae0:	f000 fa42 	bl	8000f68 <HAL_TIM_MspPostInit>

}
 8000ae4:	bf00      	nop
 8000ae6:	3738      	adds	r7, #56	; 0x38
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	2000002c 	.word	0x2000002c
 8000af0:	40000800 	.word	0x40000800

08000af4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000af8:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000afa:	4a23      	ldr	r2, [pc, #140]	; (8000b88 <MX_USART3_UART_Init+0x94>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000afe:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b06:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b0c:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b18:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b2a:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b36:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b3c:	4811      	ldr	r0, [pc, #68]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b3e:	f006 f9b5 	bl	8006eac <HAL_UART_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b48:	f000 f988 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	480d      	ldr	r0, [pc, #52]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b50:	f007 f902 	bl	8007d58 <HAL_UARTEx_SetTxFifoThreshold>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b5a:	f000 f97f 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4808      	ldr	r0, [pc, #32]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b62:	f007 f937 	bl	8007dd4 <HAL_UARTEx_SetRxFifoThreshold>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b6c:	f000 f976 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b70:	4804      	ldr	r0, [pc, #16]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b72:	f007 f8b8 	bl	8007ce6 <HAL_UARTEx_DisableFifoMode>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b7c:	f000 f96e 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200000f0 	.word	0x200000f0
 8000b88:	40004800 	.word	0x40004800

08000b8c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b92:	4a16      	ldr	r2, [pc, #88]	; (8000bec <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b94:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b98:	2209      	movs	r2, #9
 8000b9a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000baa:	2202      	movs	r2, #2
 8000bac:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bd4:	f002 fd11 	bl	80035fa <HAL_PCD_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000bde:	f000 f93d 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000180 	.word	0x20000180
 8000bec:	40080000 	.word	0x40080000

08000bf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_DMA_Init+0x4c>)
 8000bf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bfc:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <MX_DMA_Init+0x4c>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <MX_DMA_Init+0x4c>)
 8000c08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2100      	movs	r1, #0
 8000c18:	200b      	movs	r0, #11
 8000c1a:	f000 fe2e 	bl	800187a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c1e:	200b      	movs	r0, #11
 8000c20:	f000 fe45 	bl	80018ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2100      	movs	r1, #0
 8000c28:	200c      	movs	r0, #12
 8000c2a:	f000 fe26 	bl	800187a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c2e:	200c      	movs	r0, #12
 8000c30:	f000 fe3d 	bl	80018ae <HAL_NVIC_EnableIRQ>

}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	58024400 	.word	0x58024400

08000c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	; 0x30
 8000c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c56:	4b79      	ldr	r3, [pc, #484]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5c:	4a77      	ldr	r2, [pc, #476]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000c5e:	f043 0310 	orr.w	r3, r3, #16
 8000c62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c66:	4b75      	ldr	r3, [pc, #468]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6c:	f003 0310 	and.w	r3, r3, #16
 8000c70:	61bb      	str	r3, [r7, #24]
 8000c72:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c74:	4b71      	ldr	r3, [pc, #452]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7a:	4a70      	ldr	r2, [pc, #448]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000c7c:	f043 0304 	orr.w	r3, r3, #4
 8000c80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c84:	4b6d      	ldr	r3, [pc, #436]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8a:	f003 0304 	and.w	r3, r3, #4
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c92:	4b6a      	ldr	r3, [pc, #424]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c98:	4a68      	ldr	r2, [pc, #416]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca2:	4b66      	ldr	r3, [pc, #408]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb0:	4b62      	ldr	r3, [pc, #392]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb6:	4a61      	ldr	r2, [pc, #388]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc0:	4b5e      	ldr	r3, [pc, #376]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	4b5b      	ldr	r3, [pc, #364]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd4:	4a59      	ldr	r2, [pc, #356]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000cd6:	f043 0302 	orr.w	r3, r3, #2
 8000cda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cde:	4b57      	ldr	r3, [pc, #348]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce4:	f003 0302 	and.w	r3, r3, #2
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cec:	4b53      	ldr	r3, [pc, #332]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf2:	4a52      	ldr	r2, [pc, #328]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000cf4:	f043 0308 	orr.w	r3, r3, #8
 8000cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfc:	4b4f      	ldr	r3, [pc, #316]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d02:	f003 0308 	and.w	r3, r3, #8
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d0a:	4b4c      	ldr	r3, [pc, #304]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d10:	4a4a      	ldr	r2, [pc, #296]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d1a:	4b48      	ldr	r3, [pc, #288]	; (8000e3c <MX_GPIO_Init+0x1fc>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d24:	603b      	str	r3, [r7, #0]
 8000d26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_5_GPIO_Port, DIR_5_Pin, GPIO_PIN_RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2140      	movs	r1, #64	; 0x40
 8000d2c:	4844      	ldr	r0, [pc, #272]	; (8000e40 <MX_GPIO_Init+0x200>)
 8000d2e:	f002 fc4b 	bl	80035c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|DIR_1_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f244 0141 	movw	r1, #16449	; 0x4041
 8000d38:	4842      	ldr	r0, [pc, #264]	; (8000e44 <MX_GPIO_Init+0x204>)
 8000d3a:	f002 fc45 	bl	80035c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_3_Pin|DIR_2_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f244 2102 	movw	r1, #16898	; 0x4202
 8000d44:	4840      	ldr	r0, [pc, #256]	; (8000e48 <MX_GPIO_Init+0x208>)
 8000d46:	f002 fc3f 	bl	80035c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|DIR_4_Pin, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 8000d50:	483e      	ldr	r0, [pc, #248]	; (8000e4c <MX_GPIO_Init+0x20c>)
 8000d52:	f002 fc39 	bl	80035c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LM4_Pin LM3_Pin LM5_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin|LM5_Pin;
 8000d56:	f249 0340 	movw	r3, #36928	; 0x9040
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d64:	f107 031c 	add.w	r3, r7, #28
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4837      	ldr	r0, [pc, #220]	; (8000e48 <MX_GPIO_Init+0x208>)
 8000d6c:	f002 fa7c 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	4619      	mov	r1, r3
 8000d84:	4832      	ldr	r0, [pc, #200]	; (8000e50 <MX_GPIO_Init+0x210>)
 8000d86:	f002 fa6f 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_5_Pin */
  GPIO_InitStruct.Pin = DIR_5_Pin;
 8000d8a:	2340      	movs	r3, #64	; 0x40
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DIR_5_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4827      	ldr	r0, [pc, #156]	; (8000e40 <MX_GPIO_Init+0x200>)
 8000da2:	f002 fa61 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin DIR_1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|DIR_1_Pin;
 8000da6:	f244 0341 	movw	r3, #16449	; 0x4041
 8000daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4821      	ldr	r0, [pc, #132]	; (8000e44 <MX_GPIO_Init+0x204>)
 8000dc0:	f002 fa52 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_3_Pin DIR_2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_3_Pin|DIR_2_Pin|LD2_Pin;
 8000dc4:	f244 2302 	movw	r3, #16898	; 0x4202
 8000dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	481a      	ldr	r0, [pc, #104]	; (8000e48 <MX_GPIO_Init+0x208>)
 8000dde:	f002 fa43 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM1_Pin LM2_Pin */
  GPIO_InitStruct.Pin = LM1_Pin|LM2_Pin;
 8000de2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	4619      	mov	r1, r3
 8000df6:	4813      	ldr	r0, [pc, #76]	; (8000e44 <MX_GPIO_Init+0x204>)
 8000df8:	f002 fa36 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin DIR_4_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|DIR_4_Pin;
 8000dfc:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	480d      	ldr	r0, [pc, #52]	; (8000e4c <MX_GPIO_Init+0x20c>)
 8000e16:	f002 fa27 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <MX_GPIO_Init+0x214>)
 8000e20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	480a      	ldr	r0, [pc, #40]	; (8000e58 <MX_GPIO_Init+0x218>)
 8000e2e:	f002 fa1b 	bl	8003268 <HAL_GPIO_Init>

}
 8000e32:	bf00      	nop
 8000e34:	3730      	adds	r7, #48	; 0x30
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	58024400 	.word	0x58024400
 8000e40:	58020000 	.word	0x58020000
 8000e44:	58020400 	.word	0x58020400
 8000e48:	58021000 	.word	0x58021000
 8000e4c:	58020c00 	.word	0x58020c00
 8000e50:	58020800 	.word	0x58020800
 8000e54:	11110000 	.word	0x11110000
 8000e58:	58021800 	.word	0x58021800

08000e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <Error_Handler+0x8>
	...

08000e68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_MspInit+0x30>)
 8000e70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e74:	4a08      	ldr	r2, [pc, #32]	; (8000e98 <HAL_MspInit+0x30>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_MspInit+0x30>)
 8000e80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	58024400 	.word	0x58024400

08000e9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b087      	sub	sp, #28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a2b      	ldr	r2, [pc, #172]	; (8000f58 <HAL_TIM_Base_MspInit+0xbc>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d10f      	bne.n	8000ece <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eae:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <HAL_TIM_Base_MspInit+0xc0>)
 8000eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000eb4:	4a29      	ldr	r2, [pc, #164]	; (8000f5c <HAL_TIM_Base_MspInit+0xc0>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000ebe:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <HAL_TIM_Base_MspInit+0xc0>)
 8000ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ecc:	e03d      	b.n	8000f4a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ed6:	d10f      	bne.n	8000ef8 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ed8:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <HAL_TIM_Base_MspInit+0xc0>)
 8000eda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ede:	4a1f      	ldr	r2, [pc, #124]	; (8000f5c <HAL_TIM_Base_MspInit+0xc0>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <HAL_TIM_Base_MspInit+0xc0>)
 8000eea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]
}
 8000ef6:	e028      	b.n	8000f4a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a18      	ldr	r2, [pc, #96]	; (8000f60 <HAL_TIM_Base_MspInit+0xc4>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d10f      	bne.n	8000f22 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <HAL_TIM_Base_MspInit+0xc0>)
 8000f04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f08:	4a14      	ldr	r2, [pc, #80]	; (8000f5c <HAL_TIM_Base_MspInit+0xc0>)
 8000f0a:	f043 0302 	orr.w	r3, r3, #2
 8000f0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_TIM_Base_MspInit+0xc0>)
 8000f14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
}
 8000f20:	e013      	b.n	8000f4a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a0f      	ldr	r2, [pc, #60]	; (8000f64 <HAL_TIM_Base_MspInit+0xc8>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d10e      	bne.n	8000f4a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_TIM_Base_MspInit+0xc0>)
 8000f2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <HAL_TIM_Base_MspInit+0xc0>)
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <HAL_TIM_Base_MspInit+0xc0>)
 8000f3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f42:	f003 0304 	and.w	r3, r3, #4
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
}
 8000f4a:	bf00      	nop
 8000f4c:	371c      	adds	r7, #28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40010000 	.word	0x40010000
 8000f5c:	58024400 	.word	0x58024400
 8000f60:	40000400 	.word	0x40000400
 8000f64:	40000800 	.word	0x40000800

08000f68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08c      	sub	sp, #48	; 0x30
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 031c 	add.w	r3, r7, #28
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a48      	ldr	r2, [pc, #288]	; (80010a8 <HAL_TIM_MspPostInit+0x140>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d120      	bne.n	8000fcc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f8a:	4b48      	ldr	r3, [pc, #288]	; (80010ac <HAL_TIM_MspPostInit+0x144>)
 8000f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f90:	4a46      	ldr	r2, [pc, #280]	; (80010ac <HAL_TIM_MspPostInit+0x144>)
 8000f92:	f043 0310 	orr.w	r3, r3, #16
 8000f96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f9a:	4b44      	ldr	r3, [pc, #272]	; (80010ac <HAL_TIM_MspPostInit+0x144>)
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa0:	f003 0310 	and.w	r3, r3, #16
 8000fa4:	61bb      	str	r3, [r7, #24]
 8000fa6:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PUL_3_Pin|PUL_2_Pin;
 8000fa8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	483a      	ldr	r0, [pc, #232]	; (80010b0 <HAL_TIM_MspPostInit+0x148>)
 8000fc6:	f002 f94f 	bl	8003268 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000fca:	e068      	b.n	800109e <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM3)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a38      	ldr	r2, [pc, #224]	; (80010b4 <HAL_TIM_MspPostInit+0x14c>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d11f      	bne.n	8001016 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	4b35      	ldr	r3, [pc, #212]	; (80010ac <HAL_TIM_MspPostInit+0x144>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fdc:	4a33      	ldr	r2, [pc, #204]	; (80010ac <HAL_TIM_MspPostInit+0x144>)
 8000fde:	f043 0302 	orr.w	r3, r3, #2
 8000fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe6:	4b31      	ldr	r3, [pc, #196]	; (80010ac <HAL_TIM_MspPostInit+0x144>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PUL_5_Pin;
 8000ff4:	2320      	movs	r3, #32
 8000ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001004:	2302      	movs	r3, #2
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PUL_5_GPIO_Port, &GPIO_InitStruct);
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4619      	mov	r1, r3
 800100e:	482a      	ldr	r0, [pc, #168]	; (80010b8 <HAL_TIM_MspPostInit+0x150>)
 8001010:	f002 f92a 	bl	8003268 <HAL_GPIO_Init>
}
 8001014:	e043      	b.n	800109e <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a28      	ldr	r2, [pc, #160]	; (80010bc <HAL_TIM_MspPostInit+0x154>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d13e      	bne.n	800109e <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001020:	4b22      	ldr	r3, [pc, #136]	; (80010ac <HAL_TIM_MspPostInit+0x144>)
 8001022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001026:	4a21      	ldr	r2, [pc, #132]	; (80010ac <HAL_TIM_MspPostInit+0x144>)
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001030:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <HAL_TIM_MspPostInit+0x144>)
 8001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <HAL_TIM_MspPostInit+0x144>)
 8001040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001044:	4a19      	ldr	r2, [pc, #100]	; (80010ac <HAL_TIM_MspPostInit+0x144>)
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <HAL_TIM_MspPostInit+0x144>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PUL_4_Pin;
 800105c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800106e:	2302      	movs	r3, #2
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PUL_4_GPIO_Port, &GPIO_InitStruct);
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	4619      	mov	r1, r3
 8001078:	4811      	ldr	r0, [pc, #68]	; (80010c0 <HAL_TIM_MspPostInit+0x158>)
 800107a:	f002 f8f5 	bl	8003268 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PUL_1_Pin;
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	2300      	movs	r3, #0
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800108e:	2302      	movs	r3, #2
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PUL_1_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	4619      	mov	r1, r3
 8001098:	4807      	ldr	r0, [pc, #28]	; (80010b8 <HAL_TIM_MspPostInit+0x150>)
 800109a:	f002 f8e5 	bl	8003268 <HAL_GPIO_Init>
}
 800109e:	bf00      	nop
 80010a0:	3730      	adds	r7, #48	; 0x30
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40010000 	.word	0x40010000
 80010ac:	58024400 	.word	0x58024400
 80010b0:	58021000 	.word	0x58021000
 80010b4:	40000400 	.word	0x40000400
 80010b8:	58020400 	.word	0x58020400
 80010bc:	40000800 	.word	0x40000800
 80010c0:	58020c00 	.word	0x58020c00

080010c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b0b8      	sub	sp, #224	; 0xe0
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010dc:	f107 0310 	add.w	r3, r7, #16
 80010e0:	22bc      	movs	r2, #188	; 0xbc
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f007 f9e3 	bl	80084b0 <memset>
  if(huart->Instance==USART3)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a52      	ldr	r2, [pc, #328]	; (8001238 <HAL_UART_MspInit+0x174>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	f040 809d 	bne.w	8001230 <HAL_UART_MspInit+0x16c>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010f6:	2302      	movs	r3, #2
 80010f8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	4618      	mov	r0, r3
 8001106:	f003 fba7 	bl	8004858 <HAL_RCCEx_PeriphCLKConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001110:	f7ff fea4 	bl	8000e5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001114:	4b49      	ldr	r3, [pc, #292]	; (800123c <HAL_UART_MspInit+0x178>)
 8001116:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800111a:	4a48      	ldr	r2, [pc, #288]	; (800123c <HAL_UART_MspInit+0x178>)
 800111c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001120:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001124:	4b45      	ldr	r3, [pc, #276]	; (800123c <HAL_UART_MspInit+0x178>)
 8001126:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800112a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001132:	4b42      	ldr	r3, [pc, #264]	; (800123c <HAL_UART_MspInit+0x178>)
 8001134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001138:	4a40      	ldr	r2, [pc, #256]	; (800123c <HAL_UART_MspInit+0x178>)
 800113a:	f043 0308 	orr.w	r3, r3, #8
 800113e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001142:	4b3e      	ldr	r3, [pc, #248]	; (800123c <HAL_UART_MspInit+0x178>)
 8001144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001148:	f003 0308 	and.w	r3, r3, #8
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001150:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001154:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800116a:	2307      	movs	r3, #7
 800116c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001170:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001174:	4619      	mov	r1, r3
 8001176:	4832      	ldr	r0, [pc, #200]	; (8001240 <HAL_UART_MspInit+0x17c>)
 8001178:	f002 f876 	bl	8003268 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 800117c:	4b31      	ldr	r3, [pc, #196]	; (8001244 <HAL_UART_MspInit+0x180>)
 800117e:	4a32      	ldr	r2, [pc, #200]	; (8001248 <HAL_UART_MspInit+0x184>)
 8001180:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001182:	4b30      	ldr	r3, [pc, #192]	; (8001244 <HAL_UART_MspInit+0x180>)
 8001184:	222d      	movs	r2, #45	; 0x2d
 8001186:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001188:	4b2e      	ldr	r3, [pc, #184]	; (8001244 <HAL_UART_MspInit+0x180>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800118e:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <HAL_UART_MspInit+0x180>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <HAL_UART_MspInit+0x180>)
 8001196:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800119a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800119c:	4b29      	ldr	r3, [pc, #164]	; (8001244 <HAL_UART_MspInit+0x180>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a2:	4b28      	ldr	r3, [pc, #160]	; (8001244 <HAL_UART_MspInit+0x180>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80011a8:	4b26      	ldr	r3, [pc, #152]	; (8001244 <HAL_UART_MspInit+0x180>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011ae:	4b25      	ldr	r3, [pc, #148]	; (8001244 <HAL_UART_MspInit+0x180>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011b4:	4b23      	ldr	r3, [pc, #140]	; (8001244 <HAL_UART_MspInit+0x180>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80011ba:	4822      	ldr	r0, [pc, #136]	; (8001244 <HAL_UART_MspInit+0x180>)
 80011bc:	f000 fb92 	bl	80018e4 <HAL_DMA_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 80011c6:	f7ff fe49 	bl	8000e5c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a1d      	ldr	r2, [pc, #116]	; (8001244 <HAL_UART_MspInit+0x180>)
 80011ce:	67da      	str	r2, [r3, #124]	; 0x7c
 80011d0:	4a1c      	ldr	r2, [pc, #112]	; (8001244 <HAL_UART_MspInit+0x180>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80011d6:	4b1d      	ldr	r3, [pc, #116]	; (800124c <HAL_UART_MspInit+0x188>)
 80011d8:	4a1d      	ldr	r2, [pc, #116]	; (8001250 <HAL_UART_MspInit+0x18c>)
 80011da:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80011dc:	4b1b      	ldr	r3, [pc, #108]	; (800124c <HAL_UART_MspInit+0x188>)
 80011de:	222e      	movs	r2, #46	; 0x2e
 80011e0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011e2:	4b1a      	ldr	r3, [pc, #104]	; (800124c <HAL_UART_MspInit+0x188>)
 80011e4:	2240      	movs	r2, #64	; 0x40
 80011e6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011e8:	4b18      	ldr	r3, [pc, #96]	; (800124c <HAL_UART_MspInit+0x188>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <HAL_UART_MspInit+0x188>)
 80011f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011f4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_UART_MspInit+0x188>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <HAL_UART_MspInit+0x188>)
 80011fe:	2200      	movs	r2, #0
 8001200:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_UART_MspInit+0x188>)
 8001204:	2200      	movs	r2, #0
 8001206:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001208:	4b10      	ldr	r3, [pc, #64]	; (800124c <HAL_UART_MspInit+0x188>)
 800120a:	2200      	movs	r2, #0
 800120c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <HAL_UART_MspInit+0x188>)
 8001210:	2200      	movs	r2, #0
 8001212:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <HAL_UART_MspInit+0x188>)
 8001216:	f000 fb65 	bl	80018e4 <HAL_DMA_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <HAL_UART_MspInit+0x160>
    {
      Error_Handler();
 8001220:	f7ff fe1c 	bl	8000e5c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a09      	ldr	r2, [pc, #36]	; (800124c <HAL_UART_MspInit+0x188>)
 8001228:	679a      	str	r2, [r3, #120]	; 0x78
 800122a:	4a08      	ldr	r2, [pc, #32]	; (800124c <HAL_UART_MspInit+0x188>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001230:	bf00      	nop
 8001232:	37e0      	adds	r7, #224	; 0xe0
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40004800 	.word	0x40004800
 800123c:	58024400 	.word	0x58024400
 8001240:	58020c00 	.word	0x58020c00
 8001244:	20000078 	.word	0x20000078
 8001248:	40020010 	.word	0x40020010
 800124c:	20000588 	.word	0x20000588
 8001250:	40020028 	.word	0x40020028

08001254 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b0b8      	sub	sp, #224	; 0xe0
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	22bc      	movs	r2, #188	; 0xbc
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f007 f91b 	bl	80084b0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a33      	ldr	r2, [pc, #204]	; (800134c <HAL_PCD_MspInit+0xf8>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d15e      	bne.n	8001342 <HAL_PCD_MspInit+0xee>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001284:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001288:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800128a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800128e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001292:	f107 0310 	add.w	r3, r7, #16
 8001296:	4618      	mov	r0, r3
 8001298:	f003 fade 	bl	8004858 <HAL_RCCEx_PeriphCLKConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80012a2:	f7ff fddb 	bl	8000e5c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80012a6:	f002 fb2b 	bl	8003900 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	4b29      	ldr	r3, [pc, #164]	; (8001350 <HAL_PCD_MspInit+0xfc>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	4a27      	ldr	r2, [pc, #156]	; (8001350 <HAL_PCD_MspInit+0xfc>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ba:	4b25      	ldr	r3, [pc, #148]	; (8001350 <HAL_PCD_MspInit+0xfc>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80012c8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80012cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80012e2:	230a      	movs	r3, #10
 80012e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012ec:	4619      	mov	r1, r3
 80012ee:	4819      	ldr	r0, [pc, #100]	; (8001354 <HAL_PCD_MspInit+0x100>)
 80012f0:	f001 ffba 	bl	8003268 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800130c:	4619      	mov	r1, r3
 800130e:	4811      	ldr	r0, [pc, #68]	; (8001354 <HAL_PCD_MspInit+0x100>)
 8001310:	f001 ffaa 	bl	8003268 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <HAL_PCD_MspInit+0xfc>)
 8001316:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800131a:	4a0d      	ldr	r2, [pc, #52]	; (8001350 <HAL_PCD_MspInit+0xfc>)
 800131c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001320:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001324:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_PCD_MspInit+0xfc>)
 8001326:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800132a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2100      	movs	r1, #0
 8001336:	2065      	movs	r0, #101	; 0x65
 8001338:	f000 fa9f 	bl	800187a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800133c:	2065      	movs	r0, #101	; 0x65
 800133e:	f000 fab6 	bl	80018ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001342:	bf00      	nop
 8001344:	37e0      	adds	r7, #224	; 0xe0
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40080000 	.word	0x40080000
 8001350:	58024400 	.word	0x58024400
 8001354:	58020000 	.word	0x58020000

08001358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800135c:	e7fe      	b.n	800135c <NMI_Handler+0x4>

0800135e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <HardFault_Handler+0x4>

08001364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <MemManage_Handler+0x4>

0800136a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136e:	e7fe      	b.n	800136e <BusFault_Handler+0x4>

08001370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <UsageFault_Handler+0x4>

08001376 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a4:	f000 f93e 	bl	8001624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}

080013ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80013b0:	4802      	ldr	r0, [pc, #8]	; (80013bc <DMA1_Stream0_IRQHandler+0x10>)
 80013b2:	f000 fdf3 	bl	8001f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000078 	.word	0x20000078

080013c0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80013c4:	4802      	ldr	r0, [pc, #8]	; (80013d0 <DMA1_Stream1_IRQHandler+0x10>)
 80013c6:	f000 fde9 	bl	8001f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000588 	.word	0x20000588

080013d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013d8:	4b39      	ldr	r3, [pc, #228]	; (80014c0 <SystemInit+0xec>)
 80013da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013de:	4a38      	ldr	r2, [pc, #224]	; (80014c0 <SystemInit+0xec>)
 80013e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013e8:	4b36      	ldr	r3, [pc, #216]	; (80014c4 <SystemInit+0xf0>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 030f 	and.w	r3, r3, #15
 80013f0:	2b06      	cmp	r3, #6
 80013f2:	d807      	bhi.n	8001404 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013f4:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <SystemInit+0xf0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f023 030f 	bic.w	r3, r3, #15
 80013fc:	4a31      	ldr	r2, [pc, #196]	; (80014c4 <SystemInit+0xf0>)
 80013fe:	f043 0307 	orr.w	r3, r3, #7
 8001402:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001404:	4b30      	ldr	r3, [pc, #192]	; (80014c8 <SystemInit+0xf4>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a2f      	ldr	r2, [pc, #188]	; (80014c8 <SystemInit+0xf4>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001410:	4b2d      	ldr	r3, [pc, #180]	; (80014c8 <SystemInit+0xf4>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001416:	4b2c      	ldr	r3, [pc, #176]	; (80014c8 <SystemInit+0xf4>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	492b      	ldr	r1, [pc, #172]	; (80014c8 <SystemInit+0xf4>)
 800141c:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <SystemInit+0xf8>)
 800141e:	4013      	ands	r3, r2
 8001420:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001422:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <SystemInit+0xf0>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	2b00      	cmp	r3, #0
 800142c:	d007      	beq.n	800143e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800142e:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <SystemInit+0xf0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f023 030f 	bic.w	r3, r3, #15
 8001436:	4a23      	ldr	r2, [pc, #140]	; (80014c4 <SystemInit+0xf0>)
 8001438:	f043 0307 	orr.w	r3, r3, #7
 800143c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800143e:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <SystemInit+0xf4>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001444:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <SystemInit+0xf4>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800144a:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <SystemInit+0xf4>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001450:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <SystemInit+0xf4>)
 8001452:	4a1f      	ldr	r2, [pc, #124]	; (80014d0 <SystemInit+0xfc>)
 8001454:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001456:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <SystemInit+0xf4>)
 8001458:	4a1e      	ldr	r2, [pc, #120]	; (80014d4 <SystemInit+0x100>)
 800145a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800145c:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <SystemInit+0xf4>)
 800145e:	4a1e      	ldr	r2, [pc, #120]	; (80014d8 <SystemInit+0x104>)
 8001460:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001462:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <SystemInit+0xf4>)
 8001464:	2200      	movs	r2, #0
 8001466:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001468:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <SystemInit+0xf4>)
 800146a:	4a1b      	ldr	r2, [pc, #108]	; (80014d8 <SystemInit+0x104>)
 800146c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <SystemInit+0xf4>)
 8001470:	2200      	movs	r2, #0
 8001472:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <SystemInit+0xf4>)
 8001476:	4a18      	ldr	r2, [pc, #96]	; (80014d8 <SystemInit+0x104>)
 8001478:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800147a:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <SystemInit+0xf4>)
 800147c:	2200      	movs	r2, #0
 800147e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <SystemInit+0xf4>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <SystemInit+0xf4>)
 8001486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800148a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <SystemInit+0xf4>)
 800148e:	2200      	movs	r2, #0
 8001490:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <SystemInit+0x108>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <SystemInit+0x10c>)
 8001498:	4013      	ands	r3, r2
 800149a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800149e:	d202      	bcs.n	80014a6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014a0:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <SystemInit+0x110>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <SystemInit+0x114>)
 80014a8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80014ac:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <SystemInit+0xec>)
 80014b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014b4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00
 80014c4:	52002000 	.word	0x52002000
 80014c8:	58024400 	.word	0x58024400
 80014cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80014d0:	02020200 	.word	0x02020200
 80014d4:	01ff0000 	.word	0x01ff0000
 80014d8:	01010280 	.word	0x01010280
 80014dc:	5c001000 	.word	0x5c001000
 80014e0:	ffff0000 	.word	0xffff0000
 80014e4:	51008108 	.word	0x51008108
 80014e8:	52004000 	.word	0x52004000

080014ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001524 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014f0:	f7ff ff70 	bl	80013d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f4:	480c      	ldr	r0, [pc, #48]	; (8001528 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014f6:	490d      	ldr	r1, [pc, #52]	; (800152c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014f8:	4a0d      	ldr	r2, [pc, #52]	; (8001530 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014fc:	e002      	b.n	8001504 <LoopCopyDataInit>

080014fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001502:	3304      	adds	r3, #4

08001504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001508:	d3f9      	bcc.n	80014fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800150c:	4c0a      	ldr	r4, [pc, #40]	; (8001538 <LoopFillZerobss+0x22>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001510:	e001      	b.n	8001516 <LoopFillZerobss>

08001512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001514:	3204      	adds	r2, #4

08001516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001518:	d3fb      	bcc.n	8001512 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800151a:	f006 ffa5 	bl	8008468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151e:	f7ff f857 	bl	80005d0 <main>
  bx  lr
 8001522:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001524:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800152c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001530:	08008528 	.word	0x08008528
  ldr r2, =_sbss
 8001534:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001538:	200006e8 	.word	0x200006e8

0800153c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800153c:	e7fe      	b.n	800153c <ADC3_IRQHandler>
	...

08001540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001546:	2003      	movs	r0, #3
 8001548:	f000 f98c 	bl	8001864 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800154c:	f002 ffae 	bl	80044ac <HAL_RCC_GetSysClockFreq>
 8001550:	4602      	mov	r2, r0
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <HAL_Init+0x68>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	0a1b      	lsrs	r3, r3, #8
 8001558:	f003 030f 	and.w	r3, r3, #15
 800155c:	4913      	ldr	r1, [pc, #76]	; (80015ac <HAL_Init+0x6c>)
 800155e:	5ccb      	ldrb	r3, [r1, r3]
 8001560:	f003 031f 	and.w	r3, r3, #31
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
 8001568:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <HAL_Init+0x68>)
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <HAL_Init+0x6c>)
 8001574:	5cd3      	ldrb	r3, [r2, r3]
 8001576:	f003 031f 	and.w	r3, r3, #31
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	fa22 f303 	lsr.w	r3, r2, r3
 8001580:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <HAL_Init+0x70>)
 8001582:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001584:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <HAL_Init+0x74>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800158a:	2000      	movs	r0, #0
 800158c:	f000 f814 	bl	80015b8 <HAL_InitTick>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e002      	b.n	80015a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800159a:	f7ff fc65 	bl	8000e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	58024400 	.word	0x58024400
 80015ac:	080084d8 	.word	0x080084d8
 80015b0:	20000004 	.word	0x20000004
 80015b4:	20000000 	.word	0x20000000

080015b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015c0:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HAL_InitTick+0x60>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e021      	b.n	8001610 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <HAL_InitTick+0x64>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <HAL_InitTick+0x60>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015da:	fbb3 f3f1 	udiv	r3, r3, r1
 80015de:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 f971 	bl	80018ca <HAL_SYSTICK_Config>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00e      	b.n	8001610 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b0f      	cmp	r3, #15
 80015f6:	d80a      	bhi.n	800160e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f8:	2200      	movs	r2, #0
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f000 f93b 	bl	800187a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001604:	4a06      	ldr	r2, [pc, #24]	; (8001620 <HAL_InitTick+0x68>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	e000      	b.n	8001610 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	2000000c 	.word	0x2000000c
 800161c:	20000000 	.word	0x20000000
 8001620:	20000008 	.word	0x20000008

08001624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_IncTick+0x20>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_IncTick+0x24>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4413      	add	r3, r2
 8001634:	4a04      	ldr	r2, [pc, #16]	; (8001648 <HAL_IncTick+0x24>)
 8001636:	6013      	str	r3, [r2, #0]
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	2000000c 	.word	0x2000000c
 8001648:	200006e4 	.word	0x200006e4

0800164c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return uwTick;
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <HAL_GetTick+0x14>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	200006e4 	.word	0x200006e4

08001664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800166c:	f7ff ffee 	bl	800164c <HAL_GetTick>
 8001670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800167c:	d005      	beq.n	800168a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_Delay+0x44>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4413      	add	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800168a:	bf00      	nop
 800168c:	f7ff ffde 	bl	800164c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	429a      	cmp	r2, r3
 800169a:	d8f7      	bhi.n	800168c <HAL_Delay+0x28>
  {
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2000000c 	.word	0x2000000c

080016ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <HAL_GetREVID+0x14>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	0c1b      	lsrs	r3, r3, #16
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	5c001000 	.word	0x5c001000

080016c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d4:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <__NVIC_SetPriorityGrouping+0x40>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e0:	4013      	ands	r3, r2
 80016e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f2:	4a04      	ldr	r2, [pc, #16]	; (8001704 <__NVIC_SetPriorityGrouping+0x40>)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	60d3      	str	r3, [r2, #12]
}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00
 8001708:	05fa0000 	.word	0x05fa0000

0800170c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <__NVIC_GetPriorityGrouping+0x18>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	f003 0307 	and.w	r3, r3, #7
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001736:	2b00      	cmp	r3, #0
 8001738:	db0b      	blt.n	8001752 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	f003 021f 	and.w	r2, r3, #31
 8001740:	4907      	ldr	r1, [pc, #28]	; (8001760 <__NVIC_EnableIRQ+0x38>)
 8001742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	2001      	movs	r0, #1
 800174a:	fa00 f202 	lsl.w	r2, r0, r2
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000e100 	.word	0xe000e100

08001764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	6039      	str	r1, [r7, #0]
 800176e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001774:	2b00      	cmp	r3, #0
 8001776:	db0a      	blt.n	800178e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	b2da      	uxtb	r2, r3
 800177c:	490c      	ldr	r1, [pc, #48]	; (80017b0 <__NVIC_SetPriority+0x4c>)
 800177e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001782:	0112      	lsls	r2, r2, #4
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	440b      	add	r3, r1
 8001788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800178c:	e00a      	b.n	80017a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4908      	ldr	r1, [pc, #32]	; (80017b4 <__NVIC_SetPriority+0x50>)
 8001794:	88fb      	ldrh	r3, [r7, #6]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	3b04      	subs	r3, #4
 800179c:	0112      	lsls	r2, r2, #4
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	440b      	add	r3, r1
 80017a2:	761a      	strb	r2, [r3, #24]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000e100 	.word	0xe000e100
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	; 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f1c3 0307 	rsb	r3, r3, #7
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	bf28      	it	cs
 80017d6:	2304      	movcs	r3, #4
 80017d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3304      	adds	r3, #4
 80017de:	2b06      	cmp	r3, #6
 80017e0:	d902      	bls.n	80017e8 <NVIC_EncodePriority+0x30>
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3b03      	subs	r3, #3
 80017e6:	e000      	b.n	80017ea <NVIC_EncodePriority+0x32>
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	f04f 32ff 	mov.w	r2, #4294967295
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43da      	mvns	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	401a      	ands	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001800:	f04f 31ff 	mov.w	r1, #4294967295
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa01 f303 	lsl.w	r3, r1, r3
 800180a:	43d9      	mvns	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	4313      	orrs	r3, r2
         );
}
 8001812:	4618      	mov	r0, r3
 8001814:	3724      	adds	r7, #36	; 0x24
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001830:	d301      	bcc.n	8001836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001832:	2301      	movs	r3, #1
 8001834:	e00f      	b.n	8001856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001836:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <SysTick_Config+0x40>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3b01      	subs	r3, #1
 800183c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183e:	210f      	movs	r1, #15
 8001840:	f04f 30ff 	mov.w	r0, #4294967295
 8001844:	f7ff ff8e 	bl	8001764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <SysTick_Config+0x40>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <SysTick_Config+0x40>)
 8001850:	2207      	movs	r2, #7
 8001852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	e000e010 	.word	0xe000e010

08001864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff ff29 	bl	80016c4 <__NVIC_SetPriorityGrouping>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001888:	f7ff ff40 	bl	800170c <__NVIC_GetPriorityGrouping>
 800188c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	6978      	ldr	r0, [r7, #20]
 8001894:	f7ff ff90 	bl	80017b8 <NVIC_EncodePriority>
 8001898:	4602      	mov	r2, r0
 800189a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff5f 	bl	8001764 <__NVIC_SetPriority>
}
 80018a6:	bf00      	nop
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff33 	bl	8001728 <__NVIC_EnableIRQ>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff ffa4 	bl	8001820 <SysTick_Config>
 80018d8:	4603      	mov	r3, r0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80018ec:	f7ff feae 	bl	800164c <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e316      	b.n	8001f2a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a66      	ldr	r2, [pc, #408]	; (8001a9c <HAL_DMA_Init+0x1b8>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d04a      	beq.n	800199c <HAL_DMA_Init+0xb8>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a65      	ldr	r2, [pc, #404]	; (8001aa0 <HAL_DMA_Init+0x1bc>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d045      	beq.n	800199c <HAL_DMA_Init+0xb8>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a63      	ldr	r2, [pc, #396]	; (8001aa4 <HAL_DMA_Init+0x1c0>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d040      	beq.n	800199c <HAL_DMA_Init+0xb8>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a62      	ldr	r2, [pc, #392]	; (8001aa8 <HAL_DMA_Init+0x1c4>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d03b      	beq.n	800199c <HAL_DMA_Init+0xb8>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a60      	ldr	r2, [pc, #384]	; (8001aac <HAL_DMA_Init+0x1c8>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d036      	beq.n	800199c <HAL_DMA_Init+0xb8>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a5f      	ldr	r2, [pc, #380]	; (8001ab0 <HAL_DMA_Init+0x1cc>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d031      	beq.n	800199c <HAL_DMA_Init+0xb8>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a5d      	ldr	r2, [pc, #372]	; (8001ab4 <HAL_DMA_Init+0x1d0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d02c      	beq.n	800199c <HAL_DMA_Init+0xb8>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a5c      	ldr	r2, [pc, #368]	; (8001ab8 <HAL_DMA_Init+0x1d4>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d027      	beq.n	800199c <HAL_DMA_Init+0xb8>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a5a      	ldr	r2, [pc, #360]	; (8001abc <HAL_DMA_Init+0x1d8>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d022      	beq.n	800199c <HAL_DMA_Init+0xb8>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a59      	ldr	r2, [pc, #356]	; (8001ac0 <HAL_DMA_Init+0x1dc>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d01d      	beq.n	800199c <HAL_DMA_Init+0xb8>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a57      	ldr	r2, [pc, #348]	; (8001ac4 <HAL_DMA_Init+0x1e0>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d018      	beq.n	800199c <HAL_DMA_Init+0xb8>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a56      	ldr	r2, [pc, #344]	; (8001ac8 <HAL_DMA_Init+0x1e4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d013      	beq.n	800199c <HAL_DMA_Init+0xb8>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a54      	ldr	r2, [pc, #336]	; (8001acc <HAL_DMA_Init+0x1e8>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d00e      	beq.n	800199c <HAL_DMA_Init+0xb8>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a53      	ldr	r2, [pc, #332]	; (8001ad0 <HAL_DMA_Init+0x1ec>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d009      	beq.n	800199c <HAL_DMA_Init+0xb8>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a51      	ldr	r2, [pc, #324]	; (8001ad4 <HAL_DMA_Init+0x1f0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d004      	beq.n	800199c <HAL_DMA_Init+0xb8>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a50      	ldr	r2, [pc, #320]	; (8001ad8 <HAL_DMA_Init+0x1f4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d101      	bne.n	80019a0 <HAL_DMA_Init+0xbc>
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <HAL_DMA_Init+0xbe>
 80019a0:	2300      	movs	r3, #0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 813b 	beq.w	8001c1e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2202      	movs	r2, #2
 80019b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a37      	ldr	r2, [pc, #220]	; (8001a9c <HAL_DMA_Init+0x1b8>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d04a      	beq.n	8001a58 <HAL_DMA_Init+0x174>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a36      	ldr	r2, [pc, #216]	; (8001aa0 <HAL_DMA_Init+0x1bc>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d045      	beq.n	8001a58 <HAL_DMA_Init+0x174>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a34      	ldr	r2, [pc, #208]	; (8001aa4 <HAL_DMA_Init+0x1c0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d040      	beq.n	8001a58 <HAL_DMA_Init+0x174>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a33      	ldr	r2, [pc, #204]	; (8001aa8 <HAL_DMA_Init+0x1c4>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d03b      	beq.n	8001a58 <HAL_DMA_Init+0x174>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a31      	ldr	r2, [pc, #196]	; (8001aac <HAL_DMA_Init+0x1c8>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d036      	beq.n	8001a58 <HAL_DMA_Init+0x174>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a30      	ldr	r2, [pc, #192]	; (8001ab0 <HAL_DMA_Init+0x1cc>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d031      	beq.n	8001a58 <HAL_DMA_Init+0x174>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a2e      	ldr	r2, [pc, #184]	; (8001ab4 <HAL_DMA_Init+0x1d0>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d02c      	beq.n	8001a58 <HAL_DMA_Init+0x174>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a2d      	ldr	r2, [pc, #180]	; (8001ab8 <HAL_DMA_Init+0x1d4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d027      	beq.n	8001a58 <HAL_DMA_Init+0x174>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a2b      	ldr	r2, [pc, #172]	; (8001abc <HAL_DMA_Init+0x1d8>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d022      	beq.n	8001a58 <HAL_DMA_Init+0x174>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a2a      	ldr	r2, [pc, #168]	; (8001ac0 <HAL_DMA_Init+0x1dc>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d01d      	beq.n	8001a58 <HAL_DMA_Init+0x174>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a28      	ldr	r2, [pc, #160]	; (8001ac4 <HAL_DMA_Init+0x1e0>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d018      	beq.n	8001a58 <HAL_DMA_Init+0x174>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a27      	ldr	r2, [pc, #156]	; (8001ac8 <HAL_DMA_Init+0x1e4>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d013      	beq.n	8001a58 <HAL_DMA_Init+0x174>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a25      	ldr	r2, [pc, #148]	; (8001acc <HAL_DMA_Init+0x1e8>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d00e      	beq.n	8001a58 <HAL_DMA_Init+0x174>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a24      	ldr	r2, [pc, #144]	; (8001ad0 <HAL_DMA_Init+0x1ec>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d009      	beq.n	8001a58 <HAL_DMA_Init+0x174>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a22      	ldr	r2, [pc, #136]	; (8001ad4 <HAL_DMA_Init+0x1f0>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d004      	beq.n	8001a58 <HAL_DMA_Init+0x174>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a21      	ldr	r2, [pc, #132]	; (8001ad8 <HAL_DMA_Init+0x1f4>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d108      	bne.n	8001a6a <HAL_DMA_Init+0x186>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0201 	bic.w	r2, r2, #1
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	e007      	b.n	8001a7a <HAL_DMA_Init+0x196>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0201 	bic.w	r2, r2, #1
 8001a78:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a7a:	e02f      	b.n	8001adc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a7c:	f7ff fde6 	bl	800164c <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b05      	cmp	r3, #5
 8001a88:	d928      	bls.n	8001adc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2220      	movs	r2, #32
 8001a8e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2203      	movs	r2, #3
 8001a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e246      	b.n	8001f2a <HAL_DMA_Init+0x646>
 8001a9c:	40020010 	.word	0x40020010
 8001aa0:	40020028 	.word	0x40020028
 8001aa4:	40020040 	.word	0x40020040
 8001aa8:	40020058 	.word	0x40020058
 8001aac:	40020070 	.word	0x40020070
 8001ab0:	40020088 	.word	0x40020088
 8001ab4:	400200a0 	.word	0x400200a0
 8001ab8:	400200b8 	.word	0x400200b8
 8001abc:	40020410 	.word	0x40020410
 8001ac0:	40020428 	.word	0x40020428
 8001ac4:	40020440 	.word	0x40020440
 8001ac8:	40020458 	.word	0x40020458
 8001acc:	40020470 	.word	0x40020470
 8001ad0:	40020488 	.word	0x40020488
 8001ad4:	400204a0 	.word	0x400204a0
 8001ad8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1c8      	bne.n	8001a7c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	4b83      	ldr	r3, [pc, #524]	; (8001d04 <HAL_DMA_Init+0x420>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001b02:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b0e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b1a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d107      	bne.n	8001b40 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001b40:	4b71      	ldr	r3, [pc, #452]	; (8001d08 <HAL_DMA_Init+0x424>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b71      	ldr	r3, [pc, #452]	; (8001d0c <HAL_DMA_Init+0x428>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b4c:	d328      	bcc.n	8001ba0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b28      	cmp	r3, #40	; 0x28
 8001b54:	d903      	bls.n	8001b5e <HAL_DMA_Init+0x27a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b2e      	cmp	r3, #46	; 0x2e
 8001b5c:	d917      	bls.n	8001b8e <HAL_DMA_Init+0x2aa>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b3e      	cmp	r3, #62	; 0x3e
 8001b64:	d903      	bls.n	8001b6e <HAL_DMA_Init+0x28a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b42      	cmp	r3, #66	; 0x42
 8001b6c:	d90f      	bls.n	8001b8e <HAL_DMA_Init+0x2aa>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b46      	cmp	r3, #70	; 0x46
 8001b74:	d903      	bls.n	8001b7e <HAL_DMA_Init+0x29a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b48      	cmp	r3, #72	; 0x48
 8001b7c:	d907      	bls.n	8001b8e <HAL_DMA_Init+0x2aa>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b4e      	cmp	r3, #78	; 0x4e
 8001b84:	d905      	bls.n	8001b92 <HAL_DMA_Init+0x2ae>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b52      	cmp	r3, #82	; 0x52
 8001b8c:	d801      	bhi.n	8001b92 <HAL_DMA_Init+0x2ae>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <HAL_DMA_Init+0x2b0>
 8001b92:	2300      	movs	r3, #0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b9e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f023 0307 	bic.w	r3, r3, #7
 8001bb6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d117      	bne.n	8001bfa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00e      	beq.n	8001bfa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f001 f9b9 	bl	8002f54 <DMA_CheckFifoParam>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d008      	beq.n	8001bfa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2240      	movs	r2, #64	; 0x40
 8001bec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e197      	b.n	8001f2a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f001 f8f4 	bl	8002df0 <DMA_CalcBaseAndBitshift>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c10:	f003 031f 	and.w	r3, r3, #31
 8001c14:	223f      	movs	r2, #63	; 0x3f
 8001c16:	409a      	lsls	r2, r3
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	e0cd      	b.n	8001dba <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a3b      	ldr	r2, [pc, #236]	; (8001d10 <HAL_DMA_Init+0x42c>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d022      	beq.n	8001c6e <HAL_DMA_Init+0x38a>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a39      	ldr	r2, [pc, #228]	; (8001d14 <HAL_DMA_Init+0x430>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d01d      	beq.n	8001c6e <HAL_DMA_Init+0x38a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a38      	ldr	r2, [pc, #224]	; (8001d18 <HAL_DMA_Init+0x434>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d018      	beq.n	8001c6e <HAL_DMA_Init+0x38a>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a36      	ldr	r2, [pc, #216]	; (8001d1c <HAL_DMA_Init+0x438>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d013      	beq.n	8001c6e <HAL_DMA_Init+0x38a>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a35      	ldr	r2, [pc, #212]	; (8001d20 <HAL_DMA_Init+0x43c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d00e      	beq.n	8001c6e <HAL_DMA_Init+0x38a>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a33      	ldr	r2, [pc, #204]	; (8001d24 <HAL_DMA_Init+0x440>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d009      	beq.n	8001c6e <HAL_DMA_Init+0x38a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a32      	ldr	r2, [pc, #200]	; (8001d28 <HAL_DMA_Init+0x444>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d004      	beq.n	8001c6e <HAL_DMA_Init+0x38a>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a30      	ldr	r2, [pc, #192]	; (8001d2c <HAL_DMA_Init+0x448>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d101      	bne.n	8001c72 <HAL_DMA_Init+0x38e>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <HAL_DMA_Init+0x390>
 8001c72:	2300      	movs	r3, #0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 8097 	beq.w	8001da8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a24      	ldr	r2, [pc, #144]	; (8001d10 <HAL_DMA_Init+0x42c>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d021      	beq.n	8001cc8 <HAL_DMA_Init+0x3e4>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a22      	ldr	r2, [pc, #136]	; (8001d14 <HAL_DMA_Init+0x430>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d01c      	beq.n	8001cc8 <HAL_DMA_Init+0x3e4>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a21      	ldr	r2, [pc, #132]	; (8001d18 <HAL_DMA_Init+0x434>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d017      	beq.n	8001cc8 <HAL_DMA_Init+0x3e4>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1f      	ldr	r2, [pc, #124]	; (8001d1c <HAL_DMA_Init+0x438>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d012      	beq.n	8001cc8 <HAL_DMA_Init+0x3e4>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a1e      	ldr	r2, [pc, #120]	; (8001d20 <HAL_DMA_Init+0x43c>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d00d      	beq.n	8001cc8 <HAL_DMA_Init+0x3e4>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1c      	ldr	r2, [pc, #112]	; (8001d24 <HAL_DMA_Init+0x440>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d008      	beq.n	8001cc8 <HAL_DMA_Init+0x3e4>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a1b      	ldr	r2, [pc, #108]	; (8001d28 <HAL_DMA_Init+0x444>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d003      	beq.n	8001cc8 <HAL_DMA_Init+0x3e4>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a19      	ldr	r2, [pc, #100]	; (8001d2c <HAL_DMA_Init+0x448>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_DMA_Init+0x44c>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b40      	cmp	r3, #64	; 0x40
 8001cf0:	d020      	beq.n	8001d34 <HAL_DMA_Init+0x450>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b80      	cmp	r3, #128	; 0x80
 8001cf8:	d102      	bne.n	8001d00 <HAL_DMA_Init+0x41c>
 8001cfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cfe:	e01a      	b.n	8001d36 <HAL_DMA_Init+0x452>
 8001d00:	2300      	movs	r3, #0
 8001d02:	e018      	b.n	8001d36 <HAL_DMA_Init+0x452>
 8001d04:	fe10803f 	.word	0xfe10803f
 8001d08:	5c001000 	.word	0x5c001000
 8001d0c:	ffff0000 	.word	0xffff0000
 8001d10:	58025408 	.word	0x58025408
 8001d14:	5802541c 	.word	0x5802541c
 8001d18:	58025430 	.word	0x58025430
 8001d1c:	58025444 	.word	0x58025444
 8001d20:	58025458 	.word	0x58025458
 8001d24:	5802546c 	.word	0x5802546c
 8001d28:	58025480 	.word	0x58025480
 8001d2c:	58025494 	.word	0x58025494
 8001d30:	fffe000f 	.word	0xfffe000f
 8001d34:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	68d2      	ldr	r2, [r2, #12]
 8001d3a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d64:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b6e      	ldr	r3, [pc, #440]	; (8001f34 <HAL_DMA_Init+0x650>)
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4a6e      	ldr	r2, [pc, #440]	; (8001f38 <HAL_DMA_Init+0x654>)
 8001d80:	fba2 2303 	umull	r2, r3, r2, r3
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	009a      	lsls	r2, r3, #2
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f001 f82f 	bl	8002df0 <DMA_CalcBaseAndBitshift>
 8001d92:	4603      	mov	r3, r0
 8001d94:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9a:	f003 031f 	and.w	r3, r3, #31
 8001d9e:	2201      	movs	r2, #1
 8001da0:	409a      	lsls	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	e008      	b.n	8001dba <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2240      	movs	r2, #64	; 0x40
 8001dac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2203      	movs	r2, #3
 8001db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e0b7      	b.n	8001f2a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a5f      	ldr	r2, [pc, #380]	; (8001f3c <HAL_DMA_Init+0x658>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d072      	beq.n	8001eaa <HAL_DMA_Init+0x5c6>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a5d      	ldr	r2, [pc, #372]	; (8001f40 <HAL_DMA_Init+0x65c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d06d      	beq.n	8001eaa <HAL_DMA_Init+0x5c6>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a5c      	ldr	r2, [pc, #368]	; (8001f44 <HAL_DMA_Init+0x660>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d068      	beq.n	8001eaa <HAL_DMA_Init+0x5c6>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a5a      	ldr	r2, [pc, #360]	; (8001f48 <HAL_DMA_Init+0x664>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d063      	beq.n	8001eaa <HAL_DMA_Init+0x5c6>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a59      	ldr	r2, [pc, #356]	; (8001f4c <HAL_DMA_Init+0x668>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d05e      	beq.n	8001eaa <HAL_DMA_Init+0x5c6>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a57      	ldr	r2, [pc, #348]	; (8001f50 <HAL_DMA_Init+0x66c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d059      	beq.n	8001eaa <HAL_DMA_Init+0x5c6>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a56      	ldr	r2, [pc, #344]	; (8001f54 <HAL_DMA_Init+0x670>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d054      	beq.n	8001eaa <HAL_DMA_Init+0x5c6>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a54      	ldr	r2, [pc, #336]	; (8001f58 <HAL_DMA_Init+0x674>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d04f      	beq.n	8001eaa <HAL_DMA_Init+0x5c6>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a53      	ldr	r2, [pc, #332]	; (8001f5c <HAL_DMA_Init+0x678>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d04a      	beq.n	8001eaa <HAL_DMA_Init+0x5c6>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a51      	ldr	r2, [pc, #324]	; (8001f60 <HAL_DMA_Init+0x67c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d045      	beq.n	8001eaa <HAL_DMA_Init+0x5c6>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a50      	ldr	r2, [pc, #320]	; (8001f64 <HAL_DMA_Init+0x680>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d040      	beq.n	8001eaa <HAL_DMA_Init+0x5c6>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a4e      	ldr	r2, [pc, #312]	; (8001f68 <HAL_DMA_Init+0x684>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d03b      	beq.n	8001eaa <HAL_DMA_Init+0x5c6>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a4d      	ldr	r2, [pc, #308]	; (8001f6c <HAL_DMA_Init+0x688>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d036      	beq.n	8001eaa <HAL_DMA_Init+0x5c6>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a4b      	ldr	r2, [pc, #300]	; (8001f70 <HAL_DMA_Init+0x68c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d031      	beq.n	8001eaa <HAL_DMA_Init+0x5c6>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a4a      	ldr	r2, [pc, #296]	; (8001f74 <HAL_DMA_Init+0x690>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d02c      	beq.n	8001eaa <HAL_DMA_Init+0x5c6>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a48      	ldr	r2, [pc, #288]	; (8001f78 <HAL_DMA_Init+0x694>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d027      	beq.n	8001eaa <HAL_DMA_Init+0x5c6>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a47      	ldr	r2, [pc, #284]	; (8001f7c <HAL_DMA_Init+0x698>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d022      	beq.n	8001eaa <HAL_DMA_Init+0x5c6>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a45      	ldr	r2, [pc, #276]	; (8001f80 <HAL_DMA_Init+0x69c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d01d      	beq.n	8001eaa <HAL_DMA_Init+0x5c6>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a44      	ldr	r2, [pc, #272]	; (8001f84 <HAL_DMA_Init+0x6a0>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d018      	beq.n	8001eaa <HAL_DMA_Init+0x5c6>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a42      	ldr	r2, [pc, #264]	; (8001f88 <HAL_DMA_Init+0x6a4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d013      	beq.n	8001eaa <HAL_DMA_Init+0x5c6>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a41      	ldr	r2, [pc, #260]	; (8001f8c <HAL_DMA_Init+0x6a8>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d00e      	beq.n	8001eaa <HAL_DMA_Init+0x5c6>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a3f      	ldr	r2, [pc, #252]	; (8001f90 <HAL_DMA_Init+0x6ac>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d009      	beq.n	8001eaa <HAL_DMA_Init+0x5c6>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a3e      	ldr	r2, [pc, #248]	; (8001f94 <HAL_DMA_Init+0x6b0>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d004      	beq.n	8001eaa <HAL_DMA_Init+0x5c6>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a3c      	ldr	r2, [pc, #240]	; (8001f98 <HAL_DMA_Init+0x6b4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d101      	bne.n	8001eae <HAL_DMA_Init+0x5ca>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <HAL_DMA_Init+0x5cc>
 8001eae:	2300      	movs	r3, #0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d032      	beq.n	8001f1a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f001 f8c9 	bl	800304c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b80      	cmp	r3, #128	; 0x80
 8001ec0:	d102      	bne.n	8001ec8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001edc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d010      	beq.n	8001f08 <HAL_DMA_Init+0x624>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d80c      	bhi.n	8001f08 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f001 f946 	bl	8003180 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	e008      	b.n	8001f1a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	a7fdabf8 	.word	0xa7fdabf8
 8001f38:	cccccccd 	.word	0xcccccccd
 8001f3c:	40020010 	.word	0x40020010
 8001f40:	40020028 	.word	0x40020028
 8001f44:	40020040 	.word	0x40020040
 8001f48:	40020058 	.word	0x40020058
 8001f4c:	40020070 	.word	0x40020070
 8001f50:	40020088 	.word	0x40020088
 8001f54:	400200a0 	.word	0x400200a0
 8001f58:	400200b8 	.word	0x400200b8
 8001f5c:	40020410 	.word	0x40020410
 8001f60:	40020428 	.word	0x40020428
 8001f64:	40020440 	.word	0x40020440
 8001f68:	40020458 	.word	0x40020458
 8001f6c:	40020470 	.word	0x40020470
 8001f70:	40020488 	.word	0x40020488
 8001f74:	400204a0 	.word	0x400204a0
 8001f78:	400204b8 	.word	0x400204b8
 8001f7c:	58025408 	.word	0x58025408
 8001f80:	5802541c 	.word	0x5802541c
 8001f84:	58025430 	.word	0x58025430
 8001f88:	58025444 	.word	0x58025444
 8001f8c:	58025458 	.word	0x58025458
 8001f90:	5802546c 	.word	0x5802546c
 8001f94:	58025480 	.word	0x58025480
 8001f98:	58025494 	.word	0x58025494

08001f9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	; 0x28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fa8:	4b67      	ldr	r3, [pc, #412]	; (8002148 <HAL_DMA_IRQHandler+0x1ac>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a67      	ldr	r2, [pc, #412]	; (800214c <HAL_DMA_IRQHandler+0x1b0>)
 8001fae:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb2:	0a9b      	lsrs	r3, r3, #10
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a5f      	ldr	r2, [pc, #380]	; (8002150 <HAL_DMA_IRQHandler+0x1b4>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d04a      	beq.n	800206e <HAL_DMA_IRQHandler+0xd2>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a5d      	ldr	r2, [pc, #372]	; (8002154 <HAL_DMA_IRQHandler+0x1b8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d045      	beq.n	800206e <HAL_DMA_IRQHandler+0xd2>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a5c      	ldr	r2, [pc, #368]	; (8002158 <HAL_DMA_IRQHandler+0x1bc>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d040      	beq.n	800206e <HAL_DMA_IRQHandler+0xd2>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a5a      	ldr	r2, [pc, #360]	; (800215c <HAL_DMA_IRQHandler+0x1c0>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d03b      	beq.n	800206e <HAL_DMA_IRQHandler+0xd2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a59      	ldr	r2, [pc, #356]	; (8002160 <HAL_DMA_IRQHandler+0x1c4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d036      	beq.n	800206e <HAL_DMA_IRQHandler+0xd2>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a57      	ldr	r2, [pc, #348]	; (8002164 <HAL_DMA_IRQHandler+0x1c8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d031      	beq.n	800206e <HAL_DMA_IRQHandler+0xd2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a56      	ldr	r2, [pc, #344]	; (8002168 <HAL_DMA_IRQHandler+0x1cc>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d02c      	beq.n	800206e <HAL_DMA_IRQHandler+0xd2>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a54      	ldr	r2, [pc, #336]	; (800216c <HAL_DMA_IRQHandler+0x1d0>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d027      	beq.n	800206e <HAL_DMA_IRQHandler+0xd2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a53      	ldr	r2, [pc, #332]	; (8002170 <HAL_DMA_IRQHandler+0x1d4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d022      	beq.n	800206e <HAL_DMA_IRQHandler+0xd2>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a51      	ldr	r2, [pc, #324]	; (8002174 <HAL_DMA_IRQHandler+0x1d8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d01d      	beq.n	800206e <HAL_DMA_IRQHandler+0xd2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a50      	ldr	r2, [pc, #320]	; (8002178 <HAL_DMA_IRQHandler+0x1dc>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d018      	beq.n	800206e <HAL_DMA_IRQHandler+0xd2>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a4e      	ldr	r2, [pc, #312]	; (800217c <HAL_DMA_IRQHandler+0x1e0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d013      	beq.n	800206e <HAL_DMA_IRQHandler+0xd2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a4d      	ldr	r2, [pc, #308]	; (8002180 <HAL_DMA_IRQHandler+0x1e4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d00e      	beq.n	800206e <HAL_DMA_IRQHandler+0xd2>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a4b      	ldr	r2, [pc, #300]	; (8002184 <HAL_DMA_IRQHandler+0x1e8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d009      	beq.n	800206e <HAL_DMA_IRQHandler+0xd2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a4a      	ldr	r2, [pc, #296]	; (8002188 <HAL_DMA_IRQHandler+0x1ec>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d004      	beq.n	800206e <HAL_DMA_IRQHandler+0xd2>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a48      	ldr	r2, [pc, #288]	; (800218c <HAL_DMA_IRQHandler+0x1f0>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d101      	bne.n	8002072 <HAL_DMA_IRQHandler+0xd6>
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <HAL_DMA_IRQHandler+0xd8>
 8002072:	2300      	movs	r3, #0
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 842b 	beq.w	80028d0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207e:	f003 031f 	and.w	r3, r3, #31
 8002082:	2208      	movs	r2, #8
 8002084:	409a      	lsls	r2, r3
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 80a2 	beq.w	80021d4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a2e      	ldr	r2, [pc, #184]	; (8002150 <HAL_DMA_IRQHandler+0x1b4>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d04a      	beq.n	8002130 <HAL_DMA_IRQHandler+0x194>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a2d      	ldr	r2, [pc, #180]	; (8002154 <HAL_DMA_IRQHandler+0x1b8>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d045      	beq.n	8002130 <HAL_DMA_IRQHandler+0x194>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a2b      	ldr	r2, [pc, #172]	; (8002158 <HAL_DMA_IRQHandler+0x1bc>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d040      	beq.n	8002130 <HAL_DMA_IRQHandler+0x194>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a2a      	ldr	r2, [pc, #168]	; (800215c <HAL_DMA_IRQHandler+0x1c0>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d03b      	beq.n	8002130 <HAL_DMA_IRQHandler+0x194>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a28      	ldr	r2, [pc, #160]	; (8002160 <HAL_DMA_IRQHandler+0x1c4>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d036      	beq.n	8002130 <HAL_DMA_IRQHandler+0x194>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a27      	ldr	r2, [pc, #156]	; (8002164 <HAL_DMA_IRQHandler+0x1c8>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d031      	beq.n	8002130 <HAL_DMA_IRQHandler+0x194>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a25      	ldr	r2, [pc, #148]	; (8002168 <HAL_DMA_IRQHandler+0x1cc>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d02c      	beq.n	8002130 <HAL_DMA_IRQHandler+0x194>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a24      	ldr	r2, [pc, #144]	; (800216c <HAL_DMA_IRQHandler+0x1d0>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d027      	beq.n	8002130 <HAL_DMA_IRQHandler+0x194>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a22      	ldr	r2, [pc, #136]	; (8002170 <HAL_DMA_IRQHandler+0x1d4>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d022      	beq.n	8002130 <HAL_DMA_IRQHandler+0x194>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a21      	ldr	r2, [pc, #132]	; (8002174 <HAL_DMA_IRQHandler+0x1d8>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d01d      	beq.n	8002130 <HAL_DMA_IRQHandler+0x194>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a1f      	ldr	r2, [pc, #124]	; (8002178 <HAL_DMA_IRQHandler+0x1dc>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d018      	beq.n	8002130 <HAL_DMA_IRQHandler+0x194>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a1e      	ldr	r2, [pc, #120]	; (800217c <HAL_DMA_IRQHandler+0x1e0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d013      	beq.n	8002130 <HAL_DMA_IRQHandler+0x194>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a1c      	ldr	r2, [pc, #112]	; (8002180 <HAL_DMA_IRQHandler+0x1e4>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00e      	beq.n	8002130 <HAL_DMA_IRQHandler+0x194>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a1b      	ldr	r2, [pc, #108]	; (8002184 <HAL_DMA_IRQHandler+0x1e8>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d009      	beq.n	8002130 <HAL_DMA_IRQHandler+0x194>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a19      	ldr	r2, [pc, #100]	; (8002188 <HAL_DMA_IRQHandler+0x1ec>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d004      	beq.n	8002130 <HAL_DMA_IRQHandler+0x194>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a18      	ldr	r2, [pc, #96]	; (800218c <HAL_DMA_IRQHandler+0x1f0>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d12f      	bne.n	8002190 <HAL_DMA_IRQHandler+0x1f4>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	2b00      	cmp	r3, #0
 800213c:	bf14      	ite	ne
 800213e:	2301      	movne	r3, #1
 8002140:	2300      	moveq	r3, #0
 8002142:	b2db      	uxtb	r3, r3
 8002144:	e02e      	b.n	80021a4 <HAL_DMA_IRQHandler+0x208>
 8002146:	bf00      	nop
 8002148:	20000000 	.word	0x20000000
 800214c:	1b4e81b5 	.word	0x1b4e81b5
 8002150:	40020010 	.word	0x40020010
 8002154:	40020028 	.word	0x40020028
 8002158:	40020040 	.word	0x40020040
 800215c:	40020058 	.word	0x40020058
 8002160:	40020070 	.word	0x40020070
 8002164:	40020088 	.word	0x40020088
 8002168:	400200a0 	.word	0x400200a0
 800216c:	400200b8 	.word	0x400200b8
 8002170:	40020410 	.word	0x40020410
 8002174:	40020428 	.word	0x40020428
 8002178:	40020440 	.word	0x40020440
 800217c:	40020458 	.word	0x40020458
 8002180:	40020470 	.word	0x40020470
 8002184:	40020488 	.word	0x40020488
 8002188:	400204a0 	.word	0x400204a0
 800218c:	400204b8 	.word	0x400204b8
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b00      	cmp	r3, #0
 800219c:	bf14      	ite	ne
 800219e:	2301      	movne	r3, #1
 80021a0:	2300      	moveq	r3, #0
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d015      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0204 	bic.w	r2, r2, #4
 80021b6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021bc:	f003 031f 	and.w	r3, r3, #31
 80021c0:	2208      	movs	r2, #8
 80021c2:	409a      	lsls	r2, r3
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021cc:	f043 0201 	orr.w	r2, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d8:	f003 031f 	and.w	r3, r3, #31
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	fa22 f303 	lsr.w	r3, r2, r3
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d06e      	beq.n	80022c8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a69      	ldr	r2, [pc, #420]	; (8002394 <HAL_DMA_IRQHandler+0x3f8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d04a      	beq.n	800228a <HAL_DMA_IRQHandler+0x2ee>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a67      	ldr	r2, [pc, #412]	; (8002398 <HAL_DMA_IRQHandler+0x3fc>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d045      	beq.n	800228a <HAL_DMA_IRQHandler+0x2ee>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a66      	ldr	r2, [pc, #408]	; (800239c <HAL_DMA_IRQHandler+0x400>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d040      	beq.n	800228a <HAL_DMA_IRQHandler+0x2ee>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a64      	ldr	r2, [pc, #400]	; (80023a0 <HAL_DMA_IRQHandler+0x404>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d03b      	beq.n	800228a <HAL_DMA_IRQHandler+0x2ee>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a63      	ldr	r2, [pc, #396]	; (80023a4 <HAL_DMA_IRQHandler+0x408>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d036      	beq.n	800228a <HAL_DMA_IRQHandler+0x2ee>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a61      	ldr	r2, [pc, #388]	; (80023a8 <HAL_DMA_IRQHandler+0x40c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d031      	beq.n	800228a <HAL_DMA_IRQHandler+0x2ee>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a60      	ldr	r2, [pc, #384]	; (80023ac <HAL_DMA_IRQHandler+0x410>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d02c      	beq.n	800228a <HAL_DMA_IRQHandler+0x2ee>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a5e      	ldr	r2, [pc, #376]	; (80023b0 <HAL_DMA_IRQHandler+0x414>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d027      	beq.n	800228a <HAL_DMA_IRQHandler+0x2ee>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a5d      	ldr	r2, [pc, #372]	; (80023b4 <HAL_DMA_IRQHandler+0x418>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d022      	beq.n	800228a <HAL_DMA_IRQHandler+0x2ee>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a5b      	ldr	r2, [pc, #364]	; (80023b8 <HAL_DMA_IRQHandler+0x41c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d01d      	beq.n	800228a <HAL_DMA_IRQHandler+0x2ee>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a5a      	ldr	r2, [pc, #360]	; (80023bc <HAL_DMA_IRQHandler+0x420>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d018      	beq.n	800228a <HAL_DMA_IRQHandler+0x2ee>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a58      	ldr	r2, [pc, #352]	; (80023c0 <HAL_DMA_IRQHandler+0x424>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d013      	beq.n	800228a <HAL_DMA_IRQHandler+0x2ee>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a57      	ldr	r2, [pc, #348]	; (80023c4 <HAL_DMA_IRQHandler+0x428>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d00e      	beq.n	800228a <HAL_DMA_IRQHandler+0x2ee>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a55      	ldr	r2, [pc, #340]	; (80023c8 <HAL_DMA_IRQHandler+0x42c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d009      	beq.n	800228a <HAL_DMA_IRQHandler+0x2ee>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a54      	ldr	r2, [pc, #336]	; (80023cc <HAL_DMA_IRQHandler+0x430>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d004      	beq.n	800228a <HAL_DMA_IRQHandler+0x2ee>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a52      	ldr	r2, [pc, #328]	; (80023d0 <HAL_DMA_IRQHandler+0x434>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d10a      	bne.n	80022a0 <HAL_DMA_IRQHandler+0x304>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002294:	2b00      	cmp	r3, #0
 8002296:	bf14      	ite	ne
 8002298:	2301      	movne	r3, #1
 800229a:	2300      	moveq	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	e003      	b.n	80022a8 <HAL_DMA_IRQHandler+0x30c>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2300      	movs	r3, #0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00d      	beq.n	80022c8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b0:	f003 031f 	and.w	r3, r3, #31
 80022b4:	2201      	movs	r2, #1
 80022b6:	409a      	lsls	r2, r3
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c0:	f043 0202 	orr.w	r2, r3, #2
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022cc:	f003 031f 	and.w	r3, r3, #31
 80022d0:	2204      	movs	r2, #4
 80022d2:	409a      	lsls	r2, r3
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 808f 	beq.w	80023fc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a2c      	ldr	r2, [pc, #176]	; (8002394 <HAL_DMA_IRQHandler+0x3f8>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d04a      	beq.n	800237e <HAL_DMA_IRQHandler+0x3e2>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a2a      	ldr	r2, [pc, #168]	; (8002398 <HAL_DMA_IRQHandler+0x3fc>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d045      	beq.n	800237e <HAL_DMA_IRQHandler+0x3e2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a29      	ldr	r2, [pc, #164]	; (800239c <HAL_DMA_IRQHandler+0x400>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d040      	beq.n	800237e <HAL_DMA_IRQHandler+0x3e2>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a27      	ldr	r2, [pc, #156]	; (80023a0 <HAL_DMA_IRQHandler+0x404>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d03b      	beq.n	800237e <HAL_DMA_IRQHandler+0x3e2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a26      	ldr	r2, [pc, #152]	; (80023a4 <HAL_DMA_IRQHandler+0x408>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d036      	beq.n	800237e <HAL_DMA_IRQHandler+0x3e2>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a24      	ldr	r2, [pc, #144]	; (80023a8 <HAL_DMA_IRQHandler+0x40c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d031      	beq.n	800237e <HAL_DMA_IRQHandler+0x3e2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a23      	ldr	r2, [pc, #140]	; (80023ac <HAL_DMA_IRQHandler+0x410>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d02c      	beq.n	800237e <HAL_DMA_IRQHandler+0x3e2>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a21      	ldr	r2, [pc, #132]	; (80023b0 <HAL_DMA_IRQHandler+0x414>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d027      	beq.n	800237e <HAL_DMA_IRQHandler+0x3e2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a20      	ldr	r2, [pc, #128]	; (80023b4 <HAL_DMA_IRQHandler+0x418>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d022      	beq.n	800237e <HAL_DMA_IRQHandler+0x3e2>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a1e      	ldr	r2, [pc, #120]	; (80023b8 <HAL_DMA_IRQHandler+0x41c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d01d      	beq.n	800237e <HAL_DMA_IRQHandler+0x3e2>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a1d      	ldr	r2, [pc, #116]	; (80023bc <HAL_DMA_IRQHandler+0x420>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d018      	beq.n	800237e <HAL_DMA_IRQHandler+0x3e2>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a1b      	ldr	r2, [pc, #108]	; (80023c0 <HAL_DMA_IRQHandler+0x424>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d013      	beq.n	800237e <HAL_DMA_IRQHandler+0x3e2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a1a      	ldr	r2, [pc, #104]	; (80023c4 <HAL_DMA_IRQHandler+0x428>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d00e      	beq.n	800237e <HAL_DMA_IRQHandler+0x3e2>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a18      	ldr	r2, [pc, #96]	; (80023c8 <HAL_DMA_IRQHandler+0x42c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d009      	beq.n	800237e <HAL_DMA_IRQHandler+0x3e2>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a17      	ldr	r2, [pc, #92]	; (80023cc <HAL_DMA_IRQHandler+0x430>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d004      	beq.n	800237e <HAL_DMA_IRQHandler+0x3e2>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a15      	ldr	r2, [pc, #84]	; (80023d0 <HAL_DMA_IRQHandler+0x434>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d12a      	bne.n	80023d4 <HAL_DMA_IRQHandler+0x438>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	bf14      	ite	ne
 800238c:	2301      	movne	r3, #1
 800238e:	2300      	moveq	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	e023      	b.n	80023dc <HAL_DMA_IRQHandler+0x440>
 8002394:	40020010 	.word	0x40020010
 8002398:	40020028 	.word	0x40020028
 800239c:	40020040 	.word	0x40020040
 80023a0:	40020058 	.word	0x40020058
 80023a4:	40020070 	.word	0x40020070
 80023a8:	40020088 	.word	0x40020088
 80023ac:	400200a0 	.word	0x400200a0
 80023b0:	400200b8 	.word	0x400200b8
 80023b4:	40020410 	.word	0x40020410
 80023b8:	40020428 	.word	0x40020428
 80023bc:	40020440 	.word	0x40020440
 80023c0:	40020458 	.word	0x40020458
 80023c4:	40020470 	.word	0x40020470
 80023c8:	40020488 	.word	0x40020488
 80023cc:	400204a0 	.word	0x400204a0
 80023d0:	400204b8 	.word	0x400204b8
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2300      	movs	r3, #0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00d      	beq.n	80023fc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e4:	f003 031f 	and.w	r3, r3, #31
 80023e8:	2204      	movs	r2, #4
 80023ea:	409a      	lsls	r2, r3
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f4:	f043 0204 	orr.w	r2, r3, #4
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	2210      	movs	r2, #16
 8002406:	409a      	lsls	r2, r3
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80a6 	beq.w	800255e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a85      	ldr	r2, [pc, #532]	; (800262c <HAL_DMA_IRQHandler+0x690>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d04a      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x516>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a83      	ldr	r2, [pc, #524]	; (8002630 <HAL_DMA_IRQHandler+0x694>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d045      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x516>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a82      	ldr	r2, [pc, #520]	; (8002634 <HAL_DMA_IRQHandler+0x698>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d040      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x516>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a80      	ldr	r2, [pc, #512]	; (8002638 <HAL_DMA_IRQHandler+0x69c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d03b      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x516>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a7f      	ldr	r2, [pc, #508]	; (800263c <HAL_DMA_IRQHandler+0x6a0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d036      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x516>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a7d      	ldr	r2, [pc, #500]	; (8002640 <HAL_DMA_IRQHandler+0x6a4>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d031      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x516>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a7c      	ldr	r2, [pc, #496]	; (8002644 <HAL_DMA_IRQHandler+0x6a8>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d02c      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x516>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a7a      	ldr	r2, [pc, #488]	; (8002648 <HAL_DMA_IRQHandler+0x6ac>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d027      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x516>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a79      	ldr	r2, [pc, #484]	; (800264c <HAL_DMA_IRQHandler+0x6b0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d022      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x516>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a77      	ldr	r2, [pc, #476]	; (8002650 <HAL_DMA_IRQHandler+0x6b4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d01d      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x516>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a76      	ldr	r2, [pc, #472]	; (8002654 <HAL_DMA_IRQHandler+0x6b8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d018      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x516>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a74      	ldr	r2, [pc, #464]	; (8002658 <HAL_DMA_IRQHandler+0x6bc>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d013      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x516>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a73      	ldr	r2, [pc, #460]	; (800265c <HAL_DMA_IRQHandler+0x6c0>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d00e      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x516>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a71      	ldr	r2, [pc, #452]	; (8002660 <HAL_DMA_IRQHandler+0x6c4>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d009      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x516>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a70      	ldr	r2, [pc, #448]	; (8002664 <HAL_DMA_IRQHandler+0x6c8>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d004      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x516>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a6e      	ldr	r2, [pc, #440]	; (8002668 <HAL_DMA_IRQHandler+0x6cc>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d10a      	bne.n	80024c8 <HAL_DMA_IRQHandler+0x52c>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b00      	cmp	r3, #0
 80024be:	bf14      	ite	ne
 80024c0:	2301      	movne	r3, #1
 80024c2:	2300      	moveq	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	e009      	b.n	80024dc <HAL_DMA_IRQHandler+0x540>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	bf14      	ite	ne
 80024d6:	2301      	movne	r3, #1
 80024d8:	2300      	moveq	r3, #0
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d03e      	beq.n	800255e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	2210      	movs	r2, #16
 80024ea:	409a      	lsls	r2, r3
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d018      	beq.n	8002530 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d108      	bne.n	800251e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	2b00      	cmp	r3, #0
 8002512:	d024      	beq.n	800255e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	4798      	blx	r3
 800251c:	e01f      	b.n	800255e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002522:	2b00      	cmp	r3, #0
 8002524:	d01b      	beq.n	800255e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	4798      	blx	r3
 800252e:	e016      	b.n	800255e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d107      	bne.n	800254e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0208 	bic.w	r2, r2, #8
 800254c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002562:	f003 031f 	and.w	r3, r3, #31
 8002566:	2220      	movs	r2, #32
 8002568:	409a      	lsls	r2, r3
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 8110 	beq.w	8002794 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a2c      	ldr	r2, [pc, #176]	; (800262c <HAL_DMA_IRQHandler+0x690>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d04a      	beq.n	8002614 <HAL_DMA_IRQHandler+0x678>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a2b      	ldr	r2, [pc, #172]	; (8002630 <HAL_DMA_IRQHandler+0x694>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d045      	beq.n	8002614 <HAL_DMA_IRQHandler+0x678>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a29      	ldr	r2, [pc, #164]	; (8002634 <HAL_DMA_IRQHandler+0x698>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d040      	beq.n	8002614 <HAL_DMA_IRQHandler+0x678>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a28      	ldr	r2, [pc, #160]	; (8002638 <HAL_DMA_IRQHandler+0x69c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d03b      	beq.n	8002614 <HAL_DMA_IRQHandler+0x678>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a26      	ldr	r2, [pc, #152]	; (800263c <HAL_DMA_IRQHandler+0x6a0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d036      	beq.n	8002614 <HAL_DMA_IRQHandler+0x678>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a25      	ldr	r2, [pc, #148]	; (8002640 <HAL_DMA_IRQHandler+0x6a4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d031      	beq.n	8002614 <HAL_DMA_IRQHandler+0x678>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a23      	ldr	r2, [pc, #140]	; (8002644 <HAL_DMA_IRQHandler+0x6a8>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d02c      	beq.n	8002614 <HAL_DMA_IRQHandler+0x678>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a22      	ldr	r2, [pc, #136]	; (8002648 <HAL_DMA_IRQHandler+0x6ac>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d027      	beq.n	8002614 <HAL_DMA_IRQHandler+0x678>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a20      	ldr	r2, [pc, #128]	; (800264c <HAL_DMA_IRQHandler+0x6b0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d022      	beq.n	8002614 <HAL_DMA_IRQHandler+0x678>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1f      	ldr	r2, [pc, #124]	; (8002650 <HAL_DMA_IRQHandler+0x6b4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d01d      	beq.n	8002614 <HAL_DMA_IRQHandler+0x678>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a1d      	ldr	r2, [pc, #116]	; (8002654 <HAL_DMA_IRQHandler+0x6b8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d018      	beq.n	8002614 <HAL_DMA_IRQHandler+0x678>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a1c      	ldr	r2, [pc, #112]	; (8002658 <HAL_DMA_IRQHandler+0x6bc>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d013      	beq.n	8002614 <HAL_DMA_IRQHandler+0x678>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a1a      	ldr	r2, [pc, #104]	; (800265c <HAL_DMA_IRQHandler+0x6c0>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d00e      	beq.n	8002614 <HAL_DMA_IRQHandler+0x678>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a19      	ldr	r2, [pc, #100]	; (8002660 <HAL_DMA_IRQHandler+0x6c4>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d009      	beq.n	8002614 <HAL_DMA_IRQHandler+0x678>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a17      	ldr	r2, [pc, #92]	; (8002664 <HAL_DMA_IRQHandler+0x6c8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d004      	beq.n	8002614 <HAL_DMA_IRQHandler+0x678>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a16      	ldr	r2, [pc, #88]	; (8002668 <HAL_DMA_IRQHandler+0x6cc>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d12b      	bne.n	800266c <HAL_DMA_IRQHandler+0x6d0>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0310 	and.w	r3, r3, #16
 800261e:	2b00      	cmp	r3, #0
 8002620:	bf14      	ite	ne
 8002622:	2301      	movne	r3, #1
 8002624:	2300      	moveq	r3, #0
 8002626:	b2db      	uxtb	r3, r3
 8002628:	e02a      	b.n	8002680 <HAL_DMA_IRQHandler+0x6e4>
 800262a:	bf00      	nop
 800262c:	40020010 	.word	0x40020010
 8002630:	40020028 	.word	0x40020028
 8002634:	40020040 	.word	0x40020040
 8002638:	40020058 	.word	0x40020058
 800263c:	40020070 	.word	0x40020070
 8002640:	40020088 	.word	0x40020088
 8002644:	400200a0 	.word	0x400200a0
 8002648:	400200b8 	.word	0x400200b8
 800264c:	40020410 	.word	0x40020410
 8002650:	40020428 	.word	0x40020428
 8002654:	40020440 	.word	0x40020440
 8002658:	40020458 	.word	0x40020458
 800265c:	40020470 	.word	0x40020470
 8002660:	40020488 	.word	0x40020488
 8002664:	400204a0 	.word	0x400204a0
 8002668:	400204b8 	.word	0x400204b8
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	bf14      	ite	ne
 800267a:	2301      	movne	r3, #1
 800267c:	2300      	moveq	r3, #0
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 8087 	beq.w	8002794 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	2220      	movs	r2, #32
 8002690:	409a      	lsls	r2, r3
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d139      	bne.n	8002716 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0216 	bic.w	r2, r2, #22
 80026b0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026c0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d103      	bne.n	80026d2 <HAL_DMA_IRQHandler+0x736>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d007      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0208 	bic.w	r2, r2, #8
 80026e0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e6:	f003 031f 	and.w	r3, r3, #31
 80026ea:	223f      	movs	r2, #63	; 0x3f
 80026ec:	409a      	lsls	r2, r3
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 834a 	beq.w	8002da0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	4798      	blx	r3
          }
          return;
 8002714:	e344      	b.n	8002da0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d018      	beq.n	8002756 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d108      	bne.n	8002744 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	2b00      	cmp	r3, #0
 8002738:	d02c      	beq.n	8002794 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	4798      	blx	r3
 8002742:	e027      	b.n	8002794 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002748:	2b00      	cmp	r3, #0
 800274a:	d023      	beq.n	8002794 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	4798      	blx	r3
 8002754:	e01e      	b.n	8002794 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10f      	bne.n	8002784 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0210 	bic.w	r2, r2, #16
 8002772:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 8306 	beq.w	8002daa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 8088 	beq.w	80028bc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2204      	movs	r2, #4
 80027b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a7a      	ldr	r2, [pc, #488]	; (80029a4 <HAL_DMA_IRQHandler+0xa08>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d04a      	beq.n	8002854 <HAL_DMA_IRQHandler+0x8b8>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a79      	ldr	r2, [pc, #484]	; (80029a8 <HAL_DMA_IRQHandler+0xa0c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d045      	beq.n	8002854 <HAL_DMA_IRQHandler+0x8b8>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a77      	ldr	r2, [pc, #476]	; (80029ac <HAL_DMA_IRQHandler+0xa10>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d040      	beq.n	8002854 <HAL_DMA_IRQHandler+0x8b8>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a76      	ldr	r2, [pc, #472]	; (80029b0 <HAL_DMA_IRQHandler+0xa14>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d03b      	beq.n	8002854 <HAL_DMA_IRQHandler+0x8b8>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a74      	ldr	r2, [pc, #464]	; (80029b4 <HAL_DMA_IRQHandler+0xa18>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d036      	beq.n	8002854 <HAL_DMA_IRQHandler+0x8b8>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a73      	ldr	r2, [pc, #460]	; (80029b8 <HAL_DMA_IRQHandler+0xa1c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d031      	beq.n	8002854 <HAL_DMA_IRQHandler+0x8b8>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a71      	ldr	r2, [pc, #452]	; (80029bc <HAL_DMA_IRQHandler+0xa20>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d02c      	beq.n	8002854 <HAL_DMA_IRQHandler+0x8b8>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a70      	ldr	r2, [pc, #448]	; (80029c0 <HAL_DMA_IRQHandler+0xa24>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d027      	beq.n	8002854 <HAL_DMA_IRQHandler+0x8b8>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a6e      	ldr	r2, [pc, #440]	; (80029c4 <HAL_DMA_IRQHandler+0xa28>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d022      	beq.n	8002854 <HAL_DMA_IRQHandler+0x8b8>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a6d      	ldr	r2, [pc, #436]	; (80029c8 <HAL_DMA_IRQHandler+0xa2c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d01d      	beq.n	8002854 <HAL_DMA_IRQHandler+0x8b8>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a6b      	ldr	r2, [pc, #428]	; (80029cc <HAL_DMA_IRQHandler+0xa30>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d018      	beq.n	8002854 <HAL_DMA_IRQHandler+0x8b8>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a6a      	ldr	r2, [pc, #424]	; (80029d0 <HAL_DMA_IRQHandler+0xa34>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d013      	beq.n	8002854 <HAL_DMA_IRQHandler+0x8b8>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a68      	ldr	r2, [pc, #416]	; (80029d4 <HAL_DMA_IRQHandler+0xa38>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d00e      	beq.n	8002854 <HAL_DMA_IRQHandler+0x8b8>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a67      	ldr	r2, [pc, #412]	; (80029d8 <HAL_DMA_IRQHandler+0xa3c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d009      	beq.n	8002854 <HAL_DMA_IRQHandler+0x8b8>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a65      	ldr	r2, [pc, #404]	; (80029dc <HAL_DMA_IRQHandler+0xa40>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d004      	beq.n	8002854 <HAL_DMA_IRQHandler+0x8b8>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a64      	ldr	r2, [pc, #400]	; (80029e0 <HAL_DMA_IRQHandler+0xa44>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d108      	bne.n	8002866 <HAL_DMA_IRQHandler+0x8ca>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0201 	bic.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	e007      	b.n	8002876 <HAL_DMA_IRQHandler+0x8da>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0201 	bic.w	r2, r2, #1
 8002874:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	3301      	adds	r3, #1
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287e:	429a      	cmp	r2, r3
 8002880:	d307      	bcc.n	8002892 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f2      	bne.n	8002876 <HAL_DMA_IRQHandler+0x8da>
 8002890:	e000      	b.n	8002894 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002892:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d004      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2203      	movs	r2, #3
 80028ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80028b2:	e003      	b.n	80028bc <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 8272 	beq.w	8002daa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	4798      	blx	r3
 80028ce:	e26c      	b.n	8002daa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a43      	ldr	r2, [pc, #268]	; (80029e4 <HAL_DMA_IRQHandler+0xa48>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d022      	beq.n	8002920 <HAL_DMA_IRQHandler+0x984>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a42      	ldr	r2, [pc, #264]	; (80029e8 <HAL_DMA_IRQHandler+0xa4c>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d01d      	beq.n	8002920 <HAL_DMA_IRQHandler+0x984>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a40      	ldr	r2, [pc, #256]	; (80029ec <HAL_DMA_IRQHandler+0xa50>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d018      	beq.n	8002920 <HAL_DMA_IRQHandler+0x984>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a3f      	ldr	r2, [pc, #252]	; (80029f0 <HAL_DMA_IRQHandler+0xa54>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d013      	beq.n	8002920 <HAL_DMA_IRQHandler+0x984>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a3d      	ldr	r2, [pc, #244]	; (80029f4 <HAL_DMA_IRQHandler+0xa58>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d00e      	beq.n	8002920 <HAL_DMA_IRQHandler+0x984>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a3c      	ldr	r2, [pc, #240]	; (80029f8 <HAL_DMA_IRQHandler+0xa5c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d009      	beq.n	8002920 <HAL_DMA_IRQHandler+0x984>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a3a      	ldr	r2, [pc, #232]	; (80029fc <HAL_DMA_IRQHandler+0xa60>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d004      	beq.n	8002920 <HAL_DMA_IRQHandler+0x984>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a39      	ldr	r2, [pc, #228]	; (8002a00 <HAL_DMA_IRQHandler+0xa64>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d101      	bne.n	8002924 <HAL_DMA_IRQHandler+0x988>
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <HAL_DMA_IRQHandler+0x98a>
 8002924:	2300      	movs	r3, #0
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 823f 	beq.w	8002daa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002938:	f003 031f 	and.w	r3, r3, #31
 800293c:	2204      	movs	r2, #4
 800293e:	409a      	lsls	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80cd 	beq.w	8002ae4 <HAL_DMA_IRQHandler+0xb48>
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80c7 	beq.w	8002ae4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295a:	f003 031f 	and.w	r3, r3, #31
 800295e:	2204      	movs	r2, #4
 8002960:	409a      	lsls	r2, r3
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d049      	beq.n	8002a04 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d109      	bne.n	800298e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 8210 	beq.w	8002da4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800298c:	e20a      	b.n	8002da4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 8206 	beq.w	8002da4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80029a0:	e200      	b.n	8002da4 <HAL_DMA_IRQHandler+0xe08>
 80029a2:	bf00      	nop
 80029a4:	40020010 	.word	0x40020010
 80029a8:	40020028 	.word	0x40020028
 80029ac:	40020040 	.word	0x40020040
 80029b0:	40020058 	.word	0x40020058
 80029b4:	40020070 	.word	0x40020070
 80029b8:	40020088 	.word	0x40020088
 80029bc:	400200a0 	.word	0x400200a0
 80029c0:	400200b8 	.word	0x400200b8
 80029c4:	40020410 	.word	0x40020410
 80029c8:	40020428 	.word	0x40020428
 80029cc:	40020440 	.word	0x40020440
 80029d0:	40020458 	.word	0x40020458
 80029d4:	40020470 	.word	0x40020470
 80029d8:	40020488 	.word	0x40020488
 80029dc:	400204a0 	.word	0x400204a0
 80029e0:	400204b8 	.word	0x400204b8
 80029e4:	58025408 	.word	0x58025408
 80029e8:	5802541c 	.word	0x5802541c
 80029ec:	58025430 	.word	0x58025430
 80029f0:	58025444 	.word	0x58025444
 80029f4:	58025458 	.word	0x58025458
 80029f8:	5802546c 	.word	0x5802546c
 80029fc:	58025480 	.word	0x58025480
 8002a00:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f003 0320 	and.w	r3, r3, #32
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d160      	bne.n	8002ad0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a8c      	ldr	r2, [pc, #560]	; (8002c44 <HAL_DMA_IRQHandler+0xca8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d04a      	beq.n	8002aae <HAL_DMA_IRQHandler+0xb12>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a8a      	ldr	r2, [pc, #552]	; (8002c48 <HAL_DMA_IRQHandler+0xcac>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d045      	beq.n	8002aae <HAL_DMA_IRQHandler+0xb12>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a89      	ldr	r2, [pc, #548]	; (8002c4c <HAL_DMA_IRQHandler+0xcb0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d040      	beq.n	8002aae <HAL_DMA_IRQHandler+0xb12>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a87      	ldr	r2, [pc, #540]	; (8002c50 <HAL_DMA_IRQHandler+0xcb4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d03b      	beq.n	8002aae <HAL_DMA_IRQHandler+0xb12>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a86      	ldr	r2, [pc, #536]	; (8002c54 <HAL_DMA_IRQHandler+0xcb8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d036      	beq.n	8002aae <HAL_DMA_IRQHandler+0xb12>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a84      	ldr	r2, [pc, #528]	; (8002c58 <HAL_DMA_IRQHandler+0xcbc>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d031      	beq.n	8002aae <HAL_DMA_IRQHandler+0xb12>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a83      	ldr	r2, [pc, #524]	; (8002c5c <HAL_DMA_IRQHandler+0xcc0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d02c      	beq.n	8002aae <HAL_DMA_IRQHandler+0xb12>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a81      	ldr	r2, [pc, #516]	; (8002c60 <HAL_DMA_IRQHandler+0xcc4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d027      	beq.n	8002aae <HAL_DMA_IRQHandler+0xb12>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a80      	ldr	r2, [pc, #512]	; (8002c64 <HAL_DMA_IRQHandler+0xcc8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d022      	beq.n	8002aae <HAL_DMA_IRQHandler+0xb12>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a7e      	ldr	r2, [pc, #504]	; (8002c68 <HAL_DMA_IRQHandler+0xccc>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d01d      	beq.n	8002aae <HAL_DMA_IRQHandler+0xb12>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a7d      	ldr	r2, [pc, #500]	; (8002c6c <HAL_DMA_IRQHandler+0xcd0>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d018      	beq.n	8002aae <HAL_DMA_IRQHandler+0xb12>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a7b      	ldr	r2, [pc, #492]	; (8002c70 <HAL_DMA_IRQHandler+0xcd4>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d013      	beq.n	8002aae <HAL_DMA_IRQHandler+0xb12>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a7a      	ldr	r2, [pc, #488]	; (8002c74 <HAL_DMA_IRQHandler+0xcd8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d00e      	beq.n	8002aae <HAL_DMA_IRQHandler+0xb12>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a78      	ldr	r2, [pc, #480]	; (8002c78 <HAL_DMA_IRQHandler+0xcdc>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d009      	beq.n	8002aae <HAL_DMA_IRQHandler+0xb12>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a77      	ldr	r2, [pc, #476]	; (8002c7c <HAL_DMA_IRQHandler+0xce0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d004      	beq.n	8002aae <HAL_DMA_IRQHandler+0xb12>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a75      	ldr	r2, [pc, #468]	; (8002c80 <HAL_DMA_IRQHandler+0xce4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d108      	bne.n	8002ac0 <HAL_DMA_IRQHandler+0xb24>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0208 	bic.w	r2, r2, #8
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	e007      	b.n	8002ad0 <HAL_DMA_IRQHandler+0xb34>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0204 	bic.w	r2, r2, #4
 8002ace:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8165 	beq.w	8002da4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ae2:	e15f      	b.n	8002da4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae8:	f003 031f 	and.w	r3, r3, #31
 8002aec:	2202      	movs	r2, #2
 8002aee:	409a      	lsls	r2, r3
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 80c5 	beq.w	8002c84 <HAL_DMA_IRQHandler+0xce8>
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 80bf 	beq.w	8002c84 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0a:	f003 031f 	and.w	r3, r3, #31
 8002b0e:	2202      	movs	r2, #2
 8002b10:	409a      	lsls	r2, r3
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d018      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 813a 	beq.w	8002da8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b3c:	e134      	b.n	8002da8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 8130 	beq.w	8002da8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b50:	e12a      	b.n	8002da8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f003 0320 	and.w	r3, r3, #32
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d168      	bne.n	8002c2e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a38      	ldr	r2, [pc, #224]	; (8002c44 <HAL_DMA_IRQHandler+0xca8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d04a      	beq.n	8002bfc <HAL_DMA_IRQHandler+0xc60>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a37      	ldr	r2, [pc, #220]	; (8002c48 <HAL_DMA_IRQHandler+0xcac>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d045      	beq.n	8002bfc <HAL_DMA_IRQHandler+0xc60>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a35      	ldr	r2, [pc, #212]	; (8002c4c <HAL_DMA_IRQHandler+0xcb0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d040      	beq.n	8002bfc <HAL_DMA_IRQHandler+0xc60>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a34      	ldr	r2, [pc, #208]	; (8002c50 <HAL_DMA_IRQHandler+0xcb4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d03b      	beq.n	8002bfc <HAL_DMA_IRQHandler+0xc60>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a32      	ldr	r2, [pc, #200]	; (8002c54 <HAL_DMA_IRQHandler+0xcb8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d036      	beq.n	8002bfc <HAL_DMA_IRQHandler+0xc60>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a31      	ldr	r2, [pc, #196]	; (8002c58 <HAL_DMA_IRQHandler+0xcbc>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d031      	beq.n	8002bfc <HAL_DMA_IRQHandler+0xc60>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a2f      	ldr	r2, [pc, #188]	; (8002c5c <HAL_DMA_IRQHandler+0xcc0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d02c      	beq.n	8002bfc <HAL_DMA_IRQHandler+0xc60>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a2e      	ldr	r2, [pc, #184]	; (8002c60 <HAL_DMA_IRQHandler+0xcc4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d027      	beq.n	8002bfc <HAL_DMA_IRQHandler+0xc60>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a2c      	ldr	r2, [pc, #176]	; (8002c64 <HAL_DMA_IRQHandler+0xcc8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d022      	beq.n	8002bfc <HAL_DMA_IRQHandler+0xc60>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a2b      	ldr	r2, [pc, #172]	; (8002c68 <HAL_DMA_IRQHandler+0xccc>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d01d      	beq.n	8002bfc <HAL_DMA_IRQHandler+0xc60>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a29      	ldr	r2, [pc, #164]	; (8002c6c <HAL_DMA_IRQHandler+0xcd0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d018      	beq.n	8002bfc <HAL_DMA_IRQHandler+0xc60>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a28      	ldr	r2, [pc, #160]	; (8002c70 <HAL_DMA_IRQHandler+0xcd4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d013      	beq.n	8002bfc <HAL_DMA_IRQHandler+0xc60>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a26      	ldr	r2, [pc, #152]	; (8002c74 <HAL_DMA_IRQHandler+0xcd8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00e      	beq.n	8002bfc <HAL_DMA_IRQHandler+0xc60>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a25      	ldr	r2, [pc, #148]	; (8002c78 <HAL_DMA_IRQHandler+0xcdc>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d009      	beq.n	8002bfc <HAL_DMA_IRQHandler+0xc60>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a23      	ldr	r2, [pc, #140]	; (8002c7c <HAL_DMA_IRQHandler+0xce0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d004      	beq.n	8002bfc <HAL_DMA_IRQHandler+0xc60>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a22      	ldr	r2, [pc, #136]	; (8002c80 <HAL_DMA_IRQHandler+0xce4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d108      	bne.n	8002c0e <HAL_DMA_IRQHandler+0xc72>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0214 	bic.w	r2, r2, #20
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	e007      	b.n	8002c1e <HAL_DMA_IRQHandler+0xc82>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 020a 	bic.w	r2, r2, #10
 8002c1c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 80b8 	beq.w	8002da8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c40:	e0b2      	b.n	8002da8 <HAL_DMA_IRQHandler+0xe0c>
 8002c42:	bf00      	nop
 8002c44:	40020010 	.word	0x40020010
 8002c48:	40020028 	.word	0x40020028
 8002c4c:	40020040 	.word	0x40020040
 8002c50:	40020058 	.word	0x40020058
 8002c54:	40020070 	.word	0x40020070
 8002c58:	40020088 	.word	0x40020088
 8002c5c:	400200a0 	.word	0x400200a0
 8002c60:	400200b8 	.word	0x400200b8
 8002c64:	40020410 	.word	0x40020410
 8002c68:	40020428 	.word	0x40020428
 8002c6c:	40020440 	.word	0x40020440
 8002c70:	40020458 	.word	0x40020458
 8002c74:	40020470 	.word	0x40020470
 8002c78:	40020488 	.word	0x40020488
 8002c7c:	400204a0 	.word	0x400204a0
 8002c80:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 8088 	beq.w	8002daa <HAL_DMA_IRQHandler+0xe0e>
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f003 0308 	and.w	r3, r3, #8
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 8082 	beq.w	8002daa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a41      	ldr	r2, [pc, #260]	; (8002db0 <HAL_DMA_IRQHandler+0xe14>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d04a      	beq.n	8002d46 <HAL_DMA_IRQHandler+0xdaa>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a3f      	ldr	r2, [pc, #252]	; (8002db4 <HAL_DMA_IRQHandler+0xe18>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d045      	beq.n	8002d46 <HAL_DMA_IRQHandler+0xdaa>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a3e      	ldr	r2, [pc, #248]	; (8002db8 <HAL_DMA_IRQHandler+0xe1c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d040      	beq.n	8002d46 <HAL_DMA_IRQHandler+0xdaa>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a3c      	ldr	r2, [pc, #240]	; (8002dbc <HAL_DMA_IRQHandler+0xe20>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d03b      	beq.n	8002d46 <HAL_DMA_IRQHandler+0xdaa>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a3b      	ldr	r2, [pc, #236]	; (8002dc0 <HAL_DMA_IRQHandler+0xe24>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d036      	beq.n	8002d46 <HAL_DMA_IRQHandler+0xdaa>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a39      	ldr	r2, [pc, #228]	; (8002dc4 <HAL_DMA_IRQHandler+0xe28>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d031      	beq.n	8002d46 <HAL_DMA_IRQHandler+0xdaa>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a38      	ldr	r2, [pc, #224]	; (8002dc8 <HAL_DMA_IRQHandler+0xe2c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d02c      	beq.n	8002d46 <HAL_DMA_IRQHandler+0xdaa>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a36      	ldr	r2, [pc, #216]	; (8002dcc <HAL_DMA_IRQHandler+0xe30>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d027      	beq.n	8002d46 <HAL_DMA_IRQHandler+0xdaa>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a35      	ldr	r2, [pc, #212]	; (8002dd0 <HAL_DMA_IRQHandler+0xe34>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d022      	beq.n	8002d46 <HAL_DMA_IRQHandler+0xdaa>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a33      	ldr	r2, [pc, #204]	; (8002dd4 <HAL_DMA_IRQHandler+0xe38>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d01d      	beq.n	8002d46 <HAL_DMA_IRQHandler+0xdaa>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a32      	ldr	r2, [pc, #200]	; (8002dd8 <HAL_DMA_IRQHandler+0xe3c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d018      	beq.n	8002d46 <HAL_DMA_IRQHandler+0xdaa>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a30      	ldr	r2, [pc, #192]	; (8002ddc <HAL_DMA_IRQHandler+0xe40>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d013      	beq.n	8002d46 <HAL_DMA_IRQHandler+0xdaa>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a2f      	ldr	r2, [pc, #188]	; (8002de0 <HAL_DMA_IRQHandler+0xe44>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d00e      	beq.n	8002d46 <HAL_DMA_IRQHandler+0xdaa>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a2d      	ldr	r2, [pc, #180]	; (8002de4 <HAL_DMA_IRQHandler+0xe48>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d009      	beq.n	8002d46 <HAL_DMA_IRQHandler+0xdaa>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a2c      	ldr	r2, [pc, #176]	; (8002de8 <HAL_DMA_IRQHandler+0xe4c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d004      	beq.n	8002d46 <HAL_DMA_IRQHandler+0xdaa>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a2a      	ldr	r2, [pc, #168]	; (8002dec <HAL_DMA_IRQHandler+0xe50>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d108      	bne.n	8002d58 <HAL_DMA_IRQHandler+0xdbc>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 021c 	bic.w	r2, r2, #28
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	e007      	b.n	8002d68 <HAL_DMA_IRQHandler+0xdcc>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 020e 	bic.w	r2, r2, #14
 8002d66:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	2201      	movs	r2, #1
 8002d72:	409a      	lsls	r2, r3
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d009      	beq.n	8002daa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	4798      	blx	r3
 8002d9e:	e004      	b.n	8002daa <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002da0:	bf00      	nop
 8002da2:	e002      	b.n	8002daa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002da4:	bf00      	nop
 8002da6:	e000      	b.n	8002daa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002da8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002daa:	3728      	adds	r7, #40	; 0x28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40020010 	.word	0x40020010
 8002db4:	40020028 	.word	0x40020028
 8002db8:	40020040 	.word	0x40020040
 8002dbc:	40020058 	.word	0x40020058
 8002dc0:	40020070 	.word	0x40020070
 8002dc4:	40020088 	.word	0x40020088
 8002dc8:	400200a0 	.word	0x400200a0
 8002dcc:	400200b8 	.word	0x400200b8
 8002dd0:	40020410 	.word	0x40020410
 8002dd4:	40020428 	.word	0x40020428
 8002dd8:	40020440 	.word	0x40020440
 8002ddc:	40020458 	.word	0x40020458
 8002de0:	40020470 	.word	0x40020470
 8002de4:	40020488 	.word	0x40020488
 8002de8:	400204a0 	.word	0x400204a0
 8002dec:	400204b8 	.word	0x400204b8

08002df0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a42      	ldr	r2, [pc, #264]	; (8002f08 <DMA_CalcBaseAndBitshift+0x118>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d04a      	beq.n	8002e98 <DMA_CalcBaseAndBitshift+0xa8>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a41      	ldr	r2, [pc, #260]	; (8002f0c <DMA_CalcBaseAndBitshift+0x11c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d045      	beq.n	8002e98 <DMA_CalcBaseAndBitshift+0xa8>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a3f      	ldr	r2, [pc, #252]	; (8002f10 <DMA_CalcBaseAndBitshift+0x120>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d040      	beq.n	8002e98 <DMA_CalcBaseAndBitshift+0xa8>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a3e      	ldr	r2, [pc, #248]	; (8002f14 <DMA_CalcBaseAndBitshift+0x124>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d03b      	beq.n	8002e98 <DMA_CalcBaseAndBitshift+0xa8>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a3c      	ldr	r2, [pc, #240]	; (8002f18 <DMA_CalcBaseAndBitshift+0x128>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d036      	beq.n	8002e98 <DMA_CalcBaseAndBitshift+0xa8>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a3b      	ldr	r2, [pc, #236]	; (8002f1c <DMA_CalcBaseAndBitshift+0x12c>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d031      	beq.n	8002e98 <DMA_CalcBaseAndBitshift+0xa8>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a39      	ldr	r2, [pc, #228]	; (8002f20 <DMA_CalcBaseAndBitshift+0x130>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d02c      	beq.n	8002e98 <DMA_CalcBaseAndBitshift+0xa8>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a38      	ldr	r2, [pc, #224]	; (8002f24 <DMA_CalcBaseAndBitshift+0x134>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d027      	beq.n	8002e98 <DMA_CalcBaseAndBitshift+0xa8>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a36      	ldr	r2, [pc, #216]	; (8002f28 <DMA_CalcBaseAndBitshift+0x138>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d022      	beq.n	8002e98 <DMA_CalcBaseAndBitshift+0xa8>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a35      	ldr	r2, [pc, #212]	; (8002f2c <DMA_CalcBaseAndBitshift+0x13c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d01d      	beq.n	8002e98 <DMA_CalcBaseAndBitshift+0xa8>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a33      	ldr	r2, [pc, #204]	; (8002f30 <DMA_CalcBaseAndBitshift+0x140>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d018      	beq.n	8002e98 <DMA_CalcBaseAndBitshift+0xa8>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a32      	ldr	r2, [pc, #200]	; (8002f34 <DMA_CalcBaseAndBitshift+0x144>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d013      	beq.n	8002e98 <DMA_CalcBaseAndBitshift+0xa8>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a30      	ldr	r2, [pc, #192]	; (8002f38 <DMA_CalcBaseAndBitshift+0x148>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d00e      	beq.n	8002e98 <DMA_CalcBaseAndBitshift+0xa8>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a2f      	ldr	r2, [pc, #188]	; (8002f3c <DMA_CalcBaseAndBitshift+0x14c>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d009      	beq.n	8002e98 <DMA_CalcBaseAndBitshift+0xa8>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a2d      	ldr	r2, [pc, #180]	; (8002f40 <DMA_CalcBaseAndBitshift+0x150>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d004      	beq.n	8002e98 <DMA_CalcBaseAndBitshift+0xa8>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a2c      	ldr	r2, [pc, #176]	; (8002f44 <DMA_CalcBaseAndBitshift+0x154>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d101      	bne.n	8002e9c <DMA_CalcBaseAndBitshift+0xac>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <DMA_CalcBaseAndBitshift+0xae>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d024      	beq.n	8002eec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	3b10      	subs	r3, #16
 8002eaa:	4a27      	ldr	r2, [pc, #156]	; (8002f48 <DMA_CalcBaseAndBitshift+0x158>)
 8002eac:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	4a24      	ldr	r2, [pc, #144]	; (8002f4c <DMA_CalcBaseAndBitshift+0x15c>)
 8002ebc:	5cd3      	ldrb	r3, [r2, r3]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d908      	bls.n	8002edc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	4b1f      	ldr	r3, [pc, #124]	; (8002f50 <DMA_CalcBaseAndBitshift+0x160>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	1d1a      	adds	r2, r3, #4
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	659a      	str	r2, [r3, #88]	; 0x58
 8002eda:	e00d      	b.n	8002ef8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <DMA_CalcBaseAndBitshift+0x160>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6593      	str	r3, [r2, #88]	; 0x58
 8002eea:	e005      	b.n	8002ef8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	40020010 	.word	0x40020010
 8002f0c:	40020028 	.word	0x40020028
 8002f10:	40020040 	.word	0x40020040
 8002f14:	40020058 	.word	0x40020058
 8002f18:	40020070 	.word	0x40020070
 8002f1c:	40020088 	.word	0x40020088
 8002f20:	400200a0 	.word	0x400200a0
 8002f24:	400200b8 	.word	0x400200b8
 8002f28:	40020410 	.word	0x40020410
 8002f2c:	40020428 	.word	0x40020428
 8002f30:	40020440 	.word	0x40020440
 8002f34:	40020458 	.word	0x40020458
 8002f38:	40020470 	.word	0x40020470
 8002f3c:	40020488 	.word	0x40020488
 8002f40:	400204a0 	.word	0x400204a0
 8002f44:	400204b8 	.word	0x400204b8
 8002f48:	aaaaaaab 	.word	0xaaaaaaab
 8002f4c:	080084e8 	.word	0x080084e8
 8002f50:	fffffc00 	.word	0xfffffc00

08002f54 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d120      	bne.n	8002faa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d858      	bhi.n	8003022 <DMA_CheckFifoParam+0xce>
 8002f70:	a201      	add	r2, pc, #4	; (adr r2, 8002f78 <DMA_CheckFifoParam+0x24>)
 8002f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f76:	bf00      	nop
 8002f78:	08002f89 	.word	0x08002f89
 8002f7c:	08002f9b 	.word	0x08002f9b
 8002f80:	08002f89 	.word	0x08002f89
 8002f84:	08003023 	.word	0x08003023
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d048      	beq.n	8003026 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f98:	e045      	b.n	8003026 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fa2:	d142      	bne.n	800302a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002fa8:	e03f      	b.n	800302a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb2:	d123      	bne.n	8002ffc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d838      	bhi.n	800302e <DMA_CheckFifoParam+0xda>
 8002fbc:	a201      	add	r2, pc, #4	; (adr r2, 8002fc4 <DMA_CheckFifoParam+0x70>)
 8002fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc2:	bf00      	nop
 8002fc4:	08002fd5 	.word	0x08002fd5
 8002fc8:	08002fdb 	.word	0x08002fdb
 8002fcc:	08002fd5 	.word	0x08002fd5
 8002fd0:	08002fed 	.word	0x08002fed
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	73fb      	strb	r3, [r7, #15]
        break;
 8002fd8:	e030      	b.n	800303c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d025      	beq.n	8003032 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002fea:	e022      	b.n	8003032 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ff4:	d11f      	bne.n	8003036 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ffa:	e01c      	b.n	8003036 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003000:	2b02      	cmp	r3, #2
 8003002:	d902      	bls.n	800300a <DMA_CheckFifoParam+0xb6>
 8003004:	2b03      	cmp	r3, #3
 8003006:	d003      	beq.n	8003010 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003008:	e018      	b.n	800303c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	73fb      	strb	r3, [r7, #15]
        break;
 800300e:	e015      	b.n	800303c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00e      	beq.n	800303a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	73fb      	strb	r3, [r7, #15]
    break;
 8003020:	e00b      	b.n	800303a <DMA_CheckFifoParam+0xe6>
        break;
 8003022:	bf00      	nop
 8003024:	e00a      	b.n	800303c <DMA_CheckFifoParam+0xe8>
        break;
 8003026:	bf00      	nop
 8003028:	e008      	b.n	800303c <DMA_CheckFifoParam+0xe8>
        break;
 800302a:	bf00      	nop
 800302c:	e006      	b.n	800303c <DMA_CheckFifoParam+0xe8>
        break;
 800302e:	bf00      	nop
 8003030:	e004      	b.n	800303c <DMA_CheckFifoParam+0xe8>
        break;
 8003032:	bf00      	nop
 8003034:	e002      	b.n	800303c <DMA_CheckFifoParam+0xe8>
        break;
 8003036:	bf00      	nop
 8003038:	e000      	b.n	800303c <DMA_CheckFifoParam+0xe8>
    break;
 800303a:	bf00      	nop
    }
  }

  return status;
 800303c:	7bfb      	ldrb	r3, [r7, #15]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop

0800304c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a38      	ldr	r2, [pc, #224]	; (8003140 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d022      	beq.n	80030aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a36      	ldr	r2, [pc, #216]	; (8003144 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d01d      	beq.n	80030aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a35      	ldr	r2, [pc, #212]	; (8003148 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d018      	beq.n	80030aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a33      	ldr	r2, [pc, #204]	; (800314c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d013      	beq.n	80030aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a32      	ldr	r2, [pc, #200]	; (8003150 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00e      	beq.n	80030aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a30      	ldr	r2, [pc, #192]	; (8003154 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d009      	beq.n	80030aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a2f      	ldr	r2, [pc, #188]	; (8003158 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d004      	beq.n	80030aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a2d      	ldr	r2, [pc, #180]	; (800315c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d101      	bne.n	80030ae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80030ae:	2300      	movs	r3, #0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d01a      	beq.n	80030ea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	3b08      	subs	r3, #8
 80030bc:	4a28      	ldr	r2, [pc, #160]	; (8003160 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80030be:	fba2 2303 	umull	r2, r3, r2, r3
 80030c2:	091b      	lsrs	r3, r3, #4
 80030c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4b26      	ldr	r3, [pc, #152]	; (8003164 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80030ca:	4413      	add	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	461a      	mov	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a24      	ldr	r2, [pc, #144]	; (8003168 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80030d8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f003 031f 	and.w	r3, r3, #31
 80030e0:	2201      	movs	r2, #1
 80030e2:	409a      	lsls	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80030e8:	e024      	b.n	8003134 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	3b10      	subs	r3, #16
 80030f2:	4a1e      	ldr	r2, [pc, #120]	; (800316c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80030f4:	fba2 2303 	umull	r2, r3, r2, r3
 80030f8:	091b      	lsrs	r3, r3, #4
 80030fa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	4a1c      	ldr	r2, [pc, #112]	; (8003170 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d806      	bhi.n	8003112 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	4a1b      	ldr	r2, [pc, #108]	; (8003174 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d902      	bls.n	8003112 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	3308      	adds	r3, #8
 8003110:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4b18      	ldr	r3, [pc, #96]	; (8003178 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	461a      	mov	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a16      	ldr	r2, [pc, #88]	; (800317c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003124:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	2201      	movs	r2, #1
 800312e:	409a      	lsls	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	58025408 	.word	0x58025408
 8003144:	5802541c 	.word	0x5802541c
 8003148:	58025430 	.word	0x58025430
 800314c:	58025444 	.word	0x58025444
 8003150:	58025458 	.word	0x58025458
 8003154:	5802546c 	.word	0x5802546c
 8003158:	58025480 	.word	0x58025480
 800315c:	58025494 	.word	0x58025494
 8003160:	cccccccd 	.word	0xcccccccd
 8003164:	16009600 	.word	0x16009600
 8003168:	58025880 	.word	0x58025880
 800316c:	aaaaaaab 	.word	0xaaaaaaab
 8003170:	400204b8 	.word	0x400204b8
 8003174:	4002040f 	.word	0x4002040f
 8003178:	10008200 	.word	0x10008200
 800317c:	40020880 	.word	0x40020880

08003180 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	b2db      	uxtb	r3, r3
 800318e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d04a      	beq.n	800322c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2b08      	cmp	r3, #8
 800319a:	d847      	bhi.n	800322c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a25      	ldr	r2, [pc, #148]	; (8003238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d022      	beq.n	80031ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a24      	ldr	r2, [pc, #144]	; (800323c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d01d      	beq.n	80031ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a22      	ldr	r2, [pc, #136]	; (8003240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d018      	beq.n	80031ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a21      	ldr	r2, [pc, #132]	; (8003244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d013      	beq.n	80031ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a1f      	ldr	r2, [pc, #124]	; (8003248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00e      	beq.n	80031ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a1e      	ldr	r2, [pc, #120]	; (800324c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d009      	beq.n	80031ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a1c      	ldr	r2, [pc, #112]	; (8003250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d004      	beq.n	80031ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a1b      	ldr	r2, [pc, #108]	; (8003254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d101      	bne.n	80031f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80031ec:	2301      	movs	r3, #1
 80031ee:	e000      	b.n	80031f2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80031f0:	2300      	movs	r3, #0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	4b17      	ldr	r3, [pc, #92]	; (8003258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	461a      	mov	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a15      	ldr	r2, [pc, #84]	; (800325c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003208:	671a      	str	r2, [r3, #112]	; 0x70
 800320a:	e009      	b.n	8003220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	4b14      	ldr	r3, [pc, #80]	; (8003260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	461a      	mov	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a11      	ldr	r2, [pc, #68]	; (8003264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800321e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3b01      	subs	r3, #1
 8003224:	2201      	movs	r2, #1
 8003226:	409a      	lsls	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800322c:	bf00      	nop
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	58025408 	.word	0x58025408
 800323c:	5802541c 	.word	0x5802541c
 8003240:	58025430 	.word	0x58025430
 8003244:	58025444 	.word	0x58025444
 8003248:	58025458 	.word	0x58025458
 800324c:	5802546c 	.word	0x5802546c
 8003250:	58025480 	.word	0x58025480
 8003254:	58025494 	.word	0x58025494
 8003258:	1600963f 	.word	0x1600963f
 800325c:	58025940 	.word	0x58025940
 8003260:	1000823f 	.word	0x1000823f
 8003264:	40020940 	.word	0x40020940

08003268 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003268:	b480      	push	{r7}
 800326a:	b089      	sub	sp, #36	; 0x24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003276:	4b89      	ldr	r3, [pc, #548]	; (800349c <HAL_GPIO_Init+0x234>)
 8003278:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800327a:	e194      	b.n	80035a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	2101      	movs	r1, #1
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	fa01 f303 	lsl.w	r3, r1, r3
 8003288:	4013      	ands	r3, r2
 800328a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 8186 	beq.w	80035a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d00b      	beq.n	80032b4 <HAL_GPIO_Init+0x4c>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d007      	beq.n	80032b4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032a8:	2b11      	cmp	r3, #17
 80032aa:	d003      	beq.n	80032b4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b12      	cmp	r3, #18
 80032b2:	d130      	bne.n	8003316 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	2203      	movs	r2, #3
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032ea:	2201      	movs	r2, #1
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43db      	mvns	r3, r3
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	4013      	ands	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	091b      	lsrs	r3, r3, #4
 8003300:	f003 0201 	and.w	r2, r3, #1
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	2203      	movs	r2, #3
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4013      	ands	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_Init+0xee>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b12      	cmp	r3, #18
 8003354:	d123      	bne.n	800339e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	08da      	lsrs	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3208      	adds	r2, #8
 800335e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	220f      	movs	r2, #15
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43db      	mvns	r3, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4013      	ands	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	691a      	ldr	r2, [r3, #16]
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	08da      	lsrs	r2, r3, #3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3208      	adds	r2, #8
 8003398:	69b9      	ldr	r1, [r7, #24]
 800339a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	2203      	movs	r2, #3
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4013      	ands	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 0203 	and.w	r2, r3, #3
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 80e0 	beq.w	80035a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e0:	4b2f      	ldr	r3, [pc, #188]	; (80034a0 <HAL_GPIO_Init+0x238>)
 80033e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033e6:	4a2e      	ldr	r2, [pc, #184]	; (80034a0 <HAL_GPIO_Init+0x238>)
 80033e8:	f043 0302 	orr.w	r3, r3, #2
 80033ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80033f0:	4b2b      	ldr	r3, [pc, #172]	; (80034a0 <HAL_GPIO_Init+0x238>)
 80033f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033fe:	4a29      	ldr	r2, [pc, #164]	; (80034a4 <HAL_GPIO_Init+0x23c>)
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	089b      	lsrs	r3, r3, #2
 8003404:	3302      	adds	r3, #2
 8003406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	220f      	movs	r2, #15
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43db      	mvns	r3, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4013      	ands	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a20      	ldr	r2, [pc, #128]	; (80034a8 <HAL_GPIO_Init+0x240>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d052      	beq.n	80034d0 <HAL_GPIO_Init+0x268>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a1f      	ldr	r2, [pc, #124]	; (80034ac <HAL_GPIO_Init+0x244>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d031      	beq.n	8003496 <HAL_GPIO_Init+0x22e>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a1e      	ldr	r2, [pc, #120]	; (80034b0 <HAL_GPIO_Init+0x248>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d02b      	beq.n	8003492 <HAL_GPIO_Init+0x22a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a1d      	ldr	r2, [pc, #116]	; (80034b4 <HAL_GPIO_Init+0x24c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d025      	beq.n	800348e <HAL_GPIO_Init+0x226>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a1c      	ldr	r2, [pc, #112]	; (80034b8 <HAL_GPIO_Init+0x250>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d01f      	beq.n	800348a <HAL_GPIO_Init+0x222>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a1b      	ldr	r2, [pc, #108]	; (80034bc <HAL_GPIO_Init+0x254>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d019      	beq.n	8003486 <HAL_GPIO_Init+0x21e>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a1a      	ldr	r2, [pc, #104]	; (80034c0 <HAL_GPIO_Init+0x258>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d013      	beq.n	8003482 <HAL_GPIO_Init+0x21a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a19      	ldr	r2, [pc, #100]	; (80034c4 <HAL_GPIO_Init+0x25c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00d      	beq.n	800347e <HAL_GPIO_Init+0x216>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a18      	ldr	r2, [pc, #96]	; (80034c8 <HAL_GPIO_Init+0x260>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d007      	beq.n	800347a <HAL_GPIO_Init+0x212>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a17      	ldr	r2, [pc, #92]	; (80034cc <HAL_GPIO_Init+0x264>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d101      	bne.n	8003476 <HAL_GPIO_Init+0x20e>
 8003472:	2309      	movs	r3, #9
 8003474:	e02d      	b.n	80034d2 <HAL_GPIO_Init+0x26a>
 8003476:	230a      	movs	r3, #10
 8003478:	e02b      	b.n	80034d2 <HAL_GPIO_Init+0x26a>
 800347a:	2308      	movs	r3, #8
 800347c:	e029      	b.n	80034d2 <HAL_GPIO_Init+0x26a>
 800347e:	2307      	movs	r3, #7
 8003480:	e027      	b.n	80034d2 <HAL_GPIO_Init+0x26a>
 8003482:	2306      	movs	r3, #6
 8003484:	e025      	b.n	80034d2 <HAL_GPIO_Init+0x26a>
 8003486:	2305      	movs	r3, #5
 8003488:	e023      	b.n	80034d2 <HAL_GPIO_Init+0x26a>
 800348a:	2304      	movs	r3, #4
 800348c:	e021      	b.n	80034d2 <HAL_GPIO_Init+0x26a>
 800348e:	2303      	movs	r3, #3
 8003490:	e01f      	b.n	80034d2 <HAL_GPIO_Init+0x26a>
 8003492:	2302      	movs	r3, #2
 8003494:	e01d      	b.n	80034d2 <HAL_GPIO_Init+0x26a>
 8003496:	2301      	movs	r3, #1
 8003498:	e01b      	b.n	80034d2 <HAL_GPIO_Init+0x26a>
 800349a:	bf00      	nop
 800349c:	58000080 	.word	0x58000080
 80034a0:	58024400 	.word	0x58024400
 80034a4:	58000400 	.word	0x58000400
 80034a8:	58020000 	.word	0x58020000
 80034ac:	58020400 	.word	0x58020400
 80034b0:	58020800 	.word	0x58020800
 80034b4:	58020c00 	.word	0x58020c00
 80034b8:	58021000 	.word	0x58021000
 80034bc:	58021400 	.word	0x58021400
 80034c0:	58021800 	.word	0x58021800
 80034c4:	58021c00 	.word	0x58021c00
 80034c8:	58022000 	.word	0x58022000
 80034cc:	58022400 	.word	0x58022400
 80034d0:	2300      	movs	r3, #0
 80034d2:	69fa      	ldr	r2, [r7, #28]
 80034d4:	f002 0203 	and.w	r2, r2, #3
 80034d8:	0092      	lsls	r2, r2, #2
 80034da:	4093      	lsls	r3, r2
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034e2:	4938      	ldr	r1, [pc, #224]	; (80035c4 <HAL_GPIO_Init+0x35c>)
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	089b      	lsrs	r3, r3, #2
 80034e8:	3302      	adds	r3, #2
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	43db      	mvns	r3, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4013      	ands	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	43db      	mvns	r3, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4013      	ands	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800356a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	43db      	mvns	r3, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4013      	ands	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003598:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	3301      	adds	r3, #1
 80035a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f47f ae63 	bne.w	800327c <HAL_GPIO_Init+0x14>
  }
}
 80035b6:	bf00      	nop
 80035b8:	bf00      	nop
 80035ba:	3724      	adds	r7, #36	; 0x24
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	58000400 	.word	0x58000400

080035c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	807b      	strh	r3, [r7, #2]
 80035d4:	4613      	mov	r3, r2
 80035d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035d8:	787b      	ldrb	r3, [r7, #1]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80035e4:	e003      	b.n	80035ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80035e6:	887b      	ldrh	r3, [r7, #2]
 80035e8:	041a      	lsls	r2, r3, #16
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	619a      	str	r2, [r3, #24]
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035fc:	b08f      	sub	sp, #60	; 0x3c
 80035fe:	af0a      	add	r7, sp, #40	; 0x28
 8003600:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e116      	b.n	800383a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d106      	bne.n	800362c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7fd fe14 	bl	8001254 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2203      	movs	r2, #3
 8003630:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363c:	2b00      	cmp	r3, #0
 800363e:	d102      	bne.n	8003646 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f004 fcbc 	bl	8007fc8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	603b      	str	r3, [r7, #0]
 8003656:	687e      	ldr	r6, [r7, #4]
 8003658:	466d      	mov	r5, sp
 800365a:	f106 0410 	add.w	r4, r6, #16
 800365e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003664:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003666:	e894 0003 	ldmia.w	r4, {r0, r1}
 800366a:	e885 0003 	stmia.w	r5, {r0, r1}
 800366e:	1d33      	adds	r3, r6, #4
 8003670:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003672:	6838      	ldr	r0, [r7, #0]
 8003674:	f004 fc3a 	bl	8007eec <USB_CoreInit>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d005      	beq.n	800368a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2202      	movs	r2, #2
 8003682:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e0d7      	b.n	800383a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2100      	movs	r1, #0
 8003690:	4618      	mov	r0, r3
 8003692:	f004 fcaa 	bl	8007fea <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003696:	2300      	movs	r3, #0
 8003698:	73fb      	strb	r3, [r7, #15]
 800369a:	e04a      	b.n	8003732 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800369c:	7bfa      	ldrb	r2, [r7, #15]
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	4613      	mov	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	333d      	adds	r3, #61	; 0x3d
 80036ac:	2201      	movs	r2, #1
 80036ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036b0:	7bfa      	ldrb	r2, [r7, #15]
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	1a9b      	subs	r3, r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	333c      	adds	r3, #60	; 0x3c
 80036c0:	7bfa      	ldrb	r2, [r7, #15]
 80036c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036c4:	7bfa      	ldrb	r2, [r7, #15]
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	b298      	uxth	r0, r3
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	3342      	adds	r3, #66	; 0x42
 80036d8:	4602      	mov	r2, r0
 80036da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036dc:	7bfa      	ldrb	r2, [r7, #15]
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	1a9b      	subs	r3, r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	333f      	adds	r3, #63	; 0x3f
 80036ec:	2200      	movs	r2, #0
 80036ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036f0:	7bfa      	ldrb	r2, [r7, #15]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	3344      	adds	r3, #68	; 0x44
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003704:	7bfa      	ldrb	r2, [r7, #15]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	3348      	adds	r3, #72	; 0x48
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003718:	7bfa      	ldrb	r2, [r7, #15]
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	4613      	mov	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	3350      	adds	r3, #80	; 0x50
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800372c:	7bfb      	ldrb	r3, [r7, #15]
 800372e:	3301      	adds	r3, #1
 8003730:	73fb      	strb	r3, [r7, #15]
 8003732:	7bfa      	ldrb	r2, [r7, #15]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	429a      	cmp	r2, r3
 800373a:	d3af      	bcc.n	800369c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800373c:	2300      	movs	r3, #0
 800373e:	73fb      	strb	r3, [r7, #15]
 8003740:	e044      	b.n	80037cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003742:	7bfa      	ldrb	r2, [r7, #15]
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	4613      	mov	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	1a9b      	subs	r3, r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	440b      	add	r3, r1
 8003750:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003754:	2200      	movs	r2, #0
 8003756:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003758:	7bfa      	ldrb	r2, [r7, #15]
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	1a9b      	subs	r3, r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800376a:	7bfa      	ldrb	r2, [r7, #15]
 800376c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800376e:	7bfa      	ldrb	r2, [r7, #15]
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	4613      	mov	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	1a9b      	subs	r3, r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003780:	2200      	movs	r2, #0
 8003782:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003784:	7bfa      	ldrb	r2, [r7, #15]
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	4613      	mov	r3, r2
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800379a:	7bfa      	ldrb	r2, [r7, #15]
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037b0:	7bfa      	ldrb	r2, [r7, #15]
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	1a9b      	subs	r3, r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
 80037c8:	3301      	adds	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
 80037cc:	7bfa      	ldrb	r2, [r7, #15]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d3b5      	bcc.n	8003742 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	687e      	ldr	r6, [r7, #4]
 80037de:	466d      	mov	r5, sp
 80037e0:	f106 0410 	add.w	r4, r6, #16
 80037e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80037f4:	1d33      	adds	r3, r6, #4
 80037f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037f8:	6838      	ldr	r0, [r7, #0]
 80037fa:	f004 fc21 	bl	8008040 <USB_DevInit>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e014      	b.n	800383a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	2b01      	cmp	r3, #1
 8003826:	d102      	bne.n	800382e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f80b 	bl	8003844 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f004 fdc3 	bl	80083be <USB_DevDisconnect>

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003844 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003872:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_PCDEx_ActivateLPM+0x44>)
 8003874:	4313      	orrs	r3, r2
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	10000003 	.word	0x10000003

0800388c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003894:	4b19      	ldr	r3, [pc, #100]	; (80038fc <HAL_PWREx_ConfigSupply+0x70>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b04      	cmp	r3, #4
 800389e:	d00a      	beq.n	80038b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80038a0:	4b16      	ldr	r3, [pc, #88]	; (80038fc <HAL_PWREx_ConfigSupply+0x70>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d001      	beq.n	80038b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e01f      	b.n	80038f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	e01d      	b.n	80038f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80038b6:	4b11      	ldr	r3, [pc, #68]	; (80038fc <HAL_PWREx_ConfigSupply+0x70>)
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f023 0207 	bic.w	r2, r3, #7
 80038be:	490f      	ldr	r1, [pc, #60]	; (80038fc <HAL_PWREx_ConfigSupply+0x70>)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80038c6:	f7fd fec1 	bl	800164c <HAL_GetTick>
 80038ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038cc:	e009      	b.n	80038e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80038ce:	f7fd febd 	bl	800164c <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038dc:	d901      	bls.n	80038e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e007      	b.n	80038f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038e2:	4b06      	ldr	r3, [pc, #24]	; (80038fc <HAL_PWREx_ConfigSupply+0x70>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ee:	d1ee      	bne.n	80038ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	58024800 	.word	0x58024800

08003900 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003904:	4b05      	ldr	r3, [pc, #20]	; (800391c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	4a04      	ldr	r2, [pc, #16]	; (800391c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800390a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800390e:	60d3      	str	r3, [r2, #12]
}
 8003910:	bf00      	nop
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	58024800 	.word	0x58024800

08003920 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08c      	sub	sp, #48	; 0x30
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e3ff      	b.n	8004132 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 8087 	beq.w	8003a4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003940:	4b99      	ldr	r3, [pc, #612]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003948:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800394a:	4b97      	ldr	r3, [pc, #604]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 800394c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003952:	2b10      	cmp	r3, #16
 8003954:	d007      	beq.n	8003966 <HAL_RCC_OscConfig+0x46>
 8003956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003958:	2b18      	cmp	r3, #24
 800395a:	d110      	bne.n	800397e <HAL_RCC_OscConfig+0x5e>
 800395c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d10b      	bne.n	800397e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003966:	4b90      	ldr	r3, [pc, #576]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d06c      	beq.n	8003a4c <HAL_RCC_OscConfig+0x12c>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d168      	bne.n	8003a4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e3d9      	b.n	8004132 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003986:	d106      	bne.n	8003996 <HAL_RCC_OscConfig+0x76>
 8003988:	4b87      	ldr	r3, [pc, #540]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a86      	ldr	r2, [pc, #536]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 800398e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	e02e      	b.n	80039f4 <HAL_RCC_OscConfig+0xd4>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10c      	bne.n	80039b8 <HAL_RCC_OscConfig+0x98>
 800399e:	4b82      	ldr	r3, [pc, #520]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a81      	ldr	r2, [pc, #516]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 80039a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	4b7f      	ldr	r3, [pc, #508]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a7e      	ldr	r2, [pc, #504]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 80039b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	e01d      	b.n	80039f4 <HAL_RCC_OscConfig+0xd4>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c0:	d10c      	bne.n	80039dc <HAL_RCC_OscConfig+0xbc>
 80039c2:	4b79      	ldr	r3, [pc, #484]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a78      	ldr	r2, [pc, #480]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 80039c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	4b76      	ldr	r3, [pc, #472]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a75      	ldr	r2, [pc, #468]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 80039d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e00b      	b.n	80039f4 <HAL_RCC_OscConfig+0xd4>
 80039dc:	4b72      	ldr	r3, [pc, #456]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a71      	ldr	r2, [pc, #452]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 80039e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	4b6f      	ldr	r3, [pc, #444]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a6e      	ldr	r2, [pc, #440]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 80039ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d013      	beq.n	8003a24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fc:	f7fd fe26 	bl	800164c <HAL_GetTick>
 8003a00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a04:	f7fd fe22 	bl	800164c <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b64      	cmp	r3, #100	; 0x64
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e38d      	b.n	8004132 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a16:	4b64      	ldr	r3, [pc, #400]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCC_OscConfig+0xe4>
 8003a22:	e014      	b.n	8003a4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a24:	f7fd fe12 	bl	800164c <HAL_GetTick>
 8003a28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a2c:	f7fd fe0e 	bl	800164c <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b64      	cmp	r3, #100	; 0x64
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e379      	b.n	8004132 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a3e:	4b5a      	ldr	r3, [pc, #360]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1f0      	bne.n	8003a2c <HAL_RCC_OscConfig+0x10c>
 8003a4a:	e000      	b.n	8003a4e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 80ae 	beq.w	8003bb8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a5c:	4b52      	ldr	r3, [pc, #328]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a64:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a66:	4b50      	ldr	r3, [pc, #320]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 8003a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d007      	beq.n	8003a82 <HAL_RCC_OscConfig+0x162>
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	2b18      	cmp	r3, #24
 8003a76:	d13a      	bne.n	8003aee <HAL_RCC_OscConfig+0x1ce>
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d135      	bne.n	8003aee <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a82:	4b49      	ldr	r3, [pc, #292]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0304 	and.w	r3, r3, #4
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d005      	beq.n	8003a9a <HAL_RCC_OscConfig+0x17a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e34b      	b.n	8004132 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a9a:	f7fd fe07 	bl	80016ac <HAL_GetREVID>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	f241 0203 	movw	r2, #4099	; 0x1003
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d817      	bhi.n	8003ad8 <HAL_RCC_OscConfig+0x1b8>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	2b40      	cmp	r3, #64	; 0x40
 8003aae:	d108      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x1a2>
 8003ab0:	4b3d      	ldr	r3, [pc, #244]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003ab8:	4a3b      	ldr	r2, [pc, #236]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 8003aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003abe:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac0:	e07a      	b.n	8003bb8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac2:	4b39      	ldr	r3, [pc, #228]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	031b      	lsls	r3, r3, #12
 8003ad0:	4935      	ldr	r1, [pc, #212]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ad6:	e06f      	b.n	8003bb8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad8:	4b33      	ldr	r3, [pc, #204]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	061b      	lsls	r3, r3, #24
 8003ae6:	4930      	ldr	r1, [pc, #192]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aec:	e064      	b.n	8003bb8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d045      	beq.n	8003b82 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003af6:	4b2c      	ldr	r3, [pc, #176]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f023 0219 	bic.w	r2, r3, #25
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	4929      	ldr	r1, [pc, #164]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b08:	f7fd fda0 	bl	800164c <HAL_GetTick>
 8003b0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b10:	f7fd fd9c 	bl	800164c <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e307      	b.n	8004132 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b22:	4b21      	ldr	r3, [pc, #132]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2e:	f7fd fdbd 	bl	80016ac <HAL_GetREVID>
 8003b32:	4603      	mov	r3, r0
 8003b34:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d817      	bhi.n	8003b6c <HAL_RCC_OscConfig+0x24c>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	2b40      	cmp	r3, #64	; 0x40
 8003b42:	d108      	bne.n	8003b56 <HAL_RCC_OscConfig+0x236>
 8003b44:	4b18      	ldr	r3, [pc, #96]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003b4c:	4a16      	ldr	r2, [pc, #88]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 8003b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b52:	6053      	str	r3, [r2, #4]
 8003b54:	e030      	b.n	8003bb8 <HAL_RCC_OscConfig+0x298>
 8003b56:	4b14      	ldr	r3, [pc, #80]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	031b      	lsls	r3, r3, #12
 8003b64:	4910      	ldr	r1, [pc, #64]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	604b      	str	r3, [r1, #4]
 8003b6a:	e025      	b.n	8003bb8 <HAL_RCC_OscConfig+0x298>
 8003b6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	061b      	lsls	r3, r3, #24
 8003b7a:	490b      	ldr	r1, [pc, #44]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	604b      	str	r3, [r1, #4]
 8003b80:	e01a      	b.n	8003bb8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b82:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a08      	ldr	r2, [pc, #32]	; (8003ba8 <HAL_RCC_OscConfig+0x288>)
 8003b88:	f023 0301 	bic.w	r3, r3, #1
 8003b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8e:	f7fd fd5d 	bl	800164c <HAL_GetTick>
 8003b92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b94:	e00a      	b.n	8003bac <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b96:	f7fd fd59 	bl	800164c <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d903      	bls.n	8003bac <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e2c4      	b.n	8004132 <HAL_RCC_OscConfig+0x812>
 8003ba8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bac:	4ba4      	ldr	r3, [pc, #656]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1ee      	bne.n	8003b96 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 80a9 	beq.w	8003d18 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bc6:	4b9e      	ldr	r3, [pc, #632]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bd0:	4b9b      	ldr	r3, [pc, #620]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d007      	beq.n	8003bec <HAL_RCC_OscConfig+0x2cc>
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	2b18      	cmp	r3, #24
 8003be0:	d13a      	bne.n	8003c58 <HAL_RCC_OscConfig+0x338>
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f003 0303 	and.w	r3, r3, #3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d135      	bne.n	8003c58 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bec:	4b94      	ldr	r3, [pc, #592]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <HAL_RCC_OscConfig+0x2e4>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	2b80      	cmp	r3, #128	; 0x80
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e296      	b.n	8004132 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c04:	f7fd fd52 	bl	80016ac <HAL_GetREVID>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d817      	bhi.n	8003c42 <HAL_RCC_OscConfig+0x322>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	2b20      	cmp	r3, #32
 8003c18:	d108      	bne.n	8003c2c <HAL_RCC_OscConfig+0x30c>
 8003c1a:	4b89      	ldr	r3, [pc, #548]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003c22:	4a87      	ldr	r2, [pc, #540]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003c24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c28:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c2a:	e075      	b.n	8003d18 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c2c:	4b84      	ldr	r3, [pc, #528]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	069b      	lsls	r3, r3, #26
 8003c3a:	4981      	ldr	r1, [pc, #516]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c40:	e06a      	b.n	8003d18 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c42:	4b7f      	ldr	r3, [pc, #508]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	061b      	lsls	r3, r3, #24
 8003c50:	497b      	ldr	r1, [pc, #492]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c56:	e05f      	b.n	8003d18 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d042      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c60:	4b77      	ldr	r3, [pc, #476]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a76      	ldr	r2, [pc, #472]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fd fcee 	bl	800164c <HAL_GetTick>
 8003c70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003c74:	f7fd fcea 	bl	800164c <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e255      	b.n	8004132 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c86:	4b6e      	ldr	r3, [pc, #440]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f0      	beq.n	8003c74 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c92:	f7fd fd0b 	bl	80016ac <HAL_GetREVID>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d817      	bhi.n	8003cd0 <HAL_RCC_OscConfig+0x3b0>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	2b20      	cmp	r3, #32
 8003ca6:	d108      	bne.n	8003cba <HAL_RCC_OscConfig+0x39a>
 8003ca8:	4b65      	ldr	r3, [pc, #404]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003cb0:	4a63      	ldr	r2, [pc, #396]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003cb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cb6:	6053      	str	r3, [r2, #4]
 8003cb8:	e02e      	b.n	8003d18 <HAL_RCC_OscConfig+0x3f8>
 8003cba:	4b61      	ldr	r3, [pc, #388]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	069b      	lsls	r3, r3, #26
 8003cc8:	495d      	ldr	r1, [pc, #372]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	604b      	str	r3, [r1, #4]
 8003cce:	e023      	b.n	8003d18 <HAL_RCC_OscConfig+0x3f8>
 8003cd0:	4b5b      	ldr	r3, [pc, #364]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	061b      	lsls	r3, r3, #24
 8003cde:	4958      	ldr	r1, [pc, #352]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60cb      	str	r3, [r1, #12]
 8003ce4:	e018      	b.n	8003d18 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003ce6:	4b56      	ldr	r3, [pc, #344]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a55      	ldr	r2, [pc, #340]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003cec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf2:	f7fd fcab 	bl	800164c <HAL_GetTick>
 8003cf6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003cfa:	f7fd fca7 	bl	800164c <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e212      	b.n	8004132 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d0c:	4b4c      	ldr	r3, [pc, #304]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1f0      	bne.n	8003cfa <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d036      	beq.n	8003d92 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d019      	beq.n	8003d60 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d2c:	4b44      	ldr	r3, [pc, #272]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d30:	4a43      	ldr	r2, [pc, #268]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d38:	f7fd fc88 	bl	800164c <HAL_GetTick>
 8003d3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d40:	f7fd fc84 	bl	800164c <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e1ef      	b.n	8004132 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d52:	4b3b      	ldr	r3, [pc, #236]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0f0      	beq.n	8003d40 <HAL_RCC_OscConfig+0x420>
 8003d5e:	e018      	b.n	8003d92 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d60:	4b37      	ldr	r3, [pc, #220]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d64:	4a36      	ldr	r2, [pc, #216]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003d66:	f023 0301 	bic.w	r3, r3, #1
 8003d6a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6c:	f7fd fc6e 	bl	800164c <HAL_GetTick>
 8003d70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d74:	f7fd fc6a 	bl	800164c <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e1d5      	b.n	8004132 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d86:	4b2e      	ldr	r3, [pc, #184]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f0      	bne.n	8003d74 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0320 	and.w	r3, r3, #32
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d036      	beq.n	8003e0c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d019      	beq.n	8003dda <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003da6:	4b26      	ldr	r3, [pc, #152]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a25      	ldr	r2, [pc, #148]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003dac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003db0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003db2:	f7fd fc4b 	bl	800164c <HAL_GetTick>
 8003db6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003dba:	f7fd fc47 	bl	800164c <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e1b2      	b.n	8004132 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003dcc:	4b1c      	ldr	r3, [pc, #112]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0f0      	beq.n	8003dba <HAL_RCC_OscConfig+0x49a>
 8003dd8:	e018      	b.n	8003e0c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003dda:	4b19      	ldr	r3, [pc, #100]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a18      	ldr	r2, [pc, #96]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003de0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003de4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003de6:	f7fd fc31 	bl	800164c <HAL_GetTick>
 8003dea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003dee:	f7fd fc2d 	bl	800164c <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e198      	b.n	8004132 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e00:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <HAL_RCC_OscConfig+0x520>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1f0      	bne.n	8003dee <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 8085 	beq.w	8003f24 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e1a:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <HAL_RCC_OscConfig+0x524>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a09      	ldr	r2, [pc, #36]	; (8003e44 <HAL_RCC_OscConfig+0x524>)
 8003e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e26:	f7fd fc11 	bl	800164c <HAL_GetTick>
 8003e2a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e2c:	e00c      	b.n	8003e48 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e2e:	f7fd fc0d 	bl	800164c <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b64      	cmp	r3, #100	; 0x64
 8003e3a:	d905      	bls.n	8003e48 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e178      	b.n	8004132 <HAL_RCC_OscConfig+0x812>
 8003e40:	58024400 	.word	0x58024400
 8003e44:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e48:	4b96      	ldr	r3, [pc, #600]	; (80040a4 <HAL_RCC_OscConfig+0x784>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0ec      	beq.n	8003e2e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d106      	bne.n	8003e6a <HAL_RCC_OscConfig+0x54a>
 8003e5c:	4b92      	ldr	r3, [pc, #584]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e60:	4a91      	ldr	r2, [pc, #580]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003e62:	f043 0301 	orr.w	r3, r3, #1
 8003e66:	6713      	str	r3, [r2, #112]	; 0x70
 8003e68:	e02d      	b.n	8003ec6 <HAL_RCC_OscConfig+0x5a6>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10c      	bne.n	8003e8c <HAL_RCC_OscConfig+0x56c>
 8003e72:	4b8d      	ldr	r3, [pc, #564]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e76:	4a8c      	ldr	r2, [pc, #560]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003e78:	f023 0301 	bic.w	r3, r3, #1
 8003e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7e:	4b8a      	ldr	r3, [pc, #552]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e82:	4a89      	ldr	r2, [pc, #548]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003e84:	f023 0304 	bic.w	r3, r3, #4
 8003e88:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8a:	e01c      	b.n	8003ec6 <HAL_RCC_OscConfig+0x5a6>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b05      	cmp	r3, #5
 8003e92:	d10c      	bne.n	8003eae <HAL_RCC_OscConfig+0x58e>
 8003e94:	4b84      	ldr	r3, [pc, #528]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e98:	4a83      	ldr	r2, [pc, #524]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003e9a:	f043 0304 	orr.w	r3, r3, #4
 8003e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea0:	4b81      	ldr	r3, [pc, #516]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea4:	4a80      	ldr	r2, [pc, #512]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8003eac:	e00b      	b.n	8003ec6 <HAL_RCC_OscConfig+0x5a6>
 8003eae:	4b7e      	ldr	r3, [pc, #504]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb2:	4a7d      	ldr	r2, [pc, #500]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003eb4:	f023 0301 	bic.w	r3, r3, #1
 8003eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eba:	4b7b      	ldr	r3, [pc, #492]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	4a7a      	ldr	r2, [pc, #488]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003ec0:	f023 0304 	bic.w	r3, r3, #4
 8003ec4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d015      	beq.n	8003efa <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ece:	f7fd fbbd 	bl	800164c <HAL_GetTick>
 8003ed2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ed4:	e00a      	b.n	8003eec <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed6:	f7fd fbb9 	bl	800164c <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e122      	b.n	8004132 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eec:	4b6e      	ldr	r3, [pc, #440]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0ee      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x5b6>
 8003ef8:	e014      	b.n	8003f24 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efa:	f7fd fba7 	bl	800164c <HAL_GetTick>
 8003efe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f00:	e00a      	b.n	8003f18 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f02:	f7fd fba3 	bl	800164c <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e10c      	b.n	8004132 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f18:	4b63      	ldr	r3, [pc, #396]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1ee      	bne.n	8003f02 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 8101 	beq.w	8004130 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003f2e:	4b5e      	ldr	r3, [pc, #376]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f36:	2b18      	cmp	r3, #24
 8003f38:	f000 80bc 	beq.w	80040b4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	f040 8095 	bne.w	8004070 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f46:	4b58      	ldr	r3, [pc, #352]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a57      	ldr	r2, [pc, #348]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003f4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f52:	f7fd fb7b 	bl	800164c <HAL_GetTick>
 8003f56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f5a:	f7fd fb77 	bl	800164c <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e0e2      	b.n	8004132 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f6c:	4b4e      	ldr	r3, [pc, #312]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f0      	bne.n	8003f5a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f78:	4b4b      	ldr	r3, [pc, #300]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003f7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f7c:	4b4b      	ldr	r3, [pc, #300]	; (80040ac <HAL_RCC_OscConfig+0x78c>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f88:	0112      	lsls	r2, r2, #4
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	4946      	ldr	r1, [pc, #280]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	628b      	str	r3, [r1, #40]	; 0x28
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	3b01      	subs	r3, #1
 8003f98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	025b      	lsls	r3, r3, #9
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fac:	3b01      	subs	r3, #1
 8003fae:	041b      	lsls	r3, r3, #16
 8003fb0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	061b      	lsls	r3, r3, #24
 8003fbe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003fc2:	4939      	ldr	r1, [pc, #228]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003fc8:	4b37      	ldr	r3, [pc, #220]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	4a36      	ldr	r2, [pc, #216]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003fce:	f023 0301 	bic.w	r3, r3, #1
 8003fd2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003fd4:	4b34      	ldr	r3, [pc, #208]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd8:	4b35      	ldr	r3, [pc, #212]	; (80040b0 <HAL_RCC_OscConfig+0x790>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003fe0:	00d2      	lsls	r2, r2, #3
 8003fe2:	4931      	ldr	r1, [pc, #196]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003fe8:	4b2f      	ldr	r3, [pc, #188]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	f023 020c 	bic.w	r2, r3, #12
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	492c      	ldr	r1, [pc, #176]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003ffa:	4b2b      	ldr	r3, [pc, #172]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	f023 0202 	bic.w	r2, r3, #2
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004006:	4928      	ldr	r1, [pc, #160]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8004008:	4313      	orrs	r3, r2
 800400a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800400c:	4b26      	ldr	r3, [pc, #152]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	4a25      	ldr	r2, [pc, #148]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8004012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004016:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004018:	4b23      	ldr	r3, [pc, #140]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	4a22      	ldr	r2, [pc, #136]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 800401e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004022:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004024:	4b20      	ldr	r3, [pc, #128]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	4a1f      	ldr	r2, [pc, #124]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 800402a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800402e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004030:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	4a1c      	ldr	r2, [pc, #112]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800403c:	4b1a      	ldr	r3, [pc, #104]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a19      	ldr	r2, [pc, #100]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8004042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004048:	f7fd fb00 	bl	800164c <HAL_GetTick>
 800404c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004050:	f7fd fafc 	bl	800164c <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e067      	b.n	8004132 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004062:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0f0      	beq.n	8004050 <HAL_RCC_OscConfig+0x730>
 800406e:	e05f      	b.n	8004130 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004070:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a0c      	ldr	r2, [pc, #48]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8004076:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800407a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407c:	f7fd fae6 	bl	800164c <HAL_GetTick>
 8004080:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004084:	f7fd fae2 	bl	800164c <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e04d      	b.n	8004132 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004096:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <HAL_RCC_OscConfig+0x788>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCC_OscConfig+0x764>
 80040a2:	e045      	b.n	8004130 <HAL_RCC_OscConfig+0x810>
 80040a4:	58024800 	.word	0x58024800
 80040a8:	58024400 	.word	0x58024400
 80040ac:	fffffc0c 	.word	0xfffffc0c
 80040b0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80040b4:	4b21      	ldr	r3, [pc, #132]	; (800413c <HAL_RCC_OscConfig+0x81c>)
 80040b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80040ba:	4b20      	ldr	r3, [pc, #128]	; (800413c <HAL_RCC_OscConfig+0x81c>)
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040be:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d031      	beq.n	800412c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f003 0203 	and.w	r2, r3, #3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d12a      	bne.n	800412c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	091b      	lsrs	r3, r3, #4
 80040da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d122      	bne.n	800412c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d11a      	bne.n	800412c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	0a5b      	lsrs	r3, r3, #9
 80040fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004102:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004104:	429a      	cmp	r2, r3
 8004106:	d111      	bne.n	800412c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	0c1b      	lsrs	r3, r3, #16
 800410c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004114:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004116:	429a      	cmp	r2, r3
 8004118:	d108      	bne.n	800412c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	0e1b      	lsrs	r3, r3, #24
 800411e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004126:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004128:	429a      	cmp	r2, r3
 800412a:	d001      	beq.n	8004130 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e000      	b.n	8004132 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3730      	adds	r7, #48	; 0x30
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	58024400 	.word	0x58024400

08004140 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e19c      	b.n	800448e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004154:	4b8a      	ldr	r3, [pc, #552]	; (8004380 <HAL_RCC_ClockConfig+0x240>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d910      	bls.n	8004184 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004162:	4b87      	ldr	r3, [pc, #540]	; (8004380 <HAL_RCC_ClockConfig+0x240>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f023 020f 	bic.w	r2, r3, #15
 800416a:	4985      	ldr	r1, [pc, #532]	; (8004380 <HAL_RCC_ClockConfig+0x240>)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	4313      	orrs	r3, r2
 8004170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004172:	4b83      	ldr	r3, [pc, #524]	; (8004380 <HAL_RCC_ClockConfig+0x240>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	429a      	cmp	r2, r3
 800417e:	d001      	beq.n	8004184 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e184      	b.n	800448e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d010      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	4b7b      	ldr	r3, [pc, #492]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800419c:	429a      	cmp	r2, r3
 800419e:	d908      	bls.n	80041b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041a0:	4b78      	ldr	r3, [pc, #480]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	4975      	ldr	r1, [pc, #468]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d010      	beq.n	80041e0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695a      	ldr	r2, [r3, #20]
 80041c2:	4b70      	ldr	r3, [pc, #448]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d908      	bls.n	80041e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041ce:	4b6d      	ldr	r3, [pc, #436]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	496a      	ldr	r1, [pc, #424]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0310 	and.w	r3, r3, #16
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d010      	beq.n	800420e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699a      	ldr	r2, [r3, #24]
 80041f0:	4b64      	ldr	r3, [pc, #400]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d908      	bls.n	800420e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041fc:	4b61      	ldr	r3, [pc, #388]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	495e      	ldr	r1, [pc, #376]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 800420a:	4313      	orrs	r3, r2
 800420c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0320 	and.w	r3, r3, #32
 8004216:	2b00      	cmp	r3, #0
 8004218:	d010      	beq.n	800423c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69da      	ldr	r2, [r3, #28]
 800421e:	4b59      	ldr	r3, [pc, #356]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004226:	429a      	cmp	r2, r3
 8004228:	d908      	bls.n	800423c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800422a:	4b56      	ldr	r3, [pc, #344]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	4953      	ldr	r1, [pc, #332]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 8004238:	4313      	orrs	r3, r2
 800423a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d010      	beq.n	800426a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	4b4d      	ldr	r3, [pc, #308]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	429a      	cmp	r2, r3
 8004256:	d908      	bls.n	800426a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004258:	4b4a      	ldr	r3, [pc, #296]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	f023 020f 	bic.w	r2, r3, #15
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	4947      	ldr	r1, [pc, #284]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 8004266:	4313      	orrs	r3, r2
 8004268:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d055      	beq.n	8004322 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004276:	4b43      	ldr	r3, [pc, #268]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	4940      	ldr	r1, [pc, #256]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 8004284:	4313      	orrs	r3, r2
 8004286:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b02      	cmp	r3, #2
 800428e:	d107      	bne.n	80042a0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004290:	4b3c      	ldr	r3, [pc, #240]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d121      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0f6      	b.n	800448e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d107      	bne.n	80042b8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042a8:	4b36      	ldr	r3, [pc, #216]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d115      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e0ea      	b.n	800448e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d107      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042c0:	4b30      	ldr	r3, [pc, #192]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d109      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e0de      	b.n	800448e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042d0:	4b2c      	ldr	r3, [pc, #176]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0d6      	b.n	800448e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042e0:	4b28      	ldr	r3, [pc, #160]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	f023 0207 	bic.w	r2, r3, #7
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	4925      	ldr	r1, [pc, #148]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f2:	f7fd f9ab 	bl	800164c <HAL_GetTick>
 80042f6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f8:	e00a      	b.n	8004310 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042fa:	f7fd f9a7 	bl	800164c <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	f241 3288 	movw	r2, #5000	; 0x1388
 8004308:	4293      	cmp	r3, r2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e0be      	b.n	800448e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004310:	4b1c      	ldr	r3, [pc, #112]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	429a      	cmp	r2, r3
 8004320:	d1eb      	bne.n	80042fa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d010      	beq.n	8004350 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	4b14      	ldr	r3, [pc, #80]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	429a      	cmp	r2, r3
 800433c:	d208      	bcs.n	8004350 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800433e:	4b11      	ldr	r3, [pc, #68]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f023 020f 	bic.w	r2, r3, #15
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	490e      	ldr	r1, [pc, #56]	; (8004384 <HAL_RCC_ClockConfig+0x244>)
 800434c:	4313      	orrs	r3, r2
 800434e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <HAL_RCC_ClockConfig+0x240>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 030f 	and.w	r3, r3, #15
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d214      	bcs.n	8004388 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435e:	4b08      	ldr	r3, [pc, #32]	; (8004380 <HAL_RCC_ClockConfig+0x240>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f023 020f 	bic.w	r2, r3, #15
 8004366:	4906      	ldr	r1, [pc, #24]	; (8004380 <HAL_RCC_ClockConfig+0x240>)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	4313      	orrs	r3, r2
 800436c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800436e:	4b04      	ldr	r3, [pc, #16]	; (8004380 <HAL_RCC_ClockConfig+0x240>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d005      	beq.n	8004388 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e086      	b.n	800448e <HAL_RCC_ClockConfig+0x34e>
 8004380:	52002000 	.word	0x52002000
 8004384:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d010      	beq.n	80043b6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	4b3f      	ldr	r3, [pc, #252]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d208      	bcs.n	80043b6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80043a4:	4b3c      	ldr	r3, [pc, #240]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	4939      	ldr	r1, [pc, #228]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d010      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	695a      	ldr	r2, [r3, #20]
 80043c6:	4b34      	ldr	r3, [pc, #208]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d208      	bcs.n	80043e4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043d2:	4b31      	ldr	r3, [pc, #196]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	492e      	ldr	r1, [pc, #184]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0310 	and.w	r3, r3, #16
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d010      	beq.n	8004412 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	699a      	ldr	r2, [r3, #24]
 80043f4:	4b28      	ldr	r3, [pc, #160]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d208      	bcs.n	8004412 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004400:	4b25      	ldr	r3, [pc, #148]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	4922      	ldr	r1, [pc, #136]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 800440e:	4313      	orrs	r3, r2
 8004410:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0320 	and.w	r3, r3, #32
 800441a:	2b00      	cmp	r3, #0
 800441c:	d010      	beq.n	8004440 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69da      	ldr	r2, [r3, #28]
 8004422:	4b1d      	ldr	r3, [pc, #116]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800442a:	429a      	cmp	r2, r3
 800442c:	d208      	bcs.n	8004440 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800442e:	4b1a      	ldr	r3, [pc, #104]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	4917      	ldr	r1, [pc, #92]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 800443c:	4313      	orrs	r3, r2
 800443e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004440:	f000 f834 	bl	80044ac <HAL_RCC_GetSysClockFreq>
 8004444:	4602      	mov	r2, r0
 8004446:	4b14      	ldr	r3, [pc, #80]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	0a1b      	lsrs	r3, r3, #8
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	4912      	ldr	r1, [pc, #72]	; (800449c <HAL_RCC_ClockConfig+0x35c>)
 8004452:	5ccb      	ldrb	r3, [r1, r3]
 8004454:	f003 031f 	and.w	r3, r3, #31
 8004458:	fa22 f303 	lsr.w	r3, r2, r3
 800445c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800445e:	4b0e      	ldr	r3, [pc, #56]	; (8004498 <HAL_RCC_ClockConfig+0x358>)
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	4a0d      	ldr	r2, [pc, #52]	; (800449c <HAL_RCC_ClockConfig+0x35c>)
 8004468:	5cd3      	ldrb	r3, [r2, r3]
 800446a:	f003 031f 	and.w	r3, r3, #31
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	fa22 f303 	lsr.w	r3, r2, r3
 8004474:	4a0a      	ldr	r2, [pc, #40]	; (80044a0 <HAL_RCC_ClockConfig+0x360>)
 8004476:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004478:	4a0a      	ldr	r2, [pc, #40]	; (80044a4 <HAL_RCC_ClockConfig+0x364>)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800447e:	4b0a      	ldr	r3, [pc, #40]	; (80044a8 <HAL_RCC_ClockConfig+0x368>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f7fd f898 	bl	80015b8 <HAL_InitTick>
 8004488:	4603      	mov	r3, r0
 800448a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800448c:	7bfb      	ldrb	r3, [r7, #15]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	58024400 	.word	0x58024400
 800449c:	080084d8 	.word	0x080084d8
 80044a0:	20000004 	.word	0x20000004
 80044a4:	20000000 	.word	0x20000000
 80044a8:	20000008 	.word	0x20000008

080044ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b089      	sub	sp, #36	; 0x24
 80044b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044b2:	4bb3      	ldr	r3, [pc, #716]	; (8004780 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044ba:	2b18      	cmp	r3, #24
 80044bc:	f200 8155 	bhi.w	800476a <HAL_RCC_GetSysClockFreq+0x2be>
 80044c0:	a201      	add	r2, pc, #4	; (adr r2, 80044c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80044c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c6:	bf00      	nop
 80044c8:	0800452d 	.word	0x0800452d
 80044cc:	0800476b 	.word	0x0800476b
 80044d0:	0800476b 	.word	0x0800476b
 80044d4:	0800476b 	.word	0x0800476b
 80044d8:	0800476b 	.word	0x0800476b
 80044dc:	0800476b 	.word	0x0800476b
 80044e0:	0800476b 	.word	0x0800476b
 80044e4:	0800476b 	.word	0x0800476b
 80044e8:	08004553 	.word	0x08004553
 80044ec:	0800476b 	.word	0x0800476b
 80044f0:	0800476b 	.word	0x0800476b
 80044f4:	0800476b 	.word	0x0800476b
 80044f8:	0800476b 	.word	0x0800476b
 80044fc:	0800476b 	.word	0x0800476b
 8004500:	0800476b 	.word	0x0800476b
 8004504:	0800476b 	.word	0x0800476b
 8004508:	08004559 	.word	0x08004559
 800450c:	0800476b 	.word	0x0800476b
 8004510:	0800476b 	.word	0x0800476b
 8004514:	0800476b 	.word	0x0800476b
 8004518:	0800476b 	.word	0x0800476b
 800451c:	0800476b 	.word	0x0800476b
 8004520:	0800476b 	.word	0x0800476b
 8004524:	0800476b 	.word	0x0800476b
 8004528:	0800455f 	.word	0x0800455f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800452c:	4b94      	ldr	r3, [pc, #592]	; (8004780 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0320 	and.w	r3, r3, #32
 8004534:	2b00      	cmp	r3, #0
 8004536:	d009      	beq.n	800454c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004538:	4b91      	ldr	r3, [pc, #580]	; (8004780 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	08db      	lsrs	r3, r3, #3
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	4a90      	ldr	r2, [pc, #576]	; (8004784 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004544:	fa22 f303 	lsr.w	r3, r2, r3
 8004548:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800454a:	e111      	b.n	8004770 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800454c:	4b8d      	ldr	r3, [pc, #564]	; (8004784 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800454e:	61bb      	str	r3, [r7, #24]
    break;
 8004550:	e10e      	b.n	8004770 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004552:	4b8d      	ldr	r3, [pc, #564]	; (8004788 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004554:	61bb      	str	r3, [r7, #24]
    break;
 8004556:	e10b      	b.n	8004770 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004558:	4b8c      	ldr	r3, [pc, #560]	; (800478c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800455a:	61bb      	str	r3, [r7, #24]
    break;
 800455c:	e108      	b.n	8004770 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800455e:	4b88      	ldr	r3, [pc, #544]	; (8004780 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004568:	4b85      	ldr	r3, [pc, #532]	; (8004780 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800456a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456c:	091b      	lsrs	r3, r3, #4
 800456e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004572:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004574:	4b82      	ldr	r3, [pc, #520]	; (8004780 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800457e:	4b80      	ldr	r3, [pc, #512]	; (8004780 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004582:	08db      	lsrs	r3, r3, #3
 8004584:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	fb02 f303 	mul.w	r3, r2, r3
 800458e:	ee07 3a90 	vmov	s15, r3
 8004592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004596:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 80e1 	beq.w	8004764 <HAL_RCC_GetSysClockFreq+0x2b8>
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	f000 8083 	beq.w	80046b0 <HAL_RCC_GetSysClockFreq+0x204>
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	f200 80a1 	bhi.w	80046f4 <HAL_RCC_GetSysClockFreq+0x248>
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <HAL_RCC_GetSysClockFreq+0x114>
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d056      	beq.n	800466c <HAL_RCC_GetSysClockFreq+0x1c0>
 80045be:	e099      	b.n	80046f4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045c0:	4b6f      	ldr	r3, [pc, #444]	; (8004780 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d02d      	beq.n	8004628 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045cc:	4b6c      	ldr	r3, [pc, #432]	; (8004780 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	08db      	lsrs	r3, r3, #3
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	4a6b      	ldr	r2, [pc, #428]	; (8004784 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045d8:	fa22 f303 	lsr.w	r3, r2, r3
 80045dc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	ee07 3a90 	vmov	s15, r3
 80045e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	ee07 3a90 	vmov	s15, r3
 80045ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045f6:	4b62      	ldr	r3, [pc, #392]	; (8004780 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045fe:	ee07 3a90 	vmov	s15, r3
 8004602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004606:	ed97 6a02 	vldr	s12, [r7, #8]
 800460a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004790 <HAL_RCC_GetSysClockFreq+0x2e4>
 800460e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800461a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800461e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004622:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004626:	e087      	b.n	8004738 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	ee07 3a90 	vmov	s15, r3
 800462e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004632:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004794 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800463a:	4b51      	ldr	r3, [pc, #324]	; (8004780 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004642:	ee07 3a90 	vmov	s15, r3
 8004646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800464a:	ed97 6a02 	vldr	s12, [r7, #8]
 800464e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004790 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800465a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800465e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004666:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800466a:	e065      	b.n	8004738 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004676:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004798 <HAL_RCC_GetSysClockFreq+0x2ec>
 800467a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800467e:	4b40      	ldr	r3, [pc, #256]	; (8004780 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004686:	ee07 3a90 	vmov	s15, r3
 800468a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800468e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004692:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004790 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800469a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800469e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046ae:	e043      	b.n	8004738 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	ee07 3a90 	vmov	s15, r3
 80046b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ba:	eddf 6a38 	vldr	s13, [pc, #224]	; 800479c <HAL_RCC_GetSysClockFreq+0x2f0>
 80046be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046c2:	4b2f      	ldr	r3, [pc, #188]	; (8004780 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80046d6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004790 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046f2:	e021      	b.n	8004738 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046fe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004798 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004706:	4b1e      	ldr	r3, [pc, #120]	; (8004780 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800470e:	ee07 3a90 	vmov	s15, r3
 8004712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004716:	ed97 6a02 	vldr	s12, [r7, #8]
 800471a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004790 <HAL_RCC_GetSysClockFreq+0x2e4>
 800471e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800472a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800472e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004732:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004736:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004738:	4b11      	ldr	r3, [pc, #68]	; (8004780 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	0a5b      	lsrs	r3, r3, #9
 800473e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004742:	3301      	adds	r3, #1
 8004744:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	ee07 3a90 	vmov	s15, r3
 800474c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004750:	edd7 6a07 	vldr	s13, [r7, #28]
 8004754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800475c:	ee17 3a90 	vmov	r3, s15
 8004760:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004762:	e005      	b.n	8004770 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	61bb      	str	r3, [r7, #24]
    break;
 8004768:	e002      	b.n	8004770 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800476a:	4b07      	ldr	r3, [pc, #28]	; (8004788 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800476c:	61bb      	str	r3, [r7, #24]
    break;
 800476e:	bf00      	nop
  }

  return sysclockfreq;
 8004770:	69bb      	ldr	r3, [r7, #24]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3724      	adds	r7, #36	; 0x24
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	58024400 	.word	0x58024400
 8004784:	03d09000 	.word	0x03d09000
 8004788:	003d0900 	.word	0x003d0900
 800478c:	02dc6c00 	.word	0x02dc6c00
 8004790:	46000000 	.word	0x46000000
 8004794:	4c742400 	.word	0x4c742400
 8004798:	4a742400 	.word	0x4a742400
 800479c:	4c371b00 	.word	0x4c371b00

080047a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80047a6:	f7ff fe81 	bl	80044ac <HAL_RCC_GetSysClockFreq>
 80047aa:	4602      	mov	r2, r0
 80047ac:	4b10      	ldr	r3, [pc, #64]	; (80047f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	0a1b      	lsrs	r3, r3, #8
 80047b2:	f003 030f 	and.w	r3, r3, #15
 80047b6:	490f      	ldr	r1, [pc, #60]	; (80047f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80047b8:	5ccb      	ldrb	r3, [r1, r3]
 80047ba:	f003 031f 	and.w	r3, r3, #31
 80047be:	fa22 f303 	lsr.w	r3, r2, r3
 80047c2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80047c4:	4b0a      	ldr	r3, [pc, #40]	; (80047f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	f003 030f 	and.w	r3, r3, #15
 80047cc:	4a09      	ldr	r2, [pc, #36]	; (80047f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80047ce:	5cd3      	ldrb	r3, [r2, r3]
 80047d0:	f003 031f 	and.w	r3, r3, #31
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	fa22 f303 	lsr.w	r3, r2, r3
 80047da:	4a07      	ldr	r2, [pc, #28]	; (80047f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80047dc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047de:	4a07      	ldr	r2, [pc, #28]	; (80047fc <HAL_RCC_GetHCLKFreq+0x5c>)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80047e4:	4b04      	ldr	r3, [pc, #16]	; (80047f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80047e6:	681b      	ldr	r3, [r3, #0]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	58024400 	.word	0x58024400
 80047f4:	080084d8 	.word	0x080084d8
 80047f8:	20000004 	.word	0x20000004
 80047fc:	20000000 	.word	0x20000000

08004800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004804:	f7ff ffcc 	bl	80047a0 <HAL_RCC_GetHCLKFreq>
 8004808:	4602      	mov	r2, r0
 800480a:	4b06      	ldr	r3, [pc, #24]	; (8004824 <HAL_RCC_GetPCLK1Freq+0x24>)
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	091b      	lsrs	r3, r3, #4
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	4904      	ldr	r1, [pc, #16]	; (8004828 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004816:	5ccb      	ldrb	r3, [r1, r3]
 8004818:	f003 031f 	and.w	r3, r3, #31
 800481c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004820:	4618      	mov	r0, r3
 8004822:	bd80      	pop	{r7, pc}
 8004824:	58024400 	.word	0x58024400
 8004828:	080084d8 	.word	0x080084d8

0800482c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004830:	f7ff ffb6 	bl	80047a0 <HAL_RCC_GetHCLKFreq>
 8004834:	4602      	mov	r2, r0
 8004836:	4b06      	ldr	r3, [pc, #24]	; (8004850 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	0a1b      	lsrs	r3, r3, #8
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	4904      	ldr	r1, [pc, #16]	; (8004854 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004842:	5ccb      	ldrb	r3, [r1, r3]
 8004844:	f003 031f 	and.w	r3, r3, #31
 8004848:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800484c:	4618      	mov	r0, r3
 800484e:	bd80      	pop	{r7, pc}
 8004850:	58024400 	.word	0x58024400
 8004854:	080084d8 	.word	0x080084d8

08004858 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004860:	2300      	movs	r3, #0
 8004862:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004864:	2300      	movs	r3, #0
 8004866:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d03f      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004878:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800487c:	d02a      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800487e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004882:	d824      	bhi.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004884:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004888:	d018      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800488a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800488e:	d81e      	bhi.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004894:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004898:	d007      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 800489a:	e018      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800489c:	4bab      	ldr	r3, [pc, #684]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	4aaa      	ldr	r2, [pc, #680]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80048a8:	e015      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3304      	adds	r3, #4
 80048ae:	2102      	movs	r1, #2
 80048b0:	4618      	mov	r0, r3
 80048b2:	f001 f9cf 	bl	8005c54 <RCCEx_PLL2_Config>
 80048b6:	4603      	mov	r3, r0
 80048b8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80048ba:	e00c      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3324      	adds	r3, #36	; 0x24
 80048c0:	2102      	movs	r1, #2
 80048c2:	4618      	mov	r0, r3
 80048c4:	f001 fa78 	bl	8005db8 <RCCEx_PLL3_Config>
 80048c8:	4603      	mov	r3, r0
 80048ca:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80048cc:	e003      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	75fb      	strb	r3, [r7, #23]
      break;
 80048d2:	e000      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80048d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048d6:	7dfb      	ldrb	r3, [r7, #23]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d109      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80048dc:	4b9b      	ldr	r3, [pc, #620]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048e8:	4998      	ldr	r1, [pc, #608]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	650b      	str	r3, [r1, #80]	; 0x50
 80048ee:	e001      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f0:	7dfb      	ldrb	r3, [r7, #23]
 80048f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d03d      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004904:	2b04      	cmp	r3, #4
 8004906:	d826      	bhi.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004908:	a201      	add	r2, pc, #4	; (adr r2, 8004910 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800490a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490e:	bf00      	nop
 8004910:	08004925 	.word	0x08004925
 8004914:	08004933 	.word	0x08004933
 8004918:	08004945 	.word	0x08004945
 800491c:	0800495d 	.word	0x0800495d
 8004920:	0800495d 	.word	0x0800495d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004924:	4b89      	ldr	r3, [pc, #548]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004928:	4a88      	ldr	r2, [pc, #544]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800492a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800492e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004930:	e015      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3304      	adds	r3, #4
 8004936:	2100      	movs	r1, #0
 8004938:	4618      	mov	r0, r3
 800493a:	f001 f98b 	bl	8005c54 <RCCEx_PLL2_Config>
 800493e:	4603      	mov	r3, r0
 8004940:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004942:	e00c      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3324      	adds	r3, #36	; 0x24
 8004948:	2100      	movs	r1, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f001 fa34 	bl	8005db8 <RCCEx_PLL3_Config>
 8004950:	4603      	mov	r3, r0
 8004952:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004954:	e003      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	75fb      	strb	r3, [r7, #23]
      break;
 800495a:	e000      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800495c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800495e:	7dfb      	ldrb	r3, [r7, #23]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d109      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004964:	4b79      	ldr	r3, [pc, #484]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004968:	f023 0207 	bic.w	r2, r3, #7
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004970:	4976      	ldr	r1, [pc, #472]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004972:	4313      	orrs	r3, r2
 8004974:	650b      	str	r3, [r1, #80]	; 0x50
 8004976:	e001      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004978:	7dfb      	ldrb	r3, [r7, #23]
 800497a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004984:	2b00      	cmp	r3, #0
 8004986:	d042      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004990:	d02b      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004996:	d825      	bhi.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004998:	2bc0      	cmp	r3, #192	; 0xc0
 800499a:	d028      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x196>
 800499c:	2bc0      	cmp	r3, #192	; 0xc0
 800499e:	d821      	bhi.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80049a0:	2b80      	cmp	r3, #128	; 0x80
 80049a2:	d016      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80049a4:	2b80      	cmp	r3, #128	; 0x80
 80049a6:	d81d      	bhi.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80049ac:	2b40      	cmp	r3, #64	; 0x40
 80049ae:	d007      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80049b0:	e018      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049b2:	4b66      	ldr	r3, [pc, #408]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b6:	4a65      	ldr	r2, [pc, #404]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80049be:	e017      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3304      	adds	r3, #4
 80049c4:	2100      	movs	r1, #0
 80049c6:	4618      	mov	r0, r3
 80049c8:	f001 f944 	bl	8005c54 <RCCEx_PLL2_Config>
 80049cc:	4603      	mov	r3, r0
 80049ce:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80049d0:	e00e      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3324      	adds	r3, #36	; 0x24
 80049d6:	2100      	movs	r1, #0
 80049d8:	4618      	mov	r0, r3
 80049da:	f001 f9ed 	bl	8005db8 <RCCEx_PLL3_Config>
 80049de:	4603      	mov	r3, r0
 80049e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80049e2:	e005      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	75fb      	strb	r3, [r7, #23]
      break;
 80049e8:	e002      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80049ea:	bf00      	nop
 80049ec:	e000      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80049ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049f0:	7dfb      	ldrb	r3, [r7, #23]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d109      	bne.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80049f6:	4b55      	ldr	r3, [pc, #340]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049fa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a02:	4952      	ldr	r1, [pc, #328]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	650b      	str	r3, [r1, #80]	; 0x50
 8004a08:	e001      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a0a:	7dfb      	ldrb	r3, [r7, #23]
 8004a0c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d049      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a24:	d030      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004a26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a2a:	d82a      	bhi.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004a2c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004a30:	d02c      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004a32:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004a36:	d824      	bhi.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004a38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a3c:	d018      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004a3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a42:	d81e      	bhi.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004a48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a4c:	d007      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004a4e:	e018      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a50:	4b3e      	ldr	r3, [pc, #248]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a54:	4a3d      	ldr	r2, [pc, #244]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a5c:	e017      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	3304      	adds	r3, #4
 8004a62:	2100      	movs	r1, #0
 8004a64:	4618      	mov	r0, r3
 8004a66:	f001 f8f5 	bl	8005c54 <RCCEx_PLL2_Config>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004a6e:	e00e      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3324      	adds	r3, #36	; 0x24
 8004a74:	2100      	movs	r1, #0
 8004a76:	4618      	mov	r0, r3
 8004a78:	f001 f99e 	bl	8005db8 <RCCEx_PLL3_Config>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a80:	e005      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	75fb      	strb	r3, [r7, #23]
      break;
 8004a86:	e002      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004a88:	bf00      	nop
 8004a8a:	e000      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004a8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a8e:	7dfb      	ldrb	r3, [r7, #23]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10a      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004a94:	4b2d      	ldr	r3, [pc, #180]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a98:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004aa2:	492a      	ldr	r1, [pc, #168]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	658b      	str	r3, [r1, #88]	; 0x58
 8004aa8:	e001      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aaa:	7dfb      	ldrb	r3, [r7, #23]
 8004aac:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d04c      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ac0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ac4:	d030      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004ac6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004aca:	d82a      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004acc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ad0:	d02c      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004ad2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ad6:	d824      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004ad8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004adc:	d018      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004ade:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ae2:	d81e      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004aec:	d007      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004aee:	e018      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004af0:	4b16      	ldr	r3, [pc, #88]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af4:	4a15      	ldr	r2, [pc, #84]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004afa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004afc:	e017      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3304      	adds	r3, #4
 8004b02:	2100      	movs	r1, #0
 8004b04:	4618      	mov	r0, r3
 8004b06:	f001 f8a5 	bl	8005c54 <RCCEx_PLL2_Config>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004b0e:	e00e      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3324      	adds	r3, #36	; 0x24
 8004b14:	2100      	movs	r1, #0
 8004b16:	4618      	mov	r0, r3
 8004b18:	f001 f94e 	bl	8005db8 <RCCEx_PLL3_Config>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b20:	e005      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	75fb      	strb	r3, [r7, #23]
      break;
 8004b26:	e002      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004b28:	bf00      	nop
 8004b2a:	e000      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004b2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b2e:	7dfb      	ldrb	r3, [r7, #23]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10d      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004b34:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b38:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b42:	4902      	ldr	r1, [pc, #8]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	658b      	str	r3, [r1, #88]	; 0x58
 8004b48:	e004      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004b4a:	bf00      	nop
 8004b4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b50:	7dfb      	ldrb	r3, [r7, #23]
 8004b52:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d032      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b64:	2b30      	cmp	r3, #48	; 0x30
 8004b66:	d01c      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004b68:	2b30      	cmp	r3, #48	; 0x30
 8004b6a:	d817      	bhi.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d00c      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004b70:	2b20      	cmp	r3, #32
 8004b72:	d813      	bhi.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d016      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004b78:	2b10      	cmp	r3, #16
 8004b7a:	d10f      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b7c:	4baf      	ldr	r3, [pc, #700]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b80:	4aae      	ldr	r2, [pc, #696]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004b88:	e00e      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	2102      	movs	r1, #2
 8004b90:	4618      	mov	r0, r3
 8004b92:	f001 f85f 	bl	8005c54 <RCCEx_PLL2_Config>
 8004b96:	4603      	mov	r3, r0
 8004b98:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004b9a:	e005      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8004ba0:	e002      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004ba2:	bf00      	nop
 8004ba4:	e000      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004ba6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ba8:	7dfb      	ldrb	r3, [r7, #23]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d109      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004bae:	4ba3      	ldr	r3, [pc, #652]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bba:	49a0      	ldr	r1, [pc, #640]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004bc0:	e001      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc2:	7dfb      	ldrb	r3, [r7, #23]
 8004bc4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d047      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bda:	d030      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004bdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004be0:	d82a      	bhi.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004be2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004be6:	d02c      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004be8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bec:	d824      	bhi.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bf2:	d018      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bf8:	d81e      	bhi.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c02:	d007      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004c04:	e018      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c06:	4b8d      	ldr	r3, [pc, #564]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	4a8c      	ldr	r2, [pc, #560]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c12:	e017      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3304      	adds	r3, #4
 8004c18:	2100      	movs	r1, #0
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f001 f81a 	bl	8005c54 <RCCEx_PLL2_Config>
 8004c20:	4603      	mov	r3, r0
 8004c22:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c24:	e00e      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	3324      	adds	r3, #36	; 0x24
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f001 f8c3 	bl	8005db8 <RCCEx_PLL3_Config>
 8004c32:	4603      	mov	r3, r0
 8004c34:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c36:	e005      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c3c:	e002      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004c3e:	bf00      	nop
 8004c40:	e000      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004c42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c44:	7dfb      	ldrb	r3, [r7, #23]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d109      	bne.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c4a:	4b7c      	ldr	r3, [pc, #496]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c4e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c56:	4979      	ldr	r1, [pc, #484]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	650b      	str	r3, [r1, #80]	; 0x50
 8004c5c:	e001      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c5e:	7dfb      	ldrb	r3, [r7, #23]
 8004c60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d049      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c76:	d02e      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c7c:	d828      	bhi.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004c7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c82:	d02a      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004c84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c88:	d822      	bhi.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004c8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c8e:	d026      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004c90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c94:	d81c      	bhi.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004c96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c9a:	d010      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004c9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ca0:	d816      	bhi.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d01d      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004caa:	d111      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 ffce 	bl	8005c54 <RCCEx_PLL2_Config>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004cbc:	e012      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3324      	adds	r3, #36	; 0x24
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f001 f877 	bl	8005db8 <RCCEx_PLL3_Config>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004cce:	e009      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	75fb      	strb	r3, [r7, #23]
      break;
 8004cd4:	e006      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004cd6:	bf00      	nop
 8004cd8:	e004      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004cda:	bf00      	nop
 8004cdc:	e002      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004cde:	bf00      	nop
 8004ce0:	e000      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004ce2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ce4:	7dfb      	ldrb	r3, [r7, #23]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d109      	bne.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004cea:	4b54      	ldr	r3, [pc, #336]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cee:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf6:	4951      	ldr	r1, [pc, #324]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	650b      	str	r3, [r1, #80]	; 0x50
 8004cfc:	e001      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cfe:	7dfb      	ldrb	r3, [r7, #23]
 8004d00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d04b      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d18:	d02e      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004d1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d1e:	d828      	bhi.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d24:	d02a      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d2a:	d822      	bhi.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d30:	d026      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004d32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d36:	d81c      	bhi.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d3c:	d010      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004d3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d42:	d816      	bhi.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01d      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004d48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d4c:	d111      	bne.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3304      	adds	r3, #4
 8004d52:	2101      	movs	r1, #1
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 ff7d 	bl	8005c54 <RCCEx_PLL2_Config>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004d5e:	e012      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3324      	adds	r3, #36	; 0x24
 8004d64:	2101      	movs	r1, #1
 8004d66:	4618      	mov	r0, r3
 8004d68:	f001 f826 	bl	8005db8 <RCCEx_PLL3_Config>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004d70:	e009      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	75fb      	strb	r3, [r7, #23]
      break;
 8004d76:	e006      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004d78:	bf00      	nop
 8004d7a:	e004      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004d7c:	bf00      	nop
 8004d7e:	e002      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004d80:	bf00      	nop
 8004d82:	e000      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004d84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d86:	7dfb      	ldrb	r3, [r7, #23]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10a      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004d8c:	4b2b      	ldr	r3, [pc, #172]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d90:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d9a:	4928      	ldr	r1, [pc, #160]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	658b      	str	r3, [r1, #88]	; 0x58
 8004da0:	e001      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da2:	7dfb      	ldrb	r3, [r7, #23]
 8004da4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d02f      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004db6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dba:	d00e      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dc0:	d814      	bhi.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d015      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004dc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dca:	d10f      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dcc:	4b1b      	ldr	r3, [pc, #108]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	4a1a      	ldr	r2, [pc, #104]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004dd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004dd8:	e00c      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3304      	adds	r3, #4
 8004dde:	2101      	movs	r1, #1
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 ff37 	bl	8005c54 <RCCEx_PLL2_Config>
 8004de6:	4603      	mov	r3, r0
 8004de8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004dea:	e003      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	75fb      	strb	r3, [r7, #23]
      break;
 8004df0:	e000      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004df2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004df4:	7dfb      	ldrb	r3, [r7, #23]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d109      	bne.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004dfa:	4b10      	ldr	r3, [pc, #64]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dfe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e06:	490d      	ldr	r1, [pc, #52]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	650b      	str	r3, [r1, #80]	; 0x50
 8004e0c:	e001      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e0e:	7dfb      	ldrb	r3, [r7, #23]
 8004e10:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d033      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e22:	2b03      	cmp	r3, #3
 8004e24:	d81c      	bhi.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004e26:	a201      	add	r2, pc, #4	; (adr r2, 8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2c:	08004e67 	.word	0x08004e67
 8004e30:	08004e41 	.word	0x08004e41
 8004e34:	08004e4f 	.word	0x08004e4f
 8004e38:	08004e67 	.word	0x08004e67
 8004e3c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e40:	4bb8      	ldr	r3, [pc, #736]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	4ab7      	ldr	r2, [pc, #732]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004e4c:	e00c      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	3304      	adds	r3, #4
 8004e52:	2102      	movs	r1, #2
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 fefd 	bl	8005c54 <RCCEx_PLL2_Config>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004e5e:	e003      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	75fb      	strb	r3, [r7, #23]
      break;
 8004e64:	e000      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004e66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e68:	7dfb      	ldrb	r3, [r7, #23]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004e6e:	4bad      	ldr	r3, [pc, #692]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e72:	f023 0203 	bic.w	r2, r3, #3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7a:	49aa      	ldr	r1, [pc, #680]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004e80:	e001      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e82:	7dfb      	ldrb	r3, [r7, #23]
 8004e84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 8086 	beq.w	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e94:	4ba4      	ldr	r3, [pc, #656]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4aa3      	ldr	r2, [pc, #652]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ea0:	f7fc fbd4 	bl	800164c <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ea6:	e009      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea8:	f7fc fbd0 	bl	800164c <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b64      	cmp	r3, #100	; 0x64
 8004eb4:	d902      	bls.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	75fb      	strb	r3, [r7, #23]
        break;
 8004eba:	e005      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ebc:	4b9a      	ldr	r3, [pc, #616]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0ef      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004ec8:	7dfb      	ldrb	r3, [r7, #23]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d166      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004ece:	4b95      	ldr	r3, [pc, #596]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ed0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ed8:	4053      	eors	r3, r2
 8004eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d013      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ee2:	4b90      	ldr	r3, [pc, #576]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eea:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004eec:	4b8d      	ldr	r3, [pc, #564]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef0:	4a8c      	ldr	r2, [pc, #560]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ef8:	4b8a      	ldr	r3, [pc, #552]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efc:	4a89      	ldr	r2, [pc, #548]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f02:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004f04:	4a87      	ldr	r2, [pc, #540]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f14:	d115      	bne.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f16:	f7fc fb99 	bl	800164c <HAL_GetTick>
 8004f1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f1c:	e00b      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f1e:	f7fc fb95 	bl	800164c <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d902      	bls.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	75fb      	strb	r3, [r7, #23]
            break;
 8004f34:	e005      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f36:	4b7b      	ldr	r3, [pc, #492]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0ed      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004f42:	7dfb      	ldrb	r3, [r7, #23]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d126      	bne.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f56:	d10d      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004f58:	4b72      	ldr	r3, [pc, #456]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f66:	0919      	lsrs	r1, r3, #4
 8004f68:	4b70      	ldr	r3, [pc, #448]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8004f6a:	400b      	ands	r3, r1
 8004f6c:	496d      	ldr	r1, [pc, #436]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	610b      	str	r3, [r1, #16]
 8004f72:	e005      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004f74:	4b6b      	ldr	r3, [pc, #428]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	4a6a      	ldr	r2, [pc, #424]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f7a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f7e:	6113      	str	r3, [r2, #16]
 8004f80:	4b68      	ldr	r3, [pc, #416]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f8e:	4965      	ldr	r1, [pc, #404]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	670b      	str	r3, [r1, #112]	; 0x70
 8004f94:	e004      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f96:	7dfb      	ldrb	r3, [r7, #23]
 8004f98:	75bb      	strb	r3, [r7, #22]
 8004f9a:	e001      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f9c:	7dfb      	ldrb	r3, [r7, #23]
 8004f9e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d07e      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fb0:	2b28      	cmp	r3, #40	; 0x28
 8004fb2:	d867      	bhi.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004fb4:	a201      	add	r2, pc, #4	; (adr r2, 8004fbc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fba:	bf00      	nop
 8004fbc:	0800508b 	.word	0x0800508b
 8004fc0:	08005085 	.word	0x08005085
 8004fc4:	08005085 	.word	0x08005085
 8004fc8:	08005085 	.word	0x08005085
 8004fcc:	08005085 	.word	0x08005085
 8004fd0:	08005085 	.word	0x08005085
 8004fd4:	08005085 	.word	0x08005085
 8004fd8:	08005085 	.word	0x08005085
 8004fdc:	08005061 	.word	0x08005061
 8004fe0:	08005085 	.word	0x08005085
 8004fe4:	08005085 	.word	0x08005085
 8004fe8:	08005085 	.word	0x08005085
 8004fec:	08005085 	.word	0x08005085
 8004ff0:	08005085 	.word	0x08005085
 8004ff4:	08005085 	.word	0x08005085
 8004ff8:	08005085 	.word	0x08005085
 8004ffc:	08005073 	.word	0x08005073
 8005000:	08005085 	.word	0x08005085
 8005004:	08005085 	.word	0x08005085
 8005008:	08005085 	.word	0x08005085
 800500c:	08005085 	.word	0x08005085
 8005010:	08005085 	.word	0x08005085
 8005014:	08005085 	.word	0x08005085
 8005018:	08005085 	.word	0x08005085
 800501c:	0800508b 	.word	0x0800508b
 8005020:	08005085 	.word	0x08005085
 8005024:	08005085 	.word	0x08005085
 8005028:	08005085 	.word	0x08005085
 800502c:	08005085 	.word	0x08005085
 8005030:	08005085 	.word	0x08005085
 8005034:	08005085 	.word	0x08005085
 8005038:	08005085 	.word	0x08005085
 800503c:	0800508b 	.word	0x0800508b
 8005040:	08005085 	.word	0x08005085
 8005044:	08005085 	.word	0x08005085
 8005048:	08005085 	.word	0x08005085
 800504c:	08005085 	.word	0x08005085
 8005050:	08005085 	.word	0x08005085
 8005054:	08005085 	.word	0x08005085
 8005058:	08005085 	.word	0x08005085
 800505c:	0800508b 	.word	0x0800508b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3304      	adds	r3, #4
 8005064:	2101      	movs	r1, #1
 8005066:	4618      	mov	r0, r3
 8005068:	f000 fdf4 	bl	8005c54 <RCCEx_PLL2_Config>
 800506c:	4603      	mov	r3, r0
 800506e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005070:	e00c      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3324      	adds	r3, #36	; 0x24
 8005076:	2101      	movs	r1, #1
 8005078:	4618      	mov	r0, r3
 800507a:	f000 fe9d 	bl	8005db8 <RCCEx_PLL3_Config>
 800507e:	4603      	mov	r3, r0
 8005080:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005082:	e003      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	75fb      	strb	r3, [r7, #23]
      break;
 8005088:	e000      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800508a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800508c:	7dfb      	ldrb	r3, [r7, #23]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d109      	bne.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005092:	4b24      	ldr	r3, [pc, #144]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005096:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800509e:	4921      	ldr	r1, [pc, #132]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	654b      	str	r3, [r1, #84]	; 0x54
 80050a4:	e001      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a6:	7dfb      	ldrb	r3, [r7, #23]
 80050a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d03e      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ba:	2b05      	cmp	r3, #5
 80050bc:	d820      	bhi.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80050be:	a201      	add	r2, pc, #4	; (adr r2, 80050c4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80050c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c4:	08005107 	.word	0x08005107
 80050c8:	080050dd 	.word	0x080050dd
 80050cc:	080050ef 	.word	0x080050ef
 80050d0:	08005107 	.word	0x08005107
 80050d4:	08005107 	.word	0x08005107
 80050d8:	08005107 	.word	0x08005107
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	3304      	adds	r3, #4
 80050e0:	2101      	movs	r1, #1
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 fdb6 	bl	8005c54 <RCCEx_PLL2_Config>
 80050e8:	4603      	mov	r3, r0
 80050ea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80050ec:	e00c      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3324      	adds	r3, #36	; 0x24
 80050f2:	2101      	movs	r1, #1
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 fe5f 	bl	8005db8 <RCCEx_PLL3_Config>
 80050fa:	4603      	mov	r3, r0
 80050fc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80050fe:	e003      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	75fb      	strb	r3, [r7, #23]
      break;
 8005104:	e000      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8005106:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005108:	7dfb      	ldrb	r3, [r7, #23]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d110      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800510e:	4b05      	ldr	r3, [pc, #20]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005112:	f023 0207 	bic.w	r2, r3, #7
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800511a:	4902      	ldr	r1, [pc, #8]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800511c:	4313      	orrs	r3, r2
 800511e:	654b      	str	r3, [r1, #84]	; 0x54
 8005120:	e008      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8005122:	bf00      	nop
 8005124:	58024400 	.word	0x58024400
 8005128:	58024800 	.word	0x58024800
 800512c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005130:	7dfb      	ldrb	r3, [r7, #23]
 8005132:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b00      	cmp	r3, #0
 800513e:	d039      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005146:	2b05      	cmp	r3, #5
 8005148:	d820      	bhi.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x934>
 800514a:	a201      	add	r2, pc, #4	; (adr r2, 8005150 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800514c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005150:	08005193 	.word	0x08005193
 8005154:	08005169 	.word	0x08005169
 8005158:	0800517b 	.word	0x0800517b
 800515c:	08005193 	.word	0x08005193
 8005160:	08005193 	.word	0x08005193
 8005164:	08005193 	.word	0x08005193
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3304      	adds	r3, #4
 800516c:	2101      	movs	r1, #1
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fd70 	bl	8005c54 <RCCEx_PLL2_Config>
 8005174:	4603      	mov	r3, r0
 8005176:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005178:	e00c      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3324      	adds	r3, #36	; 0x24
 800517e:	2101      	movs	r1, #1
 8005180:	4618      	mov	r0, r3
 8005182:	f000 fe19 	bl	8005db8 <RCCEx_PLL3_Config>
 8005186:	4603      	mov	r3, r0
 8005188:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800518a:	e003      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	75fb      	strb	r3, [r7, #23]
      break;
 8005190:	e000      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8005192:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005194:	7dfb      	ldrb	r3, [r7, #23]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10a      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800519a:	4bb7      	ldr	r3, [pc, #732]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800519c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519e:	f023 0207 	bic.w	r2, r3, #7
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a8:	49b3      	ldr	r1, [pc, #716]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	658b      	str	r3, [r1, #88]	; 0x58
 80051ae:	e001      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b0:	7dfb      	ldrb	r3, [r7, #23]
 80051b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0320 	and.w	r3, r3, #32
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d04b      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051ca:	d02e      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80051cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051d0:	d828      	bhi.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80051d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d6:	d02a      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80051d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051dc:	d822      	bhi.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80051de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051e2:	d026      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80051e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051e8:	d81c      	bhi.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80051ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051ee:	d010      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80051f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051f4:	d816      	bhi.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d01d      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80051fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051fe:	d111      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3304      	adds	r3, #4
 8005204:	2100      	movs	r1, #0
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fd24 	bl	8005c54 <RCCEx_PLL2_Config>
 800520c:	4603      	mov	r3, r0
 800520e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005210:	e012      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	3324      	adds	r3, #36	; 0x24
 8005216:	2102      	movs	r1, #2
 8005218:	4618      	mov	r0, r3
 800521a:	f000 fdcd 	bl	8005db8 <RCCEx_PLL3_Config>
 800521e:	4603      	mov	r3, r0
 8005220:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005222:	e009      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	75fb      	strb	r3, [r7, #23]
      break;
 8005228:	e006      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800522a:	bf00      	nop
 800522c:	e004      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800522e:	bf00      	nop
 8005230:	e002      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005232:	bf00      	nop
 8005234:	e000      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005236:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005238:	7dfb      	ldrb	r3, [r7, #23]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10a      	bne.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800523e:	4b8e      	ldr	r3, [pc, #568]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005242:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800524c:	498a      	ldr	r1, [pc, #552]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800524e:	4313      	orrs	r3, r2
 8005250:	654b      	str	r3, [r1, #84]	; 0x54
 8005252:	e001      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005254:	7dfb      	ldrb	r3, [r7, #23]
 8005256:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005260:	2b00      	cmp	r3, #0
 8005262:	d04b      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800526a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800526e:	d02e      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005270:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005274:	d828      	bhi.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800527a:	d02a      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800527c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005280:	d822      	bhi.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005282:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005286:	d026      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005288:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800528c:	d81c      	bhi.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800528e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005292:	d010      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005294:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005298:	d816      	bhi.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800529a:	2b00      	cmp	r3, #0
 800529c:	d01d      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800529e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a2:	d111      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3304      	adds	r3, #4
 80052a8:	2100      	movs	r1, #0
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 fcd2 	bl	8005c54 <RCCEx_PLL2_Config>
 80052b0:	4603      	mov	r3, r0
 80052b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80052b4:	e012      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	3324      	adds	r3, #36	; 0x24
 80052ba:	2102      	movs	r1, #2
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 fd7b 	bl	8005db8 <RCCEx_PLL3_Config>
 80052c2:	4603      	mov	r3, r0
 80052c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80052c6:	e009      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	75fb      	strb	r3, [r7, #23]
      break;
 80052cc:	e006      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80052ce:	bf00      	nop
 80052d0:	e004      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80052d2:	bf00      	nop
 80052d4:	e002      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80052d6:	bf00      	nop
 80052d8:	e000      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80052da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052dc:	7dfb      	ldrb	r3, [r7, #23]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10a      	bne.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052e2:	4b65      	ldr	r3, [pc, #404]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80052e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052f0:	4961      	ldr	r1, [pc, #388]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	658b      	str	r3, [r1, #88]	; 0x58
 80052f6:	e001      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f8:	7dfb      	ldrb	r3, [r7, #23]
 80052fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005304:	2b00      	cmp	r3, #0
 8005306:	d04b      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800530e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005312:	d02e      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8005314:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005318:	d828      	bhi.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800531a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800531e:	d02a      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8005320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005324:	d822      	bhi.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005326:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800532a:	d026      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800532c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005330:	d81c      	bhi.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005332:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005336:	d010      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005338:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800533c:	d816      	bhi.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800533e:	2b00      	cmp	r3, #0
 8005340:	d01d      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005346:	d111      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3304      	adds	r3, #4
 800534c:	2100      	movs	r1, #0
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fc80 	bl	8005c54 <RCCEx_PLL2_Config>
 8005354:	4603      	mov	r3, r0
 8005356:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005358:	e012      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	3324      	adds	r3, #36	; 0x24
 800535e:	2102      	movs	r1, #2
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fd29 	bl	8005db8 <RCCEx_PLL3_Config>
 8005366:	4603      	mov	r3, r0
 8005368:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800536a:	e009      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	75fb      	strb	r3, [r7, #23]
      break;
 8005370:	e006      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005372:	bf00      	nop
 8005374:	e004      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005376:	bf00      	nop
 8005378:	e002      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800537a:	bf00      	nop
 800537c:	e000      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800537e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005380:	7dfb      	ldrb	r3, [r7, #23]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10a      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005386:	4b3c      	ldr	r3, [pc, #240]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005394:	4938      	ldr	r1, [pc, #224]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005396:	4313      	orrs	r3, r2
 8005398:	658b      	str	r3, [r1, #88]	; 0x58
 800539a:	e001      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800539c:	7dfb      	ldrb	r3, [r7, #23]
 800539e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0308 	and.w	r3, r3, #8
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d01a      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b6:	d10a      	bne.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3324      	adds	r3, #36	; 0x24
 80053bc:	2102      	movs	r1, #2
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 fcfa 	bl	8005db8 <RCCEx_PLL3_Config>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80053ce:	4b2a      	ldr	r3, [pc, #168]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80053d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053dc:	4926      	ldr	r1, [pc, #152]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0310 	and.w	r3, r3, #16
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d01a      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053f8:	d10a      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3324      	adds	r3, #36	; 0x24
 80053fe:	2102      	movs	r1, #2
 8005400:	4618      	mov	r0, r3
 8005402:	f000 fcd9 	bl	8005db8 <RCCEx_PLL3_Config>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005410:	4b19      	ldr	r3, [pc, #100]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005414:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800541e:	4916      	ldr	r1, [pc, #88]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005420:	4313      	orrs	r3, r2
 8005422:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d036      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005436:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800543a:	d01f      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800543c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005440:	d817      	bhi.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8005446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800544a:	d009      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800544c:	e011      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	3304      	adds	r3, #4
 8005452:	2100      	movs	r1, #0
 8005454:	4618      	mov	r0, r3
 8005456:	f000 fbfd 	bl	8005c54 <RCCEx_PLL2_Config>
 800545a:	4603      	mov	r3, r0
 800545c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800545e:	e00e      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3324      	adds	r3, #36	; 0x24
 8005464:	2102      	movs	r1, #2
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fca6 	bl	8005db8 <RCCEx_PLL3_Config>
 800546c:	4603      	mov	r3, r0
 800546e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005470:	e005      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	75fb      	strb	r3, [r7, #23]
      break;
 8005476:	e002      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005478:	58024400 	.word	0x58024400
      break;
 800547c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800547e:	7dfb      	ldrb	r3, [r7, #23]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10a      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005484:	4b93      	ldr	r3, [pc, #588]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005488:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005492:	4990      	ldr	r1, [pc, #576]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005494:	4313      	orrs	r3, r2
 8005496:	658b      	str	r3, [r1, #88]	; 0x58
 8005498:	e001      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800549a:	7dfb      	ldrb	r3, [r7, #23]
 800549c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d033      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80054b4:	d01c      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80054b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80054ba:	d816      	bhi.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80054bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054c0:	d003      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80054c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054c6:	d007      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80054c8:	e00f      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ca:	4b82      	ldr	r3, [pc, #520]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ce:	4a81      	ldr	r2, [pc, #516]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80054d6:	e00c      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3324      	adds	r3, #36	; 0x24
 80054dc:	2101      	movs	r1, #1
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fc6a 	bl	8005db8 <RCCEx_PLL3_Config>
 80054e4:	4603      	mov	r3, r0
 80054e6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80054e8:	e003      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	75fb      	strb	r3, [r7, #23]
      break;
 80054ee:	e000      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80054f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054f2:	7dfb      	ldrb	r3, [r7, #23]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10a      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054f8:	4b76      	ldr	r3, [pc, #472]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005506:	4973      	ldr	r1, [pc, #460]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005508:	4313      	orrs	r3, r2
 800550a:	654b      	str	r3, [r1, #84]	; 0x54
 800550c:	e001      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800550e:	7dfb      	ldrb	r3, [r7, #23]
 8005510:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d029      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8005526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800552a:	d007      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800552c:	e00f      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800552e:	4b69      	ldr	r3, [pc, #420]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005532:	4a68      	ldr	r2, [pc, #416]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005538:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800553a:	e00b      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3304      	adds	r3, #4
 8005540:	2102      	movs	r1, #2
 8005542:	4618      	mov	r0, r3
 8005544:	f000 fb86 	bl	8005c54 <RCCEx_PLL2_Config>
 8005548:	4603      	mov	r3, r0
 800554a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800554c:	e002      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	75fb      	strb	r3, [r7, #23]
      break;
 8005552:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005554:	7dfb      	ldrb	r3, [r7, #23]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d109      	bne.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800555a:	4b5e      	ldr	r3, [pc, #376]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800555c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800555e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005566:	495b      	ldr	r1, [pc, #364]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005568:	4313      	orrs	r3, r2
 800556a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800556c:	e001      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800556e:	7dfb      	ldrb	r3, [r7, #23]
 8005570:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	3324      	adds	r3, #36	; 0x24
 8005582:	2102      	movs	r1, #2
 8005584:	4618      	mov	r0, r3
 8005586:	f000 fc17 	bl	8005db8 <RCCEx_PLL3_Config>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d030      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055a8:	d017      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80055aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ae:	d811      	bhi.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80055b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055b4:	d013      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80055b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055ba:	d80b      	bhi.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d010      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80055c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055c4:	d106      	bne.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055c6:	4b43      	ldr	r3, [pc, #268]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ca:	4a42      	ldr	r2, [pc, #264]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80055d2:	e007      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	75fb      	strb	r3, [r7, #23]
      break;
 80055d8:	e004      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80055da:	bf00      	nop
 80055dc:	e002      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80055de:	bf00      	nop
 80055e0:	e000      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80055e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055e4:	7dfb      	ldrb	r3, [r7, #23]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d109      	bne.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055ea:	4b3a      	ldr	r3, [pc, #232]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055f6:	4937      	ldr	r1, [pc, #220]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	654b      	str	r3, [r1, #84]	; 0x54
 80055fc:	e001      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055fe:	7dfb      	ldrb	r3, [r7, #23]
 8005600:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d008      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800560e:	4b31      	ldr	r3, [pc, #196]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005612:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561a:	492e      	ldr	r1, [pc, #184]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800561c:	4313      	orrs	r3, r2
 800561e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d009      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800562c:	4b29      	ldr	r3, [pc, #164]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800563a:	4926      	ldr	r1, [pc, #152]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800563c:	4313      	orrs	r3, r2
 800563e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d008      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800564c:	4b21      	ldr	r3, [pc, #132]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800564e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005650:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005658:	491e      	ldr	r1, [pc, #120]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800565a:	4313      	orrs	r3, r2
 800565c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00d      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800566a:	4b1a      	ldr	r3, [pc, #104]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	4a19      	ldr	r2, [pc, #100]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005670:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005674:	6113      	str	r3, [r2, #16]
 8005676:	4b17      	ldr	r3, [pc, #92]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005678:	691a      	ldr	r2, [r3, #16]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005680:	4914      	ldr	r1, [pc, #80]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005682:	4313      	orrs	r3, r2
 8005684:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	da08      	bge.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800568e:	4b11      	ldr	r3, [pc, #68]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005692:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800569a:	490e      	ldr	r1, [pc, #56]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800569c:	4313      	orrs	r3, r2
 800569e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d009      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80056ac:	4b09      	ldr	r3, [pc, #36]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ba:	4906      	ldr	r1, [pc, #24]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80056c0:	7dbb      	ldrb	r3, [r7, #22]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	e000      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	58024400 	.word	0x58024400

080056d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80056dc:	f7ff f860 	bl	80047a0 <HAL_RCC_GetHCLKFreq>
 80056e0:	4602      	mov	r2, r0
 80056e2:	4b06      	ldr	r3, [pc, #24]	; (80056fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	091b      	lsrs	r3, r3, #4
 80056e8:	f003 0307 	and.w	r3, r3, #7
 80056ec:	4904      	ldr	r1, [pc, #16]	; (8005700 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80056ee:	5ccb      	ldrb	r3, [r1, r3]
 80056f0:	f003 031f 	and.w	r3, r3, #31
 80056f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	58024400 	.word	0x58024400
 8005700:	080084d8 	.word	0x080084d8

08005704 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005704:	b480      	push	{r7}
 8005706:	b089      	sub	sp, #36	; 0x24
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800570c:	4ba1      	ldr	r3, [pc, #644]	; (8005994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800570e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005710:	f003 0303 	and.w	r3, r3, #3
 8005714:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005716:	4b9f      	ldr	r3, [pc, #636]	; (8005994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571a:	0b1b      	lsrs	r3, r3, #12
 800571c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005720:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005722:	4b9c      	ldr	r3, [pc, #624]	; (8005994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005726:	091b      	lsrs	r3, r3, #4
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800572e:	4b99      	ldr	r3, [pc, #612]	; (8005994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005732:	08db      	lsrs	r3, r3, #3
 8005734:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	fb02 f303 	mul.w	r3, r2, r3
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005746:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 8111 	beq.w	8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	2b02      	cmp	r3, #2
 8005756:	f000 8083 	beq.w	8005860 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	2b02      	cmp	r3, #2
 800575e:	f200 80a1 	bhi.w	80058a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d003      	beq.n	8005770 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d056      	beq.n	800581c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800576e:	e099      	b.n	80058a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005770:	4b88      	ldr	r3, [pc, #544]	; (8005994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0320 	and.w	r3, r3, #32
 8005778:	2b00      	cmp	r3, #0
 800577a:	d02d      	beq.n	80057d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800577c:	4b85      	ldr	r3, [pc, #532]	; (8005994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	08db      	lsrs	r3, r3, #3
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	4a84      	ldr	r2, [pc, #528]	; (8005998 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005788:	fa22 f303 	lsr.w	r3, r2, r3
 800578c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	ee07 3a90 	vmov	s15, r3
 8005794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	ee07 3a90 	vmov	s15, r3
 800579e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057a6:	4b7b      	ldr	r3, [pc, #492]	; (8005994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ae:	ee07 3a90 	vmov	s15, r3
 80057b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80057ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800599c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80057d6:	e087      	b.n	80058e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	ee07 3a90 	vmov	s15, r3
 80057de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80059a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80057e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ea:	4b6a      	ldr	r3, [pc, #424]	; (8005994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f2:	ee07 3a90 	vmov	s15, r3
 80057f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80057fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800599c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800580a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800580e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005816:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800581a:	e065      	b.n	80058e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	ee07 3a90 	vmov	s15, r3
 8005822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005826:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80059a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800582a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800582e:	4b59      	ldr	r3, [pc, #356]	; (8005994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005836:	ee07 3a90 	vmov	s15, r3
 800583a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800583e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005842:	eddf 5a56 	vldr	s11, [pc, #344]	; 800599c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800584a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800584e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800585a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800585e:	e043      	b.n	80058e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	ee07 3a90 	vmov	s15, r3
 8005866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80059a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800586e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005872:	4b48      	ldr	r3, [pc, #288]	; (8005994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005882:	ed97 6a03 	vldr	s12, [r7, #12]
 8005886:	eddf 5a45 	vldr	s11, [pc, #276]	; 800599c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800588a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800588e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800589a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800589e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058a2:	e021      	b.n	80058e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	ee07 3a90 	vmov	s15, r3
 80058aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80059a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80058b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058b6:	4b37      	ldr	r3, [pc, #220]	; (8005994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800599c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80058e8:	4b2a      	ldr	r3, [pc, #168]	; (8005994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ec:	0a5b      	lsrs	r3, r3, #9
 80058ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058f2:	ee07 3a90 	vmov	s15, r3
 80058f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005902:	edd7 6a07 	vldr	s13, [r7, #28]
 8005906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800590a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800590e:	ee17 2a90 	vmov	r2, s15
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005916:	4b1f      	ldr	r3, [pc, #124]	; (8005994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591a:	0c1b      	lsrs	r3, r3, #16
 800591c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005920:	ee07 3a90 	vmov	s15, r3
 8005924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005928:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800592c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005930:	edd7 6a07 	vldr	s13, [r7, #28]
 8005934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800593c:	ee17 2a90 	vmov	r2, s15
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005944:	4b13      	ldr	r3, [pc, #76]	; (8005994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005948:	0e1b      	lsrs	r3, r3, #24
 800594a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800594e:	ee07 3a90 	vmov	s15, r3
 8005952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005956:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800595a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800595e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800596a:	ee17 2a90 	vmov	r2, s15
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005972:	e008      	b.n	8005986 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	609a      	str	r2, [r3, #8]
}
 8005986:	bf00      	nop
 8005988:	3724      	adds	r7, #36	; 0x24
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	58024400 	.word	0x58024400
 8005998:	03d09000 	.word	0x03d09000
 800599c:	46000000 	.word	0x46000000
 80059a0:	4c742400 	.word	0x4c742400
 80059a4:	4a742400 	.word	0x4a742400
 80059a8:	4c371b00 	.word	0x4c371b00

080059ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b089      	sub	sp, #36	; 0x24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059b4:	4ba1      	ldr	r3, [pc, #644]	; (8005c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b8:	f003 0303 	and.w	r3, r3, #3
 80059bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80059be:	4b9f      	ldr	r3, [pc, #636]	; (8005c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c2:	0d1b      	lsrs	r3, r3, #20
 80059c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80059ca:	4b9c      	ldr	r3, [pc, #624]	; (8005c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ce:	0a1b      	lsrs	r3, r3, #8
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80059d6:	4b99      	ldr	r3, [pc, #612]	; (8005c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059da:	08db      	lsrs	r3, r3, #3
 80059dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	fb02 f303 	mul.w	r3, r2, r3
 80059e6:	ee07 3a90 	vmov	s15, r3
 80059ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 8111 	beq.w	8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	f000 8083 	beq.w	8005b08 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	f200 80a1 	bhi.w	8005b4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d056      	beq.n	8005ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005a16:	e099      	b.n	8005b4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a18:	4b88      	ldr	r3, [pc, #544]	; (8005c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0320 	and.w	r3, r3, #32
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d02d      	beq.n	8005a80 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a24:	4b85      	ldr	r3, [pc, #532]	; (8005c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	08db      	lsrs	r3, r3, #3
 8005a2a:	f003 0303 	and.w	r3, r3, #3
 8005a2e:	4a84      	ldr	r2, [pc, #528]	; (8005c40 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005a30:	fa22 f303 	lsr.w	r3, r2, r3
 8005a34:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	ee07 3a90 	vmov	s15, r3
 8005a3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	ee07 3a90 	vmov	s15, r3
 8005a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a4e:	4b7b      	ldr	r3, [pc, #492]	; (8005c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a56:	ee07 3a90 	vmov	s15, r3
 8005a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a62:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005c44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a7a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005a7e:	e087      	b.n	8005b90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	ee07 3a90 	vmov	s15, r3
 8005a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005c48 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a92:	4b6a      	ldr	r3, [pc, #424]	; (8005c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a9a:	ee07 3a90 	vmov	s15, r3
 8005a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aa6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005c44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005abe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ac2:	e065      	b.n	8005b90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	ee07 3a90 	vmov	s15, r3
 8005aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ace:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005c4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ad6:	4b59      	ldr	r3, [pc, #356]	; (8005c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ade:	ee07 3a90 	vmov	s15, r3
 8005ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ae6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005c44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b06:	e043      	b.n	8005b90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	ee07 3a90 	vmov	s15, r3
 8005b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b1a:	4b48      	ldr	r3, [pc, #288]	; (8005c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b22:	ee07 3a90 	vmov	s15, r3
 8005b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005c44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b4a:	e021      	b.n	8005b90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	ee07 3a90 	vmov	s15, r3
 8005b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005c4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b5e:	4b37      	ldr	r3, [pc, #220]	; (8005c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b66:	ee07 3a90 	vmov	s15, r3
 8005b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b72:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005c44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b8e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005b90:	4b2a      	ldr	r3, [pc, #168]	; (8005c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b94:	0a5b      	lsrs	r3, r3, #9
 8005b96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b9a:	ee07 3a90 	vmov	s15, r3
 8005b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ba2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ba6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005baa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bb6:	ee17 2a90 	vmov	r2, s15
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005bbe:	4b1f      	ldr	r3, [pc, #124]	; (8005c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	0c1b      	lsrs	r3, r3, #16
 8005bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bc8:	ee07 3a90 	vmov	s15, r3
 8005bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005be0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005be4:	ee17 2a90 	vmov	r2, s15
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005bec:	4b13      	ldr	r3, [pc, #76]	; (8005c3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	0e1b      	lsrs	r3, r3, #24
 8005bf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c06:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c12:	ee17 2a90 	vmov	r2, s15
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005c1a:	e008      	b.n	8005c2e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	609a      	str	r2, [r3, #8]
}
 8005c2e:	bf00      	nop
 8005c30:	3724      	adds	r7, #36	; 0x24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	58024400 	.word	0x58024400
 8005c40:	03d09000 	.word	0x03d09000
 8005c44:	46000000 	.word	0x46000000
 8005c48:	4c742400 	.word	0x4c742400
 8005c4c:	4a742400 	.word	0x4a742400
 8005c50:	4c371b00 	.word	0x4c371b00

08005c54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c62:	4b53      	ldr	r3, [pc, #332]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	d101      	bne.n	8005c72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e099      	b.n	8005da6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005c72:	4b4f      	ldr	r3, [pc, #316]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a4e      	ldr	r2, [pc, #312]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005c78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c7e:	f7fb fce5 	bl	800164c <HAL_GetTick>
 8005c82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c84:	e008      	b.n	8005c98 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005c86:	f7fb fce1 	bl	800164c <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e086      	b.n	8005da6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c98:	4b45      	ldr	r3, [pc, #276]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1f0      	bne.n	8005c86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005ca4:	4b42      	ldr	r3, [pc, #264]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	031b      	lsls	r3, r3, #12
 8005cb2:	493f      	ldr	r1, [pc, #252]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	628b      	str	r3, [r1, #40]	; 0x28
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	025b      	lsls	r3, r3, #9
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	041b      	lsls	r3, r3, #16
 8005cd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	061b      	lsls	r3, r3, #24
 8005ce4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ce8:	4931      	ldr	r1, [pc, #196]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005cee:	4b30      	ldr	r3, [pc, #192]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	492d      	ldr	r1, [pc, #180]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005d00:	4b2b      	ldr	r3, [pc, #172]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d04:	f023 0220 	bic.w	r2, r3, #32
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	4928      	ldr	r1, [pc, #160]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005d12:	4b27      	ldr	r3, [pc, #156]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d16:	4a26      	ldr	r2, [pc, #152]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d18:	f023 0310 	bic.w	r3, r3, #16
 8005d1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005d1e:	4b24      	ldr	r3, [pc, #144]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d22:	4b24      	ldr	r3, [pc, #144]	; (8005db4 <RCCEx_PLL2_Config+0x160>)
 8005d24:	4013      	ands	r3, r2
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	69d2      	ldr	r2, [r2, #28]
 8005d2a:	00d2      	lsls	r2, r2, #3
 8005d2c:	4920      	ldr	r1, [pc, #128]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005d32:	4b1f      	ldr	r3, [pc, #124]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d36:	4a1e      	ldr	r2, [pc, #120]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d38:	f043 0310 	orr.w	r3, r3, #16
 8005d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d106      	bne.n	8005d52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005d44:	4b1a      	ldr	r3, [pc, #104]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d48:	4a19      	ldr	r2, [pc, #100]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d50:	e00f      	b.n	8005d72 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d106      	bne.n	8005d66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005d58:	4b15      	ldr	r3, [pc, #84]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5c:	4a14      	ldr	r2, [pc, #80]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d64:	e005      	b.n	8005d72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005d66:	4b12      	ldr	r3, [pc, #72]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6a:	4a11      	ldr	r2, [pc, #68]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005d72:	4b0f      	ldr	r3, [pc, #60]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a0e      	ldr	r2, [pc, #56]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d7e:	f7fb fc65 	bl	800164c <HAL_GetTick>
 8005d82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d84:	e008      	b.n	8005d98 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005d86:	f7fb fc61 	bl	800164c <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d901      	bls.n	8005d98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e006      	b.n	8005da6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d98:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0f0      	beq.n	8005d86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	58024400 	.word	0x58024400
 8005db4:	ffff0007 	.word	0xffff0007

08005db8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005dc6:	4b53      	ldr	r3, [pc, #332]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dca:	f003 0303 	and.w	r3, r3, #3
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	d101      	bne.n	8005dd6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e099      	b.n	8005f0a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005dd6:	4b4f      	ldr	r3, [pc, #316]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a4e      	ldr	r2, [pc, #312]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005de0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005de2:	f7fb fc33 	bl	800164c <HAL_GetTick>
 8005de6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005de8:	e008      	b.n	8005dfc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005dea:	f7fb fc2f 	bl	800164c <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d901      	bls.n	8005dfc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e086      	b.n	8005f0a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005dfc:	4b45      	ldr	r3, [pc, #276]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1f0      	bne.n	8005dea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005e08:	4b42      	ldr	r3, [pc, #264]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	051b      	lsls	r3, r3, #20
 8005e16:	493f      	ldr	r1, [pc, #252]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	628b      	str	r3, [r1, #40]	; 0x28
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	3b01      	subs	r3, #1
 8005e22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	025b      	lsls	r3, r3, #9
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	431a      	orrs	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	3b01      	subs	r3, #1
 8005e38:	041b      	lsls	r3, r3, #16
 8005e3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	3b01      	subs	r3, #1
 8005e46:	061b      	lsls	r3, r3, #24
 8005e48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e4c:	4931      	ldr	r1, [pc, #196]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005e52:	4b30      	ldr	r3, [pc, #192]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	492d      	ldr	r1, [pc, #180]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005e64:	4b2b      	ldr	r3, [pc, #172]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	4928      	ldr	r1, [pc, #160]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005e76:	4b27      	ldr	r3, [pc, #156]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7a:	4a26      	ldr	r2, [pc, #152]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005e7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005e82:	4b24      	ldr	r3, [pc, #144]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005e84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e86:	4b24      	ldr	r3, [pc, #144]	; (8005f18 <RCCEx_PLL3_Config+0x160>)
 8005e88:	4013      	ands	r3, r2
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	69d2      	ldr	r2, [r2, #28]
 8005e8e:	00d2      	lsls	r2, r2, #3
 8005e90:	4920      	ldr	r1, [pc, #128]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005e96:	4b1f      	ldr	r3, [pc, #124]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9a:	4a1e      	ldr	r2, [pc, #120]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ea0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d106      	bne.n	8005eb6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005ea8:	4b1a      	ldr	r3, [pc, #104]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eac:	4a19      	ldr	r2, [pc, #100]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005eae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005eb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005eb4:	e00f      	b.n	8005ed6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d106      	bne.n	8005eca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ebc:	4b15      	ldr	r3, [pc, #84]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec0:	4a14      	ldr	r2, [pc, #80]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005ec2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ec6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ec8:	e005      	b.n	8005ed6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005eca:	4b12      	ldr	r3, [pc, #72]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ece:	4a11      	ldr	r2, [pc, #68]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005ed0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ed4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005ed6:	4b0f      	ldr	r3, [pc, #60]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a0e      	ldr	r2, [pc, #56]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ee2:	f7fb fbb3 	bl	800164c <HAL_GetTick>
 8005ee6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ee8:	e008      	b.n	8005efc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005eea:	f7fb fbaf 	bl	800164c <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d901      	bls.n	8005efc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e006      	b.n	8005f0a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005efc:	4b05      	ldr	r3, [pc, #20]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d0f0      	beq.n	8005eea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	58024400 	.word	0x58024400
 8005f18:	ffff0007 	.word	0xffff0007

08005f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e049      	b.n	8005fc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d106      	bne.n	8005f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7fa ffaa 	bl	8000e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	3304      	adds	r3, #4
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4610      	mov	r0, r2
 8005f5c:	f000 fa9a 	bl	8006494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b082      	sub	sp, #8
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e049      	b.n	8006070 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d106      	bne.n	8005ff6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f841 	bl	8006078 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	3304      	adds	r3, #4
 8006006:	4619      	mov	r1, r3
 8006008:	4610      	mov	r0, r2
 800600a:	f000 fa43 	bl	8006494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d101      	bne.n	80060a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80060a2:	2302      	movs	r3, #2
 80060a4:	e0fd      	b.n	80062a2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b14      	cmp	r3, #20
 80060b2:	f200 80f0 	bhi.w	8006296 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80060b6:	a201      	add	r2, pc, #4	; (adr r2, 80060bc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80060b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060bc:	08006111 	.word	0x08006111
 80060c0:	08006297 	.word	0x08006297
 80060c4:	08006297 	.word	0x08006297
 80060c8:	08006297 	.word	0x08006297
 80060cc:	08006151 	.word	0x08006151
 80060d0:	08006297 	.word	0x08006297
 80060d4:	08006297 	.word	0x08006297
 80060d8:	08006297 	.word	0x08006297
 80060dc:	08006193 	.word	0x08006193
 80060e0:	08006297 	.word	0x08006297
 80060e4:	08006297 	.word	0x08006297
 80060e8:	08006297 	.word	0x08006297
 80060ec:	080061d3 	.word	0x080061d3
 80060f0:	08006297 	.word	0x08006297
 80060f4:	08006297 	.word	0x08006297
 80060f8:	08006297 	.word	0x08006297
 80060fc:	08006215 	.word	0x08006215
 8006100:	08006297 	.word	0x08006297
 8006104:	08006297 	.word	0x08006297
 8006108:	08006297 	.word	0x08006297
 800610c:	08006255 	.word	0x08006255
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68b9      	ldr	r1, [r7, #8]
 8006116:	4618      	mov	r0, r3
 8006118:	f000 fa56 	bl	80065c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	699a      	ldr	r2, [r3, #24]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f042 0208 	orr.w	r2, r2, #8
 800612a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699a      	ldr	r2, [r3, #24]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0204 	bic.w	r2, r2, #4
 800613a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6999      	ldr	r1, [r3, #24]
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	691a      	ldr	r2, [r3, #16]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	619a      	str	r2, [r3, #24]
      break;
 800614e:	e0a3      	b.n	8006298 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68b9      	ldr	r1, [r7, #8]
 8006156:	4618      	mov	r0, r3
 8006158:	f000 fac6 	bl	80066e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699a      	ldr	r2, [r3, #24]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800616a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800617a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6999      	ldr	r1, [r3, #24]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	021a      	lsls	r2, r3, #8
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	619a      	str	r2, [r3, #24]
      break;
 8006190:	e082      	b.n	8006298 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68b9      	ldr	r1, [r7, #8]
 8006198:	4618      	mov	r0, r3
 800619a:	f000 fb2f 	bl	80067fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	69da      	ldr	r2, [r3, #28]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f042 0208 	orr.w	r2, r2, #8
 80061ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	69da      	ldr	r2, [r3, #28]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0204 	bic.w	r2, r2, #4
 80061bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69d9      	ldr	r1, [r3, #28]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	691a      	ldr	r2, [r3, #16]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	61da      	str	r2, [r3, #28]
      break;
 80061d0:	e062      	b.n	8006298 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68b9      	ldr	r1, [r7, #8]
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 fb95 	bl	8006908 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69da      	ldr	r2, [r3, #28]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69da      	ldr	r2, [r3, #28]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69d9      	ldr	r1, [r3, #28]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	021a      	lsls	r2, r3, #8
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	61da      	str	r2, [r3, #28]
      break;
 8006212:	e041      	b.n	8006298 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68b9      	ldr	r1, [r7, #8]
 800621a:	4618      	mov	r0, r3
 800621c:	f000 fbdc 	bl	80069d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f042 0208 	orr.w	r2, r2, #8
 800622e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 0204 	bic.w	r2, r2, #4
 800623e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	691a      	ldr	r2, [r3, #16]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006252:	e021      	b.n	8006298 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68b9      	ldr	r1, [r7, #8]
 800625a:	4618      	mov	r0, r3
 800625c:	f000 fc1e 	bl	8006a9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800626e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800627e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	021a      	lsls	r2, r3, #8
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	430a      	orrs	r2, r1
 8006292:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006294:	e000      	b.n	8006298 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006296:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop

080062ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d101      	bne.n	80062c4 <HAL_TIM_ConfigClockSource+0x18>
 80062c0:	2302      	movs	r3, #2
 80062c2:	e0db      	b.n	800647c <HAL_TIM_ConfigClockSource+0x1d0>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2202      	movs	r2, #2
 80062d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	4b69      	ldr	r3, [pc, #420]	; (8006484 <HAL_TIM_ConfigClockSource+0x1d8>)
 80062e0:	4013      	ands	r3, r2
 80062e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a63      	ldr	r2, [pc, #396]	; (8006488 <HAL_TIM_ConfigClockSource+0x1dc>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	f000 80a9 	beq.w	8006452 <HAL_TIM_ConfigClockSource+0x1a6>
 8006300:	4a61      	ldr	r2, [pc, #388]	; (8006488 <HAL_TIM_ConfigClockSource+0x1dc>)
 8006302:	4293      	cmp	r3, r2
 8006304:	f200 80ae 	bhi.w	8006464 <HAL_TIM_ConfigClockSource+0x1b8>
 8006308:	4a60      	ldr	r2, [pc, #384]	; (800648c <HAL_TIM_ConfigClockSource+0x1e0>)
 800630a:	4293      	cmp	r3, r2
 800630c:	f000 80a1 	beq.w	8006452 <HAL_TIM_ConfigClockSource+0x1a6>
 8006310:	4a5e      	ldr	r2, [pc, #376]	; (800648c <HAL_TIM_ConfigClockSource+0x1e0>)
 8006312:	4293      	cmp	r3, r2
 8006314:	f200 80a6 	bhi.w	8006464 <HAL_TIM_ConfigClockSource+0x1b8>
 8006318:	4a5d      	ldr	r2, [pc, #372]	; (8006490 <HAL_TIM_ConfigClockSource+0x1e4>)
 800631a:	4293      	cmp	r3, r2
 800631c:	f000 8099 	beq.w	8006452 <HAL_TIM_ConfigClockSource+0x1a6>
 8006320:	4a5b      	ldr	r2, [pc, #364]	; (8006490 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006322:	4293      	cmp	r3, r2
 8006324:	f200 809e 	bhi.w	8006464 <HAL_TIM_ConfigClockSource+0x1b8>
 8006328:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800632c:	f000 8091 	beq.w	8006452 <HAL_TIM_ConfigClockSource+0x1a6>
 8006330:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006334:	f200 8096 	bhi.w	8006464 <HAL_TIM_ConfigClockSource+0x1b8>
 8006338:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800633c:	f000 8089 	beq.w	8006452 <HAL_TIM_ConfigClockSource+0x1a6>
 8006340:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006344:	f200 808e 	bhi.w	8006464 <HAL_TIM_ConfigClockSource+0x1b8>
 8006348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800634c:	d03e      	beq.n	80063cc <HAL_TIM_ConfigClockSource+0x120>
 800634e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006352:	f200 8087 	bhi.w	8006464 <HAL_TIM_ConfigClockSource+0x1b8>
 8006356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800635a:	f000 8085 	beq.w	8006468 <HAL_TIM_ConfigClockSource+0x1bc>
 800635e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006362:	d87f      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x1b8>
 8006364:	2b70      	cmp	r3, #112	; 0x70
 8006366:	d01a      	beq.n	800639e <HAL_TIM_ConfigClockSource+0xf2>
 8006368:	2b70      	cmp	r3, #112	; 0x70
 800636a:	d87b      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x1b8>
 800636c:	2b60      	cmp	r3, #96	; 0x60
 800636e:	d050      	beq.n	8006412 <HAL_TIM_ConfigClockSource+0x166>
 8006370:	2b60      	cmp	r3, #96	; 0x60
 8006372:	d877      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x1b8>
 8006374:	2b50      	cmp	r3, #80	; 0x50
 8006376:	d03c      	beq.n	80063f2 <HAL_TIM_ConfigClockSource+0x146>
 8006378:	2b50      	cmp	r3, #80	; 0x50
 800637a:	d873      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x1b8>
 800637c:	2b40      	cmp	r3, #64	; 0x40
 800637e:	d058      	beq.n	8006432 <HAL_TIM_ConfigClockSource+0x186>
 8006380:	2b40      	cmp	r3, #64	; 0x40
 8006382:	d86f      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x1b8>
 8006384:	2b30      	cmp	r3, #48	; 0x30
 8006386:	d064      	beq.n	8006452 <HAL_TIM_ConfigClockSource+0x1a6>
 8006388:	2b30      	cmp	r3, #48	; 0x30
 800638a:	d86b      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x1b8>
 800638c:	2b20      	cmp	r3, #32
 800638e:	d060      	beq.n	8006452 <HAL_TIM_ConfigClockSource+0x1a6>
 8006390:	2b20      	cmp	r3, #32
 8006392:	d867      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x1b8>
 8006394:	2b00      	cmp	r3, #0
 8006396:	d05c      	beq.n	8006452 <HAL_TIM_ConfigClockSource+0x1a6>
 8006398:	2b10      	cmp	r3, #16
 800639a:	d05a      	beq.n	8006452 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800639c:	e062      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6818      	ldr	r0, [r3, #0]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	6899      	ldr	r1, [r3, #8]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f000 fc57 	bl	8006c60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	609a      	str	r2, [r3, #8]
      break;
 80063ca:	e04e      	b.n	800646a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6818      	ldr	r0, [r3, #0]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	6899      	ldr	r1, [r3, #8]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	f000 fc40 	bl	8006c60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689a      	ldr	r2, [r3, #8]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063ee:	609a      	str	r2, [r3, #8]
      break;
 80063f0:	e03b      	b.n	800646a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6818      	ldr	r0, [r3, #0]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	6859      	ldr	r1, [r3, #4]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	461a      	mov	r2, r3
 8006400:	f000 fbb0 	bl	8006b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2150      	movs	r1, #80	; 0x50
 800640a:	4618      	mov	r0, r3
 800640c:	f000 fc0a 	bl	8006c24 <TIM_ITRx_SetConfig>
      break;
 8006410:	e02b      	b.n	800646a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6818      	ldr	r0, [r3, #0]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	6859      	ldr	r1, [r3, #4]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	461a      	mov	r2, r3
 8006420:	f000 fbcf 	bl	8006bc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2160      	movs	r1, #96	; 0x60
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fbfa 	bl	8006c24 <TIM_ITRx_SetConfig>
      break;
 8006430:	e01b      	b.n	800646a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6818      	ldr	r0, [r3, #0]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	6859      	ldr	r1, [r3, #4]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	461a      	mov	r2, r3
 8006440:	f000 fb90 	bl	8006b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2140      	movs	r1, #64	; 0x40
 800644a:	4618      	mov	r0, r3
 800644c:	f000 fbea 	bl	8006c24 <TIM_ITRx_SetConfig>
      break;
 8006450:	e00b      	b.n	800646a <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4619      	mov	r1, r3
 800645c:	4610      	mov	r0, r2
 800645e:	f000 fbe1 	bl	8006c24 <TIM_ITRx_SetConfig>
        break;
 8006462:	e002      	b.n	800646a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8006464:	bf00      	nop
 8006466:	e000      	b.n	800646a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8006468:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	ffceff88 	.word	0xffceff88
 8006488:	00100040 	.word	0x00100040
 800648c:	00100030 	.word	0x00100030
 8006490:	00100020 	.word	0x00100020

08006494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a40      	ldr	r2, [pc, #256]	; (80065a8 <TIM_Base_SetConfig+0x114>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d013      	beq.n	80064d4 <TIM_Base_SetConfig+0x40>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b2:	d00f      	beq.n	80064d4 <TIM_Base_SetConfig+0x40>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a3d      	ldr	r2, [pc, #244]	; (80065ac <TIM_Base_SetConfig+0x118>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d00b      	beq.n	80064d4 <TIM_Base_SetConfig+0x40>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a3c      	ldr	r2, [pc, #240]	; (80065b0 <TIM_Base_SetConfig+0x11c>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d007      	beq.n	80064d4 <TIM_Base_SetConfig+0x40>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a3b      	ldr	r2, [pc, #236]	; (80065b4 <TIM_Base_SetConfig+0x120>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d003      	beq.n	80064d4 <TIM_Base_SetConfig+0x40>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a3a      	ldr	r2, [pc, #232]	; (80065b8 <TIM_Base_SetConfig+0x124>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d108      	bne.n	80064e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a2f      	ldr	r2, [pc, #188]	; (80065a8 <TIM_Base_SetConfig+0x114>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d01f      	beq.n	800652e <TIM_Base_SetConfig+0x9a>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f4:	d01b      	beq.n	800652e <TIM_Base_SetConfig+0x9a>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a2c      	ldr	r2, [pc, #176]	; (80065ac <TIM_Base_SetConfig+0x118>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d017      	beq.n	800652e <TIM_Base_SetConfig+0x9a>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a2b      	ldr	r2, [pc, #172]	; (80065b0 <TIM_Base_SetConfig+0x11c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d013      	beq.n	800652e <TIM_Base_SetConfig+0x9a>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a2a      	ldr	r2, [pc, #168]	; (80065b4 <TIM_Base_SetConfig+0x120>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d00f      	beq.n	800652e <TIM_Base_SetConfig+0x9a>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a29      	ldr	r2, [pc, #164]	; (80065b8 <TIM_Base_SetConfig+0x124>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d00b      	beq.n	800652e <TIM_Base_SetConfig+0x9a>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a28      	ldr	r2, [pc, #160]	; (80065bc <TIM_Base_SetConfig+0x128>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d007      	beq.n	800652e <TIM_Base_SetConfig+0x9a>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a27      	ldr	r2, [pc, #156]	; (80065c0 <TIM_Base_SetConfig+0x12c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d003      	beq.n	800652e <TIM_Base_SetConfig+0x9a>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a26      	ldr	r2, [pc, #152]	; (80065c4 <TIM_Base_SetConfig+0x130>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d108      	bne.n	8006540 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	4313      	orrs	r3, r2
 800653e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a10      	ldr	r2, [pc, #64]	; (80065a8 <TIM_Base_SetConfig+0x114>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d00f      	beq.n	800658c <TIM_Base_SetConfig+0xf8>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a12      	ldr	r2, [pc, #72]	; (80065b8 <TIM_Base_SetConfig+0x124>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d00b      	beq.n	800658c <TIM_Base_SetConfig+0xf8>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a11      	ldr	r2, [pc, #68]	; (80065bc <TIM_Base_SetConfig+0x128>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d007      	beq.n	800658c <TIM_Base_SetConfig+0xf8>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a10      	ldr	r2, [pc, #64]	; (80065c0 <TIM_Base_SetConfig+0x12c>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d003      	beq.n	800658c <TIM_Base_SetConfig+0xf8>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a0f      	ldr	r2, [pc, #60]	; (80065c4 <TIM_Base_SetConfig+0x130>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d103      	bne.n	8006594 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	691a      	ldr	r2, [r3, #16]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	615a      	str	r2, [r3, #20]
}
 800659a:	bf00      	nop
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	40010000 	.word	0x40010000
 80065ac:	40000400 	.word	0x40000400
 80065b0:	40000800 	.word	0x40000800
 80065b4:	40000c00 	.word	0x40000c00
 80065b8:	40010400 	.word	0x40010400
 80065bc:	40014000 	.word	0x40014000
 80065c0:	40014400 	.word	0x40014400
 80065c4:	40014800 	.word	0x40014800

080065c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	f023 0201 	bic.w	r2, r3, #1
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	4b37      	ldr	r3, [pc, #220]	; (80066d0 <TIM_OC1_SetConfig+0x108>)
 80065f4:	4013      	ands	r3, r2
 80065f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 0303 	bic.w	r3, r3, #3
 80065fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	4313      	orrs	r3, r2
 8006608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f023 0302 	bic.w	r3, r3, #2
 8006610:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	4313      	orrs	r3, r2
 800661a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a2d      	ldr	r2, [pc, #180]	; (80066d4 <TIM_OC1_SetConfig+0x10c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d00f      	beq.n	8006644 <TIM_OC1_SetConfig+0x7c>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a2c      	ldr	r2, [pc, #176]	; (80066d8 <TIM_OC1_SetConfig+0x110>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d00b      	beq.n	8006644 <TIM_OC1_SetConfig+0x7c>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a2b      	ldr	r2, [pc, #172]	; (80066dc <TIM_OC1_SetConfig+0x114>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d007      	beq.n	8006644 <TIM_OC1_SetConfig+0x7c>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a2a      	ldr	r2, [pc, #168]	; (80066e0 <TIM_OC1_SetConfig+0x118>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d003      	beq.n	8006644 <TIM_OC1_SetConfig+0x7c>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a29      	ldr	r2, [pc, #164]	; (80066e4 <TIM_OC1_SetConfig+0x11c>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d10c      	bne.n	800665e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f023 0308 	bic.w	r3, r3, #8
 800664a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	4313      	orrs	r3, r2
 8006654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f023 0304 	bic.w	r3, r3, #4
 800665c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a1c      	ldr	r2, [pc, #112]	; (80066d4 <TIM_OC1_SetConfig+0x10c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d00f      	beq.n	8006686 <TIM_OC1_SetConfig+0xbe>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a1b      	ldr	r2, [pc, #108]	; (80066d8 <TIM_OC1_SetConfig+0x110>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00b      	beq.n	8006686 <TIM_OC1_SetConfig+0xbe>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a1a      	ldr	r2, [pc, #104]	; (80066dc <TIM_OC1_SetConfig+0x114>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d007      	beq.n	8006686 <TIM_OC1_SetConfig+0xbe>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a19      	ldr	r2, [pc, #100]	; (80066e0 <TIM_OC1_SetConfig+0x118>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d003      	beq.n	8006686 <TIM_OC1_SetConfig+0xbe>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a18      	ldr	r2, [pc, #96]	; (80066e4 <TIM_OC1_SetConfig+0x11c>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d111      	bne.n	80066aa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800668c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	4313      	orrs	r3, r2
 800669e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	621a      	str	r2, [r3, #32]
}
 80066c4:	bf00      	nop
 80066c6:	371c      	adds	r7, #28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	fffeff8f 	.word	0xfffeff8f
 80066d4:	40010000 	.word	0x40010000
 80066d8:	40010400 	.word	0x40010400
 80066dc:	40014000 	.word	0x40014000
 80066e0:	40014400 	.word	0x40014400
 80066e4:	40014800 	.word	0x40014800

080066e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	f023 0210 	bic.w	r2, r3, #16
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	4b34      	ldr	r3, [pc, #208]	; (80067e4 <TIM_OC2_SetConfig+0xfc>)
 8006714:	4013      	ands	r3, r2
 8006716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800671e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	021b      	lsls	r3, r3, #8
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	4313      	orrs	r3, r2
 800672a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	f023 0320 	bic.w	r3, r3, #32
 8006732:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	011b      	lsls	r3, r3, #4
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	4313      	orrs	r3, r2
 800673e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a29      	ldr	r2, [pc, #164]	; (80067e8 <TIM_OC2_SetConfig+0x100>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d003      	beq.n	8006750 <TIM_OC2_SetConfig+0x68>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a28      	ldr	r2, [pc, #160]	; (80067ec <TIM_OC2_SetConfig+0x104>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d10d      	bne.n	800676c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	011b      	lsls	r3, r3, #4
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	4313      	orrs	r3, r2
 8006762:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800676a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a1e      	ldr	r2, [pc, #120]	; (80067e8 <TIM_OC2_SetConfig+0x100>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d00f      	beq.n	8006794 <TIM_OC2_SetConfig+0xac>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a1d      	ldr	r2, [pc, #116]	; (80067ec <TIM_OC2_SetConfig+0x104>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d00b      	beq.n	8006794 <TIM_OC2_SetConfig+0xac>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a1c      	ldr	r2, [pc, #112]	; (80067f0 <TIM_OC2_SetConfig+0x108>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d007      	beq.n	8006794 <TIM_OC2_SetConfig+0xac>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a1b      	ldr	r2, [pc, #108]	; (80067f4 <TIM_OC2_SetConfig+0x10c>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d003      	beq.n	8006794 <TIM_OC2_SetConfig+0xac>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a1a      	ldr	r2, [pc, #104]	; (80067f8 <TIM_OC2_SetConfig+0x110>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d113      	bne.n	80067bc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800679a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	621a      	str	r2, [r3, #32]
}
 80067d6:	bf00      	nop
 80067d8:	371c      	adds	r7, #28
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	feff8fff 	.word	0xfeff8fff
 80067e8:	40010000 	.word	0x40010000
 80067ec:	40010400 	.word	0x40010400
 80067f0:	40014000 	.word	0x40014000
 80067f4:	40014400 	.word	0x40014400
 80067f8:	40014800 	.word	0x40014800

080067fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f023 0303 	bic.w	r3, r3, #3
 8006832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	4313      	orrs	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	021b      	lsls	r3, r3, #8
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	4313      	orrs	r3, r2
 8006850:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a27      	ldr	r2, [pc, #156]	; (80068f4 <TIM_OC3_SetConfig+0xf8>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d003      	beq.n	8006862 <TIM_OC3_SetConfig+0x66>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a26      	ldr	r2, [pc, #152]	; (80068f8 <TIM_OC3_SetConfig+0xfc>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d10d      	bne.n	800687e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006868:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	021b      	lsls	r3, r3, #8
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	4313      	orrs	r3, r2
 8006874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800687c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a1c      	ldr	r2, [pc, #112]	; (80068f4 <TIM_OC3_SetConfig+0xf8>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d00f      	beq.n	80068a6 <TIM_OC3_SetConfig+0xaa>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a1b      	ldr	r2, [pc, #108]	; (80068f8 <TIM_OC3_SetConfig+0xfc>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d00b      	beq.n	80068a6 <TIM_OC3_SetConfig+0xaa>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a1a      	ldr	r2, [pc, #104]	; (80068fc <TIM_OC3_SetConfig+0x100>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d007      	beq.n	80068a6 <TIM_OC3_SetConfig+0xaa>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a19      	ldr	r2, [pc, #100]	; (8006900 <TIM_OC3_SetConfig+0x104>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d003      	beq.n	80068a6 <TIM_OC3_SetConfig+0xaa>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a18      	ldr	r2, [pc, #96]	; (8006904 <TIM_OC3_SetConfig+0x108>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d113      	bne.n	80068ce <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4313      	orrs	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	011b      	lsls	r3, r3, #4
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	685a      	ldr	r2, [r3, #4]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	621a      	str	r2, [r3, #32]
}
 80068e8:	bf00      	nop
 80068ea:	371c      	adds	r7, #28
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr
 80068f4:	40010000 	.word	0x40010000
 80068f8:	40010400 	.word	0x40010400
 80068fc:	40014000 	.word	0x40014000
 8006900:	40014400 	.word	0x40014400
 8006904:	40014800 	.word	0x40014800

08006908 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800693e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	021b      	lsls	r3, r3, #8
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	4313      	orrs	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006952:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	031b      	lsls	r3, r3, #12
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	4313      	orrs	r3, r2
 800695e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a18      	ldr	r2, [pc, #96]	; (80069c4 <TIM_OC4_SetConfig+0xbc>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d00f      	beq.n	8006988 <TIM_OC4_SetConfig+0x80>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a17      	ldr	r2, [pc, #92]	; (80069c8 <TIM_OC4_SetConfig+0xc0>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d00b      	beq.n	8006988 <TIM_OC4_SetConfig+0x80>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a16      	ldr	r2, [pc, #88]	; (80069cc <TIM_OC4_SetConfig+0xc4>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d007      	beq.n	8006988 <TIM_OC4_SetConfig+0x80>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a15      	ldr	r2, [pc, #84]	; (80069d0 <TIM_OC4_SetConfig+0xc8>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d003      	beq.n	8006988 <TIM_OC4_SetConfig+0x80>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a14      	ldr	r2, [pc, #80]	; (80069d4 <TIM_OC4_SetConfig+0xcc>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d109      	bne.n	800699c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800698e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	019b      	lsls	r3, r3, #6
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	4313      	orrs	r3, r2
 800699a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	621a      	str	r2, [r3, #32]
}
 80069b6:	bf00      	nop
 80069b8:	371c      	adds	r7, #28
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	40010000 	.word	0x40010000
 80069c8:	40010400 	.word	0x40010400
 80069cc:	40014000 	.word	0x40014000
 80069d0:	40014400 	.word	0x40014400
 80069d4:	40014800 	.word	0x40014800

080069d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80069d8:	b480      	push	{r7}
 80069da:	b087      	sub	sp, #28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	041b      	lsls	r3, r3, #16
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a17      	ldr	r2, [pc, #92]	; (8006a88 <TIM_OC5_SetConfig+0xb0>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00f      	beq.n	8006a4e <TIM_OC5_SetConfig+0x76>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a16      	ldr	r2, [pc, #88]	; (8006a8c <TIM_OC5_SetConfig+0xb4>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d00b      	beq.n	8006a4e <TIM_OC5_SetConfig+0x76>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a15      	ldr	r2, [pc, #84]	; (8006a90 <TIM_OC5_SetConfig+0xb8>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d007      	beq.n	8006a4e <TIM_OC5_SetConfig+0x76>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a14      	ldr	r2, [pc, #80]	; (8006a94 <TIM_OC5_SetConfig+0xbc>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d003      	beq.n	8006a4e <TIM_OC5_SetConfig+0x76>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a13      	ldr	r2, [pc, #76]	; (8006a98 <TIM_OC5_SetConfig+0xc0>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d109      	bne.n	8006a62 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	021b      	lsls	r3, r3, #8
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	621a      	str	r2, [r3, #32]
}
 8006a7c:	bf00      	nop
 8006a7e:	371c      	adds	r7, #28
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr
 8006a88:	40010000 	.word	0x40010000
 8006a8c:	40010400 	.word	0x40010400
 8006a90:	40014000 	.word	0x40014000
 8006a94:	40014400 	.word	0x40014400
 8006a98:	40014800 	.word	0x40014800

08006a9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	021b      	lsls	r3, r3, #8
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ade:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	051b      	lsls	r3, r3, #20
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a18      	ldr	r2, [pc, #96]	; (8006b50 <TIM_OC6_SetConfig+0xb4>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d00f      	beq.n	8006b14 <TIM_OC6_SetConfig+0x78>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a17      	ldr	r2, [pc, #92]	; (8006b54 <TIM_OC6_SetConfig+0xb8>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d00b      	beq.n	8006b14 <TIM_OC6_SetConfig+0x78>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a16      	ldr	r2, [pc, #88]	; (8006b58 <TIM_OC6_SetConfig+0xbc>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d007      	beq.n	8006b14 <TIM_OC6_SetConfig+0x78>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a15      	ldr	r2, [pc, #84]	; (8006b5c <TIM_OC6_SetConfig+0xc0>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d003      	beq.n	8006b14 <TIM_OC6_SetConfig+0x78>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a14      	ldr	r2, [pc, #80]	; (8006b60 <TIM_OC6_SetConfig+0xc4>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d109      	bne.n	8006b28 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	029b      	lsls	r3, r3, #10
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	621a      	str	r2, [r3, #32]
}
 8006b42:	bf00      	nop
 8006b44:	371c      	adds	r7, #28
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	40010000 	.word	0x40010000
 8006b54:	40010400 	.word	0x40010400
 8006b58:	40014000 	.word	0x40014000
 8006b5c:	40014400 	.word	0x40014400
 8006b60:	40014800 	.word	0x40014800

08006b64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b087      	sub	sp, #28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	f023 0201 	bic.w	r2, r3, #1
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f023 030a 	bic.w	r3, r3, #10
 8006ba0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	621a      	str	r2, [r3, #32]
}
 8006bb6:	bf00      	nop
 8006bb8:	371c      	adds	r7, #28
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b087      	sub	sp, #28
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	60b9      	str	r1, [r7, #8]
 8006bcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	f023 0210 	bic.w	r2, r3, #16
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	031b      	lsls	r3, r3, #12
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bfe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	621a      	str	r2, [r3, #32]
}
 8006c16:	bf00      	nop
 8006c18:	371c      	adds	r7, #28
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
	...

08006c24 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	4b09      	ldr	r3, [pc, #36]	; (8006c5c <TIM_ITRx_SetConfig+0x38>)
 8006c38:	4013      	ands	r3, r2
 8006c3a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	f043 0307 	orr.w	r3, r3, #7
 8006c46:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	609a      	str	r2, [r3, #8]
}
 8006c4e:	bf00      	nop
 8006c50:	3714      	adds	r7, #20
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	ffcfff8f 	.word	0xffcfff8f

08006c60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b087      	sub	sp, #28
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
 8006c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	021a      	lsls	r2, r3, #8
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	431a      	orrs	r2, r3
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	609a      	str	r2, [r3, #8]
}
 8006c94:	bf00      	nop
 8006c96:	371c      	adds	r7, #28
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d101      	bne.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	e068      	b.n	8006d8a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a2e      	ldr	r2, [pc, #184]	; (8006d98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d004      	beq.n	8006cec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a2d      	ldr	r2, [pc, #180]	; (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d108      	bne.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006cf2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a1e      	ldr	r2, [pc, #120]	; (8006d98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d01d      	beq.n	8006d5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d2a:	d018      	beq.n	8006d5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a1b      	ldr	r2, [pc, #108]	; (8006da0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d013      	beq.n	8006d5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a1a      	ldr	r2, [pc, #104]	; (8006da4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d00e      	beq.n	8006d5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a18      	ldr	r2, [pc, #96]	; (8006da8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d009      	beq.n	8006d5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a13      	ldr	r2, [pc, #76]	; (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d004      	beq.n	8006d5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a14      	ldr	r2, [pc, #80]	; (8006dac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d10c      	bne.n	8006d78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	40010000 	.word	0x40010000
 8006d9c:	40010400 	.word	0x40010400
 8006da0:	40000400 	.word	0x40000400
 8006da4:	40000800 	.word	0x40000800
 8006da8:	40000c00 	.word	0x40000c00
 8006dac:	40001800 	.word	0x40001800

08006db0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d101      	bne.n	8006dcc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006dc8:	2302      	movs	r3, #2
 8006dca:	e065      	b.n	8006e98 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e32:	4313      	orrs	r3, r2
 8006e34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	041b      	lsls	r3, r3, #16
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a16      	ldr	r2, [pc, #88]	; (8006ea4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d004      	beq.n	8006e5a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a14      	ldr	r2, [pc, #80]	; (8006ea8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d115      	bne.n	8006e86 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e64:	051b      	lsls	r3, r3, #20
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	40010000 	.word	0x40010000
 8006ea8:	40010400 	.word	0x40010400

08006eac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e042      	b.n	8006f44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d106      	bne.n	8006ed6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f7fa f8f7 	bl	80010c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2224      	movs	r2, #36	; 0x24
 8006eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f022 0201 	bic.w	r2, r2, #1
 8006eec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f82c 	bl	8006f4c <UART_SetConfig>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d101      	bne.n	8006efe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e022      	b.n	8006f44 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d002      	beq.n	8006f0c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fd80 	bl	8007a0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685a      	ldr	r2, [r3, #4]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689a      	ldr	r2, [r3, #8]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f042 0201 	orr.w	r2, r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 fe07 	bl	8007b50 <UART_CheckIdleState>
 8006f42:	4603      	mov	r3, r0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f4c:	b5b0      	push	{r4, r5, r7, lr}
 8006f4e:	b08e      	sub	sp, #56	; 0x38
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f54:	2300      	movs	r3, #0
 8006f56:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	689a      	ldr	r2, [r3, #8]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	431a      	orrs	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	695b      	ldr	r3, [r3, #20]
 8006f68:	431a      	orrs	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	4bbf      	ldr	r3, [pc, #764]	; (8007278 <UART_SetConfig+0x32c>)
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	6812      	ldr	r2, [r2, #0]
 8006f80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006f82:	430b      	orrs	r3, r1
 8006f84:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68da      	ldr	r2, [r3, #12]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4ab5      	ldr	r2, [pc, #724]	; (800727c <UART_SetConfig+0x330>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d004      	beq.n	8006fb6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a1b      	ldr	r3, [r3, #32]
 8006fb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689a      	ldr	r2, [r3, #8]
 8006fbc:	4bb0      	ldr	r3, [pc, #704]	; (8007280 <UART_SetConfig+0x334>)
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	6812      	ldr	r2, [r2, #0]
 8006fc4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006fc6:	430b      	orrs	r3, r1
 8006fc8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd0:	f023 010f 	bic.w	r1, r3, #15
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4aa7      	ldr	r2, [pc, #668]	; (8007284 <UART_SetConfig+0x338>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d176      	bne.n	80070d8 <UART_SetConfig+0x18c>
 8006fea:	4ba7      	ldr	r3, [pc, #668]	; (8007288 <UART_SetConfig+0x33c>)
 8006fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ff2:	2b28      	cmp	r3, #40	; 0x28
 8006ff4:	d86c      	bhi.n	80070d0 <UART_SetConfig+0x184>
 8006ff6:	a201      	add	r2, pc, #4	; (adr r2, 8006ffc <UART_SetConfig+0xb0>)
 8006ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffc:	080070a1 	.word	0x080070a1
 8007000:	080070d1 	.word	0x080070d1
 8007004:	080070d1 	.word	0x080070d1
 8007008:	080070d1 	.word	0x080070d1
 800700c:	080070d1 	.word	0x080070d1
 8007010:	080070d1 	.word	0x080070d1
 8007014:	080070d1 	.word	0x080070d1
 8007018:	080070d1 	.word	0x080070d1
 800701c:	080070a9 	.word	0x080070a9
 8007020:	080070d1 	.word	0x080070d1
 8007024:	080070d1 	.word	0x080070d1
 8007028:	080070d1 	.word	0x080070d1
 800702c:	080070d1 	.word	0x080070d1
 8007030:	080070d1 	.word	0x080070d1
 8007034:	080070d1 	.word	0x080070d1
 8007038:	080070d1 	.word	0x080070d1
 800703c:	080070b1 	.word	0x080070b1
 8007040:	080070d1 	.word	0x080070d1
 8007044:	080070d1 	.word	0x080070d1
 8007048:	080070d1 	.word	0x080070d1
 800704c:	080070d1 	.word	0x080070d1
 8007050:	080070d1 	.word	0x080070d1
 8007054:	080070d1 	.word	0x080070d1
 8007058:	080070d1 	.word	0x080070d1
 800705c:	080070b9 	.word	0x080070b9
 8007060:	080070d1 	.word	0x080070d1
 8007064:	080070d1 	.word	0x080070d1
 8007068:	080070d1 	.word	0x080070d1
 800706c:	080070d1 	.word	0x080070d1
 8007070:	080070d1 	.word	0x080070d1
 8007074:	080070d1 	.word	0x080070d1
 8007078:	080070d1 	.word	0x080070d1
 800707c:	080070c1 	.word	0x080070c1
 8007080:	080070d1 	.word	0x080070d1
 8007084:	080070d1 	.word	0x080070d1
 8007088:	080070d1 	.word	0x080070d1
 800708c:	080070d1 	.word	0x080070d1
 8007090:	080070d1 	.word	0x080070d1
 8007094:	080070d1 	.word	0x080070d1
 8007098:	080070d1 	.word	0x080070d1
 800709c:	080070c9 	.word	0x080070c9
 80070a0:	2301      	movs	r3, #1
 80070a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070a6:	e222      	b.n	80074ee <UART_SetConfig+0x5a2>
 80070a8:	2304      	movs	r3, #4
 80070aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070ae:	e21e      	b.n	80074ee <UART_SetConfig+0x5a2>
 80070b0:	2308      	movs	r3, #8
 80070b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070b6:	e21a      	b.n	80074ee <UART_SetConfig+0x5a2>
 80070b8:	2310      	movs	r3, #16
 80070ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070be:	e216      	b.n	80074ee <UART_SetConfig+0x5a2>
 80070c0:	2320      	movs	r3, #32
 80070c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070c6:	e212      	b.n	80074ee <UART_SetConfig+0x5a2>
 80070c8:	2340      	movs	r3, #64	; 0x40
 80070ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070ce:	e20e      	b.n	80074ee <UART_SetConfig+0x5a2>
 80070d0:	2380      	movs	r3, #128	; 0x80
 80070d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070d6:	e20a      	b.n	80074ee <UART_SetConfig+0x5a2>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a6b      	ldr	r2, [pc, #428]	; (800728c <UART_SetConfig+0x340>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d130      	bne.n	8007144 <UART_SetConfig+0x1f8>
 80070e2:	4b69      	ldr	r3, [pc, #420]	; (8007288 <UART_SetConfig+0x33c>)
 80070e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e6:	f003 0307 	and.w	r3, r3, #7
 80070ea:	2b05      	cmp	r3, #5
 80070ec:	d826      	bhi.n	800713c <UART_SetConfig+0x1f0>
 80070ee:	a201      	add	r2, pc, #4	; (adr r2, 80070f4 <UART_SetConfig+0x1a8>)
 80070f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f4:	0800710d 	.word	0x0800710d
 80070f8:	08007115 	.word	0x08007115
 80070fc:	0800711d 	.word	0x0800711d
 8007100:	08007125 	.word	0x08007125
 8007104:	0800712d 	.word	0x0800712d
 8007108:	08007135 	.word	0x08007135
 800710c:	2300      	movs	r3, #0
 800710e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007112:	e1ec      	b.n	80074ee <UART_SetConfig+0x5a2>
 8007114:	2304      	movs	r3, #4
 8007116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800711a:	e1e8      	b.n	80074ee <UART_SetConfig+0x5a2>
 800711c:	2308      	movs	r3, #8
 800711e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007122:	e1e4      	b.n	80074ee <UART_SetConfig+0x5a2>
 8007124:	2310      	movs	r3, #16
 8007126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800712a:	e1e0      	b.n	80074ee <UART_SetConfig+0x5a2>
 800712c:	2320      	movs	r3, #32
 800712e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007132:	e1dc      	b.n	80074ee <UART_SetConfig+0x5a2>
 8007134:	2340      	movs	r3, #64	; 0x40
 8007136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800713a:	e1d8      	b.n	80074ee <UART_SetConfig+0x5a2>
 800713c:	2380      	movs	r3, #128	; 0x80
 800713e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007142:	e1d4      	b.n	80074ee <UART_SetConfig+0x5a2>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a51      	ldr	r2, [pc, #324]	; (8007290 <UART_SetConfig+0x344>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d130      	bne.n	80071b0 <UART_SetConfig+0x264>
 800714e:	4b4e      	ldr	r3, [pc, #312]	; (8007288 <UART_SetConfig+0x33c>)
 8007150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007152:	f003 0307 	and.w	r3, r3, #7
 8007156:	2b05      	cmp	r3, #5
 8007158:	d826      	bhi.n	80071a8 <UART_SetConfig+0x25c>
 800715a:	a201      	add	r2, pc, #4	; (adr r2, 8007160 <UART_SetConfig+0x214>)
 800715c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007160:	08007179 	.word	0x08007179
 8007164:	08007181 	.word	0x08007181
 8007168:	08007189 	.word	0x08007189
 800716c:	08007191 	.word	0x08007191
 8007170:	08007199 	.word	0x08007199
 8007174:	080071a1 	.word	0x080071a1
 8007178:	2300      	movs	r3, #0
 800717a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800717e:	e1b6      	b.n	80074ee <UART_SetConfig+0x5a2>
 8007180:	2304      	movs	r3, #4
 8007182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007186:	e1b2      	b.n	80074ee <UART_SetConfig+0x5a2>
 8007188:	2308      	movs	r3, #8
 800718a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800718e:	e1ae      	b.n	80074ee <UART_SetConfig+0x5a2>
 8007190:	2310      	movs	r3, #16
 8007192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007196:	e1aa      	b.n	80074ee <UART_SetConfig+0x5a2>
 8007198:	2320      	movs	r3, #32
 800719a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800719e:	e1a6      	b.n	80074ee <UART_SetConfig+0x5a2>
 80071a0:	2340      	movs	r3, #64	; 0x40
 80071a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071a6:	e1a2      	b.n	80074ee <UART_SetConfig+0x5a2>
 80071a8:	2380      	movs	r3, #128	; 0x80
 80071aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ae:	e19e      	b.n	80074ee <UART_SetConfig+0x5a2>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a37      	ldr	r2, [pc, #220]	; (8007294 <UART_SetConfig+0x348>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d130      	bne.n	800721c <UART_SetConfig+0x2d0>
 80071ba:	4b33      	ldr	r3, [pc, #204]	; (8007288 <UART_SetConfig+0x33c>)
 80071bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071be:	f003 0307 	and.w	r3, r3, #7
 80071c2:	2b05      	cmp	r3, #5
 80071c4:	d826      	bhi.n	8007214 <UART_SetConfig+0x2c8>
 80071c6:	a201      	add	r2, pc, #4	; (adr r2, 80071cc <UART_SetConfig+0x280>)
 80071c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071cc:	080071e5 	.word	0x080071e5
 80071d0:	080071ed 	.word	0x080071ed
 80071d4:	080071f5 	.word	0x080071f5
 80071d8:	080071fd 	.word	0x080071fd
 80071dc:	08007205 	.word	0x08007205
 80071e0:	0800720d 	.word	0x0800720d
 80071e4:	2300      	movs	r3, #0
 80071e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ea:	e180      	b.n	80074ee <UART_SetConfig+0x5a2>
 80071ec:	2304      	movs	r3, #4
 80071ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071f2:	e17c      	b.n	80074ee <UART_SetConfig+0x5a2>
 80071f4:	2308      	movs	r3, #8
 80071f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071fa:	e178      	b.n	80074ee <UART_SetConfig+0x5a2>
 80071fc:	2310      	movs	r3, #16
 80071fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007202:	e174      	b.n	80074ee <UART_SetConfig+0x5a2>
 8007204:	2320      	movs	r3, #32
 8007206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800720a:	e170      	b.n	80074ee <UART_SetConfig+0x5a2>
 800720c:	2340      	movs	r3, #64	; 0x40
 800720e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007212:	e16c      	b.n	80074ee <UART_SetConfig+0x5a2>
 8007214:	2380      	movs	r3, #128	; 0x80
 8007216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800721a:	e168      	b.n	80074ee <UART_SetConfig+0x5a2>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a1d      	ldr	r2, [pc, #116]	; (8007298 <UART_SetConfig+0x34c>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d142      	bne.n	80072ac <UART_SetConfig+0x360>
 8007226:	4b18      	ldr	r3, [pc, #96]	; (8007288 <UART_SetConfig+0x33c>)
 8007228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722a:	f003 0307 	and.w	r3, r3, #7
 800722e:	2b05      	cmp	r3, #5
 8007230:	d838      	bhi.n	80072a4 <UART_SetConfig+0x358>
 8007232:	a201      	add	r2, pc, #4	; (adr r2, 8007238 <UART_SetConfig+0x2ec>)
 8007234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007238:	08007251 	.word	0x08007251
 800723c:	08007259 	.word	0x08007259
 8007240:	08007261 	.word	0x08007261
 8007244:	08007269 	.word	0x08007269
 8007248:	08007271 	.word	0x08007271
 800724c:	0800729d 	.word	0x0800729d
 8007250:	2300      	movs	r3, #0
 8007252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007256:	e14a      	b.n	80074ee <UART_SetConfig+0x5a2>
 8007258:	2304      	movs	r3, #4
 800725a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800725e:	e146      	b.n	80074ee <UART_SetConfig+0x5a2>
 8007260:	2308      	movs	r3, #8
 8007262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007266:	e142      	b.n	80074ee <UART_SetConfig+0x5a2>
 8007268:	2310      	movs	r3, #16
 800726a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800726e:	e13e      	b.n	80074ee <UART_SetConfig+0x5a2>
 8007270:	2320      	movs	r3, #32
 8007272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007276:	e13a      	b.n	80074ee <UART_SetConfig+0x5a2>
 8007278:	cfff69f3 	.word	0xcfff69f3
 800727c:	58000c00 	.word	0x58000c00
 8007280:	11fff4ff 	.word	0x11fff4ff
 8007284:	40011000 	.word	0x40011000
 8007288:	58024400 	.word	0x58024400
 800728c:	40004400 	.word	0x40004400
 8007290:	40004800 	.word	0x40004800
 8007294:	40004c00 	.word	0x40004c00
 8007298:	40005000 	.word	0x40005000
 800729c:	2340      	movs	r3, #64	; 0x40
 800729e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072a2:	e124      	b.n	80074ee <UART_SetConfig+0x5a2>
 80072a4:	2380      	movs	r3, #128	; 0x80
 80072a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072aa:	e120      	b.n	80074ee <UART_SetConfig+0x5a2>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4acc      	ldr	r2, [pc, #816]	; (80075e4 <UART_SetConfig+0x698>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d176      	bne.n	80073a4 <UART_SetConfig+0x458>
 80072b6:	4bcc      	ldr	r3, [pc, #816]	; (80075e8 <UART_SetConfig+0x69c>)
 80072b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072be:	2b28      	cmp	r3, #40	; 0x28
 80072c0:	d86c      	bhi.n	800739c <UART_SetConfig+0x450>
 80072c2:	a201      	add	r2, pc, #4	; (adr r2, 80072c8 <UART_SetConfig+0x37c>)
 80072c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c8:	0800736d 	.word	0x0800736d
 80072cc:	0800739d 	.word	0x0800739d
 80072d0:	0800739d 	.word	0x0800739d
 80072d4:	0800739d 	.word	0x0800739d
 80072d8:	0800739d 	.word	0x0800739d
 80072dc:	0800739d 	.word	0x0800739d
 80072e0:	0800739d 	.word	0x0800739d
 80072e4:	0800739d 	.word	0x0800739d
 80072e8:	08007375 	.word	0x08007375
 80072ec:	0800739d 	.word	0x0800739d
 80072f0:	0800739d 	.word	0x0800739d
 80072f4:	0800739d 	.word	0x0800739d
 80072f8:	0800739d 	.word	0x0800739d
 80072fc:	0800739d 	.word	0x0800739d
 8007300:	0800739d 	.word	0x0800739d
 8007304:	0800739d 	.word	0x0800739d
 8007308:	0800737d 	.word	0x0800737d
 800730c:	0800739d 	.word	0x0800739d
 8007310:	0800739d 	.word	0x0800739d
 8007314:	0800739d 	.word	0x0800739d
 8007318:	0800739d 	.word	0x0800739d
 800731c:	0800739d 	.word	0x0800739d
 8007320:	0800739d 	.word	0x0800739d
 8007324:	0800739d 	.word	0x0800739d
 8007328:	08007385 	.word	0x08007385
 800732c:	0800739d 	.word	0x0800739d
 8007330:	0800739d 	.word	0x0800739d
 8007334:	0800739d 	.word	0x0800739d
 8007338:	0800739d 	.word	0x0800739d
 800733c:	0800739d 	.word	0x0800739d
 8007340:	0800739d 	.word	0x0800739d
 8007344:	0800739d 	.word	0x0800739d
 8007348:	0800738d 	.word	0x0800738d
 800734c:	0800739d 	.word	0x0800739d
 8007350:	0800739d 	.word	0x0800739d
 8007354:	0800739d 	.word	0x0800739d
 8007358:	0800739d 	.word	0x0800739d
 800735c:	0800739d 	.word	0x0800739d
 8007360:	0800739d 	.word	0x0800739d
 8007364:	0800739d 	.word	0x0800739d
 8007368:	08007395 	.word	0x08007395
 800736c:	2301      	movs	r3, #1
 800736e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007372:	e0bc      	b.n	80074ee <UART_SetConfig+0x5a2>
 8007374:	2304      	movs	r3, #4
 8007376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800737a:	e0b8      	b.n	80074ee <UART_SetConfig+0x5a2>
 800737c:	2308      	movs	r3, #8
 800737e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007382:	e0b4      	b.n	80074ee <UART_SetConfig+0x5a2>
 8007384:	2310      	movs	r3, #16
 8007386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800738a:	e0b0      	b.n	80074ee <UART_SetConfig+0x5a2>
 800738c:	2320      	movs	r3, #32
 800738e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007392:	e0ac      	b.n	80074ee <UART_SetConfig+0x5a2>
 8007394:	2340      	movs	r3, #64	; 0x40
 8007396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800739a:	e0a8      	b.n	80074ee <UART_SetConfig+0x5a2>
 800739c:	2380      	movs	r3, #128	; 0x80
 800739e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073a2:	e0a4      	b.n	80074ee <UART_SetConfig+0x5a2>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a90      	ldr	r2, [pc, #576]	; (80075ec <UART_SetConfig+0x6a0>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d130      	bne.n	8007410 <UART_SetConfig+0x4c4>
 80073ae:	4b8e      	ldr	r3, [pc, #568]	; (80075e8 <UART_SetConfig+0x69c>)
 80073b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b2:	f003 0307 	and.w	r3, r3, #7
 80073b6:	2b05      	cmp	r3, #5
 80073b8:	d826      	bhi.n	8007408 <UART_SetConfig+0x4bc>
 80073ba:	a201      	add	r2, pc, #4	; (adr r2, 80073c0 <UART_SetConfig+0x474>)
 80073bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c0:	080073d9 	.word	0x080073d9
 80073c4:	080073e1 	.word	0x080073e1
 80073c8:	080073e9 	.word	0x080073e9
 80073cc:	080073f1 	.word	0x080073f1
 80073d0:	080073f9 	.word	0x080073f9
 80073d4:	08007401 	.word	0x08007401
 80073d8:	2300      	movs	r3, #0
 80073da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073de:	e086      	b.n	80074ee <UART_SetConfig+0x5a2>
 80073e0:	2304      	movs	r3, #4
 80073e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073e6:	e082      	b.n	80074ee <UART_SetConfig+0x5a2>
 80073e8:	2308      	movs	r3, #8
 80073ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073ee:	e07e      	b.n	80074ee <UART_SetConfig+0x5a2>
 80073f0:	2310      	movs	r3, #16
 80073f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073f6:	e07a      	b.n	80074ee <UART_SetConfig+0x5a2>
 80073f8:	2320      	movs	r3, #32
 80073fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073fe:	e076      	b.n	80074ee <UART_SetConfig+0x5a2>
 8007400:	2340      	movs	r3, #64	; 0x40
 8007402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007406:	e072      	b.n	80074ee <UART_SetConfig+0x5a2>
 8007408:	2380      	movs	r3, #128	; 0x80
 800740a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800740e:	e06e      	b.n	80074ee <UART_SetConfig+0x5a2>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a76      	ldr	r2, [pc, #472]	; (80075f0 <UART_SetConfig+0x6a4>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d130      	bne.n	800747c <UART_SetConfig+0x530>
 800741a:	4b73      	ldr	r3, [pc, #460]	; (80075e8 <UART_SetConfig+0x69c>)
 800741c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800741e:	f003 0307 	and.w	r3, r3, #7
 8007422:	2b05      	cmp	r3, #5
 8007424:	d826      	bhi.n	8007474 <UART_SetConfig+0x528>
 8007426:	a201      	add	r2, pc, #4	; (adr r2, 800742c <UART_SetConfig+0x4e0>)
 8007428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742c:	08007445 	.word	0x08007445
 8007430:	0800744d 	.word	0x0800744d
 8007434:	08007455 	.word	0x08007455
 8007438:	0800745d 	.word	0x0800745d
 800743c:	08007465 	.word	0x08007465
 8007440:	0800746d 	.word	0x0800746d
 8007444:	2300      	movs	r3, #0
 8007446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800744a:	e050      	b.n	80074ee <UART_SetConfig+0x5a2>
 800744c:	2304      	movs	r3, #4
 800744e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007452:	e04c      	b.n	80074ee <UART_SetConfig+0x5a2>
 8007454:	2308      	movs	r3, #8
 8007456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800745a:	e048      	b.n	80074ee <UART_SetConfig+0x5a2>
 800745c:	2310      	movs	r3, #16
 800745e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007462:	e044      	b.n	80074ee <UART_SetConfig+0x5a2>
 8007464:	2320      	movs	r3, #32
 8007466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800746a:	e040      	b.n	80074ee <UART_SetConfig+0x5a2>
 800746c:	2340      	movs	r3, #64	; 0x40
 800746e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007472:	e03c      	b.n	80074ee <UART_SetConfig+0x5a2>
 8007474:	2380      	movs	r3, #128	; 0x80
 8007476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800747a:	e038      	b.n	80074ee <UART_SetConfig+0x5a2>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a5c      	ldr	r2, [pc, #368]	; (80075f4 <UART_SetConfig+0x6a8>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d130      	bne.n	80074e8 <UART_SetConfig+0x59c>
 8007486:	4b58      	ldr	r3, [pc, #352]	; (80075e8 <UART_SetConfig+0x69c>)
 8007488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800748a:	f003 0307 	and.w	r3, r3, #7
 800748e:	2b05      	cmp	r3, #5
 8007490:	d826      	bhi.n	80074e0 <UART_SetConfig+0x594>
 8007492:	a201      	add	r2, pc, #4	; (adr r2, 8007498 <UART_SetConfig+0x54c>)
 8007494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007498:	080074b1 	.word	0x080074b1
 800749c:	080074b9 	.word	0x080074b9
 80074a0:	080074c1 	.word	0x080074c1
 80074a4:	080074c9 	.word	0x080074c9
 80074a8:	080074d1 	.word	0x080074d1
 80074ac:	080074d9 	.word	0x080074d9
 80074b0:	2302      	movs	r3, #2
 80074b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074b6:	e01a      	b.n	80074ee <UART_SetConfig+0x5a2>
 80074b8:	2304      	movs	r3, #4
 80074ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074be:	e016      	b.n	80074ee <UART_SetConfig+0x5a2>
 80074c0:	2308      	movs	r3, #8
 80074c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074c6:	e012      	b.n	80074ee <UART_SetConfig+0x5a2>
 80074c8:	2310      	movs	r3, #16
 80074ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ce:	e00e      	b.n	80074ee <UART_SetConfig+0x5a2>
 80074d0:	2320      	movs	r3, #32
 80074d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074d6:	e00a      	b.n	80074ee <UART_SetConfig+0x5a2>
 80074d8:	2340      	movs	r3, #64	; 0x40
 80074da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074de:	e006      	b.n	80074ee <UART_SetConfig+0x5a2>
 80074e0:	2380      	movs	r3, #128	; 0x80
 80074e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074e6:	e002      	b.n	80074ee <UART_SetConfig+0x5a2>
 80074e8:	2380      	movs	r3, #128	; 0x80
 80074ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a40      	ldr	r2, [pc, #256]	; (80075f4 <UART_SetConfig+0x6a8>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	f040 80ef 	bne.w	80076d8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80074fe:	2b20      	cmp	r3, #32
 8007500:	dc46      	bgt.n	8007590 <UART_SetConfig+0x644>
 8007502:	2b02      	cmp	r3, #2
 8007504:	f2c0 8081 	blt.w	800760a <UART_SetConfig+0x6be>
 8007508:	3b02      	subs	r3, #2
 800750a:	2b1e      	cmp	r3, #30
 800750c:	d87d      	bhi.n	800760a <UART_SetConfig+0x6be>
 800750e:	a201      	add	r2, pc, #4	; (adr r2, 8007514 <UART_SetConfig+0x5c8>)
 8007510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007514:	08007597 	.word	0x08007597
 8007518:	0800760b 	.word	0x0800760b
 800751c:	0800759f 	.word	0x0800759f
 8007520:	0800760b 	.word	0x0800760b
 8007524:	0800760b 	.word	0x0800760b
 8007528:	0800760b 	.word	0x0800760b
 800752c:	080075af 	.word	0x080075af
 8007530:	0800760b 	.word	0x0800760b
 8007534:	0800760b 	.word	0x0800760b
 8007538:	0800760b 	.word	0x0800760b
 800753c:	0800760b 	.word	0x0800760b
 8007540:	0800760b 	.word	0x0800760b
 8007544:	0800760b 	.word	0x0800760b
 8007548:	0800760b 	.word	0x0800760b
 800754c:	080075bf 	.word	0x080075bf
 8007550:	0800760b 	.word	0x0800760b
 8007554:	0800760b 	.word	0x0800760b
 8007558:	0800760b 	.word	0x0800760b
 800755c:	0800760b 	.word	0x0800760b
 8007560:	0800760b 	.word	0x0800760b
 8007564:	0800760b 	.word	0x0800760b
 8007568:	0800760b 	.word	0x0800760b
 800756c:	0800760b 	.word	0x0800760b
 8007570:	0800760b 	.word	0x0800760b
 8007574:	0800760b 	.word	0x0800760b
 8007578:	0800760b 	.word	0x0800760b
 800757c:	0800760b 	.word	0x0800760b
 8007580:	0800760b 	.word	0x0800760b
 8007584:	0800760b 	.word	0x0800760b
 8007588:	0800760b 	.word	0x0800760b
 800758c:	080075fd 	.word	0x080075fd
 8007590:	2b40      	cmp	r3, #64	; 0x40
 8007592:	d036      	beq.n	8007602 <UART_SetConfig+0x6b6>
 8007594:	e039      	b.n	800760a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007596:	f7fe f89f 	bl	80056d8 <HAL_RCCEx_GetD3PCLK1Freq>
 800759a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800759c:	e03b      	b.n	8007616 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800759e:	f107 0314 	add.w	r3, r7, #20
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fe f8ae 	bl	8005704 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075ac:	e033      	b.n	8007616 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075ae:	f107 0308 	add.w	r3, r7, #8
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fe f9fa 	bl	80059ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075bc:	e02b      	b.n	8007616 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075be:	4b0a      	ldr	r3, [pc, #40]	; (80075e8 <UART_SetConfig+0x69c>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0320 	and.w	r3, r3, #32
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d009      	beq.n	80075de <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80075ca:	4b07      	ldr	r3, [pc, #28]	; (80075e8 <UART_SetConfig+0x69c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	08db      	lsrs	r3, r3, #3
 80075d0:	f003 0303 	and.w	r3, r3, #3
 80075d4:	4a08      	ldr	r2, [pc, #32]	; (80075f8 <UART_SetConfig+0x6ac>)
 80075d6:	fa22 f303 	lsr.w	r3, r2, r3
 80075da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80075dc:	e01b      	b.n	8007616 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80075de:	4b06      	ldr	r3, [pc, #24]	; (80075f8 <UART_SetConfig+0x6ac>)
 80075e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075e2:	e018      	b.n	8007616 <UART_SetConfig+0x6ca>
 80075e4:	40011400 	.word	0x40011400
 80075e8:	58024400 	.word	0x58024400
 80075ec:	40007800 	.word	0x40007800
 80075f0:	40007c00 	.word	0x40007c00
 80075f4:	58000c00 	.word	0x58000c00
 80075f8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80075fc:	4bc4      	ldr	r3, [pc, #784]	; (8007910 <UART_SetConfig+0x9c4>)
 80075fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007600:	e009      	b.n	8007616 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007606:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007608:	e005      	b.n	8007616 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800760a:	2300      	movs	r3, #0
 800760c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007614:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 81da 	beq.w	80079d2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007622:	4abc      	ldr	r2, [pc, #752]	; (8007914 <UART_SetConfig+0x9c8>)
 8007624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007628:	461a      	mov	r2, r3
 800762a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007630:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	4613      	mov	r3, r2
 8007638:	005b      	lsls	r3, r3, #1
 800763a:	4413      	add	r3, r2
 800763c:	6a3a      	ldr	r2, [r7, #32]
 800763e:	429a      	cmp	r2, r3
 8007640:	d305      	bcc.n	800764e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007648:	6a3a      	ldr	r2, [r7, #32]
 800764a:	429a      	cmp	r2, r3
 800764c:	d903      	bls.n	8007656 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007654:	e1bd      	b.n	80079d2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007658:	4618      	mov	r0, r3
 800765a:	f04f 0100 	mov.w	r1, #0
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007662:	4aac      	ldr	r2, [pc, #688]	; (8007914 <UART_SetConfig+0x9c8>)
 8007664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007668:	b29a      	uxth	r2, r3
 800766a:	f04f 0300 	mov.w	r3, #0
 800766e:	f7f8 fe33 	bl	80002d8 <__aeabi_uldivmod>
 8007672:	4602      	mov	r2, r0
 8007674:	460b      	mov	r3, r1
 8007676:	4610      	mov	r0, r2
 8007678:	4619      	mov	r1, r3
 800767a:	f04f 0200 	mov.w	r2, #0
 800767e:	f04f 0300 	mov.w	r3, #0
 8007682:	020b      	lsls	r3, r1, #8
 8007684:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007688:	0202      	lsls	r2, r0, #8
 800768a:	6879      	ldr	r1, [r7, #4]
 800768c:	6849      	ldr	r1, [r1, #4]
 800768e:	0849      	lsrs	r1, r1, #1
 8007690:	4608      	mov	r0, r1
 8007692:	f04f 0100 	mov.w	r1, #0
 8007696:	1814      	adds	r4, r2, r0
 8007698:	eb43 0501 	adc.w	r5, r3, r1
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	461a      	mov	r2, r3
 80076a2:	f04f 0300 	mov.w	r3, #0
 80076a6:	4620      	mov	r0, r4
 80076a8:	4629      	mov	r1, r5
 80076aa:	f7f8 fe15 	bl	80002d8 <__aeabi_uldivmod>
 80076ae:	4602      	mov	r2, r0
 80076b0:	460b      	mov	r3, r1
 80076b2:	4613      	mov	r3, r2
 80076b4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076bc:	d308      	bcc.n	80076d0 <UART_SetConfig+0x784>
 80076be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076c4:	d204      	bcs.n	80076d0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076cc:	60da      	str	r2, [r3, #12]
 80076ce:	e180      	b.n	80079d2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80076d6:	e17c      	b.n	80079d2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076e0:	f040 80bf 	bne.w	8007862 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80076e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80076e8:	2b20      	cmp	r3, #32
 80076ea:	dc49      	bgt.n	8007780 <UART_SetConfig+0x834>
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	db7c      	blt.n	80077ea <UART_SetConfig+0x89e>
 80076f0:	2b20      	cmp	r3, #32
 80076f2:	d87a      	bhi.n	80077ea <UART_SetConfig+0x89e>
 80076f4:	a201      	add	r2, pc, #4	; (adr r2, 80076fc <UART_SetConfig+0x7b0>)
 80076f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fa:	bf00      	nop
 80076fc:	08007787 	.word	0x08007787
 8007700:	0800778f 	.word	0x0800778f
 8007704:	080077eb 	.word	0x080077eb
 8007708:	080077eb 	.word	0x080077eb
 800770c:	08007797 	.word	0x08007797
 8007710:	080077eb 	.word	0x080077eb
 8007714:	080077eb 	.word	0x080077eb
 8007718:	080077eb 	.word	0x080077eb
 800771c:	080077a7 	.word	0x080077a7
 8007720:	080077eb 	.word	0x080077eb
 8007724:	080077eb 	.word	0x080077eb
 8007728:	080077eb 	.word	0x080077eb
 800772c:	080077eb 	.word	0x080077eb
 8007730:	080077eb 	.word	0x080077eb
 8007734:	080077eb 	.word	0x080077eb
 8007738:	080077eb 	.word	0x080077eb
 800773c:	080077b7 	.word	0x080077b7
 8007740:	080077eb 	.word	0x080077eb
 8007744:	080077eb 	.word	0x080077eb
 8007748:	080077eb 	.word	0x080077eb
 800774c:	080077eb 	.word	0x080077eb
 8007750:	080077eb 	.word	0x080077eb
 8007754:	080077eb 	.word	0x080077eb
 8007758:	080077eb 	.word	0x080077eb
 800775c:	080077eb 	.word	0x080077eb
 8007760:	080077eb 	.word	0x080077eb
 8007764:	080077eb 	.word	0x080077eb
 8007768:	080077eb 	.word	0x080077eb
 800776c:	080077eb 	.word	0x080077eb
 8007770:	080077eb 	.word	0x080077eb
 8007774:	080077eb 	.word	0x080077eb
 8007778:	080077eb 	.word	0x080077eb
 800777c:	080077dd 	.word	0x080077dd
 8007780:	2b40      	cmp	r3, #64	; 0x40
 8007782:	d02e      	beq.n	80077e2 <UART_SetConfig+0x896>
 8007784:	e031      	b.n	80077ea <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007786:	f7fd f83b 	bl	8004800 <HAL_RCC_GetPCLK1Freq>
 800778a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800778c:	e033      	b.n	80077f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800778e:	f7fd f84d 	bl	800482c <HAL_RCC_GetPCLK2Freq>
 8007792:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007794:	e02f      	b.n	80077f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007796:	f107 0314 	add.w	r3, r7, #20
 800779a:	4618      	mov	r0, r3
 800779c:	f7fd ffb2 	bl	8005704 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077a4:	e027      	b.n	80077f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077a6:	f107 0308 	add.w	r3, r7, #8
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fe f8fe 	bl	80059ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077b4:	e01f      	b.n	80077f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077b6:	4b58      	ldr	r3, [pc, #352]	; (8007918 <UART_SetConfig+0x9cc>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0320 	and.w	r3, r3, #32
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d009      	beq.n	80077d6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80077c2:	4b55      	ldr	r3, [pc, #340]	; (8007918 <UART_SetConfig+0x9cc>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	08db      	lsrs	r3, r3, #3
 80077c8:	f003 0303 	and.w	r3, r3, #3
 80077cc:	4a53      	ldr	r2, [pc, #332]	; (800791c <UART_SetConfig+0x9d0>)
 80077ce:	fa22 f303 	lsr.w	r3, r2, r3
 80077d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80077d4:	e00f      	b.n	80077f6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80077d6:	4b51      	ldr	r3, [pc, #324]	; (800791c <UART_SetConfig+0x9d0>)
 80077d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077da:	e00c      	b.n	80077f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80077dc:	4b4c      	ldr	r3, [pc, #304]	; (8007910 <UART_SetConfig+0x9c4>)
 80077de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077e0:	e009      	b.n	80077f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077e8:	e005      	b.n	80077f6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80077ea:	2300      	movs	r3, #0
 80077ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80077f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f000 80ea 	beq.w	80079d2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007802:	4a44      	ldr	r2, [pc, #272]	; (8007914 <UART_SetConfig+0x9c8>)
 8007804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007808:	461a      	mov	r2, r3
 800780a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007810:	005a      	lsls	r2, r3, #1
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	085b      	lsrs	r3, r3, #1
 8007818:	441a      	add	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007822:	b29b      	uxth	r3, r3
 8007824:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007828:	2b0f      	cmp	r3, #15
 800782a:	d916      	bls.n	800785a <UART_SetConfig+0x90e>
 800782c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007832:	d212      	bcs.n	800785a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007836:	b29b      	uxth	r3, r3
 8007838:	f023 030f 	bic.w	r3, r3, #15
 800783c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800783e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007840:	085b      	lsrs	r3, r3, #1
 8007842:	b29b      	uxth	r3, r3
 8007844:	f003 0307 	and.w	r3, r3, #7
 8007848:	b29a      	uxth	r2, r3
 800784a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800784c:	4313      	orrs	r3, r2
 800784e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007856:	60da      	str	r2, [r3, #12]
 8007858:	e0bb      	b.n	80079d2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007860:	e0b7      	b.n	80079d2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007862:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007866:	2b20      	cmp	r3, #32
 8007868:	dc4a      	bgt.n	8007900 <UART_SetConfig+0x9b4>
 800786a:	2b00      	cmp	r3, #0
 800786c:	f2c0 8086 	blt.w	800797c <UART_SetConfig+0xa30>
 8007870:	2b20      	cmp	r3, #32
 8007872:	f200 8083 	bhi.w	800797c <UART_SetConfig+0xa30>
 8007876:	a201      	add	r2, pc, #4	; (adr r2, 800787c <UART_SetConfig+0x930>)
 8007878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787c:	08007907 	.word	0x08007907
 8007880:	08007921 	.word	0x08007921
 8007884:	0800797d 	.word	0x0800797d
 8007888:	0800797d 	.word	0x0800797d
 800788c:	08007929 	.word	0x08007929
 8007890:	0800797d 	.word	0x0800797d
 8007894:	0800797d 	.word	0x0800797d
 8007898:	0800797d 	.word	0x0800797d
 800789c:	08007939 	.word	0x08007939
 80078a0:	0800797d 	.word	0x0800797d
 80078a4:	0800797d 	.word	0x0800797d
 80078a8:	0800797d 	.word	0x0800797d
 80078ac:	0800797d 	.word	0x0800797d
 80078b0:	0800797d 	.word	0x0800797d
 80078b4:	0800797d 	.word	0x0800797d
 80078b8:	0800797d 	.word	0x0800797d
 80078bc:	08007949 	.word	0x08007949
 80078c0:	0800797d 	.word	0x0800797d
 80078c4:	0800797d 	.word	0x0800797d
 80078c8:	0800797d 	.word	0x0800797d
 80078cc:	0800797d 	.word	0x0800797d
 80078d0:	0800797d 	.word	0x0800797d
 80078d4:	0800797d 	.word	0x0800797d
 80078d8:	0800797d 	.word	0x0800797d
 80078dc:	0800797d 	.word	0x0800797d
 80078e0:	0800797d 	.word	0x0800797d
 80078e4:	0800797d 	.word	0x0800797d
 80078e8:	0800797d 	.word	0x0800797d
 80078ec:	0800797d 	.word	0x0800797d
 80078f0:	0800797d 	.word	0x0800797d
 80078f4:	0800797d 	.word	0x0800797d
 80078f8:	0800797d 	.word	0x0800797d
 80078fc:	0800796f 	.word	0x0800796f
 8007900:	2b40      	cmp	r3, #64	; 0x40
 8007902:	d037      	beq.n	8007974 <UART_SetConfig+0xa28>
 8007904:	e03a      	b.n	800797c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007906:	f7fc ff7b 	bl	8004800 <HAL_RCC_GetPCLK1Freq>
 800790a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800790c:	e03c      	b.n	8007988 <UART_SetConfig+0xa3c>
 800790e:	bf00      	nop
 8007910:	003d0900 	.word	0x003d0900
 8007914:	080084f0 	.word	0x080084f0
 8007918:	58024400 	.word	0x58024400
 800791c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007920:	f7fc ff84 	bl	800482c <HAL_RCC_GetPCLK2Freq>
 8007924:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007926:	e02f      	b.n	8007988 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007928:	f107 0314 	add.w	r3, r7, #20
 800792c:	4618      	mov	r0, r3
 800792e:	f7fd fee9 	bl	8005704 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007936:	e027      	b.n	8007988 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007938:	f107 0308 	add.w	r3, r7, #8
 800793c:	4618      	mov	r0, r3
 800793e:	f7fe f835 	bl	80059ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007946:	e01f      	b.n	8007988 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007948:	4b2c      	ldr	r3, [pc, #176]	; (80079fc <UART_SetConfig+0xab0>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0320 	and.w	r3, r3, #32
 8007950:	2b00      	cmp	r3, #0
 8007952:	d009      	beq.n	8007968 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007954:	4b29      	ldr	r3, [pc, #164]	; (80079fc <UART_SetConfig+0xab0>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	08db      	lsrs	r3, r3, #3
 800795a:	f003 0303 	and.w	r3, r3, #3
 800795e:	4a28      	ldr	r2, [pc, #160]	; (8007a00 <UART_SetConfig+0xab4>)
 8007960:	fa22 f303 	lsr.w	r3, r2, r3
 8007964:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007966:	e00f      	b.n	8007988 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8007968:	4b25      	ldr	r3, [pc, #148]	; (8007a00 <UART_SetConfig+0xab4>)
 800796a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800796c:	e00c      	b.n	8007988 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800796e:	4b25      	ldr	r3, [pc, #148]	; (8007a04 <UART_SetConfig+0xab8>)
 8007970:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007972:	e009      	b.n	8007988 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007974:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007978:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800797a:	e005      	b.n	8007988 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800797c:	2300      	movs	r3, #0
 800797e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007986:	bf00      	nop
    }

    if (pclk != 0U)
 8007988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798a:	2b00      	cmp	r3, #0
 800798c:	d021      	beq.n	80079d2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007992:	4a1d      	ldr	r2, [pc, #116]	; (8007a08 <UART_SetConfig+0xabc>)
 8007994:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007998:	461a      	mov	r2, r3
 800799a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799c:	fbb3 f2f2 	udiv	r2, r3, r2
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	085b      	lsrs	r3, r3, #1
 80079a6:	441a      	add	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b6:	2b0f      	cmp	r3, #15
 80079b8:	d908      	bls.n	80079cc <UART_SetConfig+0xa80>
 80079ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079c0:	d204      	bcs.n	80079cc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079c8:	60da      	str	r2, [r3, #12]
 80079ca:	e002      	b.n	80079d2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80079ee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3738      	adds	r7, #56	; 0x38
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bdb0      	pop	{r4, r5, r7, pc}
 80079fa:	bf00      	nop
 80079fc:	58024400 	.word	0x58024400
 8007a00:	03d09000 	.word	0x03d09000
 8007a04:	003d0900 	.word	0x003d0900
 8007a08:	080084f0 	.word	0x080084f0

08007a0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a18:	f003 0301 	and.w	r3, r3, #1
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00a      	beq.n	8007a36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3a:	f003 0302 	and.w	r3, r3, #2
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00a      	beq.n	8007a58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	430a      	orrs	r2, r1
 8007a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5c:	f003 0304 	and.w	r3, r3, #4
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00a      	beq.n	8007a7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	430a      	orrs	r2, r1
 8007a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7e:	f003 0308 	and.w	r3, r3, #8
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00a      	beq.n	8007a9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	430a      	orrs	r2, r1
 8007a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa0:	f003 0310 	and.w	r3, r3, #16
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00a      	beq.n	8007abe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	430a      	orrs	r2, r1
 8007abc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac2:	f003 0320 	and.w	r3, r3, #32
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00a      	beq.n	8007ae0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	430a      	orrs	r2, r1
 8007ade:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d01a      	beq.n	8007b22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	430a      	orrs	r2, r1
 8007b00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b0a:	d10a      	bne.n	8007b22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00a      	beq.n	8007b44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	430a      	orrs	r2, r1
 8007b42:	605a      	str	r2, [r3, #4]
  }
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af02      	add	r7, sp, #8
 8007b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b60:	f7f9 fd74 	bl	800164c <HAL_GetTick>
 8007b64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0308 	and.w	r3, r3, #8
 8007b70:	2b08      	cmp	r3, #8
 8007b72:	d10e      	bne.n	8007b92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f82f 	bl	8007be6 <UART_WaitOnFlagUntilTimeout>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e025      	b.n	8007bde <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0304 	and.w	r3, r3, #4
 8007b9c:	2b04      	cmp	r3, #4
 8007b9e:	d10e      	bne.n	8007bbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ba0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f819 	bl	8007be6 <UART_WaitOnFlagUntilTimeout>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d001      	beq.n	8007bbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e00f      	b.n	8007bde <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2220      	movs	r2, #32
 8007bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2220      	movs	r2, #32
 8007bca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b084      	sub	sp, #16
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	60f8      	str	r0, [r7, #12]
 8007bee:	60b9      	str	r1, [r7, #8]
 8007bf0:	603b      	str	r3, [r7, #0]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bf6:	e062      	b.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bfe:	d05e      	beq.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c00:	f7f9 fd24 	bl	800164c <HAL_GetTick>
 8007c04:	4602      	mov	r2, r0
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	1ad3      	subs	r3, r2, r3
 8007c0a:	69ba      	ldr	r2, [r7, #24]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d302      	bcc.n	8007c16 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d11d      	bne.n	8007c52 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c24:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	689a      	ldr	r2, [r3, #8]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f022 0201 	bic.w	r2, r2, #1
 8007c34:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2220      	movs	r2, #32
 8007c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2220      	movs	r2, #32
 8007c42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e045      	b.n	8007cde <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0304 	and.w	r3, r3, #4
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d02e      	beq.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c6e:	d126      	bne.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c78:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c88:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	689a      	ldr	r2, [r3, #8]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f022 0201 	bic.w	r2, r2, #1
 8007c98:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2220      	movs	r2, #32
 8007c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2220      	movs	r2, #32
 8007ca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2220      	movs	r2, #32
 8007cae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e00f      	b.n	8007cde <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69da      	ldr	r2, [r3, #28]
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	bf0c      	ite	eq
 8007cce:	2301      	moveq	r3, #1
 8007cd0:	2300      	movne	r3, #0
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	79fb      	ldrb	r3, [r7, #7]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d08d      	beq.n	8007bf8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b085      	sub	sp, #20
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d101      	bne.n	8007cfc <HAL_UARTEx_DisableFifoMode+0x16>
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	e027      	b.n	8007d4c <HAL_UARTEx_DisableFifoMode+0x66>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2224      	movs	r2, #36	; 0x24
 8007d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f022 0201 	bic.w	r2, r2, #1
 8007d22:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007d2a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d101      	bne.n	8007d70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	e02d      	b.n	8007dcc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2224      	movs	r2, #36	; 0x24
 8007d7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f022 0201 	bic.w	r2, r2, #1
 8007d96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	430a      	orrs	r2, r1
 8007daa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 f84f 	bl	8007e50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2220      	movs	r2, #32
 8007dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d101      	bne.n	8007dec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007de8:	2302      	movs	r3, #2
 8007dea:	e02d      	b.n	8007e48 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2224      	movs	r2, #36	; 0x24
 8007df8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f022 0201 	bic.w	r2, r2, #1
 8007e12:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	430a      	orrs	r2, r1
 8007e26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f811 	bl	8007e50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2220      	movs	r2, #32
 8007e3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d108      	bne.n	8007e72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e70:	e031      	b.n	8007ed6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e72:	2310      	movs	r3, #16
 8007e74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e76:	2310      	movs	r3, #16
 8007e78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	0e5b      	lsrs	r3, r3, #25
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	f003 0307 	and.w	r3, r3, #7
 8007e88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	0f5b      	lsrs	r3, r3, #29
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	f003 0307 	and.w	r3, r3, #7
 8007e98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e9a:	7bbb      	ldrb	r3, [r7, #14]
 8007e9c:	7b3a      	ldrb	r2, [r7, #12]
 8007e9e:	4911      	ldr	r1, [pc, #68]	; (8007ee4 <UARTEx_SetNbDataToProcess+0x94>)
 8007ea0:	5c8a      	ldrb	r2, [r1, r2]
 8007ea2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ea6:	7b3a      	ldrb	r2, [r7, #12]
 8007ea8:	490f      	ldr	r1, [pc, #60]	; (8007ee8 <UARTEx_SetNbDataToProcess+0x98>)
 8007eaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007eac:	fb93 f3f2 	sdiv	r3, r3, r2
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007eb8:	7bfb      	ldrb	r3, [r7, #15]
 8007eba:	7b7a      	ldrb	r2, [r7, #13]
 8007ebc:	4909      	ldr	r1, [pc, #36]	; (8007ee4 <UARTEx_SetNbDataToProcess+0x94>)
 8007ebe:	5c8a      	ldrb	r2, [r1, r2]
 8007ec0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ec4:	7b7a      	ldrb	r2, [r7, #13]
 8007ec6:	4908      	ldr	r1, [pc, #32]	; (8007ee8 <UARTEx_SetNbDataToProcess+0x98>)
 8007ec8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007eca:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007ed6:	bf00      	nop
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	08008508 	.word	0x08008508
 8007ee8:	08008510 	.word	0x08008510

08007eec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007eec:	b084      	sub	sp, #16
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b084      	sub	sp, #16
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	f107 001c 	add.w	r0, r7, #28
 8007efa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d120      	bne.n	8007f46 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68da      	ldr	r2, [r3, #12]
 8007f14:	4b2a      	ldr	r3, [pc, #168]	; (8007fc0 <USB_CoreInit+0xd4>)
 8007f16:	4013      	ands	r3, r2
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d105      	bne.n	8007f3a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 fa60 	bl	8008400 <USB_CoreReset>
 8007f40:	4603      	mov	r3, r0
 8007f42:	73fb      	strb	r3, [r7, #15]
 8007f44:	e01a      	b.n	8007f7c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fa54 	bl	8008400 <USB_CoreReset>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d106      	bne.n	8007f70 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	639a      	str	r2, [r3, #56]	; 0x38
 8007f6e:	e005      	b.n	8007f7c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d116      	bne.n	8007fb0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007f90:	4b0c      	ldr	r3, [pc, #48]	; (8007fc4 <USB_CoreInit+0xd8>)
 8007f92:	4313      	orrs	r3, r2
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	f043 0206 	orr.w	r2, r3, #6
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	f043 0220 	orr.w	r2, r3, #32
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007fbc:	b004      	add	sp, #16
 8007fbe:	4770      	bx	lr
 8007fc0:	ffbdffbf 	.word	0xffbdffbf
 8007fc4:	03ee0000 	.word	0x03ee0000

08007fc8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	f023 0201 	bic.w	r2, r3, #1
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	370c      	adds	r7, #12
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b082      	sub	sp, #8
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008002:	78fb      	ldrb	r3, [r7, #3]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d106      	bne.n	8008016 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	60da      	str	r2, [r3, #12]
 8008014:	e00b      	b.n	800802e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008016:	78fb      	ldrb	r3, [r7, #3]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d106      	bne.n	800802a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	60da      	str	r2, [r3, #12]
 8008028:	e001      	b.n	800802e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e003      	b.n	8008036 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800802e:	2032      	movs	r0, #50	; 0x32
 8008030:	f7f9 fb18 	bl	8001664 <HAL_Delay>

  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
	...

08008040 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008040:	b084      	sub	sp, #16
 8008042:	b580      	push	{r7, lr}
 8008044:	b086      	sub	sp, #24
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800804e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800805a:	2300      	movs	r3, #0
 800805c:	613b      	str	r3, [r7, #16]
 800805e:	e009      	b.n	8008074 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	3340      	adds	r3, #64	; 0x40
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4413      	add	r3, r2
 800806a:	2200      	movs	r2, #0
 800806c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	3301      	adds	r3, #1
 8008072:	613b      	str	r3, [r7, #16]
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	2b0e      	cmp	r3, #14
 8008078:	d9f2      	bls.n	8008060 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800807a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800807c:	2b00      	cmp	r3, #0
 800807e:	d11c      	bne.n	80080ba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800808e:	f043 0302 	orr.w	r3, r3, #2
 8008092:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008098:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	601a      	str	r2, [r3, #0]
 80080b8:	e005      	b.n	80080c6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080cc:	461a      	mov	r2, r3
 80080ce:	2300      	movs	r3, #0
 80080d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080d8:	4619      	mov	r1, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080e0:	461a      	mov	r2, r3
 80080e2:	680b      	ldr	r3, [r1, #0]
 80080e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80080e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d10c      	bne.n	8008106 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80080ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d104      	bne.n	80080fc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80080f2:	2100      	movs	r1, #0
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f949 	bl	800838c <USB_SetDevSpeed>
 80080fa:	e008      	b.n	800810e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80080fc:	2101      	movs	r1, #1
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f944 	bl	800838c <USB_SetDevSpeed>
 8008104:	e003      	b.n	800810e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008106:	2103      	movs	r1, #3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f93f 	bl	800838c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800810e:	2110      	movs	r1, #16
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f8f3 	bl	80082fc <USB_FlushTxFifo>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d001      	beq.n	8008120 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f911 	bl	8008348 <USB_FlushRxFifo>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d001      	beq.n	8008130 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008136:	461a      	mov	r2, r3
 8008138:	2300      	movs	r3, #0
 800813a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008142:	461a      	mov	r2, r3
 8008144:	2300      	movs	r3, #0
 8008146:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800814e:	461a      	mov	r2, r3
 8008150:	2300      	movs	r3, #0
 8008152:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008154:	2300      	movs	r3, #0
 8008156:	613b      	str	r3, [r7, #16]
 8008158:	e043      	b.n	80081e2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	015a      	lsls	r2, r3, #5
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	4413      	add	r3, r2
 8008162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800816c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008170:	d118      	bne.n	80081a4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d10a      	bne.n	800818e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	015a      	lsls	r2, r3, #5
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	4413      	add	r3, r2
 8008180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008184:	461a      	mov	r2, r3
 8008186:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800818a:	6013      	str	r3, [r2, #0]
 800818c:	e013      	b.n	80081b6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	015a      	lsls	r2, r3, #5
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	4413      	add	r3, r2
 8008196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800819a:	461a      	mov	r2, r3
 800819c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80081a0:	6013      	str	r3, [r2, #0]
 80081a2:	e008      	b.n	80081b6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	015a      	lsls	r2, r3, #5
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	4413      	add	r3, r2
 80081ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b0:	461a      	mov	r2, r3
 80081b2:	2300      	movs	r3, #0
 80081b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	015a      	lsls	r2, r3, #5
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	4413      	add	r3, r2
 80081be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c2:	461a      	mov	r2, r3
 80081c4:	2300      	movs	r3, #0
 80081c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d4:	461a      	mov	r2, r3
 80081d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80081da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	3301      	adds	r3, #1
 80081e0:	613b      	str	r3, [r7, #16]
 80081e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e4:	693a      	ldr	r2, [r7, #16]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d3b7      	bcc.n	800815a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081ea:	2300      	movs	r3, #0
 80081ec:	613b      	str	r3, [r7, #16]
 80081ee:	e043      	b.n	8008278 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	015a      	lsls	r2, r3, #5
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008202:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008206:	d118      	bne.n	800823a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d10a      	bne.n	8008224 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	015a      	lsls	r2, r3, #5
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	4413      	add	r3, r2
 8008216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800821a:	461a      	mov	r2, r3
 800821c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008220:	6013      	str	r3, [r2, #0]
 8008222:	e013      	b.n	800824c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	015a      	lsls	r2, r3, #5
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	4413      	add	r3, r2
 800822c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008230:	461a      	mov	r2, r3
 8008232:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008236:	6013      	str	r3, [r2, #0]
 8008238:	e008      	b.n	800824c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	015a      	lsls	r2, r3, #5
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4413      	add	r3, r2
 8008242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008246:	461a      	mov	r2, r3
 8008248:	2300      	movs	r3, #0
 800824a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	015a      	lsls	r2, r3, #5
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	4413      	add	r3, r2
 8008254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008258:	461a      	mov	r2, r3
 800825a:	2300      	movs	r3, #0
 800825c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	015a      	lsls	r2, r3, #5
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	4413      	add	r3, r2
 8008266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800826a:	461a      	mov	r2, r3
 800826c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008270:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	3301      	adds	r3, #1
 8008276:	613b      	str	r3, [r7, #16]
 8008278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827a:	693a      	ldr	r2, [r7, #16]
 800827c:	429a      	cmp	r2, r3
 800827e:	d3b7      	bcc.n	80081f0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800828e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008292:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80082a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d105      	bne.n	80082b4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	f043 0210 	orr.w	r2, r3, #16
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	699a      	ldr	r2, [r3, #24]
 80082b8:	4b0e      	ldr	r3, [pc, #56]	; (80082f4 <USB_DevInit+0x2b4>)
 80082ba:	4313      	orrs	r3, r2
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80082c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d005      	beq.n	80082d2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	699b      	ldr	r3, [r3, #24]
 80082ca:	f043 0208 	orr.w	r2, r3, #8
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80082d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d105      	bne.n	80082e4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	699a      	ldr	r2, [r3, #24]
 80082dc:	4b06      	ldr	r3, [pc, #24]	; (80082f8 <USB_DevInit+0x2b8>)
 80082de:	4313      	orrs	r3, r2
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80082e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3718      	adds	r7, #24
 80082ea:	46bd      	mov	sp, r7
 80082ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082f0:	b004      	add	sp, #16
 80082f2:	4770      	bx	lr
 80082f4:	803c3800 	.word	0x803c3800
 80082f8:	40000004 	.word	0x40000004

080082fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008306:	2300      	movs	r3, #0
 8008308:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	019b      	lsls	r3, r3, #6
 800830e:	f043 0220 	orr.w	r2, r3, #32
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	3301      	adds	r3, #1
 800831a:	60fb      	str	r3, [r7, #12]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	4a09      	ldr	r2, [pc, #36]	; (8008344 <USB_FlushTxFifo+0x48>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d901      	bls.n	8008328 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008324:	2303      	movs	r3, #3
 8008326:	e006      	b.n	8008336 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	f003 0320 	and.w	r3, r3, #32
 8008330:	2b20      	cmp	r3, #32
 8008332:	d0f0      	beq.n	8008316 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3714      	adds	r7, #20
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	00030d40 	.word	0x00030d40

08008348 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008350:	2300      	movs	r3, #0
 8008352:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2210      	movs	r2, #16
 8008358:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	3301      	adds	r3, #1
 800835e:	60fb      	str	r3, [r7, #12]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	4a09      	ldr	r2, [pc, #36]	; (8008388 <USB_FlushRxFifo+0x40>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d901      	bls.n	800836c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008368:	2303      	movs	r3, #3
 800836a:	e006      	b.n	800837a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	f003 0310 	and.w	r3, r3, #16
 8008374:	2b10      	cmp	r3, #16
 8008376:	d0f0      	beq.n	800835a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3714      	adds	r7, #20
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	00030d40 	.word	0x00030d40

0800838c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	460b      	mov	r3, r1
 8008396:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	78fb      	ldrb	r3, [r7, #3]
 80083a6:	68f9      	ldr	r1, [r7, #12]
 80083a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083ac:	4313      	orrs	r3, r2
 80083ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3714      	adds	r7, #20
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80083be:	b480      	push	{r7}
 80083c0:	b085      	sub	sp, #20
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80083d8:	f023 0303 	bic.w	r3, r3, #3
 80083dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083ec:	f043 0302 	orr.w	r3, r3, #2
 80083f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3714      	adds	r7, #20
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008400:	b480      	push	{r7}
 8008402:	b085      	sub	sp, #20
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008408:	2300      	movs	r3, #0
 800840a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	3301      	adds	r3, #1
 8008410:	60fb      	str	r3, [r7, #12]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	4a13      	ldr	r2, [pc, #76]	; (8008464 <USB_CoreReset+0x64>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d901      	bls.n	800841e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800841a:	2303      	movs	r3, #3
 800841c:	e01b      	b.n	8008456 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	2b00      	cmp	r3, #0
 8008424:	daf2      	bge.n	800840c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008426:	2300      	movs	r3, #0
 8008428:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	f043 0201 	orr.w	r2, r3, #1
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	3301      	adds	r3, #1
 800843a:	60fb      	str	r3, [r7, #12]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	4a09      	ldr	r2, [pc, #36]	; (8008464 <USB_CoreReset+0x64>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d901      	bls.n	8008448 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e006      	b.n	8008456 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	f003 0301 	and.w	r3, r3, #1
 8008450:	2b01      	cmp	r3, #1
 8008452:	d0f0      	beq.n	8008436 <USB_CoreReset+0x36>

  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	00030d40 	.word	0x00030d40

08008468 <__libc_init_array>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	4d0d      	ldr	r5, [pc, #52]	; (80084a0 <__libc_init_array+0x38>)
 800846c:	4c0d      	ldr	r4, [pc, #52]	; (80084a4 <__libc_init_array+0x3c>)
 800846e:	1b64      	subs	r4, r4, r5
 8008470:	10a4      	asrs	r4, r4, #2
 8008472:	2600      	movs	r6, #0
 8008474:	42a6      	cmp	r6, r4
 8008476:	d109      	bne.n	800848c <__libc_init_array+0x24>
 8008478:	4d0b      	ldr	r5, [pc, #44]	; (80084a8 <__libc_init_array+0x40>)
 800847a:	4c0c      	ldr	r4, [pc, #48]	; (80084ac <__libc_init_array+0x44>)
 800847c:	f000 f820 	bl	80084c0 <_init>
 8008480:	1b64      	subs	r4, r4, r5
 8008482:	10a4      	asrs	r4, r4, #2
 8008484:	2600      	movs	r6, #0
 8008486:	42a6      	cmp	r6, r4
 8008488:	d105      	bne.n	8008496 <__libc_init_array+0x2e>
 800848a:	bd70      	pop	{r4, r5, r6, pc}
 800848c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008490:	4798      	blx	r3
 8008492:	3601      	adds	r6, #1
 8008494:	e7ee      	b.n	8008474 <__libc_init_array+0xc>
 8008496:	f855 3b04 	ldr.w	r3, [r5], #4
 800849a:	4798      	blx	r3
 800849c:	3601      	adds	r6, #1
 800849e:	e7f2      	b.n	8008486 <__libc_init_array+0x1e>
 80084a0:	08008520 	.word	0x08008520
 80084a4:	08008520 	.word	0x08008520
 80084a8:	08008520 	.word	0x08008520
 80084ac:	08008524 	.word	0x08008524

080084b0 <memset>:
 80084b0:	4402      	add	r2, r0
 80084b2:	4603      	mov	r3, r0
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d100      	bne.n	80084ba <memset+0xa>
 80084b8:	4770      	bx	lr
 80084ba:	f803 1b01 	strb.w	r1, [r3], #1
 80084be:	e7f9      	b.n	80084b4 <memset+0x4>

080084c0 <_init>:
 80084c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c2:	bf00      	nop
 80084c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084c6:	bc08      	pop	{r3}
 80084c8:	469e      	mov	lr, r3
 80084ca:	4770      	bx	lr

080084cc <_fini>:
 80084cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ce:	bf00      	nop
 80084d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d2:	bc08      	pop	{r3}
 80084d4:	469e      	mov	lr, r3
 80084d6:	4770      	bx	lr
